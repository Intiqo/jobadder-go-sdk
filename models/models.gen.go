// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package models

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Jobadder_identityScopes = "jobadder_identity.Scopes"
)

// Defines values for CandidateAttachmentType.
const (
	CandidateAttachmentTypeCheck           CandidateAttachmentType = "Check"
	CandidateAttachmentTypeCoverLetter     CandidateAttachmentType = "CoverLetter"
	CandidateAttachmentTypeFormattedResume CandidateAttachmentType = "FormattedResume"
	CandidateAttachmentTypeLicense         CandidateAttachmentType = "License"
	CandidateAttachmentTypeOther           CandidateAttachmentType = "Other"
	CandidateAttachmentTypeReference       CandidateAttachmentType = "Reference"
	CandidateAttachmentTypeResume          CandidateAttachmentType = "Resume"
	CandidateAttachmentTypeScreening       CandidateAttachmentType = "Screening"
)

// Defines values for CandidateSeekingStatus.
const (
	Maybe CandidateSeekingStatus = "Maybe"
	No    CandidateSeekingStatus = "No"
	Yes   CandidateSeekingStatus = "Yes"
)

// Defines values for CandidateVideoType.
const (
	CandidateVideoTypeCoverLetter CandidateVideoType = "CoverLetter"
	CandidateVideoTypeOther       CandidateVideoType = "Other"
	CandidateVideoTypeProfile     CandidateVideoType = "Profile"
)

// Defines values for CompanyAttachmentType.
const (
	CompanyAttachmentTypeOther CompanyAttachmentType = "Other"
	CompanyAttachmentTypeTerms CompanyAttachmentType = "Terms"
)

// Defines values for CompanyWorkflowType.
const (
	Requisition CompanyWorkflowType = "Requisition"
)

// Defines values for ContactAttachmentType.
const (
	ContactAttachmentTypeOther ContactAttachmentType = "Other"
	ContactAttachmentTypeTerms ContactAttachmentType = "Terms"
)

// Defines values for CustomFieldType.
const (
	CustomFieldTypeDate   CustomFieldType = "Date"
	CustomFieldTypeList   CustomFieldType = "List"
	CustomFieldTypeLookup CustomFieldType = "Lookup"
	CustomFieldTypeText   CustomFieldType = "Text"
	CustomFieldTypeUrl    CustomFieldType = "Url"
)

// Defines values for DayOfWeek.
const (
	Friday    DayOfWeek = "Friday"
	Monday    DayOfWeek = "Monday"
	Saturday  DayOfWeek = "Saturday"
	Sunday    DayOfWeek = "Sunday"
	Thursday  DayOfWeek = "Thursday"
	Tuesday   DayOfWeek = "Tuesday"
	Wednesday DayOfWeek = "Wednesday"
)

// Defines values for DurationUnit.
const (
	DurationUnitDay   DurationUnit = "Day"
	DurationUnitHour  DurationUnit = "Hour"
	DurationUnitMonth DurationUnit = "Month"
	DurationUnitWeek  DurationUnit = "Week"
)

// Defines values for EmailAddressMatchType.
const (
	Email      EmailAddressMatchType = "Email"
	OtherEmail EmailAddressMatchType = "OtherEmail"
)

// Defines values for ErrorCode.
const (
	AlreadyExists ErrorCode = "AlreadyExists"
	Invalid       ErrorCode = "Invalid"
	Missing       ErrorCode = "Missing"
	MissingField  ErrorCode = "MissingField"
)

// Defines values for EventName.
const (
	CandidatePartnerAction       EventName = "candidate_partner_action"
	CandidateStatusChanged       EventName = "candidate_status_changed"
	CandidateUpdated             EventName = "candidate_updated"
	CompanyPartnerAction         EventName = "company_partner_action"
	CompanyStatusChanged         EventName = "company_status_changed"
	ContactPartnerAction         EventName = "contact_partner_action"
	ContactStatusChanged         EventName = "contact_status_changed"
	FolderCandidateAdded         EventName = "folder_candidate_added"
	FolderCandidateRemoved       EventName = "folder_candidate_removed"
	FolderCompanyAdded           EventName = "folder_company_added"
	FolderCompanyRemoved         EventName = "folder_company_removed"
	FolderContactAdded           EventName = "folder_contact_added"
	FolderContactRemoved         EventName = "folder_contact_removed"
	FolderJobAdded               EventName = "folder_job_added"
	FolderJobRemoved             EventName = "folder_job_removed"
	FolderJobapplicationAdded    EventName = "folder_jobapplication_added"
	FolderJobapplicationRemoved  EventName = "folder_jobapplication_removed"
	FolderPlacementAdded         EventName = "folder_placement_added"
	FolderPlacementRemoved       EventName = "folder_placement_removed"
	FolderUpdated                EventName = "folder_updated"
	InterviewEvaluationSubmitted EventName = "interview_evaluation_submitted"
	InterviewScheduled           EventName = "interview_scheduled"
	JobInvoiceSent               EventName = "job_invoice_sent"
	JobPartnerAction             EventName = "job_partner_action"
	JobStatusChanged             EventName = "job_status_changed"
	JobadExpired                 EventName = "jobad_expired"
	JobadPartnerAction           EventName = "jobad_partner_action"
	JobadPosted                  EventName = "jobad_posted"
	JobapplicationPartnerAction  EventName = "jobapplication_partner_action"
	JobapplicationStatusChanged  EventName = "jobapplication_status_changed"
	PlacementApproved            EventName = "placement_approved"
	PlacementPartnerAction       EventName = "placement_partner_action"
	PlacementStatusChanged       EventName = "placement_status_changed"
	SmsSent                      EventName = "sms_sent"
	UserSuspended                EventName = "user_suspended"
)

// Defines values for FindCategoriesEmbed.
const (
	Skills        FindCategoriesEmbed = "Skills"
	SubCategories FindCategoriesEmbed = "SubCategories"
)

// Defines values for FindCompanyWorkflowsInclude.
const (
	Archived FindCompanyWorkflowsInclude = "Archived"
)

// Defines values for FindLocationsEmbed.
const (
	Areas FindLocationsEmbed = "Areas"
)

// Defines values for FindPlacementByExport.
const (
	Onboarding FindPlacementByExport = "Onboarding"
	Payroll    FindPlacementByExport = "Payroll"
	Timesheets FindPlacementByExport = "Timesheets"
)

// Defines values for FindUserTasksInclude.
const (
	FindUserTasksIncludeComplete FindUserTasksInclude = "Complete"
	FindUserTasksIncludeOld      FindUserTasksInclude = "Old"
)

// Defines values for FindUsersInclude.
const (
	FindUsersIncludeDeleted  FindUsersInclude = "Deleted"
	FindUsersIncludeInactive FindUsersInclude = "Inactive"
)

// Defines values for FolderOwnerStatus.
const (
	FolderOwnerStatusActive   FolderOwnerStatus = "Active"
	FolderOwnerStatusInactive FolderOwnerStatus = "Inactive"
)

// Defines values for InterviewType.
const (
	External InterviewType = "External"
	Internal InterviewType = "Internal"
)

// Defines values for JobAdScreeningAnswerType.
const (
	JobAdScreeningAnswerTypeList JobAdScreeningAnswerType = "List"
	JobAdScreeningAnswerTypeText JobAdScreeningAnswerType = "Text"
)

// Defines values for JobApplicationReviewStage.
const (
	JobApplicationReviewStageAccepted  JobApplicationReviewStage = "Accepted"
	JobApplicationReviewStageRejected  JobApplicationReviewStage = "Rejected"
	JobApplicationReviewStageSubmitted JobApplicationReviewStage = "Submitted"
	JobApplicationReviewStageViewed    JobApplicationReviewStage = "Viewed"
)

// Defines values for JobBoardPortalFieldType.
const (
	List JobBoardPortalFieldType = "List"
	Text JobBoardPortalFieldType = "Text"
)

// Defines values for JobOrderAttachmentType.
const (
	JobOrderAttachmentTypeJobDescription JobOrderAttachmentType = "JobDescription"
	JobOrderAttachmentTypeOther          JobOrderAttachmentType = "Other"
)

// Defines values for JobOrderFeeRateType.
const (
	JobOrderFeeRateTypeFixed   JobOrderFeeRateType = "Fixed"
	JobOrderFeeRateTypeMargin  JobOrderFeeRateType = "Margin"
	JobOrderFeeRateTypePercent JobOrderFeeRateType = "Percent"
)

// Defines values for OperationType.
const (
	Add    OperationType = "Add"
	Remove OperationType = "Remove"
)

// Defines values for PartnerActionResultUrlType.
const (
	PartnerActionResultUrlTypePage  PartnerActionResultUrlType = "Page"
	PartnerActionResultUrlTypePopup PartnerActionResultUrlType = "Popup"
)

// Defines values for PartnerActionStage.
const (
	PartnerActionStageCancelled  PartnerActionStage = "Cancelled"
	PartnerActionStageCompleted  PartnerActionStage = "Completed"
	PartnerActionStageInProgress PartnerActionStage = "InProgress"
	PartnerActionStageRejected   PartnerActionStage = "Rejected"
	PartnerActionStageSubmitted  PartnerActionStage = "Submitted"
)

// Defines values for PartnerActionType.
const (
	PartnerActionTypeCandidate      PartnerActionType = "Candidate"
	PartnerActionTypeCompany        PartnerActionType = "Company"
	PartnerActionTypeContact        PartnerActionType = "Contact"
	PartnerActionTypeJob            PartnerActionType = "Job"
	PartnerActionTypeJobAd          PartnerActionType = "JobAd"
	PartnerActionTypeJobApplication PartnerActionType = "JobApplication"
	PartnerActionTypePlacement      PartnerActionType = "Placement"
)

// Defines values for PartnerActionUrlType.
const (
	PartnerActionUrlTypePage       PartnerActionUrlType = "Page"
	PartnerActionUrlTypePopup      PartnerActionUrlType = "Popup"
	PartnerActionUrlTypeSideDrawer PartnerActionUrlType = "SideDrawer"
)

// Defines values for PhoneNumberMatchQuality.
const (
	Exact      PhoneNumberMatchQuality = "Exact"
	National   PhoneNumberMatchQuality = "National"
	Subscriber PhoneNumberMatchQuality = "Subscriber"
)

// Defines values for PhoneNumberMatchType.
const (
	Mobile PhoneNumberMatchType = "Mobile"
	Phone  PhoneNumberMatchType = "Phone"
)

// Defines values for PlacementAttachmentType.
const (
	PlacementAttachmentTypeCheck           PlacementAttachmentType = "Check"
	PlacementAttachmentTypeCompanyTerms    PlacementAttachmentType = "CompanyTerms"
	PlacementAttachmentTypeCoverLetter     PlacementAttachmentType = "CoverLetter"
	PlacementAttachmentTypeFormattedResume PlacementAttachmentType = "FormattedResume"
	PlacementAttachmentTypeLicense         PlacementAttachmentType = "License"
	PlacementAttachmentTypeOther           PlacementAttachmentType = "Other"
	PlacementAttachmentTypeReference       PlacementAttachmentType = "Reference"
	PlacementAttachmentTypeResume          PlacementAttachmentType = "Resume"
	PlacementAttachmentTypeScreening       PlacementAttachmentType = "Screening"
	PlacementAttachmentTypeStandardTerms   PlacementAttachmentType = "StandardTerms"
	PlacementAttachmentTypeTerms           PlacementAttachmentType = "Terms"
)

// Defines values for PlacementContractRatePer.
const (
	PlacementContractRatePerDay   PlacementContractRatePer = "Day"
	PlacementContractRatePerHour  PlacementContractRatePer = "Hour"
	PlacementContractRatePerMonth PlacementContractRatePer = "Month"
	PlacementContractRatePerWeek  PlacementContractRatePer = "Week"
)

// Defines values for PlacementTimesheetType.
const (
	Days  PlacementTimesheetType = "Days"
	Hours PlacementTimesheetType = "Hours"
	Time  PlacementTimesheetType = "Time"
)

// Defines values for PlacementType.
const (
	Contract  PlacementType = "Contract"
	Credit    PlacementType = "Credit"
	Permanent PlacementType = "Permanent"
	Temporary PlacementType = "Temporary"
)

// Defines values for RatePortion.
const (
	RatePortionFixed   RatePortion = "Fixed"
	RatePortionPercent RatePortion = "Percent"
)

// Defines values for RecipientEntityType.
const (
	RecipientEntityTypeCandidate RecipientEntityType = "Candidate"
	RecipientEntityTypeContact   RecipientEntityType = "Contact"
)

// Defines values for RelativeStartUnit.
const (
	RelativeStartUnitMonth RelativeStartUnit = "Month"
	RelativeStartUnitWeek  RelativeStartUnit = "Week"
)

// Defines values for RequisitionAttachmentType.
const (
	RequisitionAttachmentTypeJobDescription RequisitionAttachmentType = "JobDescription"
	RequisitionAttachmentTypeOther          RequisitionAttachmentType = "Other"
)

// Defines values for RequisitionStatus.
const (
	Approved  RequisitionStatus = "Approved"
	Closed    RequisitionStatus = "Closed"
	Draft     RequisitionStatus = "Draft"
	Rejected  RequisitionStatus = "Rejected"
	Submitted RequisitionStatus = "Submitted"
)

// Defines values for SalaryRatePer.
const (
	SalaryRatePerDay   SalaryRatePer = "Day"
	SalaryRatePerHour  SalaryRatePer = "Hour"
	SalaryRatePerMonth SalaryRatePer = "Month"
	SalaryRatePerWeek  SalaryRatePer = "Week"
	SalaryRatePerYear  SalaryRatePer = "Year"
)

// Defines values for SimpleWorkflow.
const (
	SimpleWorkflowComplete   SimpleWorkflow = "Complete"
	SimpleWorkflowInProgress SimpleWorkflow = "InProgress"
	SimpleWorkflowStarted    SimpleWorkflow = "Started"
)

// Defines values for SubmitCandidateAttachmentType.
const (
	SubmitCandidateAttachmentTypeCheck           SubmitCandidateAttachmentType = "Check"
	SubmitCandidateAttachmentTypeCoverLetter     SubmitCandidateAttachmentType = "CoverLetter"
	SubmitCandidateAttachmentTypeFormattedResume SubmitCandidateAttachmentType = "FormattedResume"
	SubmitCandidateAttachmentTypeLicense         SubmitCandidateAttachmentType = "License"
	SubmitCandidateAttachmentTypeOther           SubmitCandidateAttachmentType = "Other"
	SubmitCandidateAttachmentTypeReference       SubmitCandidateAttachmentType = "Reference"
	SubmitCandidateAttachmentTypeResume          SubmitCandidateAttachmentType = "Resume"
	SubmitCandidateAttachmentTypeScreening       SubmitCandidateAttachmentType = "Screening"
)

// Defines values for SubmitPlacementContractRatePer.
const (
	Day  SubmitPlacementContractRatePer = "Day"
	Hour SubmitPlacementContractRatePer = "Hour"
)

// Defines values for SubmitWebhookStatus.
const (
	SubmitWebhookStatusDisabled  SubmitWebhookStatus = "Disabled"
	SubmitWebhookStatusEnabled   SubmitWebhookStatus = "Enabled"
	SubmitWebhookStatusSuspended SubmitWebhookStatus = "Suspended"
)

// Defines values for WebhookStatus.
const (
	WebhookStatusDisabled  WebhookStatus = "Disabled"
	WebhookStatusEnabled   WebhookStatus = "Enabled"
	WebhookStatusFailed    WebhookStatus = "Failed"
	WebhookStatusSuspended WebhookStatus = "Suspended"
)

// ActivityAnswerListModel defines model for ActivityAnswerListModel.
type ActivityAnswerListModel struct {
	DateRangeValueAnswers *[]ActivityDateRangeAnswerModel `json:"dateRangeValueAnswers"`
	ListValueAnswers      *[]ActivityListValueAnswerModel `json:"listValueAnswers"`
	RatingValueAnswers    *[]ActivityRatingAnswerModel    `json:"ratingValueAnswers"`
	TextAnswers           *[]ActivityTextAnswerModel      `json:"textAnswers"`
}

// ActivityDateRangeAnswerModel defines model for ActivityDateRangeAnswerModel.
type ActivityDateRangeAnswerModel struct {
	EndDate    *time.Time `json:"endDate,omitempty"`
	QuestionId *int32     `json:"questionId,omitempty"`
	StartDate  *time.Time `json:"startDate,omitempty"`
}

// ActivityDateValueDetailModel defines model for ActivityDateValueDetailModel.
type ActivityDateValueDetailModel struct {
	EndDate   *time.Time `json:"endDate"`
	Question  *string    `json:"question"`
	StartDate *time.Time `json:"startDate,omitempty"`
}

// ActivityDetailListModel defines model for ActivityDetailListModel.
type ActivityDetailListModel struct {
	DateValueAnswers   *[]ActivityDateValueDetailModel   `json:"dateValueAnswers"`
	ListValueAnswers   *[]ActivityListValueDetailModel   `json:"listValueAnswers"`
	RatingValueAnswers *[]ActivityRatingValueDetailModel `json:"ratingValueAnswers"`
	TextAnswers        *[]ActivitySingleValueDetailModel `json:"textAnswers"`
}

// ActivityListValueAnswerModel defines model for ActivityListValueAnswerModel.
type ActivityListValueAnswerModel struct {
	QuestionId *int32    `json:"questionId,omitempty"`
	Values     *[]string `json:"values"`
}

// ActivityListValueDetailModel defines model for ActivityListValueDetailModel.
type ActivityListValueDetailModel struct {
	Question *string   `json:"question"`
	Values   *[]string `json:"values"`
}

// ActivityQuestionModel defines model for ActivityQuestionModel.
type ActivityQuestionModel struct {
	ConditionalAnswer    *string                  `json:"conditionalAnswer"`
	ConditionalQuestions *[]ActivityQuestionModel `json:"conditionalQuestions"`
	Mandatory            *bool                    `json:"mandatory,omitempty"`
	MaximumRating        *int32                   `json:"maximumRating"`
	MinimumRating        *int32                   `json:"minimumRating"`
	PossibleValues       *[]string                `json:"possibleValues"`
	QuestionAnswerType   *string                  `json:"questionAnswerType"`
	QuestionId           *int32                   `json:"questionId,omitempty"`
	Text                 *string                  `json:"text"`
}

// ActivityRatingAnswerModel defines model for ActivityRatingAnswerModel.
type ActivityRatingAnswerModel struct {
	QuestionId *int32 `json:"questionId,omitempty"`
	Rating     *int32 `json:"rating,omitempty"`
}

// ActivityRatingValueDetailModel defines model for ActivityRatingValueDetailModel.
type ActivityRatingValueDetailModel struct {
	Percentage *float64 `json:"percentage,omitempty"`
	Question   *string  `json:"question"`
}

// ActivitySingleValueDetailModel defines model for ActivitySingleValueDetailModel.
type ActivitySingleValueDetailModel struct {
	Answer   *string `json:"answer"`
	Question *string `json:"question"`
}

// ActivityTextAnswerModel defines model for ActivityTextAnswerModel.
type ActivityTextAnswerModel struct {
	QuestionId *int32  `json:"questionId,omitempty"`
	Text       *string `json:"text"`
}

// AddCandidateActivityCommand defines model for AddCandidateActivityCommand.
type AddCandidateActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddCandidateCommand defines model for AddCandidateCommand.
type AddCandidateCommand struct {
	Address *SubmitAddressModel `json:"address,omitempty"`

	// Availability The date the candidate is available to start. Specify ONE OF immediate, relative or date.
	Availability     *SubmitCandidateAvailabilityModel `json:"availability,omitempty"`
	Custom           *[]SubmitCustomFieldValueModel    `json:"custom"`
	DateOfBirth      *openapi_types.Date               `json:"dateOfBirth"`
	Education        *[]SubmitCandidateEducationModel  `json:"education"`
	Email            *string                           `json:"email"`
	EmergencyContact *string                           `json:"emergencyContact"`
	EmergencyPhone   *string                           `json:"emergencyPhone"`
	Employment       *SubmitEmploymentModel            `json:"employment,omitempty"`
	FirstName        *string                           `json:"firstName"`
	LastName         *string                           `json:"lastName"`
	Mobile           *string                           `json:"mobile"`
	Phone            *string                           `json:"phone"`
	Rating           *string                           `json:"rating"`
	RecruiterUserId  *[]int32                          `json:"recruiterUserId"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`
	SkillTags  *[]string               `json:"skillTags"`
	Social     *map[string]string      `json:"social"`

	// Source Candidate source
	Source *string `json:"source"`

	// StatusId Candidate status
	StatusId     *int32  `json:"statusId"`
	Summary      *string `json:"summary"`
	Unsubscribed *bool   `json:"unsubscribed,omitempty"`
}

// AddCandidateJobOrderCommand defines model for AddCandidateJobOrderCommand.
type AddCandidateJobOrderCommand struct {
	JobId  []int32 `json:"jobId"`
	Source *string `json:"source"`
}

// AddCandidateNoteCommand defines model for AddCandidateNoteCommand.
type AddCandidateNoteCommand struct {
	// ApplicationId Optional list of related job applications to link to the note
	ApplicationId *[]int64 `json:"applicationId"`

	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// CreatedByIntegration When set to true, it indicates that the note is created by integration as a part of some automation workflows, not by a specific user
	CreatedByIntegration *bool `json:"createdByIntegration,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddCandidateUserTaskCommand defines model for AddCandidateUserTaskCommand.
type AddCandidateUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddCandidateVideoCommand defines model for AddCandidateVideoCommand.
type AddCandidateVideoCommand struct {
	// Reference Optional unique reference for this video type, if specified then an existing video
	// with the same type and reference will be updated if found.
	Reference *string `json:"reference"`

	// Url Video URL
	Url string `json:"url"`
}

// AddCompanyActivityCommand defines model for AddCompanyActivityCommand.
type AddCompanyActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddCompanyAddressCommand defines model for AddCompanyAddressCommand.
type AddCompanyAddressCommand struct {
	City             *string   `json:"city"`
	CountryCode      *string   `json:"countryCode"`
	Fax              *string   `json:"fax"`
	IsPrimaryAddress *bool     `json:"isPrimaryAddress,omitempty"`
	Name             string    `json:"name"`
	Phone            *string   `json:"phone"`
	PostalCode       *string   `json:"postalCode"`
	State            *string   `json:"state"`
	Street           *[]string `json:"street"`
	Url              *string   `json:"url"`
}

// AddCompanyCommand defines model for AddCompanyCommand.
type AddCompanyCommand struct {
	// Custom Custom field values. Only the specified fields will be updated, each fieldId can specified once.
	Custom *[]SubmitCustomFieldValueModel `json:"custom"`

	// LegalName Company LegalName
	LegalName       *string            `json:"legalName"`
	Name            string             `json:"name"`
	OwnerUserId     *int32             `json:"ownerUserId"`
	ParentCompanyId *int32             `json:"parentCompanyId"`
	RecruiterUserId *[]int32           `json:"recruiterUserId"`
	Social          *map[string]string `json:"social"`

	// StatusId Company status
	StatusId *int32  `json:"statusId"`
	Summary  *string `json:"summary"`
}

// AddCompanyNoteCommand defines model for AddCompanyNoteCommand.
type AddCompanyNoteCommand struct {
	// ContactId Optional list of related contacts to link to the note
	ContactId *[]int32 `json:"contactId"`

	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddCompanyUserTaskCommand defines model for AddCompanyUserTaskCommand.
type AddCompanyUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddCompanyWorkflowCommand defines model for AddCompanyWorkflowCommand.
type AddCompanyWorkflowCommand struct {
	// Approvers Approvers for this workflow. Only the specified workflow stages will be updated, each stageIndex can be specified once.
	Approvers *[]SubmitCompanyWorkflowApproverModel `json:"approvers"`
	Name      string                                `json:"name"`
}

// AddContactActivityCommand defines model for AddContactActivityCommand.
type AddContactActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddContactCommand defines model for AddContactCommand.
type AddContactCommand struct {
	CompanyId          *int32                         `json:"companyId"`
	Custom             *[]SubmitCustomFieldValueModel `json:"custom"`
	Email              *string                        `json:"email"`
	FirstName          *string                        `json:"firstName"`
	LastName           *string                        `json:"lastName"`
	Mobile             *string                        `json:"mobile"`
	OfficeAddressId    *openapi_types.UUID            `json:"officeAddressId"`
	OwnerUserId        *int32                         `json:"ownerUserId"`
	Phone              *string                        `json:"phone"`
	Position           *string                        `json:"position"`
	RecruiterUserId    *[]int32                       `json:"recruiterUserId"`
	ReportsToContactId *int32                         `json:"reportsToContactId"`

	// Salutation Salutation/honorific/title
	Salutation *string            `json:"salutation"`
	Social     *map[string]string `json:"social"`

	// StatusId Contact status
	StatusId     *int32  `json:"statusId"`
	Summary      *string `json:"summary"`
	Unsubscribed *bool   `json:"unsubscribed,omitempty"`
}

// AddContactNoteCommand defines model for AddContactNoteCommand.
type AddContactNoteCommand struct {
	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// CreatedByIntegration When set to true, it indicates that the note is created by integration as a part of some automation workflows, not by a specific user
	CreatedByIntegration *bool `json:"createdByIntegration,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddContactUserTaskCommand defines model for AddContactUserTaskCommand.
type AddContactUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddJobAdDraftCommand defines model for AddJobAdDraftCommand.
type AddJobAdDraftCommand struct {
	BulletPoints *[]string `json:"bulletPoints"`
	Description  *string   `json:"description"`

	// JobId Associated job
	JobId       *int32  `json:"jobId,omitempty"`
	OwnerUserId int32   `json:"ownerUserId"`
	Reference   *string `json:"reference"`
	Summary     *string `json:"summary"`
	Title       string  `json:"title"`
}

// AddJobApplicationActivityCommand defines model for AddJobApplicationActivityCommand.
type AddJobApplicationActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddJobApplicationExternalInterviewCommand defines model for AddJobApplicationExternalInterviewCommand.
type AddJobApplicationExternalInterviewCommand struct {
	// EndAt Interview end time. The allowed minutes for the time are 0, 15, 30 and 45.
	EndAt *time.Time `json:"endAt,omitempty"`

	// InterviewersContactIds Contact IDs of the interviewers
	InterviewersContactIds *[]int32 `json:"interviewersContactIds"`

	// Location Interview location
	Location *string `json:"location"`

	// StartAt Interview start time. The allowed minutes for the time are 0, 15, 30 and 45.
	StartAt *time.Time `json:"startAt,omitempty"`
}

// AddJobApplicationInternalInterviewCommand defines model for AddJobApplicationInternalInterviewCommand.
type AddJobApplicationInternalInterviewCommand struct {
	// EndAt Interview end time. The allowed minutes for the time are 0, 15, 30 and 45.
	EndAt *time.Time `json:"endAt,omitempty"`

	// InterviewersUserIds User IDs of the interviewers
	InterviewersUserIds *[]int32 `json:"interviewersUserIds"`

	// Location Interview location
	Location *string `json:"location"`

	// StartAt Interview start time. The allowed minutes for the time are 0, 15, 30 and 45.
	StartAt *time.Time `json:"startAt,omitempty"`
}

// AddJobApplicationNoteCommand defines model for AddJobApplicationNoteCommand.
type AddJobApplicationNoteCommand struct {
	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddJobApplicationUserTaskCommand defines model for AddJobApplicationUserTaskCommand.
type AddJobApplicationUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddJobApplicationVideoCommand defines model for AddJobApplicationVideoCommand.
type AddJobApplicationVideoCommand struct {
	// Reference Optional unique reference for this video type, if specified then an existing video
	// with the same type and reference will be updated if found.
	Reference *string `json:"reference"`

	// Url Video URL
	Url string `json:"url"`
}

// AddJobOrderActivityCommand defines model for AddJobOrderActivityCommand.
type AddJobOrderActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddJobOrderCandidateCommand defines model for AddJobOrderCandidateCommand.
type AddJobOrderCandidateCommand struct {
	CandidateId []int32 `json:"candidateId"`
	Source      *string `json:"source"`
}

// AddJobOrderCommand defines model for AddJobOrderCommand.
type AddJobOrderCommand struct {
	Category       *SubmitCategoryModel           `json:"category,omitempty"`
	CompanyId      *int32                         `json:"companyId"`
	ContactId      *int32                         `json:"contactId"`
	Custom         *[]SubmitCustomFieldValueModel `json:"custom"`
	Duration       *SubmitDurationModel           `json:"duration,omitempty"`
	Fee            *SubmitJobOrderFeeModel        `json:"fee,omitempty"`
	JobDescription *string                        `json:"jobDescription"`
	JobTitle       *string                        `json:"jobTitle"`
	Location       *SubmitLocationModel           `json:"location,omitempty"`
	NumberOfJobs   *int32                         `json:"numberOfJobs,omitempty"`

	// OwnerUserId User Id - Owner of this job
	OwnerUserId *int32 `json:"ownerUserId,omitempty"`

	// RecruiterUserId User Id - Optional list of recruiters assigned to the job
	RecruiterUserId *[]int32                        `json:"recruiterUserId"`
	Salary          *SubmitJobOrderSalaryRangeModel `json:"salary,omitempty"`
	SkillTags       *SubmitJobOrderSkillTagsModel   `json:"skillTags,omitempty"`
	Source          *string                         `json:"source"`
	Start           *SubmitJobOrderStartModel       `json:"start,omitempty"`

	// StatusId Job status
	StatusId *int32 `json:"statusId"`

	// UserFavourite Job is a favourite for the current user
	UserFavourite *bool  `json:"userFavourite"`
	WorkTypeId    *int32 `json:"workTypeId"`

	// WorkplaceAddressId Workplace Address Id
	WorkplaceAddressId *openapi_types.UUID `json:"workplaceAddressId"`
}

// AddJobOrderNoteCommand defines model for AddJobOrderNoteCommand.
type AddJobOrderNoteCommand struct {
	ApplicationId *[]int64 `json:"applicationId"`

	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddJobOrderUserTaskCommand defines model for AddJobOrderUserTaskCommand.
type AddJobOrderUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddNoteCommand defines model for AddNoteCommand.
type AddNoteCommand struct {
	ApplicationId *[]int64 `json:"applicationId"`
	CandidateId   *[]int32 `json:"candidateId"`
	CompanyId     *[]int32 `json:"companyId"`
	ContactId     *[]int32 `json:"contactId"`

	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy            *SubmitUserModel `json:"createdBy,omitempty"`
	CreatedByIntegration *bool            `json:"createdByIntegration,omitempty"`
	JobId                *[]int32         `json:"jobId"`
	PlacementId          *[]int32         `json:"placementId"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference     *string  `json:"reference"`
	RequisitionId *[]int32 `json:"requisitionId"`

	// Text Note content
	Text string `json:"text"`
	Type string `json:"type"`
}

// AddOpportunityCommand defines model for AddOpportunityCommand.
type AddOpportunityCommand struct {
	AdditionalInformation *string            `json:"additionalInformation"`
	CompanyId             int32              `json:"companyId"`
	EstimatedClose        *time.Time         `json:"estimatedClose"`
	OpportunityTitle      string             `json:"opportunityTitle"`
	OwnerUserIds          []int32            `json:"ownerUserIds"`
	StageId               openapi_types.UUID `json:"stageId"`
	Value                 *float64           `json:"value"`
	WorkTypeId            *int32             `json:"workTypeId"`
}

// AddPartnerActionCommand defines model for AddPartnerActionCommand.
type AddPartnerActionCommand struct {
	ActionFilter *PartnerActionFilterModel `json:"actionFilter,omitempty"`

	// ActionName Menu item label that will appear to the end-user
	ActionName *string `json:"actionName"`

	// AllowResubmit Allow resources to be resubmitted to an action.
	AllowResubmit *bool `json:"allowResubmit,omitempty"`

	// Reference Unique partner defined reference/identifier for the action
	Reference *string `json:"reference"`

	// Url URL to open after the action is selected and assigned the `"Submitted"` stage.\
	// Templates parameters can be used in the URL to identify the resource submitted to the action
	// <table><tr><td>`{userId}`</td><td>Replaced with the User Id of the user performing the action</td></tr><tr><td>`{jobId}`</td><td>Replaced with the Job Id</td></tr><tr><td>`{adId}`</td><td>Replaced with the Job Ad Id</td></tr><tr><td>`{candidateId}`</td><td>Replaced with the Candidate Id</td></tr><tr><td>`{applicationId}`</td><td>Replaced with the Job Application Id</td></tr><tr><td>`{placementId}`</td><td>Replaced with the Placement Id</td></tr><tr><td>`{companyId}`</td><td>Replaced with the Company Id</td></tr><tr><td>`{contactId}`</td><td>Replaced with the Contact Id</td></tr></table>
	Url     *string               `json:"url"`
	UrlType *PartnerActionUrlType `json:"urlType,omitempty"`

	// WebhookData Additional data to include with the webhook notification
	WebhookData *interface{} `json:"webhookData"`
}

// AddPlacementActivityCommand defines model for AddPlacementActivityCommand.
type AddPlacementActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddPlacementNoteCommand defines model for AddPlacementNoteCommand.
type AddPlacementNoteCommand struct {
	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddPlacementUserTaskCommand defines model for AddPlacementUserTaskCommand.
type AddPlacementUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddRequisitionCommand defines model for AddRequisitionCommand.
type AddRequisitionCommand struct {
	Category *SubmitCategoryModel `json:"category,omitempty"`

	// ContactId Hiring manager (contact) submitting the requisition.
	ContactId      int32                          `json:"contactId"`
	Custom         *[]SubmitCustomFieldValueModel `json:"custom"`
	Duration       *SubmitDurationModel           `json:"duration,omitempty"`
	FormID         *int32                         `json:"formID"`
	JobDescription *string                        `json:"jobDescription"`
	JobTitle       *string                        `json:"jobTitle"`
	Location       *SubmitLocationModel           `json:"location,omitempty"`
	NumberOfJobs   *int32                         `json:"numberOfJobs,omitempty"`

	// RecruiterUserId User Id - Optional list of recruiters assigned to the requisition.
	RecruiterUserId *[]int32                        `json:"recruiterUserId"`
	Salary          *SubmitJobOrderSalaryRangeModel `json:"salary,omitempty"`
	Source          *string                         `json:"source"`
	Start           *SubmitJobOrderStartModel       `json:"start,omitempty"`
	WorkTypeId      *int32                          `json:"workTypeId"`
	WorkflowId      *int32                          `json:"workflowId"`

	// WorkplaceAddressId Workplace address Id
	WorkplaceAddressId *openapi_types.UUID `json:"workplaceAddressId"`
}

// AddRequisitionNoteCommand defines model for AddRequisitionNoteCommand.
type AddRequisitionNoteCommand struct {
	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddUserTaskCommand defines model for AddUserTaskCommand.
type AddUserTaskCommand struct {
	AllDay    *bool      `json:"allDay,omitempty"`
	Assignees *[]int32   `json:"assignees"`
	EndAt     *time.Time `json:"endAt"`
	Priority  *int32     `json:"priority,omitempty"`
	StartAt   *time.Time `json:"startAt"`
	Title     *string    `json:"title"`
}

// AddWebhookCommand defines model for AddWebhookCommand.
type AddWebhookCommand struct {
	// Authorization Optional authorization header to include with the HTTP POST notification.
	Authorization *string                        `json:"authorization"`
	EventFilters  *SubmitWebhookEventFilterModel `json:"eventFilters,omitempty"`
	Events        *[]EventName                   `json:"events"`
	Name          *string                        `json:"name"`
	Status        *SubmitWebhookStatus           `json:"status,omitempty"`

	// Url Target URL that will listen for incoming HTTP POST notification messages.
	Url *string `json:"url"`
}

// AddressModel defines model for AddressModel.
type AddressModel struct {
	City        *string   `json:"city"`
	Country     *string   `json:"country"`
	CountryCode *string   `json:"countryCode"`
	PostalCode  *string   `json:"postalCode"`
	State       *string   `json:"state"`
	Street      *[]string `json:"street"`
}

// ApproveRequisitionCommand defines model for ApproveRequisitionCommand.
type ApproveRequisitionCommand struct {
	ApproverId int32   `json:"approverId"`
	Message    *string `json:"message"`
}

// CandidateActivityListRepresentation defines model for CandidateActivityListRepresentation.
type CandidateActivityListRepresentation struct {
	Items      *[]CandidateActivityModel `json:"items"`
	Links      *PageLinks                `json:"links,omitempty"`
	TotalCount int32                     `json:"totalCount"`
}

// CandidateActivityModel defines model for CandidateActivityModel.
type CandidateActivityModel struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CandidateId  *int32                   `json:"candidateId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// CandidateActivityRepresentation defines model for CandidateActivityRepresentation.
type CandidateActivityRepresentation struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CandidateId  *int32                   `json:"candidateId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Links        *ModelLinks              `json:"links,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// CandidateActivitySettingModel defines model for CandidateActivitySettingModel.
type CandidateActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// CandidateActivitySettingSummaryModel defines model for CandidateActivitySettingSummaryModel.
type CandidateActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// CandidateActivitySettingsListModel defines model for CandidateActivitySettingsListModel.
type CandidateActivitySettingsListModel struct {
	Items *[]CandidateActivitySettingSummaryModel `json:"items"`
}

// CandidateActivitySummaryListModel defines model for CandidateActivitySummaryListModel.
type CandidateActivitySummaryListModel struct {
	Items *[]CandidateActivitySummaryModel `json:"items"`
}

// CandidateActivitySummaryModel defines model for CandidateActivitySummaryModel.
type CandidateActivitySummaryModel struct {
	ActivityId   *int64         `json:"activityId,omitempty"`
	ActivityName *string        `json:"activityName"`
	ActivityType *string        `json:"activityType"`
	CandidateId  *int32         `json:"candidateId,omitempty"`
	CreatedAt    *time.Time     `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`
	Status       *string        `json:"status"`
	UpdatedAt    *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// CandidateAttachmentCategoryListRepresentation defines model for CandidateAttachmentCategoryListRepresentation.
type CandidateAttachmentCategoryListRepresentation struct {
	Items *[]CandidateAttachmentCategoryModel `json:"items"`
	Links *ModelLinks                         `json:"links,omitempty"`
}

// CandidateAttachmentCategoryModel defines model for CandidateAttachmentCategoryModel.
type CandidateAttachmentCategoryModel struct {
	Category *string                  `json:"category"`
	Type     *CandidateAttachmentType `json:"type,omitempty"`
}

// CandidateAttachmentLinks defines model for CandidateAttachmentLinks.
type CandidateAttachmentLinks struct {
	Self *string `json:"self"`
}

// CandidateAttachmentListRepresentation defines model for CandidateAttachmentListRepresentation.
type CandidateAttachmentListRepresentation struct {
	Items      *[]CandidateAttachmentModel `json:"items"`
	Links      *PageLinks                  `json:"links,omitempty"`
	TotalCount int32                       `json:"totalCount"`
}

// CandidateAttachmentModel defines model for CandidateAttachmentModel.
type CandidateAttachmentModel struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	CandidateId  *int32         `json:"candidateId"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date      `json:"expiry"`
	FileName  *string                  `json:"fileName"`
	FileType  *string                  `json:"fileType"`
	Type      *CandidateAttachmentType `json:"type,omitempty"`
	UpdatedAt *time.Time               `json:"updatedAt"`
}

// CandidateAttachmentRepresentation defines model for CandidateAttachmentRepresentation.
type CandidateAttachmentRepresentation struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	CandidateId  *int32         `json:"candidateId"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date       `json:"expiry"`
	FileName  *string                   `json:"fileName"`
	FileType  *string                   `json:"fileType"`
	Links     *CandidateAttachmentLinks `json:"links,omitempty"`
	Type      *CandidateAttachmentType  `json:"type,omitempty"`
	UpdatedAt *time.Time                `json:"updatedAt"`
}

// CandidateAttachmentType defines model for CandidateAttachmentType.
type CandidateAttachmentType string

// CandidateAvailabilityListRepresentation defines model for CandidateAvailabilityListRepresentation.
type CandidateAvailabilityListRepresentation struct {
	Items *[]CandidateAvailabilityModel `json:"items"`
	Links *ModelLinks                   `json:"links,omitempty"`
}

// CandidateAvailabilityModel defines model for CandidateAvailabilityModel.
type CandidateAvailabilityModel struct {
	// Date Date available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	Date *openapi_types.Date `json:"date,omitempty"`
	Day  *DayOfWeek          `json:"day,omitempty"`

	// Recurring Availability is repeated in following weeks
	Recurring *bool `json:"recurring,omitempty"`

	// Shifts Time available, at least one and at most two shifts
	Shifts *[]TimeRangeModel `json:"shifts"`

	// Until Optional end date of repeating availability
	Until *openapi_types.Date `json:"until"`
}

// CandidateEducationModel defines model for CandidateEducationModel.
type CandidateEducationModel struct {
	Course *string `json:"course"`

	// Date Year, month or date completed.<br />
	// Year must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />
	// Month must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) "-" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />
	// Date must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31
	Date        *string `json:"date"`
	Institution *string `json:"institution"`
}

// CandidateEmploymentHistoryModel defines model for CandidateEmploymentHistoryModel.
type CandidateEmploymentHistoryModel struct {
	// Description Description of responsibilities and achievements.
	Description *string `json:"description"`

	// Employer Name of the employer
	Employer *string `json:"employer"`

	// End Year, month or date employment finished, or "Present" for a current role.<br />
	// Year must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />
	// Month must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) "-" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />
	// Date must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31
	End      *string `json:"end"`
	Position *string `json:"position"`

	// Start Year, month or date employment started.<br />
	// Year must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />
	// Month must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) "-" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />
	// Date must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31
	Start *string `json:"start"`
}

// CandidateEmploymentModel defines model for CandidateEmploymentModel.
type CandidateEmploymentModel struct {
	Current *CurrentEmploymentModel            `json:"current,omitempty"`
	History *[]CandidateEmploymentHistoryModel `json:"history"`
	Ideal   *CandidateIdealEmploymentModel     `json:"ideal,omitempty"`
}

// CandidateIdealEmploymentModel defines model for CandidateIdealEmploymentModel.
type CandidateIdealEmploymentModel struct {
	Other    *[]CandidateIdealSalaryModel `json:"other"`
	Position *string                      `json:"position"`
	Salary   *SalaryRangeModel            `json:"salary,omitempty"`
	WorkType *WorkTypeModel               `json:"workType,omitempty"`
}

// CandidateIdealSalaryModel defines model for CandidateIdealSalaryModel.
type CandidateIdealSalaryModel struct {
	Salary   *SalaryRangeModel `json:"salary,omitempty"`
	WorkType *WorkTypeModel    `json:"workType,omitempty"`
}

// CandidateJobApplicationStatisticsSummaryModel defines model for CandidateJobApplicationStatisticsSummaryModel.
type CandidateJobApplicationStatisticsSummaryModel struct {
	Active *int32 `json:"active,omitempty"`
	New    *int32 `json:"new,omitempty"`
	Total  *int32 `json:"total,omitempty"`
}

// CandidateLinks defines model for CandidateLinks.
type CandidateLinks struct {
	// Applications Job Applications
	Applications *string `json:"applications"`

	// Attachments Attachments
	Attachments *string `json:"attachments"`

	// Contact Optional contact if candidate is also a contact
	Contact *string `json:"contact"`

	// Floats Floats
	Floats *string `json:"floats"`

	// Notes Notes
	Notes *string `json:"notes"`

	// Photo Candidate photo
	Photo *string `json:"photo"`

	// Placements Placements
	Placements *string `json:"placements"`
	Self       *string `json:"self"`

	// Skills Skills
	Skills *string `json:"skills"`

	// Submissions Submissions
	Submissions *string `json:"submissions"`

	// Videos Videos
	Videos *string `json:"videos"`
}

// CandidateListRepresentation defines model for CandidateListRepresentation.
type CandidateListRepresentation struct {
	Items      *[]CandidateSummaryModel `json:"items"`
	Links      *PageLinks               `json:"links,omitempty"`
	TotalCount int32                    `json:"totalCount"`
}

// CandidateMatchedByEmailModel defines model for CandidateMatchedByEmailModel.
type CandidateMatchedByEmailModel struct {
	CandidateId *int32                    `json:"candidateId,omitempty"`
	Email       *string                   `json:"email"`
	FirstName   *string                   `json:"firstName"`
	LastName    *string                   `json:"lastName"`
	LastNoteAt  *time.Time                `json:"lastNoteAt"`
	Match       *MatchedEmailAddressModel `json:"match,omitempty"`
	Mobile      *string                   `json:"mobile"`
	Phone       *string                   `json:"phone"`
	UpdatedAt   *time.Time                `json:"updatedAt"`
}

// CandidateMatchedByPhoneModel defines model for CandidateMatchedByPhoneModel.
type CandidateMatchedByPhoneModel struct {
	CandidateId *int32                   `json:"candidateId,omitempty"`
	Email       *string                  `json:"email"`
	FirstName   *string                  `json:"firstName"`
	LastName    *string                  `json:"lastName"`
	LastNoteAt  *time.Time               `json:"lastNoteAt"`
	Match       *MatchedPhoneNumberModel `json:"match,omitempty"`
	Mobile      *string                  `json:"mobile"`
	Phone       *string                  `json:"phone"`
	UpdatedAt   *time.Time               `json:"updatedAt"`
}

// CandidateNameModel defines model for CandidateNameModel.
type CandidateNameModel struct {
	Address *AddressModel `json:"address,omitempty"`

	// CandidateId Candidate Id
	CandidateId int32 `json:"candidateId"`

	// ContactMethod Preferred contact method
	ContactMethod *string `json:"contactMethod"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string `json:"mobileNormalized"`

	// Phone Contact phone number
	Phone *string `json:"phone"`

	// Rating Internal rating of the candidate
	Rating *string `json:"rating"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`

	// Source The source of the candidate
	Source       *string      `json:"source"`
	Status       *StatusModel `json:"status,omitempty"`
	Unsubscribed *bool        `json:"unsubscribed,omitempty"`
}

// CandidatePayrollBillingListModel defines model for CandidatePayrollBillingListModel.
type CandidatePayrollBillingListModel struct {
	Items *[]CandidatePayrollBillingModel `json:"items"`
}

// CandidatePayrollBillingModel defines model for CandidatePayrollBillingModel.
type CandidatePayrollBillingModel struct {
	// CandidateId Candidate Id
	CandidateId *int32 `json:"candidateId,omitempty"`

	// ExternalCandidateId Candidate ExternalID
	ExternalCandidateId *string `json:"externalCandidateId"`

	// Office Office Code
	Office *string `json:"office"`

	// Position Position
	Position *string `json:"position"`

	// SkillGroup Skill Group
	SkillGroup *string `json:"skillGroup"`
}

// CandidatePlacementModel defines model for CandidatePlacementModel.
type CandidatePlacementModel struct {
	Address *AddressModel `json:"address,omitempty"`

	// CandidateId Candidate Id
	CandidateId int32 `json:"candidateId"`

	// ContactMethod Preferred contact method
	ContactMethod *string `json:"contactMethod"`

	// DateOfBirth Candidate date of birth available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	DateOfBirth *openapi_types.Date `json:"dateOfBirth"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string `json:"mobileNormalized"`

	// Phone Contact phone number
	Phone *string `json:"phone"`

	// Rating Internal rating of the candidate
	Rating *string `json:"rating"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`

	// Source The source of the candidate
	Source       *string      `json:"source"`
	Status       *StatusModel `json:"status,omitempty"`
	Unsubscribed *bool        `json:"unsubscribed,omitempty"`
}

// CandidatePlacementStatisticsSummaryModel defines model for CandidatePlacementStatisticsSummaryModel.
type CandidatePlacementStatisticsSummaryModel struct {
	Total *int32 `json:"total,omitempty"`
}

// CandidateRepresentation defines model for CandidateRepresentation.
type CandidateRepresentation struct {
	Address *AddressModel `json:"address,omitempty"`

	// Availability The date the candidate is available to start. Specify ONE OF immediate, relative or date.
	Availability *CandidateStartModel `json:"availability,omitempty"`

	// CandidateId Candidate Id
	CandidateId int32 `json:"candidateId"`

	// ContactMethod Preferred contact method
	ContactMethod *string                  `json:"contactMethod"`
	CreatedAt     *time.Time               `json:"createdAt"`
	CreatedBy     *UserNameModel           `json:"createdBy,omitempty"`
	Custom        *[]CustomFieldValueModel `json:"custom"`

	// DateOfBirth Candidate date of birth available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	DateOfBirth *openapi_types.Date        `json:"dateOfBirth"`
	Education   *[]CandidateEducationModel `json:"education"`

	// Email Primary email address
	Email *string `json:"email"`

	// EmergencyContact The emergency contact of the candidate
	EmergencyContact *string `json:"emergencyContact"`

	// EmergencyPhone The emergency phone of the candidate
	EmergencyPhone *string                   `json:"emergencyPhone"`
	Employment     *CandidateEmploymentModel `json:"employment,omitempty"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// LastName Last name
	LastName *string         `json:"lastName"`
	Links    *CandidateLinks `json:"links,omitempty"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string `json:"mobileNormalized"`

	// OtherEmail Other email addresses used by the candidate
	OtherEmail     *[]string                  `json:"otherEmail"`
	PartnerActions *[]PartnerActionStageModel `json:"partnerActions"`

	// Phone Contact phone number
	Phone *string `json:"phone"`

	// Rating Internal rating of the candidate
	Rating     *string          `json:"rating"`
	Recruiters *[]UserNameModel `json:"recruiters"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`
	SkillTags  *[]string               `json:"skillTags"`

	// Social Candidate social profiles
	Social *map[string]string `json:"social"`

	// Source The source of the candidate
	Source       *string                   `json:"source"`
	Statistics   *CandidateStatisticsModel `json:"statistics,omitempty"`
	Status       *StatusModel              `json:"status,omitempty"`
	Summary      *string                   `json:"summary"`
	Unsubscribed *bool                     `json:"unsubscribed,omitempty"`
	UpdatedAt    *time.Time                `json:"updatedAt"`
	UpdatedBy    *UserNameModel            `json:"updatedBy,omitempty"`
}

// CandidateSeekingStatus defines model for CandidateSeekingStatus.
type CandidateSeekingStatus string

// CandidateStartModel The date the candidate is available to start. Specify ONE OF immediate, relative or date.
type CandidateStartModel struct {
	// Date The specific date that a job starts or a candidate is available
	Date      *openapi_types.Date `json:"date"`
	Immediate *bool               `json:"immediate,omitempty"`
	Relative  *RelativeStartModel `json:"relative,omitempty"`
}

// CandidateStatisticsModel defines model for CandidateStatisticsModel.
type CandidateStatisticsModel struct {
	Applications *CandidateJobApplicationStatisticsSummaryModel `json:"applications,omitempty"`
	Placements   *CandidatePlacementStatisticsSummaryModel      `json:"placements,omitempty"`
}

// CandidateSummaryModel defines model for CandidateSummaryModel.
type CandidateSummaryModel struct {
	Address *AddressModel `json:"address,omitempty"`

	// CandidateId Candidate Id
	CandidateId int32 `json:"candidateId"`

	// ContactMethod Preferred contact method
	ContactMethod *string        `json:"contactMethod"`
	CreatedAt     *time.Time     `json:"createdAt"`
	CreatedBy     *UserNameModel `json:"createdBy,omitempty"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string `json:"mobileNormalized"`

	// Phone Contact phone number
	Phone *string `json:"phone"`

	// Rating Internal rating of the candidate
	Rating *string `json:"rating"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`

	// Source The source of the candidate
	Source       *string        `json:"source"`
	Status       *StatusModel   `json:"status,omitempty"`
	Unsubscribed *bool          `json:"unsubscribed,omitempty"`
	UpdatedAt    *time.Time     `json:"updatedAt"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// CandidateUserTaskModel defines model for CandidateUserTaskModel.
type CandidateUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	CandidateId     *int32                        `json:"candidateId,omitempty"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// CandidateUserTaskRepresentation defines model for CandidateUserTaskRepresentation.
type CandidateUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	CandidateId     *int32                        `json:"candidateId,omitempty"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// CandidateVideoListRepresentation defines model for CandidateVideoListRepresentation.
type CandidateVideoListRepresentation struct {
	Items *[]CandidateVideoModel `json:"items"`
	Links *PageLinks             `json:"links,omitempty"`
}

// CandidateVideoModel defines model for CandidateVideoModel.
type CandidateVideoModel struct {
	// CreatedAt Date this video was added to the candidate
	CreatedAt *time.Time `json:"createdAt"`

	// Reference Optional unique reference for this video type.
	Reference *string            `json:"reference"`
	Type      CandidateVideoType `json:"type"`

	// UpdatedAt Date this video was last updated (updates are possible when a video is added with a Reference)
	UpdatedAt *time.Time `json:"updatedAt"`

	// Url Video URL
	Url *string `json:"url"`
}

// CandidateVideoRepresentation defines model for CandidateVideoRepresentation.
type CandidateVideoRepresentation struct {
	// CreatedAt Date this video was added to the candidate
	CreatedAt *time.Time `json:"createdAt"`

	// Reference Optional unique reference for this video type.
	Reference *string            `json:"reference"`
	Type      CandidateVideoType `json:"type"`

	// UpdatedAt Date this video was last updated (updates are possible when a video is added with a Reference)
	UpdatedAt *time.Time `json:"updatedAt"`

	// Url Video URL
	Url *string `json:"url"`
}

// CandidateVideoType defines model for CandidateVideoType.
type CandidateVideoType string

// CategoryListRepresentation defines model for CategoryListRepresentation.
type CategoryListRepresentation struct {
	Items *[]CategoryModel `json:"items"`
	Links *ModelLinks      `json:"links,omitempty"`
}

// CategoryModel defines model for CategoryModel.
type CategoryModel struct {
	CategoryId    int32               `json:"categoryId"`
	Name          string              `json:"name"`
	SubCategories *[]SubCategoryModel `json:"subCategories"`
}

// CompanyActivityListRepresentation defines model for CompanyActivityListRepresentation.
type CompanyActivityListRepresentation struct {
	Items      *[]CompanyActivityModel `json:"items"`
	Links      *PageLinks              `json:"links,omitempty"`
	TotalCount int32                   `json:"totalCount"`
}

// CompanyActivityModel defines model for CompanyActivityModel.
type CompanyActivityModel struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CompanyId    *int32                   `json:"companyId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// CompanyActivityRepresentation defines model for CompanyActivityRepresentation.
type CompanyActivityRepresentation struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CompanyId    *int32                   `json:"companyId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Links        *ModelLinks              `json:"links,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// CompanyActivitySettingModel defines model for CompanyActivitySettingModel.
type CompanyActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// CompanyActivitySettingSummaryModel defines model for CompanyActivitySettingSummaryModel.
type CompanyActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// CompanyActivitySettingsListModel defines model for CompanyActivitySettingsListModel.
type CompanyActivitySettingsListModel struct {
	Items *[]CompanyActivitySettingSummaryModel `json:"items"`
}

// CompanyActivitySummaryListModel defines model for CompanyActivitySummaryListModel.
type CompanyActivitySummaryListModel struct {
	Items *[]CompanyActivitySummaryModel `json:"items"`
}

// CompanyActivitySummaryModel defines model for CompanyActivitySummaryModel.
type CompanyActivitySummaryModel struct {
	ActivityId   *int64         `json:"activityId,omitempty"`
	ActivityName *string        `json:"activityName"`
	ActivityType *string        `json:"activityType"`
	CompanyId    *int32         `json:"companyId,omitempty"`
	CreatedAt    *time.Time     `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`
	Status       *string        `json:"status"`
	UpdatedAt    *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// CompanyAddressListRepresentation defines model for CompanyAddressListRepresentation.
type CompanyAddressListRepresentation struct {
	Items *[]CompanyAddressModel `json:"items"`
	Links *ModelLinks            `json:"links,omitempty"`
}

// CompanyAddressModel defines model for CompanyAddressModel.
type CompanyAddressModel struct {
	AddressId   openapi_types.UUID `json:"addressId"`
	City        *string            `json:"city"`
	Country     *string            `json:"country"`
	CountryCode *string            `json:"countryCode"`
	Fax         *string            `json:"fax"`
	Name        *string            `json:"name"`
	Phone       *string            `json:"phone"`
	PostalCode  *string            `json:"postalCode"`
	State       *string            `json:"state"`
	Street      *[]string          `json:"street"`
	Url         *string            `json:"url"`
}

// CompanyAddressRepresentation defines model for CompanyAddressRepresentation.
type CompanyAddressRepresentation struct {
	AddressId   openapi_types.UUID `json:"addressId"`
	City        *string            `json:"city"`
	Country     *string            `json:"country"`
	CountryCode *string            `json:"countryCode"`
	Fax         *string            `json:"fax"`
	Links       *ModelLinks        `json:"links,omitempty"`
	Name        *string            `json:"name"`
	Phone       *string            `json:"phone"`
	PostalCode  *string            `json:"postalCode"`
	State       *string            `json:"state"`
	Street      *[]string          `json:"street"`
	Url         *string            `json:"url"`
}

// CompanyAttachmentCategoryListRepresentation defines model for CompanyAttachmentCategoryListRepresentation.
type CompanyAttachmentCategoryListRepresentation struct {
	Items *[]CompanyAttachmentCategoryModel `json:"items"`
	Links *ModelLinks                       `json:"links,omitempty"`
}

// CompanyAttachmentCategoryModel defines model for CompanyAttachmentCategoryModel.
type CompanyAttachmentCategoryModel struct {
	Category *string                `json:"category"`
	Type     *CompanyAttachmentType `json:"type,omitempty"`
}

// CompanyAttachmentLinks defines model for CompanyAttachmentLinks.
type CompanyAttachmentLinks struct {
	Self *string `json:"self"`
}

// CompanyAttachmentListRepresentation defines model for CompanyAttachmentListRepresentation.
type CompanyAttachmentListRepresentation struct {
	Items      *[]CompanyAttachmentModel `json:"items"`
	Links      *PageLinks                `json:"links,omitempty"`
	TotalCount int32                     `json:"totalCount"`
}

// CompanyAttachmentModel defines model for CompanyAttachmentModel.
type CompanyAttachmentModel struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date    `json:"expiry"`
	FileName  *string                `json:"fileName"`
	FileType  *string                `json:"fileType"`
	Type      *CompanyAttachmentType `json:"type,omitempty"`
	UpdatedAt *time.Time             `json:"updatedAt"`
}

// CompanyAttachmentRepresentation defines model for CompanyAttachmentRepresentation.
type CompanyAttachmentRepresentation struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date     `json:"expiry"`
	FileName  *string                 `json:"fileName"`
	FileType  *string                 `json:"fileType"`
	Links     *CompanyAttachmentLinks `json:"links,omitempty"`
	Type      *CompanyAttachmentType  `json:"type,omitempty"`
	UpdatedAt *time.Time              `json:"updatedAt"`
}

// CompanyAttachmentType defines model for CompanyAttachmentType.
type CompanyAttachmentType string

// CompanyLinks defines model for CompanyLinks.
type CompanyLinks struct {
	// Addresses Company addresses
	Addresses *string `json:"addresses"`

	// Attachments Attachments
	Attachments *string `json:"attachments"`

	// Contacts Company contacts
	Contacts *string `json:"contacts"`

	// Floats Company floats
	Floats *string `json:"floats"`

	// Jobs Company jobs
	Jobs *string `json:"jobs"`

	// Logo Company logo
	Logo *string `json:"logo"`

	// Notes Company notes
	Notes *string `json:"notes"`

	// Placements Company placements
	Placements *string `json:"placements"`

	// Requisitions Company requisitions
	Requisitions *string `json:"requisitions"`
	Self         *string `json:"self"`

	// Skills Skills
	Skills *string `json:"skills"`

	// Submissions Company submissions
	Submissions *string `json:"submissions"`

	// Subsidiaries Company subsidiaries
	Subsidiaries *string               `json:"subsidiaries"`
	Workflows    *CompanyWorkflowLinks `json:"workflows,omitempty"`
}

// CompanyListRepresentation defines model for CompanyListRepresentation.
type CompanyListRepresentation struct {
	Items      *[]CompanySummaryModel `json:"items"`
	Links      *PageLinks             `json:"links,omitempty"`
	TotalCount int32                  `json:"totalCount"`
}

// CompanyMatchedByPhoneModel defines model for CompanyMatchedByPhoneModel.
type CompanyMatchedByPhoneModel struct {
	CompanyId  *int32                   `json:"companyId,omitempty"`
	LastNoteAt *time.Time               `json:"lastNoteAt"`
	Match      *MatchedPhoneNumberModel `json:"match,omitempty"`
	Name       *string                  `json:"name"`
	UpdatedAt  *time.Time               `json:"updatedAt"`
}

// CompanyNameModel defines model for CompanyNameModel.
type CompanyNameModel struct {
	// CompanyId Unique identifier for the company
	CompanyId int32 `json:"companyId"`

	// Name Company name
	Name   *string        `json:"name"`
	Owner  *UserNameModel `json:"owner,omitempty"`
	Status *StatusModel   `json:"status,omitempty"`
}

// CompanyRepresentation defines model for CompanyRepresentation.
type CompanyRepresentation struct {
	// CompanyId Unique identifier for the company
	CompanyId   int32                    `json:"companyId"`
	CreatedAt   *time.Time               `json:"createdAt"`
	CreatedBy   *UserNameModel           `json:"createdBy,omitempty"`
	Custom      *[]CustomFieldValueModel `json:"custom"`
	LegalName   *string                  `json:"legalName"`
	Links       *CompanyLinks            `json:"links,omitempty"`
	MainContact *ContactNameModel        `json:"mainContact,omitempty"`

	// Name Company name
	Name           *string                    `json:"name"`
	Owner          *UserNameModel             `json:"owner,omitempty"`
	Parent         *CompanyNameModel          `json:"parent,omitempty"`
	PartnerActions *[]PartnerActionStageModel `json:"partnerActions"`
	PrimaryAddress *CompanyAddressModel       `json:"primaryAddress,omitempty"`
	Recruiters     *[]UserNameModel           `json:"recruiters"`

	// Social Company social profiles
	Social    *map[string]string `json:"social"`
	Status    *StatusModel       `json:"status,omitempty"`
	Summary   *string            `json:"summary"`
	UpdatedAt *time.Time         `json:"updatedAt"`
	UpdatedBy *UserNameModel     `json:"updatedBy,omitempty"`
}

// CompanySummaryModel defines model for CompanySummaryModel.
type CompanySummaryModel struct {
	// CompanyId Unique identifier for the company
	CompanyId   int32             `json:"companyId"`
	CreatedAt   *time.Time        `json:"createdAt"`
	CreatedBy   *UserNameModel    `json:"createdBy,omitempty"`
	MainContact *ContactNameModel `json:"mainContact,omitempty"`

	// Name Company name
	Name           *string              `json:"name"`
	Owner          *UserNameModel       `json:"owner,omitempty"`
	PrimaryAddress *CompanyAddressModel `json:"primaryAddress,omitempty"`
	Status         *StatusModel         `json:"status,omitempty"`
	UpdatedAt      *time.Time           `json:"updatedAt"`
	UpdatedBy      *UserNameModel       `json:"updatedBy,omitempty"`
}

// CompanyUserTaskModel defines model for CompanyUserTaskModel.
type CompanyUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	CompanyId       *int32                        `json:"companyId,omitempty"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// CompanyUserTaskRepresentation defines model for CompanyUserTaskRepresentation.
type CompanyUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	CompanyId       *int32                        `json:"companyId,omitempty"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// CompanyWorkflowApproverModel defines model for CompanyWorkflowApproverModel.
type CompanyWorkflowApproverModel struct {
	// ContactId Unique identifier for the contact
	ContactId int32 `json:"contactId"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// Inactive Contact is no longer with the company
	Inactive *bool `json:"inactive,omitempty"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string        `json:"mobileNormalized"`
	Owner            *UserNameModel `json:"owner,omitempty"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`

	// Salutation Salutation/honorific/title
	Salutation   *string      `json:"salutation"`
	StageIndex   int32        `json:"stageIndex"`
	Status       *StatusModel `json:"status,omitempty"`
	Unsubscribed *bool        `json:"unsubscribed,omitempty"`
}

// CompanyWorkflowLinks defines model for CompanyWorkflowLinks.
type CompanyWorkflowLinks struct {
	Requisition *string `json:"requisition"`
}

// CompanyWorkflowListRepresentation defines model for CompanyWorkflowListRepresentation.
type CompanyWorkflowListRepresentation struct {
	Items *[]CompanyWorkflowNameModel `json:"items"`
	Links *ModelLinks                 `json:"links,omitempty"`
}

// CompanyWorkflowModel defines model for CompanyWorkflowModel.
type CompanyWorkflowModel struct {
	Approvers  *[]CompanyWorkflowApproverModel `json:"approvers"`
	Archived   *bool                           `json:"archived,omitempty"`
	Name       string                          `json:"name"`
	WorkflowId int32                           `json:"workflowId"`
}

// CompanyWorkflowNameModel defines model for CompanyWorkflowNameModel.
type CompanyWorkflowNameModel struct {
	Archived   *bool  `json:"archived,omitempty"`
	Name       string `json:"name"`
	WorkflowId int32  `json:"workflowId"`
}

// CompanyWorkflowRepresentation defines model for CompanyWorkflowRepresentation.
type CompanyWorkflowRepresentation struct {
	Approvers  *[]CompanyWorkflowApproverModel `json:"approvers"`
	Archived   *bool                           `json:"archived,omitempty"`
	Links      *ModelLinks                     `json:"links,omitempty"`
	Name       string                          `json:"name"`
	WorkflowId int32                           `json:"workflowId"`
}

// CompanyWorkflowType defines model for CompanyWorkflowType.
type CompanyWorkflowType string

// ContactActivityListRepresentation defines model for ContactActivityListRepresentation.
type ContactActivityListRepresentation struct {
	Items      *[]ContactActivityModel `json:"items"`
	Links      *PageLinks              `json:"links,omitempty"`
	TotalCount int32                   `json:"totalCount"`
}

// ContactActivityModel defines model for ContactActivityModel.
type ContactActivityModel struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	ContactId    *int32                   `json:"contactId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// ContactActivityRepresentation defines model for ContactActivityRepresentation.
type ContactActivityRepresentation struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	ContactId    *int32                   `json:"contactId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Links        *ModelLinks              `json:"links,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// ContactActivitySettingModel defines model for ContactActivitySettingModel.
type ContactActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// ContactActivitySettingSummaryModel defines model for ContactActivitySettingSummaryModel.
type ContactActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// ContactActivitySettingsListModel defines model for ContactActivitySettingsListModel.
type ContactActivitySettingsListModel struct {
	Items *[]ContactActivitySettingSummaryModel `json:"items"`
}

// ContactActivitySummaryListModel defines model for ContactActivitySummaryListModel.
type ContactActivitySummaryListModel struct {
	Items *[]ContactActivitySummaryModel `json:"items"`
}

// ContactActivitySummaryModel defines model for ContactActivitySummaryModel.
type ContactActivitySummaryModel struct {
	ActivityId   *int64         `json:"activityId,omitempty"`
	ActivityName *string        `json:"activityName"`
	ActivityType *string        `json:"activityType"`
	ContactId    *int32         `json:"contactId,omitempty"`
	CreatedAt    *time.Time     `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`
	Status       *string        `json:"status"`
	UpdatedAt    *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// ContactAttachmentCategoryListRepresentation defines model for ContactAttachmentCategoryListRepresentation.
type ContactAttachmentCategoryListRepresentation struct {
	Items *[]ContactAttachmentCategoryModel `json:"items"`
	Links *ModelLinks                       `json:"links,omitempty"`
}

// ContactAttachmentCategoryModel defines model for ContactAttachmentCategoryModel.
type ContactAttachmentCategoryModel struct {
	Category *string                `json:"category"`
	Type     *ContactAttachmentType `json:"type,omitempty"`
}

// ContactAttachmentLinks defines model for ContactAttachmentLinks.
type ContactAttachmentLinks struct {
	Self *string `json:"self"`
}

// ContactAttachmentListRepresentation defines model for ContactAttachmentListRepresentation.
type ContactAttachmentListRepresentation struct {
	Items      *[]ContactAttachmentModel `json:"items"`
	Links      *PageLinks                `json:"links,omitempty"`
	TotalCount int32                     `json:"totalCount"`
}

// ContactAttachmentModel defines model for ContactAttachmentModel.
type ContactAttachmentModel struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date    `json:"expiry"`
	FileName  *string                `json:"fileName"`
	FileType  *string                `json:"fileType"`
	Type      *ContactAttachmentType `json:"type,omitempty"`
	UpdatedAt *time.Time             `json:"updatedAt"`
}

// ContactAttachmentRepresentation defines model for ContactAttachmentRepresentation.
type ContactAttachmentRepresentation struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date     `json:"expiry"`
	FileName  *string                 `json:"fileName"`
	FileType  *string                 `json:"fileType"`
	Links     *ContactAttachmentLinks `json:"links,omitempty"`
	Type      *ContactAttachmentType  `json:"type,omitempty"`
	UpdatedAt *time.Time              `json:"updatedAt"`
}

// ContactAttachmentType defines model for ContactAttachmentType.
type ContactAttachmentType string

// ContactLinks defines model for ContactLinks.
type ContactLinks struct {
	// Attachments Attachments
	Attachments *string `json:"attachments"`

	// Candidate Optional candidate if contact is also a candidate
	Candidate *string `json:"candidate"`

	// Company Company
	Company *string `json:"company"`

	// Floats Floats
	Floats *string `json:"floats"`

	// Jobs Jobs
	Jobs *string `json:"jobs"`

	// Notes Notes
	Notes *string `json:"notes"`

	// OfficeAddress Office address
	OfficeAddress *string `json:"officeAddress"`

	// Photo Photo
	Photo *string `json:"photo"`
	Self  *string `json:"self"`

	// Skills Skills
	Skills *string `json:"skills"`

	// Submissions Submissions
	Submissions *string `json:"submissions"`
}

// ContactListRepresentation defines model for ContactListRepresentation.
type ContactListRepresentation struct {
	Items      *[]ContactSummaryModel `json:"items"`
	Links      *PageLinks             `json:"links,omitempty"`
	TotalCount int32                  `json:"totalCount"`
}

// ContactMatchedByEmailModel defines model for ContactMatchedByEmailModel.
type ContactMatchedByEmailModel struct {
	Company    *MatchedEmailAddressModelCompanyName `json:"company,omitempty"`
	ContactId  *int32                               `json:"contactId,omitempty"`
	Email      *string                              `json:"email"`
	FirstName  *string                              `json:"firstName"`
	LastName   *string                              `json:"lastName"`
	LastNoteAt *time.Time                           `json:"lastNoteAt"`
	Match      *MatchedEmailAddressModel            `json:"match,omitempty"`
	Mobile     *string                              `json:"mobile"`
	Phone      *string                              `json:"phone"`
	Position   *string                              `json:"position"`
	UpdatedAt  *time.Time                           `json:"updatedAt"`
}

// ContactMatchedByPhoneModel defines model for ContactMatchedByPhoneModel.
type ContactMatchedByPhoneModel struct {
	Company    *MatchedPhoneNumberModelCompanyName `json:"company,omitempty"`
	ContactId  *int32                              `json:"contactId,omitempty"`
	Email      *string                             `json:"email"`
	FirstName  *string                             `json:"firstName"`
	LastName   *string                             `json:"lastName"`
	LastNoteAt *time.Time                          `json:"lastNoteAt"`
	Match      *MatchedPhoneNumberModel            `json:"match,omitempty"`
	Mobile     *string                             `json:"mobile"`
	Phone      *string                             `json:"phone"`
	Position   *string                             `json:"position"`
	UpdatedAt  *time.Time                          `json:"updatedAt"`
}

// ContactNameModel defines model for ContactNameModel.
type ContactNameModel struct {
	// ContactId Unique identifier for the contact
	ContactId int32 `json:"contactId"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// Inactive Contact is no longer with the company
	Inactive *bool `json:"inactive,omitempty"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string        `json:"mobileNormalized"`
	Owner            *UserNameModel `json:"owner,omitempty"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`

	// Salutation Salutation/honorific/title
	Salutation   *string      `json:"salutation"`
	Status       *StatusModel `json:"status,omitempty"`
	Unsubscribed *bool        `json:"unsubscribed,omitempty"`
}

// ContactRepresentation defines model for ContactRepresentation.
type ContactRepresentation struct {
	Company *CompanyNameModel `json:"company,omitempty"`

	// ContactId Unique identifier for the contact
	ContactId int32                    `json:"contactId"`
	CreatedAt *time.Time               `json:"createdAt"`
	CreatedBy *UserNameModel           `json:"createdBy,omitempty"`
	Custom    *[]CustomFieldValueModel `json:"custom"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName     *string `json:"firstName"`
	HiringManager *bool   `json:"hiringManager,omitempty"`

	// Inactive Contact is no longer with the company
	Inactive *bool `json:"inactive,omitempty"`

	// LastName Last name
	LastName *string       `json:"lastName"`
	Links    *ContactLinks `json:"links,omitempty"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string              `json:"mobileNormalized"`
	OfficeAddress    *CompanyAddressModel `json:"officeAddress,omitempty"`

	// OriginalContactId contactId from the original/first company when a contact moves between companies
	OriginalContactId *int32 `json:"originalContactId"`

	// OtherEmail Other email addresses used by the contact
	OtherEmail     *[]string                  `json:"otherEmail"`
	Owner          *UserNameModel             `json:"owner,omitempty"`
	PartnerActions *[]PartnerActionStageModel `json:"partnerActions"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`

	// PreviousContactId contactId from the previous company when a contact moves between companies
	PreviousContactId *int32            `json:"previousContactId"`
	Recruiters        *[]UserNameModel  `json:"recruiters"`
	ReportsTo         *ContactNameModel `json:"reportsTo,omitempty"`

	// Salutation Salutation/honorific/title
	Salutation *string `json:"salutation"`

	// Social Contact social profiles
	Social       *map[string]string `json:"social"`
	Status       *StatusModel       `json:"status,omitempty"`
	Summary      *string            `json:"summary"`
	Unsubscribed *bool              `json:"unsubscribed,omitempty"`
	UpdatedAt    *time.Time         `json:"updatedAt"`
	UpdatedBy    *UserNameModel     `json:"updatedBy,omitempty"`
}

// ContactSummaryModel defines model for ContactSummaryModel.
type ContactSummaryModel struct {
	Company *CompanyNameModel `json:"company,omitempty"`

	// ContactId Unique identifier for the contact
	ContactId int32          `json:"contactId"`
	CreatedAt *time.Time     `json:"createdAt"`
	CreatedBy *UserNameModel `json:"createdBy,omitempty"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// Inactive Contact is no longer with the company
	Inactive *bool `json:"inactive,omitempty"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string              `json:"mobileNormalized"`
	OfficeAddress    *CompanyAddressModel `json:"officeAddress,omitempty"`

	// OriginalContactId contactId from the original/first company when a contact moves between companies
	OriginalContactId *int32         `json:"originalContactId"`
	Owner             *UserNameModel `json:"owner,omitempty"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`

	// PreviousContactId contactId from the previous company when a contact moves between companies
	PreviousContactId *int32 `json:"previousContactId"`

	// Salutation Salutation/honorific/title
	Salutation   *string        `json:"salutation"`
	Status       *StatusModel   `json:"status,omitempty"`
	Unsubscribed *bool          `json:"unsubscribed,omitempty"`
	UpdatedAt    *time.Time     `json:"updatedAt"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// ContactUserTaskModel defines model for ContactUserTaskModel.
type ContactUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	ContactId       *int32                        `json:"contactId,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// ContactUserTaskRepresentation defines model for ContactUserTaskRepresentation.
type ContactUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	ContactId       *int32                        `json:"contactId,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// CountryListRepresentation defines model for CountryListRepresentation.
type CountryListRepresentation struct {
	Items *[]CountryModel `json:"items"`
	Links *ModelLinks     `json:"links,omitempty"`
}

// CountryModel defines model for CountryModel.
type CountryModel struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

// CreatedOpportunityModel defines model for CreatedOpportunityModel.
type CreatedOpportunityModel struct {
	OpportunityId *openapi_types.UUID `json:"opportunityId,omitempty"`
}

// CurrentEmploymentModel defines model for CurrentEmploymentModel.
type CurrentEmploymentModel struct {
	Employer *string        `json:"employer"`
	Position *string        `json:"position"`
	Salary   *SalaryModel   `json:"salary,omitempty"`
	WorkType *WorkTypeModel `json:"workType,omitempty"`
}

// CustomFieldListRepresentation defines model for CustomFieldListRepresentation.
type CustomFieldListRepresentation struct {
	Items *[]CustomFieldModel `json:"items"`
	Links *ModelLinks         `json:"links,omitempty"`
}

// CustomFieldModel defines model for CustomFieldModel.
type CustomFieldModel struct {
	FieldId int32 `json:"fieldId"`

	// Mandatory Field is mandatory and a value must be provided
	Mandatory *bool `json:"mandatory"`

	// MaxLength Maximum length of a text field
	MaxLength *int32 `json:"maxLength"`

	// MultiLine Text field can contain a multi-line value
	MultiLine *bool `json:"multiLine"`

	// MultiSelect List field allows multiple selections
	MultiSelect *bool  `json:"multiSelect"`
	Name        string `json:"name"`

	// Type The type of value a custom field expects
	Type CustomFieldType `json:"type"`

	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// CustomFieldRepresentation defines model for CustomFieldRepresentation.
type CustomFieldRepresentation struct {
	FieldId int32       `json:"fieldId"`
	Links   *ModelLinks `json:"links,omitempty"`

	// Mandatory Field is mandatory and a value must be provided
	Mandatory *bool `json:"mandatory"`

	// MaxLength Maximum length of a text field
	MaxLength *int32 `json:"maxLength"`

	// MultiLine Text field can contain a multi-line value
	MultiLine *bool `json:"multiLine"`

	// MultiSelect List field allows multiple selections
	MultiSelect *bool  `json:"multiSelect"`
	Name        string `json:"name"`

	// Type The type of value a custom field expects
	Type CustomFieldType `json:"type"`

	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// CustomFieldType The type of value a custom field expects
type CustomFieldType string

// CustomFieldValueModel Custom field value
type CustomFieldValueModel struct {
	FieldId int32  `json:"fieldId"`
	Name    string `json:"name"`

	// Type The type of value a custom field expects
	Type CustomFieldType `json:"type"`

	// Value Text, List or Date value for this custom field (depending on the field "type")
	Value *interface{} `json:"value"`
}

// DateRangeModel defines model for DateRangeModel.
type DateRangeModel struct {
	End   openapi_types.Date `json:"end"`
	Start openapi_types.Date `json:"start"`
}

// DayOfWeek defines model for DayOfWeek.
type DayOfWeek string

// DeletedCandidateListModel defines model for DeletedCandidateListModel.
type DeletedCandidateListModel struct {
	Items *[]DeletedCandidateModel `json:"items"`
}

// DeletedCandidateModel defines model for DeletedCandidateModel.
type DeletedCandidateModel struct {
	CandidateId *int32     `json:"candidateId,omitempty"`
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
}

// DeletedCompanyListModel defines model for DeletedCompanyListModel.
type DeletedCompanyListModel struct {
	Items *[]DeletedCompanyModel `json:"items"`
}

// DeletedCompanyModel defines model for DeletedCompanyModel.
type DeletedCompanyModel struct {
	CompanyId *int32     `json:"companyId,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

// DeletedContactListModel defines model for DeletedContactListModel.
type DeletedContactListModel struct {
	Items *[]DeletedContactModel `json:"items"`
}

// DeletedContactModel defines model for DeletedContactModel.
type DeletedContactModel struct {
	ContactId *int32     `json:"contactId,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

// DeletedJobApplicationListModel defines model for DeletedJobApplicationListModel.
type DeletedJobApplicationListModel struct {
	Items *[]DeletedJobApplicationModel `json:"items"`
}

// DeletedJobApplicationModel defines model for DeletedJobApplicationModel.
type DeletedJobApplicationModel struct {
	ApplicationId *int64     `json:"applicationId,omitempty"`
	DeletedAt     *time.Time `json:"deletedAt,omitempty"`
}

// DeletedJobOrderListModel defines model for DeletedJobOrderListModel.
type DeletedJobOrderListModel struct {
	Items *[]DeletedJobOrderModel `json:"items"`
}

// DeletedJobOrderModel defines model for DeletedJobOrderModel.
type DeletedJobOrderModel struct {
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	JobId     *int32     `json:"jobId,omitempty"`
}

// DeletedPlacementListModel defines model for DeletedPlacementListModel.
type DeletedPlacementListModel struct {
	Items *[]DeletedPlacementModel `json:"items"`
}

// DeletedPlacementModel defines model for DeletedPlacementModel.
type DeletedPlacementModel struct {
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
	PlacementId *int32     `json:"placementId,omitempty"`
}

// DurationModel defines model for DurationModel.
type DurationModel struct {
	Period *int32        `json:"period,omitempty"`
	Unit   *DurationUnit `json:"unit,omitempty"`
}

// DurationUnit defines model for DurationUnit.
type DurationUnit string

// EmailAddressMatchType defines model for EmailAddressMatchType.
type EmailAddressMatchType string

// ErrorCode defines model for ErrorCode.
type ErrorCode string

// ErrorItemModel defines model for ErrorItemModel.
type ErrorItemModel struct {
	Code    *ErrorCode `json:"code,omitempty"`
	Fields  *[]string  `json:"fields"`
	Message *string    `json:"message"`
}

// ErrorModel defines model for ErrorModel.
type ErrorModel struct {
	Errors  *[]ErrorItemModel `json:"errors"`
	Message string            `json:"message"`
}

// EventName defines model for EventName.
type EventName string

// FindCandidateActivitySettingsQuery defines model for FindCandidateActivitySettingsQuery.
type FindCandidateActivitySettingsQuery = map[string]interface{}

// FindCategoriesEmbed defines model for FindCategoriesEmbed.
type FindCategoriesEmbed string

// FindCompanyActivitySettingsQuery defines model for FindCompanyActivitySettingsQuery.
type FindCompanyActivitySettingsQuery = map[string]interface{}

// FindCompanyWorkflowsInclude defines model for FindCompanyWorkflowsInclude.
type FindCompanyWorkflowsInclude string

// FindContactActivitySettingsQuery defines model for FindContactActivitySettingsQuery.
type FindContactActivitySettingsQuery = map[string]interface{}

// FindJobApplicationActivitySettingsQuery defines model for FindJobApplicationActivitySettingsQuery.
type FindJobApplicationActivitySettingsQuery = map[string]interface{}

// FindJobOrderActivitySettingsQuery defines model for FindJobOrderActivitySettingsQuery.
type FindJobOrderActivitySettingsQuery = map[string]interface{}

// FindLocationsEmbed defines model for FindLocationsEmbed.
type FindLocationsEmbed string

// FindPlacementActivitySettingsQuery defines model for FindPlacementActivitySettingsQuery.
type FindPlacementActivitySettingsQuery = map[string]interface{}

// FindPlacementByExport Search for placements that should be exported to payroll, timesheets or onboarding
type FindPlacementByExport string

// FindUserTasksInclude defines model for FindUserTasksInclude.
type FindUserTasksInclude string

// FindUsersInclude defines model for FindUsersInclude.
type FindUsersInclude string

// FloatLinks defines model for FloatLinks.
type FloatLinks struct {
	// Notes Notes
	Notes *string `json:"notes"`
	Self  *string `json:"self"`
}

// FloatListRepresentation defines model for FloatListRepresentation.
type FloatListRepresentation struct {
	Items      *[]FloatSummaryModel `json:"items"`
	Links      *PageLinks           `json:"links,omitempty"`
	TotalCount int32                `json:"totalCount"`
}

// FloatRepresentation defines model for FloatRepresentation.
type FloatRepresentation struct {
	Candidate        *CandidateSummaryModel `json:"candidate,omitempty"`
	CandidateSummary *string                `json:"candidateSummary"`
	Company          *CompanyNameModel      `json:"company,omitempty"`
	Contacts         *[]ContactNameModel    `json:"contacts"`
	CreatedAt        *time.Time             `json:"createdAt"`
	CreatedBy        *UserNameModel         `json:"createdBy,omitempty"`
	FloatId          int64                  `json:"floatId"`
	JobTitle         *string                `json:"jobTitle"`
	Links            *FloatLinks            `json:"links,omitempty"`
	Owner            *UserNameModel         `json:"owner,omitempty"`
	UpdatedAt        *time.Time             `json:"updatedAt"`
	UpdatedBy        *UserNameModel         `json:"updatedBy,omitempty"`
}

// FloatSummaryModel defines model for FloatSummaryModel.
type FloatSummaryModel struct {
	Candidate *CandidateSummaryModel `json:"candidate,omitempty"`
	Company   *CompanyNameModel      `json:"company,omitempty"`
	CreatedAt *time.Time             `json:"createdAt"`
	CreatedBy *UserNameModel         `json:"createdBy,omitempty"`
	FloatId   int64                  `json:"floatId"`
	JobTitle  *string                `json:"jobTitle"`
	UpdatedAt *time.Time             `json:"updatedAt"`
	UpdatedBy *UserNameModel         `json:"updatedBy,omitempty"`
}

// FolderLinks defines model for FolderLinks.
type FolderLinks struct {
	Self *string `json:"self"`
}

// FolderListRepresentation defines model for FolderListRepresentation.
type FolderListRepresentation struct {
	Items      *[]FolderNameModel `json:"items"`
	Links      *PageLinks         `json:"links,omitempty"`
	TotalCount int32              `json:"totalCount"`
}

// FolderNameModel defines model for FolderNameModel.
type FolderNameModel struct {
	CreatedAt *time.Time     `json:"createdAt,omitempty"`
	FolderId  int64          `json:"folderId"`
	Name      *string        `json:"name"`
	Owner     *UserNameModel `json:"owner,omitempty"`
	UpdatedAt *time.Time     `json:"updatedAt,omitempty"`
}

// FolderOwnerStatus defines model for FolderOwnerStatus.
type FolderOwnerStatus string

// FolderRepresentation defines model for FolderRepresentation.
type FolderRepresentation struct {
	Applications *[]JobApplicationSummaryModel `json:"applications"`
	Candidates   *[]CandidateNameModel         `json:"candidates"`
	Companies    *[]CompanyNameModel           `json:"companies"`
	Contacts     *[]ContactNameModel           `json:"contacts"`
	CreatedAt    *time.Time                    `json:"createdAt,omitempty"`
	EntityIDs    *map[string][]int64           `json:"entityIDs"`
	FolderId     int64                         `json:"folderId"`
	Jobs         *[]JobOrderTitleModel         `json:"jobs"`
	Links        *FolderLinks                  `json:"links,omitempty"`
	Name         *string                       `json:"name"`
	Owner        *UserNameModel                `json:"owner,omitempty"`
	Placements   *[]PlacementSummaryModel      `json:"placements"`
	SharedWith   *[]UserNameModel              `json:"sharedWith"`
	UpdatedAt    *time.Time                    `json:"updatedAt,omitempty"`
}

// GetJobApplicationStatusByWorkflowListQuery defines model for GetJobApplicationStatusByWorkflowListQuery.
type GetJobApplicationStatusByWorkflowListQuery = map[string]interface{}

// InterviewEvaluationListRepresentation defines model for InterviewEvaluationListRepresentation.
type InterviewEvaluationListRepresentation struct {
	Items *[]InterviewEvaluationModel `json:"items"`
	Links *ModelLinks                 `json:"links,omitempty"`
}

// InterviewEvaluationModel defines model for InterviewEvaluationModel.
type InterviewEvaluationModel struct {
	Comments   *string                           `json:"comments"`
	Contact    *ContactNameModel                 `json:"contact,omitempty"`
	ExpiresAt  *time.Time                        `json:"expiresAt,omitempty"`
	HasReplied *bool                             `json:"hasReplied,omitempty"`
	Rating     *[]InterviewEvaluationRatingModel `json:"rating"`
	User       *UserNameModel                    `json:"user,omitempty"`
}

// InterviewEvaluationRatingModel defines model for InterviewEvaluationRatingModel.
type InterviewEvaluationRatingModel struct {
	// Criteria Criteria being rated
	Criteria *string `json:"criteria"`

	// Rating Criteria rating, from 0 to 100
	Rating *int32 `json:"rating"`
}

// InterviewEvaluationRepresentation defines model for InterviewEvaluationRepresentation.
type InterviewEvaluationRepresentation struct {
	Comments   *string                           `json:"comments"`
	Contact    *ContactNameModel                 `json:"contact,omitempty"`
	ExpiresAt  *time.Time                        `json:"expiresAt,omitempty"`
	HasReplied *bool                             `json:"hasReplied,omitempty"`
	Links      *ModelLinks                       `json:"links,omitempty"`
	Rating     *[]InterviewEvaluationRatingModel `json:"rating"`
	User       *UserNameModel                    `json:"user,omitempty"`
}

// InterviewInterviewersModel Internal/user and External/contact interviewers
type InterviewInterviewersModel struct {
	// Contacts External/contact interviewers
	Contacts *[]ContactNameModel `json:"contacts"`

	// Users Internal/user interviewers
	Users *[]UserNameModel `json:"users"`
}

// InterviewLinks defines model for InterviewLinks.
type InterviewLinks struct {
	// Evaluations Evaluations and ratings
	Evaluations *string `json:"evaluations"`
	Self        *string `json:"self"`
}

// InterviewListRepresentation defines model for InterviewListRepresentation.
type InterviewListRepresentation struct {
	Items      *[]InterviewSummaryModel `json:"items"`
	Links      *PageLinks               `json:"links,omitempty"`
	TotalCount int32                    `json:"totalCount"`
}

// InterviewModel defines model for InterviewModel.
type InterviewModel struct {
	CreatedAt   *time.Time                 `json:"createdAt,omitempty"`
	CreatedBy   *UserNameModel             `json:"createdBy,omitempty"`
	EndAt       *time.Time                 `json:"endAt,omitempty"`
	InterviewId int32                      `json:"interviewId"`
	Interviewee JobApplicationSummaryModel `json:"interviewee"`

	// Interviewers Internal/user and External/contact interviewers
	Interviewers *InterviewInterviewersModel `json:"interviewers,omitempty"`
	Location     *string                     `json:"location"`
	StartAt      *time.Time                  `json:"startAt,omitempty"`
	Type         InterviewType               `json:"type"`
	UpdatedAt    *time.Time                  `json:"updatedAt,omitempty"`
}

// InterviewRepresentation defines model for InterviewRepresentation.
type InterviewRepresentation struct {
	CreatedAt   *time.Time                 `json:"createdAt,omitempty"`
	CreatedBy   *UserNameModel             `json:"createdBy,omitempty"`
	EndAt       *time.Time                 `json:"endAt,omitempty"`
	InterviewId int32                      `json:"interviewId"`
	Interviewee JobApplicationSummaryModel `json:"interviewee"`

	// Interviewers Internal/user and External/contact interviewers
	Interviewers *InterviewInterviewersModel `json:"interviewers,omitempty"`
	Links        *InterviewLinks             `json:"links,omitempty"`
	Location     *string                     `json:"location"`
	StartAt      *time.Time                  `json:"startAt,omitempty"`
	Type         InterviewType               `json:"type"`
	UpdatedAt    *time.Time                  `json:"updatedAt,omitempty"`
}

// InterviewSummaryModel defines model for InterviewSummaryModel.
type InterviewSummaryModel struct {
	CreatedAt   *time.Time                 `json:"createdAt,omitempty"`
	CreatedBy   *UserNameModel             `json:"createdBy,omitempty"`
	EndAt       *time.Time                 `json:"endAt,omitempty"`
	InterviewId int32                      `json:"interviewId"`
	Interviewee JobApplicationSummaryModel `json:"interviewee"`

	// Interviewers Internal/user and External/contact interviewers
	Interviewers *InterviewInterviewersModel `json:"interviewers,omitempty"`
	Location     *string                     `json:"location"`
	StartAt      *time.Time                  `json:"startAt,omitempty"`
	Type         InterviewType               `json:"type"`
	UpdatedAt    *time.Time                  `json:"updatedAt,omitempty"`
}

// InterviewType defines model for InterviewType.
type InterviewType string

// JobAdLinks defines model for JobAdLinks.
type JobAdLinks struct {
	// Applications Job applications
	Applications *string `json:"applications"`

	// Company Company
	Company *string `json:"company"`

	// Contact Contact
	Contact *string `json:"contact"`

	// Job Job
	Job  *string `json:"job"`
	Self *string `json:"self"`
}

// JobAdListRepresentation defines model for JobAdListRepresentation.
type JobAdListRepresentation struct {
	Items      *[]JobAdSummaryModel `json:"items"`
	Links      *PageLinks           `json:"links,omitempty"`
	TotalCount int32                `json:"totalCount"`
}

// JobAdOtherApplyUrlModel defines model for JobAdOtherApplyUrlModel.
type JobAdOtherApplyUrlModel struct {
	Name *string `json:"name"`
	Url  *string `json:"url"`
}

// JobAdPortalChildFieldModel defines model for JobAdPortalChildFieldModel.
type JobAdPortalChildFieldModel struct {
	ExternalValue *string `json:"externalValue"`
	FieldId       *int32  `json:"fieldId,omitempty"`
	FieldName     *string `json:"fieldName"`
	Value         *string `json:"value"`
	ValueId       *int32  `json:"valueId"`
}

// JobAdPortalFieldModel defines model for JobAdPortalFieldModel.
type JobAdPortalFieldModel struct {
	ExternalValue *string                       `json:"externalValue"`
	FieldId       *int32                        `json:"fieldId,omitempty"`
	FieldName     *string                       `json:"fieldName"`
	Fields        *[]JobAdPortalChildFieldModel `json:"fields"`
	Value         *string                       `json:"value"`
	ValueId       *int32                        `json:"valueId"`
}

// JobAdPortalModel defines model for JobAdPortalModel.
type JobAdPortalModel struct {
	Fields *[]JobAdPortalFieldModel `json:"fields"`

	// HotJob Classed as a hot job
	HotJob   *bool                   `json:"hotJob,omitempty"`
	Salary   *JobAdPortalSalaryModel `json:"salary,omitempty"`
	Template *string                 `json:"template"`
}

// JobAdPortalSalaryModel defines model for JobAdPortalSalaryModel.
type JobAdPortalSalaryModel struct {
	Details  *string        `json:"details"`
	RateHigh *float64       `json:"rateHigh"`
	RateLow  *float64       `json:"rateLow"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`
}

// JobAdPortalSummaryModel defines model for JobAdPortalSummaryModel.
type JobAdPortalSummaryModel struct {
	// HotJob Classed as a hot job
	HotJob   *bool                   `json:"hotJob,omitempty"`
	Salary   *JobAdPortalSalaryModel `json:"salary,omitempty"`
	Template *string                 `json:"template"`
}

// JobAdRepresentation defines model for JobAdRepresentation.
type JobAdRepresentation struct {
	AdId           int32                          `json:"adId"`
	BulletPoints   *[]string                      `json:"bulletPoints"`
	Company        *CompanyNameModel              `json:"company,omitempty"`
	Contact        *ContactNameModel              `json:"contact,omitempty"`
	CreatedAt      *time.Time                     `json:"createdAt"`
	CreatedBy      *UserNameModel                 `json:"createdBy,omitempty"`
	Description    *string                        `json:"description"`
	ExpireAt       *time.Time                     `json:"expireAt"`
	Job            *JobOrderTitleModel            `json:"job,omitempty"`
	JobBoards      *[]JobBoardSummaryModel        `json:"jobBoards"`
	Links          *JobAdLinks                    `json:"links,omitempty"`
	OtherApplyUrls *[]JobAdOtherApplyUrlModel     `json:"otherApplyUrls"`
	Owner          *UserNameModel                 `json:"owner,omitempty"`
	PartnerActions *[]PartnerActionStageModel     `json:"partnerActions"`
	PostAt         *time.Time                     `json:"postAt"`
	Reference      *string                        `json:"reference"`
	Screening      *[]JobAdScreeningQuestionModel `json:"screening"`
	State          *string                        `json:"state"`
	Summary        *string                        `json:"summary"`
	Title          *string                        `json:"title"`
}

// JobAdScreeningAnswerType defines model for JobAdScreeningAnswerType.
type JobAdScreeningAnswerType string

// JobAdScreeningQuestionModel defines model for JobAdScreeningQuestionModel.
type JobAdScreeningQuestionModel struct {
	AnswerType *JobAdScreeningAnswerType `json:"answerType,omitempty"`

	// Mandatory Field is mandatory and a value must be provided
	Mandatory *bool `json:"mandatory"`

	// MaxLength Maximum length of a text field
	MaxLength *int32 `json:"maxLength"`

	// MultiSelect List selection allows multiple values
	MultiSelect *bool   `json:"multiSelect"`
	Question    *string `json:"question"`

	// Values List of predefined values to select from
	Values *[]string `json:"values"`
}

// JobAdSummaryModel defines model for JobAdSummaryModel.
type JobAdSummaryModel struct {
	AdId         int32          `json:"adId"`
	BulletPoints *[]string      `json:"bulletPoints"`
	ExpireAt     *time.Time     `json:"expireAt"`
	Owner        *UserNameModel `json:"owner,omitempty"`
	PostAt       *time.Time     `json:"postAt"`
	Reference    *string        `json:"reference"`
	State        *string        `json:"state"`
	Summary      *string        `json:"summary"`
	Title        *string        `json:"title"`
}

// JobApplicationActivityListRepresentation defines model for JobApplicationActivityListRepresentation.
type JobApplicationActivityListRepresentation struct {
	Items      *[]JobApplicationActivityModel `json:"items"`
	Links      *PageLinks                     `json:"links,omitempty"`
	TotalCount int32                          `json:"totalCount"`
}

// JobApplicationActivityModel defines model for JobApplicationActivityModel.
type JobApplicationActivityModel struct {
	ActivityId    *int64                   `json:"activityId,omitempty"`
	ActivityName  *string                  `json:"activityName"`
	ActivityType  *string                  `json:"activityType"`
	ApplicationId *int64                   `json:"applicationId,omitempty"`
	CreatedAt     *time.Time               `json:"createdAt,omitempty"`
	CreatedBy     *UserNameModel           `json:"createdBy,omitempty"`
	Details       *ActivityDetailListModel `json:"details,omitempty"`
	Status        *string                  `json:"status"`
	UpdatedAt     *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy     *UserNameModel           `json:"updatedBy,omitempty"`
}

// JobApplicationActivityRepresentation defines model for JobApplicationActivityRepresentation.
type JobApplicationActivityRepresentation struct {
	ActivityId    *int64                   `json:"activityId,omitempty"`
	ActivityName  *string                  `json:"activityName"`
	ActivityType  *string                  `json:"activityType"`
	ApplicationId *int64                   `json:"applicationId,omitempty"`
	CreatedAt     *time.Time               `json:"createdAt,omitempty"`
	CreatedBy     *UserNameModel           `json:"createdBy,omitempty"`
	Details       *ActivityDetailListModel `json:"details,omitempty"`
	Links         *ModelLinks              `json:"links,omitempty"`
	Status        *string                  `json:"status"`
	UpdatedAt     *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy     *UserNameModel           `json:"updatedBy,omitempty"`
}

// JobApplicationActivitySettingModel defines model for JobApplicationActivitySettingModel.
type JobApplicationActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// JobApplicationActivitySettingSummaryModel defines model for JobApplicationActivitySettingSummaryModel.
type JobApplicationActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// JobApplicationActivitySettingsListModel defines model for JobApplicationActivitySettingsListModel.
type JobApplicationActivitySettingsListModel struct {
	Items *[]JobApplicationActivitySettingSummaryModel `json:"items"`
}

// JobApplicationActivitySummaryListModel defines model for JobApplicationActivitySummaryListModel.
type JobApplicationActivitySummaryListModel struct {
	Items *[]JobApplicationActivitySummaryModel `json:"items"`
}

// JobApplicationActivitySummaryModel defines model for JobApplicationActivitySummaryModel.
type JobApplicationActivitySummaryModel struct {
	ActivityId    *int64         `json:"activityId,omitempty"`
	ActivityName  *string        `json:"activityName"`
	ActivityType  *string        `json:"activityType"`
	ApplicationId *int64         `json:"applicationId,omitempty"`
	CreatedAt     *time.Time     `json:"createdAt,omitempty"`
	CreatedBy     *UserNameModel `json:"createdBy,omitempty"`
	Status        *string        `json:"status"`
	UpdatedAt     *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy     *UserNameModel `json:"updatedBy,omitempty"`
}

// JobApplicationLinks defines model for JobApplicationLinks.
type JobApplicationLinks struct {
	// Attachments Attachments
	Attachments *string `json:"attachments"`
	CoverLetter *string `json:"coverLetter"`
	Resume      *string `json:"resume"`
	Self        *string `json:"self"`
}

// JobApplicationListRepresentation defines model for JobApplicationListRepresentation.
type JobApplicationListRepresentation struct {
	Items      *[]JobApplicationSummaryModel `json:"items"`
	Links      *PageLinks                    `json:"links,omitempty"`
	TotalCount int32                         `json:"totalCount"`
}

// JobApplicationRepresentation defines model for JobApplicationRepresentation.
type JobApplicationRepresentation struct {
	ApplicationId    int64                                `json:"applicationId"`
	Candidate        *CandidateNameModel                  `json:"candidate,omitempty"`
	CreatedAt        *time.Time                           `json:"createdAt"`
	CreatedBy        *UserNameModel                       `json:"createdBy,omitempty"`
	Custom           *[]CustomFieldValueModel             `json:"custom"`
	Job              *JobOrderTitleModel                  `json:"job,omitempty"`
	JobAd            *JobAdSummaryModel                   `json:"jobAd,omitempty"`
	JobReference     *string                              `json:"jobReference"`
	JobTitle         *string                              `json:"jobTitle"`
	Links            *JobApplicationLinks                 `json:"links,omitempty"`
	Manual           *bool                                `json:"manual,omitempty"`
	Owner            *UserNameModel                       `json:"owner,omitempty"`
	PartnerActions   *[]PartnerActionStageModel           `json:"partnerActions"`
	Rating           *int32                               `json:"rating"`
	Review           *JobApplicationReviewModel           `json:"review,omitempty"`
	Screening        *JobApplicationScreeningModel        `json:"screening,omitempty"`
	Source           *string                              `json:"source"`
	Status           *JobApplicationStatusModel           `json:"status,omitempty"`
	SubmittedDetails *JobApplicationSubmittedDetailsModel `json:"submittedDetails,omitempty"`
	UpdatedAt        *time.Time                           `json:"updatedAt"`
	UpdatedBy        *UserNameModel                       `json:"updatedBy,omitempty"`
}

// JobApplicationReviewModel defines model for JobApplicationReviewModel.
type JobApplicationReviewModel struct {
	ReviewedAt  *time.Time                `json:"reviewedAt"`
	ReviewedBy  *ContactNameModel         `json:"reviewedBy,omitempty"`
	Stage       JobApplicationReviewStage `json:"stage"`
	SubmittedAt *time.Time                `json:"submittedAt"`
	SubmittedBy *UserNameModel            `json:"submittedBy,omitempty"`
}

// JobApplicationReviewStage defines model for JobApplicationReviewStage.
type JobApplicationReviewStage string

// JobApplicationScreeningModel defines model for JobApplicationScreeningModel.
type JobApplicationScreeningModel struct {
	Questions *[]JobApplicationScreeningQuestionModel `json:"questions"`
	Score     *float64                                `json:"score"`
}

// JobApplicationScreeningQuestionModel defines model for JobApplicationScreeningQuestionModel.
type JobApplicationScreeningQuestionModel struct {
	Answers  *[]string `json:"answers"`
	Question *string   `json:"question"`
	Score    *float64  `json:"score"`
}

// JobApplicationStatusByWorkflowListRepresentation defines model for JobApplicationStatusByWorkflowListRepresentation.
type JobApplicationStatusByWorkflowListRepresentation struct {
	Items *[]JobApplicationStatusByWorkflowModel `json:"items"`
	Links *ModelLinks                            `json:"links,omitempty"`
}

// JobApplicationStatusByWorkflowModel defines model for JobApplicationStatusByWorkflowModel.
type JobApplicationStatusByWorkflowModel struct {
	Progress *SimpleWorkflow `json:"progress,omitempty"`

	// Stage Name of the workflow stage
	Stage string `json:"stage"`

	// StageIndex Position in the workflow
	StageIndex *int32 `json:"stageIndex"`

	// Status Ordered status list for this workflow stage
	Status *[]JobApplicationStatusNameModel `json:"status"`

	// Step [Obsolete] Please reference stageIndex instead
	Step *int32 `json:"step"`
}

// JobApplicationStatusLinks defines model for JobApplicationStatusLinks.
type JobApplicationStatusLinks struct {
	Self *string `json:"self"`
}

// JobApplicationStatusListRepresentation defines model for JobApplicationStatusListRepresentation.
type JobApplicationStatusListRepresentation struct {
	Items *[]JobApplicationStatusModel `json:"items"`
	Links *ModelLinks                  `json:"links,omitempty"`
}

// JobApplicationStatusModel defines model for JobApplicationStatusModel.
type JobApplicationStatusModel struct {
	Active          *bool                        `json:"active,omitempty"`
	Default         *bool                        `json:"default,omitempty"`
	DefaultRejected *bool                        `json:"defaultRejected,omitempty"`
	Name            string                       `json:"name"`
	Rejected        *bool                        `json:"rejected,omitempty"`
	StatusId        int32                        `json:"statusId"`
	Workflow        *JobApplicationWorkflowModel `json:"workflow,omitempty"`
}

// JobApplicationStatusNameModel defines model for JobApplicationStatusNameModel.
type JobApplicationStatusNameModel struct {
	Active          *bool  `json:"active,omitempty"`
	Default         *bool  `json:"default,omitempty"`
	DefaultRejected *bool  `json:"defaultRejected,omitempty"`
	Name            string `json:"name"`
	Rejected        *bool  `json:"rejected,omitempty"`
	StatusId        int32  `json:"statusId"`
}

// JobApplicationStatusRepresentation defines model for JobApplicationStatusRepresentation.
type JobApplicationStatusRepresentation struct {
	Active          *bool                        `json:"active,omitempty"`
	Default         *bool                        `json:"default,omitempty"`
	DefaultRejected *bool                        `json:"defaultRejected,omitempty"`
	Links           *JobApplicationStatusLinks   `json:"links,omitempty"`
	Name            string                       `json:"name"`
	Rejected        *bool                        `json:"rejected,omitempty"`
	StatusId        int32                        `json:"statusId"`
	Workflow        *JobApplicationWorkflowModel `json:"workflow,omitempty"`
}

// JobApplicationSubmittedDetailsModel defines model for JobApplicationSubmittedDetailsModel.
type JobApplicationSubmittedDetailsModel struct {
	Email     *string `json:"email"`
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
	Mobile    *string `json:"mobile"`
	Phone     *string `json:"phone"`
}

// JobApplicationSummaryModel defines model for JobApplicationSummaryModel.
type JobApplicationSummaryModel struct {
	ApplicationId int64                      `json:"applicationId"`
	Candidate     *CandidateNameModel        `json:"candidate,omitempty"`
	CreatedAt     *time.Time                 `json:"createdAt"`
	CreatedBy     *UserNameModel             `json:"createdBy,omitempty"`
	Job           *JobOrderTitleModel        `json:"job,omitempty"`
	JobAd         *JobAdSummaryModel         `json:"jobAd,omitempty"`
	JobReference  *string                    `json:"jobReference"`
	JobTitle      *string                    `json:"jobTitle"`
	Manual        *bool                      `json:"manual,omitempty"`
	Owner         *UserNameModel             `json:"owner,omitempty"`
	Rating        *int32                     `json:"rating"`
	Review        *JobApplicationReviewModel `json:"review,omitempty"`
	Source        *string                    `json:"source"`
	Status        *JobApplicationStatusModel `json:"status,omitempty"`
	UpdatedAt     *time.Time                 `json:"updatedAt"`
	UpdatedBy     *UserNameModel             `json:"updatedBy,omitempty"`
}

// JobApplicationUserTaskModel defines model for JobApplicationUserTaskModel.
type JobApplicationUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	ApplicationId   *int64                        `json:"applicationId,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// JobApplicationUserTaskRepresentation defines model for JobApplicationUserTaskRepresentation.
type JobApplicationUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	ApplicationId   *int64                        `json:"applicationId,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// JobApplicationWorkflowModel defines model for JobApplicationWorkflowModel.
type JobApplicationWorkflowModel struct {
	Progress *SimpleWorkflow `json:"progress,omitempty"`

	// Stage Name of the workflow stage
	Stage string `json:"stage"`

	// StageIndex Position in the workflow
	StageIndex *int32 `json:"stageIndex"`

	// Step [Obsolete] Please reference stageIndex instead
	Step *int32 `json:"step"`
}

// JobBoardJobAdLinks defines model for JobBoardJobAdLinks.
type JobBoardJobAdLinks struct {
	Applications *string               `json:"applications"`
	Self         *string               `json:"self"`
	Ui           *JobBoardJobAdUILinks `json:"ui,omitempty"`
}

// JobBoardJobAdListRepresentation defines model for JobBoardJobAdListRepresentation.
type JobBoardJobAdListRepresentation struct {
	Items      *[]JobBoardJobAdSummaryModel `json:"items"`
	Links      *ModelLinks                  `json:"links,omitempty"`
	TotalCount int32                        `json:"totalCount"`
}

// JobBoardJobAdRepresentation defines model for JobBoardJobAdRepresentation.
type JobBoardJobAdRepresentation struct {
	AdId         *int32                         `json:"adId,omitempty"`
	BulletPoints *[]string                      `json:"bulletPoints"`
	Description  *string                        `json:"description"`
	ExpiresAt    *time.Time                     `json:"expiresAt"`
	Links        *JobBoardJobAdLinks            `json:"links,omitempty"`
	Portal       *JobAdPortalModel              `json:"portal,omitempty"`
	PostedAt     *time.Time                     `json:"postedAt"`
	Reference    *string                        `json:"reference"`
	Screening    *[]JobAdScreeningQuestionModel `json:"screening"`
	Summary      *string                        `json:"summary"`
	Title        *string                        `json:"title"`
	UpdatedAt    *time.Time                     `json:"updatedAt"`
}

// JobBoardJobAdSummaryModel defines model for JobBoardJobAdSummaryModel.
type JobBoardJobAdSummaryModel struct {
	AdId         *int32                   `json:"adId,omitempty"`
	BulletPoints *[]string                `json:"bulletPoints"`
	ExpiresAt    *time.Time               `json:"expiresAt"`
	Portal       *JobAdPortalSummaryModel `json:"portal,omitempty"`
	PostedAt     *time.Time               `json:"postedAt"`
	Reference    *string                  `json:"reference"`
	Summary      *string                  `json:"summary"`
	Title        *string                  `json:"title"`
	UpdatedAt    *time.Time               `json:"updatedAt"`
}

// JobBoardJobAdUILinks defines model for JobBoardJobAdUILinks.
type JobBoardJobAdUILinks struct {
	Applications *string `json:"applications"`
	Self         *string `json:"self"`
}

// JobBoardListModel defines model for JobBoardListModel.
type JobBoardListModel struct {
	Items *[]JobBoardSummaryModel `json:"items"`
}

// JobBoardModel defines model for JobBoardModel.
type JobBoardModel struct {
	BoardId   *int32               `json:"boardId,omitempty"`
	Name      *string              `json:"name"`
	Portal    *JobBoardPortalModel `json:"portal,omitempty"`
	Reference *string              `json:"reference"`
}

// JobBoardPortalChildFieldModel defines model for JobBoardPortalChildFieldModel.
type JobBoardPortalChildFieldModel struct {
	FieldId    *int32                           `json:"fieldId,omitempty"`
	ListValues *[]JobBoardPortalFieldValueModel `json:"listValues"`
	Name       *string                          `json:"name"`
	Type       *JobBoardPortalFieldType         `json:"type,omitempty"`
}

// JobBoardPortalFieldModel defines model for JobBoardPortalFieldModel.
type JobBoardPortalFieldModel struct {
	FieldId    *int32                           `json:"fieldId,omitempty"`
	Fields     *[]JobBoardPortalChildFieldModel `json:"fields"`
	ListValues *[]JobBoardPortalFieldValueModel `json:"listValues"`
	Name       *string                          `json:"name"`
	Type       *JobBoardPortalFieldType         `json:"type,omitempty"`
}

// JobBoardPortalFieldType defines model for JobBoardPortalFieldType.
type JobBoardPortalFieldType string

// JobBoardPortalFieldValueModel defines model for JobBoardPortalFieldValueModel.
type JobBoardPortalFieldValueModel struct {
	// ExternalValue Job board partner defined field value
	ExternalValue *string `json:"externalValue"`
	FieldId       *int32  `json:"fieldId,omitempty"`
	ParentValueId *int32  `json:"parentValueId"`
	Value         *string `json:"value"`
	ValueId       *int32  `json:"valueId,omitempty"`
}

// JobBoardPortalModel defines model for JobBoardPortalModel.
type JobBoardPortalModel struct {
	Fields *[]JobBoardPortalFieldModel `json:"fields"`
}

// JobBoardSummaryModel defines model for JobBoardSummaryModel.
type JobBoardSummaryModel struct {
	BoardId   *int32  `json:"boardId,omitempty"`
	Name      *string `json:"name"`
	Reference *string `json:"reference"`
}

// JobOrderActivityListRepresentation defines model for JobOrderActivityListRepresentation.
type JobOrderActivityListRepresentation struct {
	Items      *[]JobOrderActivityModel `json:"items"`
	Links      *PageLinks               `json:"links,omitempty"`
	TotalCount int32                    `json:"totalCount"`
}

// JobOrderActivityModel defines model for JobOrderActivityModel.
type JobOrderActivityModel struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	InvoiceId    *int32                   `json:"invoiceId"`
	JobId        *int32                   `json:"jobId,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// JobOrderActivityRepresentation defines model for JobOrderActivityRepresentation.
type JobOrderActivityRepresentation struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	InvoiceId    *int32                   `json:"invoiceId"`
	JobId        *int32                   `json:"jobId,omitempty"`
	Links        *ModelLinks              `json:"links,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// JobOrderActivitySettingModel defines model for JobOrderActivitySettingModel.
type JobOrderActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// JobOrderActivitySettingSummaryModel defines model for JobOrderActivitySettingSummaryModel.
type JobOrderActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// JobOrderActivitySettingsListModel defines model for JobOrderActivitySettingsListModel.
type JobOrderActivitySettingsListModel struct {
	Items *[]JobOrderActivitySettingSummaryModel `json:"items"`
}

// JobOrderActivitySummaryListModel defines model for JobOrderActivitySummaryListModel.
type JobOrderActivitySummaryListModel struct {
	Items *[]JobOrderActivitySummaryModel `json:"items"`
}

// JobOrderActivitySummaryModel defines model for JobOrderActivitySummaryModel.
type JobOrderActivitySummaryModel struct {
	ActivityId   *int64         `json:"activityId,omitempty"`
	ActivityName *string        `json:"activityName"`
	ActivityType *string        `json:"activityType"`
	CreatedAt    *time.Time     `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`
	JobId        *int32         `json:"jobId,omitempty"`
	Status       *string        `json:"status"`
	UpdatedAt    *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// JobOrderAttachmentCategoryListRepresentation defines model for JobOrderAttachmentCategoryListRepresentation.
type JobOrderAttachmentCategoryListRepresentation struct {
	Items *[]JobOrderAttachmentCategoryModel `json:"items"`
	Links *ModelLinks                        `json:"links,omitempty"`
}

// JobOrderAttachmentCategoryModel defines model for JobOrderAttachmentCategoryModel.
type JobOrderAttachmentCategoryModel struct {
	Category *string                 `json:"category"`
	Type     *JobOrderAttachmentType `json:"type,omitempty"`
}

// JobOrderAttachmentLinks defines model for JobOrderAttachmentLinks.
type JobOrderAttachmentLinks struct {
	Self *string `json:"self"`
}

// JobOrderAttachmentListRepresentation defines model for JobOrderAttachmentListRepresentation.
type JobOrderAttachmentListRepresentation struct {
	Items      *[]JobOrderAttachmentModel `json:"items"`
	Links      *PageLinks                 `json:"links,omitempty"`
	TotalCount int32                      `json:"totalCount"`
}

// JobOrderAttachmentModel defines model for JobOrderAttachmentModel.
type JobOrderAttachmentModel struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date     `json:"expiry"`
	FileName  *string                 `json:"fileName"`
	FileType  *string                 `json:"fileType"`
	Type      *JobOrderAttachmentType `json:"type,omitempty"`
	UpdatedAt *time.Time              `json:"updatedAt"`
}

// JobOrderAttachmentRepresentation defines model for JobOrderAttachmentRepresentation.
type JobOrderAttachmentRepresentation struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date      `json:"expiry"`
	FileName  *string                  `json:"fileName"`
	FileType  *string                  `json:"fileType"`
	Links     *JobOrderAttachmentLinks `json:"links,omitempty"`
	Type      *JobOrderAttachmentType  `json:"type,omitempty"`
	UpdatedAt *time.Time               `json:"updatedAt"`
}

// JobOrderAttachmentType defines model for JobOrderAttachmentType.
type JobOrderAttachmentType string

// JobOrderCategoryModel defines model for JobOrderCategoryModel.
type JobOrderCategoryModel struct {
	CategoryId  int32                     `json:"categoryId"`
	Name        string                    `json:"name"`
	SubCategory *JobOrderSubCategoryModel `json:"subCategory,omitempty"`
}

// JobOrderFeeModel defines model for JobOrderFeeModel.
type JobOrderFeeModel struct {
	Currency       *string              `json:"currency"`
	EstimatedTotal *float64             `json:"estimatedTotal"`
	Rate           *float64             `json:"rate"`
	RateType       *JobOrderFeeRateType `json:"rateType,omitempty"`
}

// JobOrderFeeRateType defines model for JobOrderFeeRateType.
type JobOrderFeeRateType string

// JobOrderInvoiceExpenseListModel defines model for JobOrderInvoiceExpenseListModel.
type JobOrderInvoiceExpenseListModel struct {
	Items *[]JobOrderInvoiceExpenseModel `json:"items"`
	Total *float64                       `json:"total"`
}

// JobOrderInvoiceExpenseModel defines model for JobOrderInvoiceExpenseModel.
type JobOrderInvoiceExpenseModel struct {
	Cost        *float64 `json:"cost,omitempty"`
	Description *string  `json:"description"`
}

// JobOrderInvoiceListModel defines model for JobOrderInvoiceListModel.
type JobOrderInvoiceListModel struct {
	Invoices *[]JobOrderInvoiceSummaryModel `json:"invoices"`
	Job      *JobOrderRetainedModel         `json:"job,omitempty"`
}

// JobOrderInvoiceModel defines model for JobOrderInvoiceModel.
type JobOrderInvoiceModel struct {
	Amount                *float64                           `json:"amount,omitempty"`
	CreatedAt             *time.Time                         `json:"createdAt"`
	CreatedBy             *UserNameModel                     `json:"createdBy,omitempty"`
	Expenses              *JobOrderInvoiceExpenseListModel   `json:"expenses,omitempty"`
	ForecastedDate        *openapi_types.Date                `json:"forecastedDate"`
	InvoiceId             *int32                             `json:"invoiceId,omitempty"`
	InvoiceNumber         *string                            `json:"invoiceNumber"`
	JobId                 *int32                             `json:"jobId,omitempty"`
	Placements            *JobOrderInvoicePlacementListModel `json:"placements,omitempty"`
	SentDetails           *JobOrderSentInvoiceModel          `json:"sentDetails,omitempty"`
	Stage                 *JobOrderInvoiceStageModel         `json:"stage,omitempty"`
	Status                *string                            `json:"status"`
	TriggerAt             *openapi_types.Date                `json:"triggerAt"`
	TriggerJobOrderStatus *StatusModel                       `json:"triggerJobOrderStatus,omitempty"`
	TriggerType           *string                            `json:"triggerType"`
	UpdatedAt             *time.Time                         `json:"updatedAt"`
	UpdatedBy             *UserNameModel                     `json:"updatedBy,omitempty"`
}

// JobOrderInvoicePlacementListModel defines model for JobOrderInvoicePlacementListModel.
type JobOrderInvoicePlacementListModel struct {
	Placements      *[]JobOrderInvoicePlacementModel `json:"placements"`
	TotalPlacements *int32                           `json:"totalPlacements,omitempty"`
}

// JobOrderInvoicePlacementModel defines model for JobOrderInvoicePlacementModel.
type JobOrderInvoicePlacementModel struct {
	CandidateId *int32              `json:"candidateId,omitempty"`
	PlacementId *int32              `json:"placementId,omitempty"`
	StartDate   *openapi_types.Date `json:"startDate"`
}

// JobOrderInvoiceStageModel defines model for JobOrderInvoiceStageModel.
type JobOrderInvoiceStageModel struct {
	Name    string `json:"name"`
	StageId int32  `json:"stageId"`
}

// JobOrderInvoiceSummaryModel defines model for JobOrderInvoiceSummaryModel.
type JobOrderInvoiceSummaryModel struct {
	Amount        *float64                   `json:"amount,omitempty"`
	InvoiceId     *int32                     `json:"invoiceId,omitempty"`
	InvoiceNumber *string                    `json:"invoiceNumber"`
	JobId         *int32                     `json:"jobId,omitempty"`
	Stage         *JobOrderInvoiceStageModel `json:"stage,omitempty"`
}

// JobOrderJobApplicationStatisticsSummaryModel defines model for JobOrderJobApplicationStatisticsSummaryModel.
type JobOrderJobApplicationStatisticsSummaryModel struct {
	Active *int32 `json:"active,omitempty"`
	New    *int32 `json:"new,omitempty"`
	Total  *int32 `json:"total,omitempty"`
}

// JobOrderLinks defines model for JobOrderLinks.
type JobOrderLinks struct {
	// Applications Job applications
	Applications *string `json:"applications"`

	// Attachments Attachments
	Attachments *string `json:"attachments"`

	// Notes Notes
	Notes *string `json:"notes"`
	Self  *string `json:"self"`
}

// JobOrderListRepresentation defines model for JobOrderListRepresentation.
type JobOrderListRepresentation struct {
	Items      *[]JobOrderSummaryModel `json:"items"`
	Links      *PageLinks              `json:"links,omitempty"`
	TotalCount int32                   `json:"totalCount"`
}

// JobOrderLocationAreaModel defines model for JobOrderLocationAreaModel.
type JobOrderLocationAreaModel struct {
	AreaId int32  `json:"areaId"`
	Name   string `json:"name"`
}

// JobOrderLocationModel defines model for JobOrderLocationModel.
type JobOrderLocationModel struct {
	Area       *JobOrderLocationAreaModel `json:"area,omitempty"`
	LocationId int32                      `json:"locationId"`
	Name       string                     `json:"name"`
}

// JobOrderRateCardModel defines model for JobOrderRateCardModel.
type JobOrderRateCardModel struct {
	JobOrderId *int32  `json:"jobOrderId,omitempty"`
	RateCard   *string `json:"rateCard"`
}

// JobOrderRepresentation defines model for JobOrderRepresentation.
type JobOrderRepresentation struct {
	Category         *JobOrderCategoryModel          `json:"category,omitempty"`
	ClosedAt         *time.Time                      `json:"closedAt"`
	ClosedBy         *UserNameModel                  `json:"closedBy,omitempty"`
	Company          *CompanyNameModel               `json:"company,omitempty"`
	Contact          *ContactNameModel               `json:"contact,omitempty"`
	CreatedAt        *time.Time                      `json:"createdAt"`
	CreatedBy        *UserNameModel                  `json:"createdBy,omitempty"`
	Custom           *[]CustomFieldValueModel        `json:"custom"`
	Duration         *DurationModel                  `json:"duration,omitempty"`
	EndDate          *openapi_types.Date             `json:"endDate"`
	Fee              *JobOrderFeeModel               `json:"fee,omitempty"`
	JobDescription   *string                         `json:"jobDescription"`
	JobId            int32                           `json:"jobId"`
	JobTitle         *string                         `json:"jobTitle"`
	JobType          *string                         `json:"jobType"`
	Links            *JobOrderLinks                  `json:"links,omitempty"`
	Location         *JobOrderLocationModel          `json:"location,omitempty"`
	NumberOfJobs     *int32                          `json:"numberOfJobs,omitempty"`
	OtherContacts    *[]ContactNameModel             `json:"otherContacts"`
	Owner            *UserNameModel                  `json:"owner,omitempty"`
	PartnerActions   *[]PartnerActionStageModel      `json:"partnerActions"`
	Recruiters       *[]UserNameModel                `json:"recruiters"`
	Salary           *JobOrderSalaryRangeModel       `json:"salary,omitempty"`
	SkillTags        *JobOrderSkillTags              `json:"skillTags,omitempty"`
	Source           *string                         `json:"source"`
	Start            *JobOrderStartModel             `json:"start,omitempty"`
	Statistics       *JobOrderStatisticsSummaryModel `json:"statistics,omitempty"`
	Status           *StatusModel                    `json:"status,omitempty"`
	UpdatedAt        *time.Time                      `json:"updatedAt"`
	UpdatedBy        *UserNameModel                  `json:"updatedBy,omitempty"`
	UserFavourite    *bool                           `json:"userFavourite"`
	WorkShift        *JobOrderWorkShiftModel         `json:"workShift,omitempty"`
	WorkType         *WorkTypeModel                  `json:"workType,omitempty"`
	WorkplaceAddress *CompanyAddressModel            `json:"workplaceAddress,omitempty"`
}

// JobOrderRetainedInvoiceRepresentation defines model for JobOrderRetainedInvoiceRepresentation.
type JobOrderRetainedInvoiceRepresentation struct {
	Invoice *JobOrderInvoiceModel  `json:"invoice,omitempty"`
	Job     *JobOrderRetainedModel `json:"job,omitempty"`
	Links   *ModelLinks            `json:"links,omitempty"`
}

// JobOrderRetainedModel defines model for JobOrderRetainedModel.
type JobOrderRetainedModel struct {
	Company         *CompanyNameModel `json:"company,omitempty"`
	Contact         *ContactNameModel `json:"contact,omitempty"`
	FeeCurrencyCode *string           `json:"feeCurrencyCode"`
	JobId           int32             `json:"jobId"`
	JobTitle        *string           `json:"jobTitle"`
	JobType         *string           `json:"jobType"`
	Owner           *UserNameModel    `json:"owner,omitempty"`
}

// JobOrderSalaryRangeModel defines model for JobOrderSalaryRangeModel.
type JobOrderSalaryRangeModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	RateHigh *float64       `json:"rateHigh"`
	RateLow  *float64       `json:"rateLow"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`

	// TimePerWeek Number of days per week for a daily rate or hours per week for an hourly rate.
	TimePerWeek *float64 `json:"timePerWeek"`
}

// JobOrderSentInvoiceModel defines model for JobOrderSentInvoiceModel.
type JobOrderSentInvoiceModel struct {
	BillingContactEmails *string        `json:"billingContactEmails"`
	BillingContactNames  *string        `json:"billingContactNames"`
	DueDate              *time.Time     `json:"dueDate"`
	PaymentTermsDays     *int32         `json:"paymentTermsDays"`
	PoNumber             *string        `json:"poNumber"`
	SentAt               *time.Time     `json:"sentAt"`
	SentBy               *UserNameModel `json:"sentBy,omitempty"`
}

// JobOrderSkillTags defines model for JobOrderSkillTags.
type JobOrderSkillTags struct {
	MatchAll *bool     `json:"matchAll,omitempty"`
	Tags     *[]string `json:"tags"`
}

// JobOrderStartModel defines model for JobOrderStartModel.
type JobOrderStartModel struct {
	// Date The specific date that a job starts or a candidate is available
	Date      *openapi_types.Date `json:"date"`
	Immediate *bool               `json:"immediate,omitempty"`
	Relative  *RelativeStartModel `json:"relative,omitempty"`
}

// JobOrderStatisticsSummaryModel defines model for JobOrderStatisticsSummaryModel.
type JobOrderStatisticsSummaryModel struct {
	Applications *JobOrderJobApplicationStatisticsSummaryModel `json:"applications,omitempty"`
}

// JobOrderSubCategoryModel defines model for JobOrderSubCategoryModel.
type JobOrderSubCategoryModel struct {
	Name          string `json:"name"`
	SubCategoryId int32  `json:"subCategoryId"`
}

// JobOrderSummaryModel defines model for JobOrderSummaryModel.
type JobOrderSummaryModel struct {
	ClosedAt      *time.Time             `json:"closedAt"`
	ClosedBy      *UserNameModel         `json:"closedBy,omitempty"`
	Company       *CompanyNameModel      `json:"company,omitempty"`
	Contact       *ContactNameModel      `json:"contact,omitempty"`
	CreatedAt     *time.Time             `json:"createdAt"`
	CreatedBy     *UserNameModel         `json:"createdBy,omitempty"`
	JobId         int32                  `json:"jobId"`
	JobTitle      *string                `json:"jobTitle"`
	Location      *JobOrderLocationModel `json:"location,omitempty"`
	Owner         *UserNameModel         `json:"owner,omitempty"`
	Source        *string                `json:"source"`
	Status        *StatusModel           `json:"status,omitempty"`
	UpdatedAt     *time.Time             `json:"updatedAt"`
	UpdatedBy     *UserNameModel         `json:"updatedBy,omitempty"`
	UserFavourite *bool                  `json:"userFavourite"`
}

// JobOrderTitleModel defines model for JobOrderTitleModel.
type JobOrderTitleModel struct {
	Company  *CompanyNameModel      `json:"company,omitempty"`
	Contact  *ContactNameModel      `json:"contact,omitempty"`
	JobId    int32                  `json:"jobId"`
	JobTitle *string                `json:"jobTitle"`
	Location *JobOrderLocationModel `json:"location,omitempty"`
	Owner    *UserNameModel         `json:"owner,omitempty"`
	Source   *string                `json:"source"`
	Status   *StatusModel           `json:"status,omitempty"`
}

// JobOrderUserTaskModel defines model for JobOrderUserTaskModel.
type JobOrderUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	JobId           *int32                        `json:"jobId,omitempty"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// JobOrderUserTaskRepresentation defines model for JobOrderUserTaskRepresentation.
type JobOrderUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	JobId           *int32                        `json:"jobId,omitempty"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// JobOrderWorkShiftModel defines model for JobOrderWorkShiftModel.
type JobOrderWorkShiftModel struct {
	EndTime   *string   `json:"endTime"`
	StartTime *string   `json:"startTime"`
	WorkDays  *[]string `json:"workDays"`
}

// LocationAreaModel defines model for LocationAreaModel.
type LocationAreaModel struct {
	AreaId int32  `json:"areaId"`
	Name   string `json:"name"`
}

// LocationListRepresentation defines model for LocationListRepresentation.
type LocationListRepresentation struct {
	Items *[]LocationModel `json:"items"`
	Links *ModelLinks      `json:"links,omitempty"`
}

// LocationModel defines model for LocationModel.
type LocationModel struct {
	Areas      *[]LocationAreaModel `json:"areas"`
	LocationId int32                `json:"locationId"`
	Name       string               `json:"name"`
}

// MatchedByEmailAddressModel defines model for MatchedByEmailAddressModel.
type MatchedByEmailAddressModel struct {
	// Candidates Top 5 most recently updated matching candidates
	Candidates *[]CandidateMatchedByEmailModel `json:"candidates"`

	// Contacts Top 5 most recently updated matching contacts
	Contacts *[]ContactMatchedByEmailModel `json:"contacts"`

	// Users Top 5 most recently updated matching users
	Users *[]UserMatchedByEmailModel `json:"users"`
}

// MatchedByPhoneNumberModel defines model for MatchedByPhoneNumberModel.
type MatchedByPhoneNumberModel struct {
	// Candidates Top 5 most recently updated matching candidates
	Candidates *[]CandidateMatchedByPhoneModel `json:"candidates"`

	// Companies Top 5 most recently updated matching companies
	Companies *[]CompanyMatchedByPhoneModel `json:"companies"`

	// Contacts Top 5 most recently updated matching contacts
	Contacts *[]ContactMatchedByPhoneModel `json:"contacts"`
	Quality  *PhoneNumberMatchQuality      `json:"quality,omitempty"`

	// Users Top 5 most recently updated matching users
	Users *[]UserMatchedByPhoneModel `json:"users"`
}

// MatchedEmailAddressModel defines model for MatchedEmailAddressModel.
type MatchedEmailAddressModel struct {
	Email *string                `json:"email"`
	Type  *EmailAddressMatchType `json:"type,omitempty"`
}

// MatchedEmailAddressModelCompanyName defines model for MatchedEmailAddressModelCompanyName.
type MatchedEmailAddressModelCompanyName struct {
	CompanyId *int32  `json:"companyId,omitempty"`
	Name      *string `json:"name"`
}

// MatchedPhoneNumberModel defines model for MatchedPhoneNumberModel.
type MatchedPhoneNumberModel struct {
	Normalized *string               `json:"normalized"`
	Number     *string               `json:"number"`
	Type       *PhoneNumberMatchType `json:"type,omitempty"`
}

// MatchedPhoneNumberModelCompanyName defines model for MatchedPhoneNumberModelCompanyName.
type MatchedPhoneNumberModelCompanyName struct {
	CompanyId *int32  `json:"companyId,omitempty"`
	Name      *string `json:"name"`
}

// ModelLinks defines model for ModelLinks.
type ModelLinks struct {
	Self *string `json:"self"`
}

// NameModel defines model for NameModel.
type NameModel struct {
	// Name Resource name
	Name string `json:"name"`
}

// NameModelListOf defines model for NameModelListOf.
type NameModelListOf struct {
	Items *[]NameModel `json:"items"`
}

// NoteAttachmentListRepresentation defines model for NoteAttachmentListRepresentation.
type NoteAttachmentListRepresentation struct {
	Items      *[]NoteAttachmentModel `json:"items"`
	Links      *PageLinks             `json:"links,omitempty"`
	TotalCount int32                  `json:"totalCount"`
}

// NoteAttachmentModel defines model for NoteAttachmentModel.
type NoteAttachmentModel struct {
	AttachmentId openapi_types.UUID `json:"attachmentId"`
	CreatedAt    *time.Time         `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel     `json:"createdBy,omitempty"`
	FileName     *string            `json:"fileName"`
	FileType     *string            `json:"fileType"`
}

// NoteLinks defines model for NoteLinks.
type NoteLinks struct {
	Self *string `json:"self"`
}

// NoteListRepresentation defines model for NoteListRepresentation.
type NoteListRepresentation struct {
	Items      *[]NoteSummaryModel `json:"items"`
	Links      *PageLinks          `json:"links,omitempty"`
	TotalCount int32               `json:"totalCount"`
}

// NoteModel defines model for NoteModel.
type NoteModel struct {
	Applications *[]JobApplicationSummaryModel `json:"applications"`
	Attachments  *[]NoteAttachmentModel        `json:"attachments"`
	Candidates   *[]CandidateNameModel         `json:"candidates"`
	Companies    *[]CompanyNameModel           `json:"companies"`
	Contacts     *[]ContactNameModel           `json:"contacts"`
	CreatedAt    *time.Time                    `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel                `json:"createdBy,omitempty"`
	Jobs         *[]JobOrderTitleModel         `json:"jobs"`
	NoteId       openapi_types.UUID            `json:"noteId"`
	Placements   *[]PlacementSummaryModel      `json:"placements"`

	// Readonly This note cannot be updated
	Readonly     *bool                      `json:"readonly,omitempty"`
	Reference    *string                    `json:"reference"`
	Requisitions *[]RequisitionSummaryModel `json:"requisitions"`
	Source       *string                    `json:"source"`
	Subject      *string                    `json:"subject"`
	Text         *string                    `json:"text"`
	Type         *string                    `json:"type"`
	UpdatedAt    *time.Time                 `json:"updatedAt"`
	UpdatedBy    *UserNameModel             `json:"updatedBy,omitempty"`
}

// NoteRepresentation defines model for NoteRepresentation.
type NoteRepresentation struct {
	Applications *[]JobApplicationSummaryModel `json:"applications"`
	Attachments  *[]NoteAttachmentModel        `json:"attachments"`
	Candidates   *[]CandidateNameModel         `json:"candidates"`
	Companies    *[]CompanyNameModel           `json:"companies"`
	Contacts     *[]ContactNameModel           `json:"contacts"`
	CreatedAt    *time.Time                    `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel                `json:"createdBy,omitempty"`
	Jobs         *[]JobOrderTitleModel         `json:"jobs"`
	Links        *NoteLinks                    `json:"links,omitempty"`
	NoteId       openapi_types.UUID            `json:"noteId"`
	Placements   *[]PlacementSummaryModel      `json:"placements"`

	// Readonly This note cannot be updated
	Readonly     *bool                      `json:"readonly,omitempty"`
	Reference    *string                    `json:"reference"`
	Requisitions *[]RequisitionSummaryModel `json:"requisitions"`
	Source       *string                    `json:"source"`
	Subject      *string                    `json:"subject"`
	Text         *string                    `json:"text"`
	Type         *string                    `json:"type"`
	UpdatedAt    *time.Time                 `json:"updatedAt"`
	UpdatedBy    *UserNameModel             `json:"updatedBy,omitempty"`
}

// NoteSummaryModel defines model for NoteSummaryModel.
type NoteSummaryModel struct {
	CreatedAt *time.Time         `json:"createdAt,omitempty"`
	CreatedBy *UserNameModel     `json:"createdBy,omitempty"`
	NoteId    openapi_types.UUID `json:"noteId"`

	// Readonly This note cannot be updated
	Readonly    *bool          `json:"readonly,omitempty"`
	Reference   *string        `json:"reference"`
	TextPartial *string        `json:"textPartial"`
	Type        *string        `json:"type"`
	UpdatedAt   *time.Time     `json:"updatedAt"`
	UpdatedBy   *UserNameModel `json:"updatedBy,omitempty"`
}

// NoteTypeDefaultModel defines model for NoteTypeDefaultModel.
type NoteTypeDefaultModel struct {
	Email *bool `json:"email,omitempty"`
	Note  *bool `json:"note,omitempty"`
	Sms   *bool `json:"sms,omitempty"`
}

// NoteTypeListRepresentation defines model for NoteTypeListRepresentation.
type NoteTypeListRepresentation struct {
	Items *[]NoteTypeModel `json:"items"`
}

// NoteTypeModel defines model for NoteTypeModel.
type NoteTypeModel struct {
	Default *NoteTypeDefaultModel `json:"default,omitempty"`
	Name    string                `json:"name"`
}

// Operation defines model for Operation.
type Operation struct {
	Op *OperationType `json:"op,omitempty"`

	// Path Single entity path to address, e.g. /jobs, /candidates, /applications, /placements, /companies or /contacts
	Path *string `json:"path"`

	// Value Comma separated entitiy ids, e.g. 1000, 1001, 1002
	Value *[]int64 `json:"value"`
}

// OperationType defines model for OperationType.
type OperationType string

// OpportunityListModel defines model for OpportunityListModel.
type OpportunityListModel struct {
	Items      *[]OpportunitySummaryModel `json:"items"`
	TotalCount int32                      `json:"totalCount"`
}

// OpportunityStageModel defines model for OpportunityStageModel.
type OpportunityStageModel struct {
	Active  *bool               `json:"active,omitempty"`
	Name    *string             `json:"name"`
	StageId *openapi_types.UUID `json:"stageId"`
}

// OpportunitySummaryModel defines model for OpportunitySummaryModel.
type OpportunitySummaryModel struct {
	AdditionalInformation *string                `json:"additionalInformation"`
	Company               *int32                 `json:"company,omitempty"`
	CreatedAt             *time.Time             `json:"createdAt"`
	CreatedBy             *int32                 `json:"createdBy,omitempty"`
	CurrentStage          *OpportunityStageModel `json:"currentStage,omitempty"`
	EstimatedClose        *time.Time             `json:"estimatedClose"`
	OpportunityId         *openapi_types.UUID    `json:"opportunityId,omitempty"`
	OpportunityTitle      *string                `json:"opportunityTitle"`
	Owners                *[]int32               `json:"owners"`
	UpdatedAt             *time.Time             `json:"updatedAt"`
	UpdatedBy             *int32                 `json:"updatedBy,omitempty"`
	Value                 *OpportunityValueModel `json:"value,omitempty"`
	WorkType              *int32                 `json:"workType"`
}

// OpportunityValueModel defines model for OpportunityValueModel.
type OpportunityValueModel struct {
	Value *float64 `json:"value"`
}

// PageLinks defines model for PageLinks.
type PageLinks struct {
	First *string `json:"first"`
	Last  *string `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
}

// PartnerActionFilterModel defines model for PartnerActionFilterModel.
type PartnerActionFilterModel struct {
	// AdminOnly Action is available to admin users only
	AdminOnly *bool `json:"adminOnly,omitempty"`

	// ApprovedOnly Action is only available on approved entities (currently only supported for placements)
	ApprovedOnly *bool                           `json:"approvedOnly,omitempty"`
	Status       *PartnerActionStatusFilterModel `json:"status,omitempty"`
}

// PartnerActionListRepresentation defines model for PartnerActionListRepresentation.
type PartnerActionListRepresentation struct {
	// Items Partner actions
	Items *[]PartnerActionModel `json:"items"`
	Links *ModelLinks           `json:"links,omitempty"`
}

// PartnerActionModel defines model for PartnerActionModel.
type PartnerActionModel struct {
	ActionFilter *PartnerActionFilterModel `json:"actionFilter,omitempty"`

	// ActionId Unique identifier for the partner action
	ActionId *openapi_types.UUID `json:"actionId,omitempty"`

	// ActionName Menu item label that will appear to the end-user
	ActionName *string            `json:"actionName"`
	ActionType *PartnerActionType `json:"actionType,omitempty"`

	// AllowResubmit Allow resources to be resubmitted to an action.
	AllowResubmit *bool `json:"allowResubmit,omitempty"`

	// CreatedAt Date the partner action was added
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Reference Unique partner defined reference/identifier for the action
	Reference *string `json:"reference"`

	// UpdatedAt Date the partner action was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Url URL to open after the action is selected and assigned the `"Submitted"` stage.
	Url     *string               `json:"url"`
	UrlType *PartnerActionUrlType `json:"urlType,omitempty"`

	// WebhookData Additional data that will be included with the webhook notification
	WebhookData *interface{} `json:"webhookData"`
}

// PartnerActionRepresentation defines model for PartnerActionRepresentation.
type PartnerActionRepresentation struct {
	ActionFilter *PartnerActionFilterModel `json:"actionFilter,omitempty"`

	// ActionId Unique identifier for the partner action
	ActionId *openapi_types.UUID `json:"actionId,omitempty"`

	// ActionName Menu item label that will appear to the end-user
	ActionName *string            `json:"actionName"`
	ActionType *PartnerActionType `json:"actionType,omitempty"`

	// AllowResubmit Allow resources to be resubmitted to an action.
	AllowResubmit *bool `json:"allowResubmit,omitempty"`

	// CreatedAt Date the partner action was added
	CreatedAt *time.Time  `json:"createdAt,omitempty"`
	Links     *ModelLinks `json:"links,omitempty"`

	// Reference Unique partner defined reference/identifier for the action
	Reference *string `json:"reference"`

	// UpdatedAt Date the partner action was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Url URL to open after the action is selected and assigned the `"Submitted"` stage.
	Url     *string               `json:"url"`
	UrlType *PartnerActionUrlType `json:"urlType,omitempty"`

	// WebhookData Additional data that will be included with the webhook notification
	WebhookData *interface{} `json:"webhookData"`
}

// PartnerActionResultCommandModel Optional complete or partial results for a partner action
type PartnerActionResultCommandModel struct {
	// Score Optional partner score for the action result
	Score *int32 `json:"score"`

	// Url Optional partner defined URL for the action result
	Url     *string                     `json:"url"`
	UrlType *PartnerActionResultUrlType `json:"urlType,omitempty"`
}

// PartnerActionResultModel defines model for PartnerActionResultModel.
type PartnerActionResultModel struct {
	// Score Optional partner score for the action result
	Score *int32 `json:"score"`

	// Url Optional partner defined URL for the action result
	Url     *string                     `json:"url"`
	UrlType *PartnerActionResultUrlType `json:"urlType,omitempty"`
}

// PartnerActionResultUrlType defines model for PartnerActionResultUrlType.
type PartnerActionResultUrlType string

// PartnerActionStage defines model for PartnerActionStage.
type PartnerActionStage string

// PartnerActionStageModel defines model for PartnerActionStageModel.
type PartnerActionStageModel struct {
	ActionId   *openapi_types.UUID `json:"actionId,omitempty"`
	ActionName *string             `json:"actionName"`

	// Reference Unique partner defined reference/identifier for the action
	Reference *string                   `json:"reference"`
	Result    *PartnerActionResultModel `json:"result,omitempty"`
	Stage     *PartnerActionStage       `json:"stage,omitempty"`

	// Status Partner defined progress status message for the action
	Status      *string        `json:"status"`
	SubmittedAt *time.Time     `json:"submittedAt,omitempty"`
	SubmittedBy *UserNameModel `json:"submittedBy,omitempty"`
	UpdatedAt   *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy   *UserNameModel `json:"updatedBy,omitempty"`
}

// PartnerActionStatusFilterModel defines model for PartnerActionStatusFilterModel.
type PartnerActionStatusFilterModel struct {
	// ActiveOnly Action is available to entities with an active status
	ActiveOnly *bool `json:"activeOnly,omitempty"`

	// StatusId Action is available to entities with a specific status
	StatusId *[]int32 `json:"statusId"`
}

// PartnerActionType defines model for PartnerActionType.
type PartnerActionType string

// PartnerActionUrlType defines model for PartnerActionUrlType.
type PartnerActionUrlType string

// PhoneNumberMatchQuality defines model for PhoneNumberMatchQuality.
type PhoneNumberMatchQuality string

// PhoneNumberMatchType defines model for PhoneNumberMatchType.
type PhoneNumberMatchType string

// PlacementActivityListRepresentation defines model for PlacementActivityListRepresentation.
type PlacementActivityListRepresentation struct {
	Items      *[]PlacementActivityModel `json:"items"`
	Links      *PageLinks                `json:"links,omitempty"`
	TotalCount int32                     `json:"totalCount"`
}

// PlacementActivityModel defines model for PlacementActivityModel.
type PlacementActivityModel struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	PlacementId  *int32                   `json:"placementId,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// PlacementActivityRepresentation defines model for PlacementActivityRepresentation.
type PlacementActivityRepresentation struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Links        *ModelLinks              `json:"links,omitempty"`
	PlacementId  *int32                   `json:"placementId,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// PlacementActivitySettingModel defines model for PlacementActivitySettingModel.
type PlacementActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// PlacementActivitySettingSummaryModel defines model for PlacementActivitySettingSummaryModel.
type PlacementActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// PlacementActivitySettingsListModel defines model for PlacementActivitySettingsListModel.
type PlacementActivitySettingsListModel struct {
	Items *[]PlacementActivitySettingSummaryModel `json:"items"`
}

// PlacementActivitySummaryListModel defines model for PlacementActivitySummaryListModel.
type PlacementActivitySummaryListModel struct {
	Items *[]PlacementActivitySummaryModel `json:"items"`
}

// PlacementActivitySummaryModel defines model for PlacementActivitySummaryModel.
type PlacementActivitySummaryModel struct {
	ActivityId   *int64         `json:"activityId,omitempty"`
	ActivityName *string        `json:"activityName"`
	ActivityType *string        `json:"activityType"`
	CreatedAt    *time.Time     `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`
	PlacementId  *int32         `json:"placementId,omitempty"`
	Status       *string        `json:"status"`
	UpdatedAt    *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// PlacementApproverModel defines model for PlacementApproverModel.
type PlacementApproverModel struct {
	// ContactId Unique identifier for the contact
	ContactId int32 `json:"contactId"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// Inactive Contact is no longer with the company
	Inactive *bool `json:"inactive,omitempty"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string        `json:"mobileNormalized"`
	Owner            *UserNameModel `json:"owner,omitempty"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`
	Primary  *bool   `json:"primary,omitempty"`

	// Salutation Salutation/honorific/title
	Salutation   *string      `json:"salutation"`
	Status       *StatusModel `json:"status,omitempty"`
	Unsubscribed *bool        `json:"unsubscribed,omitempty"`
}

// PlacementAttachmentCategoryListRepresentation defines model for PlacementAttachmentCategoryListRepresentation.
type PlacementAttachmentCategoryListRepresentation struct {
	Items *[]PlacementAttachmentCategoryModel `json:"items"`
	Links *ModelLinks                         `json:"links,omitempty"`
}

// PlacementAttachmentCategoryModel defines model for PlacementAttachmentCategoryModel.
type PlacementAttachmentCategoryModel struct {
	Category *string                  `json:"category"`
	Type     *PlacementAttachmentType `json:"type,omitempty"`
}

// PlacementAttachmentLinks defines model for PlacementAttachmentLinks.
type PlacementAttachmentLinks struct {
	Self *string `json:"self"`
}

// PlacementAttachmentListRepresentation defines model for PlacementAttachmentListRepresentation.
type PlacementAttachmentListRepresentation struct {
	Items      *[]PlacementAttachmentModel `json:"items"`
	Links      *PageLinks                  `json:"links,omitempty"`
	TotalCount int32                       `json:"totalCount"`
}

// PlacementAttachmentModel defines model for PlacementAttachmentModel.
type PlacementAttachmentModel struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date      `json:"expiry"`
	FileName  *string                  `json:"fileName"`
	FileType  *string                  `json:"fileType"`
	Type      *PlacementAttachmentType `json:"type,omitempty"`
	UpdatedAt *time.Time               `json:"updatedAt"`
}

// PlacementAttachmentRepresentation defines model for PlacementAttachmentRepresentation.
type PlacementAttachmentRepresentation struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date       `json:"expiry"`
	FileName  *string                   `json:"fileName"`
	FileType  *string                   `json:"fileType"`
	Links     *PlacementAttachmentLinks `json:"links,omitempty"`
	Type      *PlacementAttachmentType  `json:"type,omitempty"`
	UpdatedAt *time.Time                `json:"updatedAt"`
}

// PlacementAttachmentType defines model for PlacementAttachmentType.
type PlacementAttachmentType string

// PlacementBillingModel defines model for PlacementBillingModel.
type PlacementBillingModel struct {
	Address *CompanyAddressModel `json:"address,omitempty"`
	Contact *ContactNameModel    `json:"contact,omitempty"`

	// DueDate Payment due date
	DueDate *openapi_types.Date `json:"dueDate"`
	Email   *string             `json:"email"`

	// InvoiceRef Invoice Number/Reference
	InvoiceRef *string `json:"invoiceRef"`

	// OrderRef PO Number/Reference
	OrderRef *string `json:"orderRef"`

	// Terms Billing payment terms
	Terms *string `json:"terms"`
}

// PlacementContractRateModel defines model for PlacementContractRateModel.
type PlacementContractRateModel struct {
	CandidateRate *float64                  `json:"candidateRate"`
	ClientRate    *float64                  `json:"clientRate"`
	DaysPerWeek   *float64                  `json:"daysPerWeek"`
	HoursPerWeek  *float64                  `json:"hoursPerWeek"`
	NetMargin     *float64                  `json:"netMargin"`
	OnCosts       *float64                  `json:"onCosts"`
	OnCostsType   *RatePortion              `json:"onCostsType,omitempty"`
	RatePer       *PlacementContractRatePer `json:"ratePer,omitempty"`
}

// PlacementContractRatePer defines model for PlacementContractRatePer.
type PlacementContractRatePer string

// PlacementExportModel defines model for PlacementExportModel.
type PlacementExportModel struct {
	// Approvers Timesheet/payroll approver contacts
	Approvers *[]PlacementApproverModel `json:"approvers"`

	// Onboarding Placement has been selected for export to an onboarding service
	Onboarding *bool `json:"onboarding"`

	// OnboardingManagers Onboarding manager contacts
	OnboardingManagers *[]PlacementApproverModel `json:"onboardingManagers"`

	// Payroll Placement has been selected for export to a payroll service
	Payroll *bool `json:"payroll"`

	// Timesheets Placement has been selected for export to a timesheet service
	Timesheets *bool `json:"timesheets"`
}

// PlacementLinks defines model for PlacementLinks.
type PlacementLinks struct {
	// Application Job application
	Application *string `json:"application"`

	// Attachments Attachments
	Attachments *string `json:"attachments"`

	// CreditedByPlacement Credited by placement
	CreditedByPlacement *string `json:"creditedByPlacement"`

	// CreditsPlacement Credits placement
	CreditsPlacement *string `json:"creditsPlacement"`

	// ExtendedByPlacement Extended by placement
	ExtendedByPlacement *string `json:"extendedByPlacement"`

	// ExtendsPlacement Extends placement
	ExtendsPlacement *string `json:"extendsPlacement"`

	// Notes Notes
	Notes *string `json:"notes"`
	Self  *string `json:"self"`
}

// PlacementListRepresentation defines model for PlacementListRepresentation.
type PlacementListRepresentation struct {
	Items      *[]PlacementSummaryModel `json:"items"`
	Links      *PageLinks               `json:"links,omitempty"`
	TotalCount int32                    `json:"totalCount"`
}

// PlacementRateModel defines model for PlacementRateModel.
type PlacementRateModel struct {
	ChargeCurrency *string  `json:"chargeCurrency"`
	ChargeRate     *float64 `json:"chargeRate,omitempty"`
	Default        *bool    `json:"default,omitempty"`
	DisplayIndex   *int32   `json:"displayIndex,omitempty"`
	Name           *string  `json:"name"`
	PayRate        *float64 `json:"payRate,omitempty"`
	Type           *string  `json:"type"`
}

// PlacementRecruiterModel defines model for PlacementRecruiterModel.
type PlacementRecruiterModel struct {
	Deleted   *bool    `json:"deleted,omitempty"`
	Email     *string  `json:"email"`
	FeeSplit  *float64 `json:"feeSplit"`
	FirstName *string  `json:"firstName"`
	Inactive  *bool    `json:"inactive,omitempty"`
	LastName  *string  `json:"lastName"`
	Mobile    *string  `json:"mobile"`
	Phone     *string  `json:"phone"`
	Position  *string  `json:"position"`
	UserId    int32    `json:"userId"`
}

// PlacementRepresentation defines model for PlacementRepresentation.
type PlacementRepresentation struct {
	Approved       *bool                       `json:"approved,omitempty"`
	ApprovedAt     *time.Time                  `json:"approvedAt"`
	Award          *string                     `json:"award"`
	Billing        *PlacementBillingModel      `json:"billing,omitempty"`
	Candidate      *CandidatePlacementModel    `json:"candidate,omitempty"`
	ChargeCurrency *string                     `json:"chargeCurrency"`
	Company        *CompanyNameModel           `json:"company,omitempty"`
	Contact        *ContactNameModel           `json:"contact,omitempty"`
	ContractRate   *PlacementContractRateModel `json:"contractRate,omitempty"`
	CreatedAt      *time.Time                  `json:"createdAt"`
	CreatedBy      *UserNameModel              `json:"createdBy,omitempty"`
	Custom         *[]CustomFieldValueModel    `json:"custom"`

	// EndDate Date a contract or temporary employment ends
	EndDate        *openapi_types.Date        `json:"endDate"`
	Export         *PlacementExportModel      `json:"export,omitempty"`
	FeeSplit       *RatePortion               `json:"feeSplit,omitempty"`
	IndustryCode   *string                    `json:"industryCode"`
	Job            *JobOrderTitleModel        `json:"job,omitempty"`
	JobTitle       *string                    `json:"jobTitle"`
	Links          *PlacementLinks            `json:"links,omitempty"`
	Owner          *UserNameModel             `json:"owner,omitempty"`
	PartnerActions *[]PartnerActionStageModel `json:"partnerActions"`
	PaymentType    *string                    `json:"paymentType"`
	PlacementId    int32                      `json:"placementId"`
	Rates          *[]PlacementRateModel      `json:"rates"`
	Recruiters     *[]PlacementRecruiterModel `json:"recruiters"`
	Salary         *PlacementSalaryModel      `json:"salary,omitempty"`
	Source         *PlacementSourceModel      `json:"source,omitempty"`

	// StartDate Date employment begins
	StartDate        *openapi_types.Date      `json:"startDate"`
	Status           *StatusModel             `json:"status,omitempty"`
	Summary          *string                  `json:"summary"`
	Type             PlacementType            `json:"type"`
	UpdatedAt        *time.Time               `json:"updatedAt"`
	UpdatedBy        *UserNameModel           `json:"updatedBy,omitempty"`
	WorkShift        *PlacementWorkShiftModel `json:"workShift,omitempty"`
	WorkplaceAddress *CompanyAddressModel     `json:"workplaceAddress,omitempty"`
}

// PlacementSalaryModel defines model for PlacementSalaryModel.
type PlacementSalaryModel struct {
	Base           *float64 `json:"base"`
	Benefits       *float64 `json:"benefits"`
	Fee            *float64 `json:"fee"`
	Superannuation *float64 `json:"superannuation"`
	Total          *float64 `json:"total"`
}

// PlacementSourceModel defines model for PlacementSourceModel.
type PlacementSourceModel struct {
	// Candidate The original source of the candidate
	Candidate *string `json:"candidate"`

	// Placement The source of candidate that lead to this placement
	Placement *string `json:"placement"`
}

// PlacementSummaryModel defines model for PlacementSummaryModel.
type PlacementSummaryModel struct {
	Approved   *bool                    `json:"approved,omitempty"`
	ApprovedAt *time.Time               `json:"approvedAt"`
	Candidate  *CandidatePlacementModel `json:"candidate,omitempty"`
	CreatedAt  *time.Time               `json:"createdAt"`
	CreatedBy  *UserNameModel           `json:"createdBy,omitempty"`

	// EndDate Date a contract or temporary employment ends
	EndDate     *openapi_types.Date `json:"endDate"`
	Job         *JobOrderTitleModel `json:"job,omitempty"`
	JobTitle    *string             `json:"jobTitle"`
	PlacementId int32               `json:"placementId"`

	// StartDate Date employment begins
	StartDate *openapi_types.Date `json:"startDate"`
	Status    *StatusModel        `json:"status,omitempty"`
	Type      PlacementType       `json:"type"`
	UpdatedAt *time.Time          `json:"updatedAt"`
	UpdatedBy *UserNameModel      `json:"updatedBy,omitempty"`
}

// PlacementTimesheetApproverModel defines model for PlacementTimesheetApproverModel.
type PlacementTimesheetApproverModel struct {
	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`
}

// PlacementTimesheetEntryModel defines model for PlacementTimesheetEntryModel.
type PlacementTimesheetEntryModel struct {
	Date *openapi_types.Date    `json:"date,omitempty"`
	Type PlacementTimesheetType `json:"type"`
}

// PlacementTimesheetListRepresentation defines model for PlacementTimesheetListRepresentation.
type PlacementTimesheetListRepresentation struct {
	Items *[]PlacementTimesheetModel `json:"items"`
}

// PlacementTimesheetModel defines model for PlacementTimesheetModel.
type PlacementTimesheetModel struct {
	ApprovedAt  *time.Time                       `json:"approvedAt"`
	ApprovedBy  *PlacementTimesheetApproverModel `json:"approvedBy,omitempty"`
	CreatedAt   *time.Time                       `json:"createdAt"`
	Entries     *[]PlacementTimesheetEntryModel  `json:"entries"`
	Period      *DateRangeModel                  `json:"period,omitempty"`
	SubmittedAt *time.Time                       `json:"submittedAt"`
}

// PlacementTimesheetType defines model for PlacementTimesheetType.
type PlacementTimesheetType string

// PlacementType defines model for PlacementType.
type PlacementType string

// PlacementUserTaskModel defines model for PlacementUserTaskModel.
type PlacementUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	PlacementId     *int32                        `json:"placementId,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// PlacementUserTaskRepresentation defines model for PlacementUserTaskRepresentation.
type PlacementUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	PlacementId     *int32                        `json:"placementId,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// PlacementWorkShiftModel defines model for PlacementWorkShiftModel.
type PlacementWorkShiftModel struct {
	EndTime   *string   `json:"endTime"`
	StartTime *string   `json:"startTime"`
	WorkDays  *[]string `json:"workDays"`
}

// RatePortion defines model for RatePortion.
type RatePortion string

// RecipientEntityType defines model for RecipientEntityType.
type RecipientEntityType string

// RejectRequisitionCommand defines model for RejectRequisitionCommand.
type RejectRequisitionCommand struct {
	ApproverId int32   `json:"approverId"`
	Reason     *string `json:"reason"`
}

// RelativeStartModel defines model for RelativeStartModel.
type RelativeStartModel struct {
	Period *int32             `json:"period,omitempty"`
	Unit   *RelativeStartUnit `json:"unit,omitempty"`
}

// RelativeStartUnit defines model for RelativeStartUnit.
type RelativeStartUnit string

// RemoveCandidateSkillsCommand defines model for RemoveCandidateSkillsCommand.
type RemoveCandidateSkillsCommand struct {
	// Categories Skill categories to remove from this candidate.
	Categories *[]RemoveCategoriesModel `json:"categories"`
}

// RemoveCategoriesModel defines model for RemoveCategoriesModel.
type RemoveCategoriesModel struct {
	// CategoryId Category to remove.<br />
	// Specify a categoryId without subCategories to remove the category and all previously
	// linked sub-categories associated with the category.
	CategoryId int32 `json:"categoryId"`

	// SubCategories Optional list of sub-categories and skills to remove.
	SubCategories *[]RemoveSubCategoriesModel `json:"subCategories"`
}

// RemoveContactSkillsCommand defines model for RemoveContactSkillsCommand.
type RemoveContactSkillsCommand struct {
	// Categories Skill categories to remove from this contact.
	Categories *[]RemoveCategoriesModel `json:"categories"`
}

// RemoveSubCategoriesModel defines model for RemoveSubCategoriesModel.
type RemoveSubCategoriesModel struct {
	// Skills Optional list of skills to remove.
	Skills *[]SubmitSkillsModel `json:"skills"`

	// SubCategoryId Sub-category to remove.<br />
	// Specify a subCategoryId without skills to remove the sub-category and all previously
	// linked skills associated with the sub-category.
	SubCategoryId int32 `json:"subCategoryId"`
}

// RequisitionAttachmentType defines model for RequisitionAttachmentType.
type RequisitionAttachmentType string

// RequisitionFormFieldModel defines model for RequisitionFormFieldModel.
type RequisitionFormFieldModel struct {
	FieldID   *int32  `json:"fieldID,omitempty"`
	FieldName *string `json:"fieldName"`
	FormID    *int32  `json:"formID,omitempty"`
	Required  *bool   `json:"required,omitempty"`
	Visible   *bool   `json:"visible,omitempty"`
}

// RequisitionFormListRepresentation defines model for RequisitionFormListRepresentation.
type RequisitionFormListRepresentation struct {
	Items *[]RequisitionFormModel `json:"items"`
	Links *ModelLinks             `json:"links,omitempty"`
}

// RequisitionFormModel defines model for RequisitionFormModel.
type RequisitionFormModel struct {
	Default    *bool                        `json:"default,omitempty"`
	Deleted    *bool                        `json:"deleted,omitempty"`
	FormFields *[]RequisitionFormFieldModel `json:"formFields"`
	FormID     *int32                       `json:"formID,omitempty"`
	FormName   *string                      `json:"formName"`
}

// RequisitionHistoryModel defines model for RequisitionHistoryModel.
type RequisitionHistoryModel struct {
	Items      *[]RequisitionLogModel `json:"items"`
	TotalCount int32                  `json:"totalCount"`
}

// RequisitionLinks defines model for RequisitionLinks.
type RequisitionLinks struct {
	// History Link to requisition approval history
	History *string `json:"history"`

	// Job Link to job created for an approved requisition
	Job *string `json:"job"`

	// Notes Notes
	Notes    *string `json:"notes"`
	Self     *string `json:"self"`
	Workflow *string `json:"workflow"`
}

// RequisitionListRepresentation defines model for RequisitionListRepresentation.
type RequisitionListRepresentation struct {
	Items      *[]RequisitionSummaryModel `json:"items"`
	Links      *PageLinks                 `json:"links,omitempty"`
	TotalCount int32                      `json:"totalCount"`
}

// RequisitionLogModel defines model for RequisitionLogModel.
type RequisitionLogModel struct {
	Contact   *ContactNameModel  `json:"contact,omitempty"`
	Message   *string            `json:"message"`
	NewStatus *RequisitionStatus `json:"newStatus,omitempty"`
	OldStatus *RequisitionStatus `json:"oldStatus,omitempty"`
	UpdatedAt *time.Time         `json:"updatedAt,omitempty"`
}

// RequisitionRepresentation defines model for RequisitionRepresentation.
type RequisitionRepresentation struct {
	Category       *JobOrderCategoryModel    `json:"category,omitempty"`
	Company        *CompanyNameModel         `json:"company,omitempty"`
	CreatedAt      *time.Time                `json:"createdAt"`
	Custom         *[]CustomFieldValueModel  `json:"custom"`
	Duration       *DurationModel            `json:"duration,omitempty"`
	FormID         *int32                    `json:"formID"`
	HiringManager  *ContactNameModel         `json:"hiringManager,omitempty"`
	JobDescription *string                   `json:"jobDescription"`
	JobTitle       string                    `json:"jobTitle"`
	Links          *RequisitionLinks         `json:"links,omitempty"`
	Location       *JobOrderLocationModel    `json:"location,omitempty"`
	NumberOfJobs   *int32                    `json:"numberOfJobs,omitempty"`
	Owner          *UserNameModel            `json:"owner,omitempty"`
	Recruiters     *[]UserNameModel          `json:"recruiters"`
	RequisitionId  int32                     `json:"requisitionId"`
	Salary         *JobOrderSalaryRangeModel `json:"salary,omitempty"`

	// Source Source of the requisition, or reason the requisition is being raised.
	Source             *string               `json:"source"`
	Start              *JobOrderStartModel   `json:"start,omitempty"`
	Status             *RequisitionStatus    `json:"status,omitempty"`
	UpdatedAt          *time.Time            `json:"updatedAt"`
	WorkType           *WorkTypeModel        `json:"workType,omitempty"`
	Workflow           *CompanyWorkflowModel `json:"workflow,omitempty"`
	WorkflowStageIndex *int32                `json:"workflowStageIndex"`
	WorkplaceAddress   *CompanyAddressModel  `json:"workplaceAddress,omitempty"`
}

// RequisitionStatus defines model for RequisitionStatus.
type RequisitionStatus string

// RequisitionSummaryModel defines model for RequisitionSummaryModel.
type RequisitionSummaryModel struct {
	Company            *CompanyNameModel  `json:"company,omitempty"`
	CreatedAt          *time.Time         `json:"createdAt"`
	HiringManager      *ContactNameModel  `json:"hiringManager,omitempty"`
	JobTitle           string             `json:"jobTitle"`
	RequisitionId      int32              `json:"requisitionId"`
	Status             *RequisitionStatus `json:"status,omitempty"`
	UpdatedAt          *time.Time         `json:"updatedAt"`
	WorkflowStageIndex *int32             `json:"workflowStageIndex"`
}

// ReviewAcceptJobApplicationCommand defines model for ReviewAcceptJobApplicationCommand.
type ReviewAcceptJobApplicationCommand struct {
	// ContactId Hiring manager contact accepting the applicant
	ContactId int32 `json:"contactId"`

	// Message Optional feedback
	Message *string `json:"message"`
}

// ReviewRejectJobApplicationCommand defines model for ReviewRejectJobApplicationCommand.
type ReviewRejectJobApplicationCommand struct {
	// ContactId Hiring manager contact rejecting the applicant
	ContactId int32 `json:"contactId"`

	// Reason Optional feedback
	Reason *string `json:"reason"`
}

// ReviewSubmitJobApplicationCommand defines model for ReviewSubmitJobApplicationCommand.
type ReviewSubmitJobApplicationCommand struct {
	// SubmittedByUserId Optionally specify the user submitting the job application for review (if not the authenticated user)
	SubmittedByUserId *int32 `json:"submittedByUserId"`
}

// ReviewViewJobApplicationCommand defines model for ReviewViewJobApplicationCommand.
type ReviewViewJobApplicationCommand struct {
	// ContactId Hiring manager contact viewing the applicant
	ContactId int32 `json:"contactId"`
}

// SalaryModel defines model for SalaryModel.
type SalaryModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	Rate     *float64       `json:"rate"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`
}

// SalaryRangeModel defines model for SalaryRangeModel.
type SalaryRangeModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	RateHigh *float64       `json:"rateHigh"`
	RateLow  *float64       `json:"rateLow"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`
}

// SalaryRatePer defines model for SalaryRatePer.
type SalaryRatePer string

// SendCandidateSmsCommand defines model for SendCandidateSmsCommand.
type SendCandidateSmsCommand struct {
	EntityID []int32    `json:"entityID"`
	NoteType *string    `json:"noteType"`
	SendAt   *time.Time `json:"sendAt"`
	SenderID *int32     `json:"senderID"`
	Text     string     `json:"text"`
}

// SendCompanySmsCommand defines model for SendCompanySmsCommand.
type SendCompanySmsCommand struct {
	CompanyID int32      `json:"companyID"`
	EntityID  []int32    `json:"entityID"`
	NoteType  *string    `json:"noteType"`
	SendAt    *time.Time `json:"sendAt"`
	SenderID  *int32     `json:"senderID"`
	Text      string     `json:"text"`
}

// SendContactSmsCommand defines model for SendContactSmsCommand.
type SendContactSmsCommand struct {
	EntityID []int32    `json:"entityID"`
	NoteType *string    `json:"noteType"`
	SendAt   *time.Time `json:"sendAt"`
	SenderID *int32     `json:"senderID"`
	Text     string     `json:"text"`
}

// SendJobApplicationContactSmsCommand defines model for SendJobApplicationContactSmsCommand.
type SendJobApplicationContactSmsCommand struct {
	EntityID   []int64    `json:"entityID"`
	JobOrderID int32      `json:"jobOrderID"`
	NoteType   *string    `json:"noteType"`
	SendAt     *time.Time `json:"sendAt"`
	SenderID   *int32     `json:"senderID"`
	Text       string     `json:"text"`
}

// SendJobApplicationSmsCommand defines model for SendJobApplicationSmsCommand.
type SendJobApplicationSmsCommand struct {
	EntityID []int64    `json:"entityID"`
	NoteType *string    `json:"noteType"`
	SendAt   *time.Time `json:"sendAt"`
	SenderID *int32     `json:"senderID"`
	StatusID *int32     `json:"statusID"`
	Text     string     `json:"text"`
}

// SendJobOrderSmsCommand defines model for SendJobOrderSmsCommand.
type SendJobOrderSmsCommand struct {
	EntityID []int32    `json:"entityID"`
	NoteType *string    `json:"noteType"`
	SendAt   *time.Time `json:"sendAt"`
	SenderID *int32     `json:"senderID"`
	Text     string     `json:"text"`
}

// SendPlacementSmsCommand defines model for SendPlacementSmsCommand.
type SendPlacementSmsCommand struct {
	EntityID []int32    `json:"entityID"`
	NoteType *string    `json:"noteType"`
	SendAt   *time.Time `json:"sendAt"`
	SenderID *int32     `json:"senderID"`
	Text     string     `json:"text"`
}

// SetCandidateAvailabilityByWeekCommand defines model for SetCandidateAvailabilityByWeekCommand.
type SetCandidateAvailabilityByWeekCommand struct {
	// Availability Weekly availability, at most two shifts per day
	Availability struct {
		// Friday Availability, specify at most two shifts
		Friday *[]TimeRangeModel `json:"Friday,omitempty"`

		// Monday Availability, specify at most two shifts
		Monday *[]TimeRangeModel `json:"Monday,omitempty"`

		// Saturday Availability, specify at most two shifts
		Saturday *[]TimeRangeModel `json:"Saturday,omitempty"`

		// Sunday Availability, specify at most two shifts
		Sunday *[]TimeRangeModel `json:"Sunday,omitempty"`

		// Thursday Availability, specify at most two shifts
		Thursday *[]TimeRangeModel `json:"Thursday,omitempty"`

		// Tuesday Availability, specify at most two shifts
		Tuesday *[]TimeRangeModel `json:"Tuesday,omitempty"`

		// Wednesday Availability, specify at most two shifts
		Wednesday *[]TimeRangeModel `json:"Wednesday,omitempty"`
	} `json:"availability"`

	// Recurring Availability repeats in following weeks. Previous/past recurring schedules will be terminated prior to this schedule, existing future overlapping schedules will be cancelled.
	Recurring *bool `json:"recurring,omitempty"`

	// Until Optional end date of repeating availability
	Until *openapi_types.Date `json:"until"`

	// WeekOf Update availability for the week (beginning Sunday) containing the specified date
	WeekOf openapi_types.Date `json:"weekOf"`
}

// SetCandidateCustomFieldListValuesCommand defines model for SetCandidateCustomFieldListValuesCommand.
type SetCandidateCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetCandidateStatusCommand defines model for SetCandidateStatusCommand.
type SetCandidateStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SetCompanyCustomFieldListValuesCommand defines model for SetCompanyCustomFieldListValuesCommand.
type SetCompanyCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetCompanyStatusCommand defines model for SetCompanyStatusCommand.
type SetCompanyStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SetContactCustomFieldListValuesCommand defines model for SetContactCustomFieldListValuesCommand.
type SetContactCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetContactStatusCommand defines model for SetContactStatusCommand.
type SetContactStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SetJobApplicationCustomFieldListValuesCommand defines model for SetJobApplicationCustomFieldListValuesCommand.
type SetJobApplicationCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetJobApplicationStatusCommand defines model for SetJobApplicationStatusCommand.
type SetJobApplicationStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SetJobOrderCustomFieldListValuesCommand defines model for SetJobOrderCustomFieldListValuesCommand.
type SetJobOrderCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetJobOrderStatusCommand defines model for SetJobOrderStatusCommand.
type SetJobOrderStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SetPlacementCustomFieldListValuesCommand defines model for SetPlacementCustomFieldListValuesCommand.
type SetPlacementCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetPlacementStatusCommand defines model for SetPlacementStatusCommand.
type SetPlacementStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SimpleWorkflow defines model for SimpleWorkflow.
type SimpleWorkflow string

// SkillCategoryModel defines model for SkillCategoryModel.
type SkillCategoryModel struct {
	Name    string `json:"name"`
	SkillId int32  `json:"skillId"`
}

// SmsRepresentation defines model for SmsRepresentation.
type SmsRepresentation struct {
	BatchID *openapi_types.UUID `json:"batchID,omitempty"`
}

// StatusListRepresentation defines model for StatusListRepresentation.
type StatusListRepresentation struct {
	Items *[]StatusModel `json:"items"`
	Links *ModelLinks    `json:"links,omitempty"`
}

// StatusModel defines model for StatusModel.
type StatusModel struct {
	Active   *bool  `json:"active,omitempty"`
	Default  *bool  `json:"default,omitempty"`
	Name     string `json:"name"`
	StatusId int32  `json:"statusId"`
}

// StatusRepresentation defines model for StatusRepresentation.
type StatusRepresentation struct {
	Active   *bool       `json:"active,omitempty"`
	Default  *bool       `json:"default,omitempty"`
	Links    *ModelLinks `json:"links,omitempty"`
	Name     string      `json:"name"`
	StatusId int32       `json:"statusId"`
}

// SubCategoryModel defines model for SubCategoryModel.
type SubCategoryModel struct {
	Name          string                `json:"name"`
	Skills        *[]SkillCategoryModel `json:"skills"`
	SubCategoryId int32                 `json:"subCategoryId"`
}

// SubmissionLinks defines model for SubmissionLinks.
type SubmissionLinks struct {
	// Notes Notes
	Notes *string `json:"notes"`
	Self  *string `json:"self"`
}

// SubmissionListRepresentation defines model for SubmissionListRepresentation.
type SubmissionListRepresentation struct {
	Items      *[]SubmissionSummaryModel `json:"items"`
	Links      *PageLinks                `json:"links,omitempty"`
	TotalCount int32                     `json:"totalCount"`
}

// SubmissionRepresentation defines model for SubmissionRepresentation.
type SubmissionRepresentation struct {
	Application      *JobApplicationSummaryModel `json:"application,omitempty"`
	Candidate        *CandidateSummaryModel      `json:"candidate,omitempty"`
	CandidateSummary *string                     `json:"candidateSummary"`
	Company          *CompanyNameModel           `json:"company,omitempty"`
	Contacts         *[]ContactNameModel         `json:"contacts"`
	CreatedAt        *time.Time                  `json:"createdAt"`
	CreatedBy        *UserNameModel              `json:"createdBy,omitempty"`
	Job              *JobOrderSummaryModel       `json:"job,omitempty"`
	JobTitle         *string                     `json:"jobTitle"`
	Links            *SubmissionLinks            `json:"links,omitempty"`
	Owner            *UserNameModel              `json:"owner,omitempty"`
	SubmissionId     int64                       `json:"submissionId"`
	UpdatedAt        *time.Time                  `json:"updatedAt"`
	UpdatedBy        *UserNameModel              `json:"updatedBy,omitempty"`
}

// SubmissionSummaryModel defines model for SubmissionSummaryModel.
type SubmissionSummaryModel struct {
	Candidate    *CandidateSummaryModel `json:"candidate,omitempty"`
	Company      *CompanyNameModel      `json:"company,omitempty"`
	CreatedAt    *time.Time             `json:"createdAt"`
	CreatedBy    *UserNameModel         `json:"createdBy,omitempty"`
	Job          *JobOrderSummaryModel  `json:"job,omitempty"`
	JobTitle     *string                `json:"jobTitle"`
	SubmissionId int64                  `json:"submissionId"`
	UpdatedAt    *time.Time             `json:"updatedAt"`
	UpdatedBy    *UserNameModel         `json:"updatedBy,omitempty"`
}

// SubmitAddressModel defines model for SubmitAddressModel.
type SubmitAddressModel struct {
	City        *string   `json:"city"`
	CountryCode *string   `json:"countryCode"`
	PostalCode  *string   `json:"postalCode"`
	State       *string   `json:"state"`
	Street      *[]string `json:"street"`
}

// SubmitCandidateAttachmentType defines model for SubmitCandidateAttachmentType.
type SubmitCandidateAttachmentType string

// SubmitCandidateAvailabilityModel The date the candidate is available to start. Specify ONE OF immediate, relative or date.
type SubmitCandidateAvailabilityModel struct {
	// Date The specific date that a job starts or a candidate is available
	Date *openapi_types.Date `json:"date"`

	// Immediate The candidate is available for an immediate start
	Immediate *bool                     `json:"immediate,omitempty"`
	Relative  *SubmitRelativeStartModel `json:"relative,omitempty"`
}

// SubmitCandidateEducationModel defines model for SubmitCandidateEducationModel.
type SubmitCandidateEducationModel struct {
	Course *string `json:"course"`

	// Date Year, month or date completed.<br />
	// Year must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />
	// Month must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) "-" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />
	// Date must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31
	Date        *string `json:"date"`
	Institution *string `json:"institution"`
}

// SubmitCategoriesModel defines model for SubmitCategoriesModel.
type SubmitCategoriesModel struct {
	// CategoryId Category to add or update in the skill coding.<br />
	// Specify a categoryId without subCategories for a broad classification.
	// This will remove all previously linked sub-categories associated with the category.
	CategoryId int32 `json:"categoryId"`

	// SubCategories Optional list of sub-categories and skills for detailed skill classification
	SubCategories *[]SubmitSubCategoriesModel `json:"subCategories"`
}

// SubmitCategoryModel defines model for SubmitCategoryModel.
type SubmitCategoryModel struct {
	CategoryId    int32  `json:"categoryId"`
	SubCategoryId *int32 `json:"subCategoryId"`
}

// SubmitCompanyWorkflowApproverModel defines model for SubmitCompanyWorkflowApproverModel.
type SubmitCompanyWorkflowApproverModel struct {
	ContactId  []int32 `json:"contactId"`
	StageIndex int32   `json:"stageIndex"`
}

// SubmitCurrentEmploymentModel defines model for SubmitCurrentEmploymentModel.
type SubmitCurrentEmploymentModel struct {
	Employer   *string            `json:"employer"`
	Position   *string            `json:"position"`
	Salary     *SubmitSalaryModel `json:"salary,omitempty"`
	WorkTypeId *int32             `json:"workTypeId"`
}

// SubmitCustomFieldValueModel defines model for SubmitCustomFieldValueModel.
type SubmitCustomFieldValueModel struct {
	FieldId int32 `json:"fieldId"`

	// Value Text, List or Date ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)) value for this custom field (depending on the field `type`)
	Value *interface{} `json:"value"`
}

// SubmitDurationModel defines model for SubmitDurationModel.
type SubmitDurationModel struct {
	Period *int32        `json:"period,omitempty"`
	Unit   *DurationUnit `json:"unit,omitempty"`
}

// SubmitEmploymentModel defines model for SubmitEmploymentModel.
type SubmitEmploymentModel struct {
	Current *SubmitCurrentEmploymentModel      `json:"current,omitempty"`
	History *[]CandidateEmploymentHistoryModel `json:"history"`
	Ideal   *SubmitIdealEmploymentModel        `json:"ideal,omitempty"`
}

// SubmitIdealEmploymentModel defines model for SubmitIdealEmploymentModel.
type SubmitIdealEmploymentModel struct {
	Other      *[]SubmitIdealSalaryModel `json:"other"`
	Position   *string                   `json:"position"`
	Salary     *SubmitSalaryRangeModel   `json:"salary,omitempty"`
	WorkTypeId *int32                    `json:"workTypeId"`
}

// SubmitIdealSalaryModel defines model for SubmitIdealSalaryModel.
type SubmitIdealSalaryModel struct {
	Salary     *SubmitSalaryRangeModel `json:"salary,omitempty"`
	WorkTypeId *int32                  `json:"workTypeId"`
}

// SubmitInterviewEvaluationCommand defines model for SubmitInterviewEvaluationCommand.
type SubmitInterviewEvaluationCommand struct {
	Comments *string                                 `json:"comments"`
	Rating   *[]SubmitInterviewEvaluationRatingModel `json:"rating"`
}

// SubmitInterviewEvaluationRatingModel defines model for SubmitInterviewEvaluationRatingModel.
type SubmitInterviewEvaluationRatingModel struct {
	Criteria *string `json:"criteria"`
	Rating   *int32  `json:"rating,omitempty"`
}

// SubmitJobApplicationCommand defines model for SubmitJobApplicationCommand.
type SubmitJobApplicationCommand struct {
	Address *SubmitAddressModel `json:"address,omitempty"`

	// Availability The date the candidate is available to start. Specify ONE OF immediate, relative or date.
	Availability *SubmitCandidateAvailabilityModel `json:"availability,omitempty"`

	// Custom Candidate and job application custom field values
	Custom     *SubmitJobApplicationCustomFieldsModel `json:"custom,omitempty"`
	Education  *[]SubmitCandidateEducationModel       `json:"education"`
	Email      string                                 `json:"email"`
	Employment *SubmitEmploymentModel                 `json:"employment,omitempty"`
	FirstName  string                                 `json:"firstName"`
	LastName   string                                 `json:"lastName"`
	Mobile     *string                                `json:"mobile"`
	Phone      *string                                `json:"phone"`
	Salutation *string                                `json:"salutation"`
	Screening  *SubmitScreeningQuesionResultsModel    `json:"screening,omitempty"`
	SkillTags  *[]string                              `json:"skillTags"`
	Social     *map[string]string                     `json:"social"`
}

// SubmitJobApplicationCustomFieldsModel Candidate and job application custom field values
type SubmitJobApplicationCustomFieldsModel struct {
	// Application Job application custom field values
	Application *[]SubmitCustomFieldValueModel `json:"application"`

	// Candidate Candidate custom field values
	Candidate *[]SubmitCustomFieldValueModel `json:"candidate"`
}

// SubmitJobOrderCandidateCommand defines model for SubmitJobOrderCandidateCommand.
type SubmitJobOrderCandidateCommand struct {
	Address *SubmitAddressModel `json:"address,omitempty"`

	// Availability The date the candidate is available to start. Specify ONE OF immediate, relative or date.
	Availability *SubmitCandidateAvailabilityModel `json:"availability,omitempty"`

	// Custom Candidate and job application custom field values
	Custom     *SubmitJobApplicationCustomFieldsModel `json:"custom,omitempty"`
	Education  *[]SubmitCandidateEducationModel       `json:"education"`
	Email      string                                 `json:"email"`
	Employment *SubmitEmploymentModel                 `json:"employment,omitempty"`
	FirstName  string                                 `json:"firstName"`
	LastName   string                                 `json:"lastName"`
	Mobile     *string                                `json:"mobile"`
	Phone      *string                                `json:"phone"`
	Salutation *string                                `json:"salutation"`
	Screening  *SubmitScreeningQuesionResultsModel    `json:"screening,omitempty"`
	SkillTags  *[]string                              `json:"skillTags"`
	Social     *map[string]string                     `json:"social"`
	Source     *string                                `json:"source"`
}

// SubmitJobOrderFeeModel defines model for SubmitJobOrderFeeModel.
type SubmitJobOrderFeeModel struct {
	Currency *string `json:"currency"`

	// EstimatedTotal Optional estimated total fee. If not specified it will be calculated from the duration, salary and fee rate.
	EstimatedTotal *float64             `json:"estimatedTotal,omitempty"`
	Rate           *float64             `json:"rate,omitempty"`
	RateType       *JobOrderFeeRateType `json:"rateType,omitempty"`
}

// SubmitJobOrderSalaryRangeModel defines model for SubmitJobOrderSalaryRangeModel.
type SubmitJobOrderSalaryRangeModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	RateHigh *float64       `json:"rateHigh"`
	RateLow  *float64       `json:"rateLow,omitempty"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`

	// TimePerWeek Number of days per week for a daily rate,
	// hours per day for an hourly rate with a 'Day' duration unit or
	// hours per day for an hourly rate with a 'Week' duration unit.
	TimePerWeek *float64 `json:"timePerWeek"`
}

// SubmitJobOrderSkillTagsModel defines model for SubmitJobOrderSkillTagsModel.
type SubmitJobOrderSkillTagsModel struct {
	MatchAll *bool     `json:"matchAll,omitempty"`
	Tags     *[]string `json:"tags"`
}

// SubmitJobOrderStartModel defines model for SubmitJobOrderStartModel.
type SubmitJobOrderStartModel struct {
	// Date The specific date that the job starts
	Date      *openapi_types.Date       `json:"date"`
	Immediate *bool                     `json:"immediate,omitempty"`
	Relative  *SubmitRelativeStartModel `json:"relative,omitempty"`
}

// SubmitLocationModel defines model for SubmitLocationModel.
type SubmitLocationModel struct {
	AreaId     *int32 `json:"areaId"`
	LocationId int32  `json:"locationId"`
}

// SubmitPlacementBillingModel defines model for SubmitPlacementBillingModel.
type SubmitPlacementBillingModel struct {
	AddressId *openapi_types.UUID `json:"addressId"`
	ContactId *int32              `json:"contactId"`

	// DueDate Payment due date
	DueDate *openapi_types.Date `json:"dueDate"`
	Email   *string             `json:"email"`

	// InvoiceRef Invoice Number/Reference
	InvoiceRef *string `json:"invoiceRef"`

	// OrderRef PO Number/Reference
	OrderRef *string `json:"orderRef"`

	// Terms Billing payment terms
	Terms *string `json:"terms"`
}

// SubmitPlacementContractRateModel defines model for SubmitPlacementContractRateModel.
type SubmitPlacementContractRateModel struct {
	CandidateRate *float64                        `json:"candidateRate,omitempty"`
	ClientRate    *float64                        `json:"clientRate,omitempty"`
	DaysPerWeek   *float64                        `json:"daysPerWeek,omitempty"`
	HoursPerWeek  *float64                        `json:"hoursPerWeek,omitempty"`
	NetMargin     *float64                        `json:"netMargin,omitempty"`
	OnCosts       *float64                        `json:"onCosts,omitempty"`
	OnCostsType   *RatePortion                    `json:"onCostsType,omitempty"`
	RatePer       *SubmitPlacementContractRatePer `json:"ratePer,omitempty"`
}

// SubmitPlacementContractRatePer defines model for SubmitPlacementContractRatePer.
type SubmitPlacementContractRatePer string

// SubmitPlacementRecruiterModel defines model for SubmitPlacementRecruiterModel.
type SubmitPlacementRecruiterModel struct {
	// FeeSplit Optional fee portion, 0.0-1.0 (representing 0%-100%) if placement feeSplit='Percent', a currency amount if placement feeSplit='Fixed'
	FeeSplit *float64 `json:"feeSplit"`

	// UserId Recruiter to be associated with the placement, must also be associated with the related job.
	UserId *int32 `json:"userId,omitempty"`
}

// SubmitPlacementSalaryModel defines model for SubmitPlacementSalaryModel.
type SubmitPlacementSalaryModel struct {
	Base           *float64 `json:"base,omitempty"`
	Fee            *float64 `json:"fee,omitempty"`
	Superannuation *float64 `json:"superannuation,omitempty"`
	Total          *float64 `json:"total,omitempty"`
}

// SubmitRelativeStartModel defines model for SubmitRelativeStartModel.
type SubmitRelativeStartModel struct {
	Period *int32             `json:"period,omitempty"`
	Unit   *RelativeStartUnit `json:"unit,omitempty"`
}

// SubmitRequisitionCommand defines model for SubmitRequisitionCommand.
type SubmitRequisitionCommand = map[string]interface{}

// SubmitSalaryModel defines model for SubmitSalaryModel.
type SubmitSalaryModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	Rate     *float64       `json:"rate,omitempty"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`
}

// SubmitSalaryRangeModel defines model for SubmitSalaryRangeModel.
type SubmitSalaryRangeModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	RateHigh *float64       `json:"rateHigh"`
	RateLow  *float64       `json:"rateLow,omitempty"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`
}

// SubmitScreeningQuesionAnswerModel defines model for SubmitScreeningQuesionAnswerModel.
type SubmitScreeningQuesionAnswerModel struct {
	// Answer Text or List value answer for this screening question (depending on the question `answerType`)
	Answer   *interface{} `json:"answer"`
	Question *string      `json:"question"`

	// Score Optional score for this answer
	Score *int32 `json:"score"`
}

// SubmitScreeningQuesionResultsModel defines model for SubmitScreeningQuesionResultsModel.
type SubmitScreeningQuesionResultsModel struct {
	Answers *[]SubmitScreeningQuesionAnswerModel `json:"answers"`

	// Score Optional overall score for these screening results
	Score *int32 `json:"score"`
}

// SubmitSkillsModel defines model for SubmitSkillsModel.
type SubmitSkillsModel struct {
	// SkillId Skill for detailed skill classification.
	SkillId int32 `json:"skillId"`
}

// SubmitStatusNoteModel Optional note
type SubmitStatusNoteModel struct {
	// Text Note content
	Text *string `json:"text"`

	// Type Optional note type
	Type *string `json:"type"`
}

// SubmitSubCategoriesModel defines model for SubmitSubCategoriesModel.
type SubmitSubCategoriesModel struct {
	// Skills Optional list of skills associated with the sub-category for detailed classification
	Skills *[]SubmitSkillsModel `json:"skills"`

	// SubCategoryId Sub-category for detailed skill classification.<br />
	// Specify a subCategoryId without skills for a broad classification.
	// This will remove all previously linked skills associated with the sub-category.
	SubCategoryId int32 `json:"subCategoryId"`
}

// SubmitUserModel The user creating the note if not the authenticated user.<br />
// Specify either userId or email.
type SubmitUserModel struct {
	Email  *string `json:"email"`
	UserId *int32  `json:"userId"`
}

// SubmitWebhookEventFilterModel defines model for SubmitWebhookEventFilterModel.
type SubmitWebhookEventFilterModel struct {
	JobapplicationStatusChanged *SubmitWebhookEventStatusChangeFilterModel `json:"jobapplication_status_changed,omitempty"`
}

// SubmitWebhookEventStatusChangeFilterModel defines model for SubmitWebhookEventStatusChangeFilterModel.
type SubmitWebhookEventStatusChangeFilterModel struct {
	// StatusActive Limit events to an active/open status
	StatusActive *bool `json:"statusActive,omitempty"`

	// StatusId Limit events to a specific status
	StatusId *[]int32 `json:"statusId"`
}

// SubmitWebhookStatus defines model for SubmitWebhookStatus.
type SubmitWebhookStatus string

// SubmittedJobApplicationLinks defines model for SubmittedJobApplicationLinks.
type SubmittedJobApplicationLinks struct {
	CoverLetter *string `json:"coverLetter"`
	Other       *string `json:"other"`
	Resume      *string `json:"resume"`
}

// SubmittedJobApplicationModel defines model for SubmittedJobApplicationModel.
type SubmittedJobApplicationModel struct {
	ApplicationId *int64                        `json:"applicationId,omitempty"`
	Links         *SubmittedJobApplicationLinks `json:"links,omitempty"`
}

// TimeRangeModel Time of day interval
type TimeRangeModel struct {
	// End End time of day interval ([ISO partial-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	End *string `json:"end,omitempty"`

	// Start Start time of day interval ([ISO partial-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	Start *string `json:"start,omitempty"`
}

// UpdateCandidateAttachmentCommand defines model for UpdateCandidateAttachmentCommand.
type UpdateCandidateAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date      `json:"expiry"`
	Type   *CandidateAttachmentType `json:"type,omitempty"`
}

// UpdateCandidateCommand defines model for UpdateCandidateCommand.
type UpdateCandidateCommand struct {
	Address *SubmitAddressModel `json:"address,omitempty"`

	// Availability The date the candidate is available to start. Specify ONE OF immediate, relative or date.
	Availability     *SubmitCandidateAvailabilityModel `json:"availability,omitempty"`
	Custom           *[]SubmitCustomFieldValueModel    `json:"custom"`
	DateOfBirth      *openapi_types.Date               `json:"dateOfBirth"`
	Education        *[]SubmitCandidateEducationModel  `json:"education"`
	Email            *string                           `json:"email"`
	EmergencyContact *string                           `json:"emergencyContact"`
	EmergencyPhone   *string                           `json:"emergencyPhone"`
	Employment       *SubmitEmploymentModel            `json:"employment,omitempty"`
	FirstName        *string                           `json:"firstName"`
	LastName         *string                           `json:"lastName"`
	Mobile           *string                           `json:"mobile"`
	Phone            *string                           `json:"phone"`
	Rating           *string                           `json:"rating"`
	RecruiterUserId  *[]int32                          `json:"recruiterUserId"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`
	SkillTags  *[]string               `json:"skillTags"`
	Social     *map[string]string      `json:"social"`

	// StatusId Candidate status
	StatusId     *int32  `json:"statusId"`
	Summary      *string `json:"summary"`
	Unsubscribed *bool   `json:"unsubscribed,omitempty"`
}

// UpdateCandidatePartnerActionCommand defines model for UpdateCandidatePartnerActionCommand.
type UpdateCandidatePartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateCandidateSkillsCommand defines model for UpdateCandidateSkillsCommand.
type UpdateCandidateSkillsCommand struct {
	// Categories Skill categories to update for this candidate.<br />
	// Only skills and sub-categories for the submitted categories will be modified.
	Categories *[]SubmitCategoriesModel `json:"categories"`
}

// UpdateCandidateUserTaskCommand defines model for UpdateCandidateUserTaskCommand.
type UpdateCandidateUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateCompanyAddressCommand defines model for UpdateCompanyAddressCommand.
type UpdateCompanyAddressCommand struct {
	City             *string   `json:"city"`
	CountryCode      *string   `json:"countryCode"`
	Fax              *string   `json:"fax"`
	IsPrimaryAddress *bool     `json:"isPrimaryAddress,omitempty"`
	Name             *string   `json:"name"`
	Phone            *string   `json:"phone"`
	PostalCode       *string   `json:"postalCode"`
	State            *string   `json:"state"`
	Street           *[]string `json:"street"`
	Url              *string   `json:"url"`
}

// UpdateCompanyAttachmentCommand defines model for UpdateCompanyAttachmentCommand.
type UpdateCompanyAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date    `json:"expiry"`
	Type   *CompanyAttachmentType `json:"type,omitempty"`
}

// UpdateCompanyCommand defines model for UpdateCompanyCommand.
type UpdateCompanyCommand struct {
	// Custom Custom field values. Only the specified fields will be updated, each fieldId can specified once.
	Custom *[]SubmitCustomFieldValueModel `json:"custom"`

	// LegalName Company LegalName
	LegalName        *string             `json:"legalName"`
	MainContactId    *int32              `json:"mainContactId"`
	Name             *string             `json:"name"`
	OwnerUserId      *int32              `json:"ownerUserId"`
	ParentCompanyId  *int32              `json:"parentCompanyId"`
	PrimaryAddressId *openapi_types.UUID `json:"primaryAddressId"`
	RecruiterUserId  *[]int32            `json:"recruiterUserId"`
	Social           *map[string]string  `json:"social"`

	// StatusId Company status
	StatusId *int32  `json:"statusId"`
	Summary  *string `json:"summary"`
}

// UpdateCompanyPartnerActionCommand defines model for UpdateCompanyPartnerActionCommand.
type UpdateCompanyPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateCompanyUserTaskCommand defines model for UpdateCompanyUserTaskCommand.
type UpdateCompanyUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateCompanyWorkflowCommand defines model for UpdateCompanyWorkflowCommand.
type UpdateCompanyWorkflowCommand struct {
	// Approvers Approvers for this workflow. Only the specified workflow stages will be updated, each stageIndex can be specified once.
	Approvers *[]SubmitCompanyWorkflowApproverModel `json:"approvers"`
	Name      *string                               `json:"name"`
}

// UpdateContactAttachmentCommand defines model for UpdateContactAttachmentCommand.
type UpdateContactAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date    `json:"expiry"`
	Type   *ContactAttachmentType `json:"type,omitempty"`
}

// UpdateContactCommand defines model for UpdateContactCommand.
type UpdateContactCommand struct {
	CompanyId          *int32                         `json:"companyId"`
	Custom             *[]SubmitCustomFieldValueModel `json:"custom"`
	Email              *string                        `json:"email"`
	FirstName          *string                        `json:"firstName"`
	LastName           *string                        `json:"lastName"`
	Mobile             *string                        `json:"mobile"`
	OfficeAddressId    *openapi_types.UUID            `json:"officeAddressId"`
	OwnerUserId        *int32                         `json:"ownerUserId"`
	Phone              *string                        `json:"phone"`
	Position           *string                        `json:"position"`
	RecruiterUserId    *[]int32                       `json:"recruiterUserId"`
	ReportsToContactId *int32                         `json:"reportsToContactId"`

	// Salutation Salutation/honorific/title
	Salutation *string            `json:"salutation"`
	Social     *map[string]string `json:"social"`

	// StatusId Contact status
	StatusId     *int32  `json:"statusId"`
	Summary      *string `json:"summary"`
	Unsubscribed *bool   `json:"unsubscribed,omitempty"`
}

// UpdateContactPartnerActionCommand defines model for UpdateContactPartnerActionCommand.
type UpdateContactPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateContactSkillsCommand defines model for UpdateContactSkillsCommand.
type UpdateContactSkillsCommand struct {
	// Categories Skill categories to update for this contact.<br />
	// Only skills and sub-categories for the submitted categories will be modified.
	Categories *[]SubmitCategoriesModel `json:"categories"`
}

// UpdateContactUserTaskCommand defines model for UpdateContactUserTaskCommand.
type UpdateContactUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateJobAdDraftCommand defines model for UpdateJobAdDraftCommand.
type UpdateJobAdDraftCommand struct {
	BulletPoints *[]string `json:"bulletPoints"`
	Description  *string   `json:"description"`

	// JobId Associated job
	JobId       *int32  `json:"jobId,omitempty"`
	OwnerUserId *int32  `json:"ownerUserId"`
	Reference   *string `json:"reference"`
	Summary     *string `json:"summary"`
	Title       *string `json:"title"`
}

// UpdateJobAdPartnerActionCommand defines model for UpdateJobAdPartnerActionCommand.
type UpdateJobAdPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateJobApplicationAttachmentCommand defines model for UpdateJobApplicationAttachmentCommand.
type UpdateJobApplicationAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date      `json:"expiry"`
	Type   *CandidateAttachmentType `json:"type,omitempty"`
}

// UpdateJobApplicationCommand defines model for UpdateJobApplicationCommand.
type UpdateJobApplicationCommand struct {
	Custom *[]SubmitCustomFieldValueModel `json:"custom"`

	// Rating Job application rating
	Rating *int32 `json:"rating,omitempty"`

	// StatusId Job application status
	StatusId *int32 `json:"statusId,omitempty"`
}

// UpdateJobApplicationInterviewCommand defines model for UpdateJobApplicationInterviewCommand.
type UpdateJobApplicationInterviewCommand struct {
	// EndAt Interview end time. The allowed minutes for the time are 0, 15, 30 and 45.
	EndAt *time.Time `json:"endAt,omitempty"`

	// StartAt Interview start time. The allowed minutes for the time are 0, 15, 30 and 45.
	StartAt *time.Time `json:"startAt,omitempty"`
}

// UpdateJobApplicationPartnerActionCommand defines model for UpdateJobApplicationPartnerActionCommand.
type UpdateJobApplicationPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateJobApplicationUserTaskCommand defines model for UpdateJobApplicationUserTaskCommand.
type UpdateJobApplicationUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateJobOrderAttachmentCommand defines model for UpdateJobOrderAttachmentCommand.
type UpdateJobOrderAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date     `json:"expiry"`
	Type   *JobOrderAttachmentType `json:"type,omitempty"`
}

// UpdateJobOrderCommand defines model for UpdateJobOrderCommand.
type UpdateJobOrderCommand struct {
	Category       *SubmitCategoryModel           `json:"category,omitempty"`
	CompanyId      *int32                         `json:"companyId"`
	ContactId      *int32                         `json:"contactId"`
	Custom         *[]SubmitCustomFieldValueModel `json:"custom"`
	Duration       *SubmitDurationModel           `json:"duration,omitempty"`
	Fee            *SubmitJobOrderFeeModel        `json:"fee,omitempty"`
	JobDescription *string                        `json:"jobDescription"`
	JobTitle       *string                        `json:"jobTitle"`
	Location       *SubmitLocationModel           `json:"location,omitempty"`
	NumberOfJobs   *int32                         `json:"numberOfJobs,omitempty"`

	// OwnerUserId User Id - Owner of this job
	OwnerUserId *int32 `json:"ownerUserId,omitempty"`

	// RecruiterUserId User Id - Optional list of recruiters assigned to the job
	RecruiterUserId *[]int32                        `json:"recruiterUserId"`
	Salary          *SubmitJobOrderSalaryRangeModel `json:"salary,omitempty"`
	SkillTags       *SubmitJobOrderSkillTagsModel   `json:"skillTags,omitempty"`
	Source          *string                         `json:"source"`
	Start           *SubmitJobOrderStartModel       `json:"start,omitempty"`

	// StatusId Job status
	StatusId *int32 `json:"statusId"`

	// UserFavourite Job is a favourite for the current user
	UserFavourite *bool  `json:"userFavourite"`
	WorkTypeId    *int32 `json:"workTypeId"`

	// WorkplaceAddressId Workplace Address Id
	WorkplaceAddressId *openapi_types.UUID `json:"workplaceAddressId"`
}

// UpdateJobOrderPartnerActionCommand defines model for UpdateJobOrderPartnerActionCommand.
type UpdateJobOrderPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateJobOrderUserTaskCommand defines model for UpdateJobOrderUserTaskCommand.
type UpdateJobOrderUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateNoteCommand defines model for UpdateNoteCommand.
type UpdateNoteCommand struct {
	// Text Note content
	Text *string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// UpdateOpportunityCommand defines model for UpdateOpportunityCommand.
type UpdateOpportunityCommand struct {
	AdditionalInformation *string            `json:"additionalInformation"`
	CompanyId             int32              `json:"companyId"`
	EstimatedClose        *time.Time         `json:"estimatedClose"`
	OpportunityTitle      string             `json:"opportunityTitle"`
	OwnerUserIds          []int32            `json:"ownerUserIds"`
	StageId               openapi_types.UUID `json:"stageId"`
	Value                 *float64           `json:"value"`
	WorkTypeId            *int32             `json:"workTypeId"`
}

// UpdatePartnerActionCommand defines model for UpdatePartnerActionCommand.
type UpdatePartnerActionCommand struct {
	ActionFilter *PartnerActionFilterModel `json:"actionFilter,omitempty"`

	// ActionName Menu item label that will appear to the end-user
	ActionName *string `json:"actionName"`

	// AllowResubmit Allow resources to be resubmitted to an action.
	AllowResubmit *bool `json:"allowResubmit,omitempty"`

	// Reference Unique partner defined reference/identifier for the action
	Reference *string `json:"reference"`

	// Url URL to open after the action is selected and assigned the `"Submitted"` stage.\
	// Templates parameters can be used in the URL to identify the resource submitted to the action
	// <table><tr><td>`{userId}`</td><td>Replaced with the User Id of the user performing the action</td></tr><tr><td>`{jobId}`</td><td>Replaced with the Job Id</td></tr><tr><td>`{adId}`</td><td>Replaced with the Job Ad Id</td></tr><tr><td>`{candidateId}`</td><td>Replaced with the Candidate Id</td></tr><tr><td>`{applicationId}`</td><td>Replaced with the Job Application Id</td></tr><tr><td>`{placementId}`</td><td>Replaced with the Placement Id</td></tr><tr><td>`{companyId}`</td><td>Replaced with the Company Id</td></tr><tr><td>`{contactId}`</td><td>Replaced with the Contact Id</td></tr></table>
	Url     *string               `json:"url"`
	UrlType *PartnerActionUrlType `json:"urlType,omitempty"`

	// WebhookData Additional data to include with the webhook notification
	WebhookData *interface{} `json:"webhookData"`
}

// UpdatePlacementAttachmentCommand defines model for UpdatePlacementAttachmentCommand.
type UpdatePlacementAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date      `json:"expiry"`
	Type   *PlacementAttachmentType `json:"type,omitempty"`
}

// UpdatePlacementCommand defines model for UpdatePlacementCommand.
type UpdatePlacementCommand struct {
	Award        *string                           `json:"award"`
	Billing      *SubmitPlacementBillingModel      `json:"billing,omitempty"`
	ContactId    *int32                            `json:"contactId"`
	ContractRate *SubmitPlacementContractRateModel `json:"contractRate,omitempty"`
	Custom       *[]SubmitCustomFieldValueModel    `json:"custom"`

	// EndDate Date a contract or temporary employment ends
	EndDate      *openapi_types.Date              `json:"endDate"`
	FeeSplit     *RatePortion                     `json:"feeSplit,omitempty"`
	IndustryCode *string                          `json:"industryCode"`
	JobTitle     *string                          `json:"jobTitle"`
	PaymentType  *string                          `json:"paymentType"`
	Recruiters   *[]SubmitPlacementRecruiterModel `json:"recruiters"`
	Salary       *SubmitPlacementSalaryModel      `json:"salary,omitempty"`

	// StartDate Date employment begins
	StartDate *openapi_types.Date `json:"startDate,omitempty"`

	// StatusId Placement status
	StatusId *int32  `json:"statusId"`
	Summary  *string `json:"summary"`
}

// UpdatePlacementPartnerActionCommand defines model for UpdatePlacementPartnerActionCommand.
type UpdatePlacementPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdatePlacementUserTaskCommand defines model for UpdatePlacementUserTaskCommand.
type UpdatePlacementUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateRequisitionCommand defines model for UpdateRequisitionCommand.
type UpdateRequisitionCommand struct {
	Category *SubmitCategoryModel `json:"category,omitempty"`

	// ContactId Optional contact associated with the change, must be associated with the same company as the requisition.
	ContactId      *int32                         `json:"contactId"`
	Custom         *[]SubmitCustomFieldValueModel `json:"custom"`
	Duration       *SubmitDurationModel           `json:"duration,omitempty"`
	FormID         *int32                         `json:"formID"`
	JobDescription *string                        `json:"jobDescription"`
	JobTitle       *string                        `json:"jobTitle"`
	Location       *SubmitLocationModel           `json:"location,omitempty"`
	NumberOfJobs   *int32                         `json:"numberOfJobs,omitempty"`

	// RecruiterUserId User Id - Optional list of recruiters assigned to the requisition.
	RecruiterUserId *[]int32                        `json:"recruiterUserId"`
	Salary          *SubmitJobOrderSalaryRangeModel `json:"salary,omitempty"`
	Source          *string                         `json:"source"`
	Start           *SubmitJobOrderStartModel       `json:"start,omitempty"`
	WorkTypeId      *int32                          `json:"workTypeId"`
	WorkflowId      *int32                          `json:"workflowId"`

	// WorkplaceAddressId Workplace address Id
	WorkplaceAddressId *openapi_types.UUID `json:"workplaceAddressId"`
}

// UpdateUserTaskCommand defines model for UpdateUserTaskCommand.
type UpdateUserTaskCommand struct {
	AllDay    *bool      `json:"allDay,omitempty"`
	Assignees *[]int32   `json:"assignees"`
	EndAt     *time.Time `json:"endAt"`
	Priority  *int32     `json:"priority,omitempty"`
	StartAt   *time.Time `json:"startAt"`
	Title     *string    `json:"title"`
}

// UpdateWebhookCommand defines model for UpdateWebhookCommand.
type UpdateWebhookCommand struct {
	// Authorization Optional authorization header to include with the HTTP POST notification.
	Authorization *string                        `json:"authorization"`
	EventFilters  *SubmitWebhookEventFilterModel `json:"eventFilters,omitempty"`
	Events        *[]EventName                   `json:"events"`
	Name          *string                        `json:"name"`
	Status        *SubmitWebhookStatus           `json:"status,omitempty"`

	// Url Target URL that will listen for incoming HTTP POST notification messages.
	Url *string `json:"url"`
}

// UserGroupLinks defines model for UserGroupLinks.
type UserGroupLinks struct {
	Self *string `json:"self"`

	// Users Users belonging to the group
	Users *string `json:"users"`
}

// UserGroupListRepresentation defines model for UserGroupListRepresentation.
type UserGroupListRepresentation struct {
	Items      *[]UserGroupSummaryModel `json:"items"`
	Links      *PageLinks               `json:"links,omitempty"`
	TotalCount int32                    `json:"totalCount"`
}

// UserGroupRepresentation defines model for UserGroupRepresentation.
type UserGroupRepresentation struct {
	GroupId int32           `json:"groupId"`
	Links   *UserGroupLinks `json:"links,omitempty"`
	Name    string          `json:"name"`

	// Users Users belonging to the group
	Users *[]UserSummaryModel `json:"users"`
}

// UserGroupSummaryModel defines model for UserGroupSummaryModel.
type UserGroupSummaryModel struct {
	GroupId int32  `json:"groupId"`
	Name    string `json:"name"`
}

// UserLinks defines model for UserLinks.
type UserLinks struct {
	// Office Office the user belongs to
	Office *string `json:"office"`
	Photo  *string `json:"photo"`
	Self   *string `json:"self"`

	// UserGroups User groups the user belongs to
	UserGroups *string `json:"userGroups"`
}

// UserListRepresentation defines model for UserListRepresentation.
type UserListRepresentation struct {
	Items      *[]UserSummaryModel `json:"items"`
	Links      *PageLinks          `json:"links,omitempty"`
	TotalCount int32               `json:"totalCount"`
}

// UserMatchedByEmailModel defines model for UserMatchedByEmailModel.
type UserMatchedByEmailModel struct {
	Email     *string                   `json:"email"`
	FirstName *string                   `json:"firstName"`
	Inactive  *bool                     `json:"inactive,omitempty"`
	LastName  *string                   `json:"lastName"`
	Match     *MatchedEmailAddressModel `json:"match,omitempty"`
	Mobile    *string                   `json:"mobile"`
	Phone     *string                   `json:"phone"`
	Position  *string                   `json:"position"`
	UpdatedAt *time.Time                `json:"updatedAt"`
	UserId    *int32                    `json:"userId,omitempty"`
}

// UserMatchedByPhoneModel defines model for UserMatchedByPhoneModel.
type UserMatchedByPhoneModel struct {
	Email     *string                  `json:"email"`
	FirstName *string                  `json:"firstName"`
	Inactive  *bool                    `json:"inactive,omitempty"`
	LastName  *string                  `json:"lastName"`
	Match     *MatchedPhoneNumberModel `json:"match,omitempty"`
	Mobile    *string                  `json:"mobile"`
	Phone     *string                  `json:"phone"`
	Position  *string                  `json:"position"`
	UpdatedAt *time.Time               `json:"updatedAt"`
	UserId    *int32                   `json:"userId,omitempty"`
}

// UserNameModel defines model for UserNameModel.
type UserNameModel struct {
	Deleted   *bool   `json:"deleted,omitempty"`
	Email     *string `json:"email"`
	FirstName *string `json:"firstName"`
	Inactive  *bool   `json:"inactive,omitempty"`
	LastName  *string `json:"lastName"`
	Mobile    *string `json:"mobile"`
	Phone     *string `json:"phone"`
	Position  *string `json:"position"`
	UserId    int32   `json:"userId"`
}

// UserOfficeLinks defines model for UserOfficeLinks.
type UserOfficeLinks struct {
	Self *string `json:"self"`

	// Users Users belonging to the office
	Users *string `json:"users"`
}

// UserOfficeListRepresentation defines model for UserOfficeListRepresentation.
type UserOfficeListRepresentation struct {
	Items      *[]UserOfficeNameModel `json:"items"`
	Links      *PageLinks             `json:"links,omitempty"`
	TotalCount int32                  `json:"totalCount"`
}

// UserOfficeNameModel defines model for UserOfficeNameModel.
type UserOfficeNameModel struct {
	Name     string `json:"name"`
	OfficeId int32  `json:"officeId"`
}

// UserOfficeRepresentation defines model for UserOfficeRepresentation.
type UserOfficeRepresentation struct {
	City        *string          `json:"city"`
	Country     *string          `json:"country"`
	CountryCode *string          `json:"countryCode"`
	Fax         *string          `json:"fax"`
	Links       *UserOfficeLinks `json:"links,omitempty"`
	Name        string           `json:"name"`
	OfficeId    int32            `json:"officeId"`
	Phone       *string          `json:"phone"`
	PostalCode  *string          `json:"postalCode"`
	State       *string          `json:"state"`
	Street      *[]string        `json:"street"`
	Url         *string          `json:"url"`

	// Users Users belonging to the office
	Users *[]UserNameModel `json:"users"`
}

// UserOfficeSummaryModel defines model for UserOfficeSummaryModel.
type UserOfficeSummaryModel struct {
	City        *string   `json:"city"`
	Country     *string   `json:"country"`
	CountryCode *string   `json:"countryCode"`
	Fax         *string   `json:"fax"`
	Name        string    `json:"name"`
	OfficeId    int32     `json:"officeId"`
	Phone       *string   `json:"phone"`
	PostalCode  *string   `json:"postalCode"`
	State       *string   `json:"state"`
	Street      *[]string `json:"street"`
	Url         *string   `json:"url"`
}

// UserRepresentation defines model for UserRepresentation.
type UserRepresentation struct {
	AccountName *string                  `json:"accountName"`
	Admin       *bool                    `json:"admin,omitempty"`
	CreatedAt   *time.Time               `json:"createdAt,omitempty"`
	Culture     *string                  `json:"culture"`
	Deleted     *bool                    `json:"deleted,omitempty"`
	Email       *string                  `json:"email"`
	FirstName   *string                  `json:"firstName"`
	Inactive    *bool                    `json:"inactive,omitempty"`
	LastName    *string                  `json:"lastName"`
	Links       *UserLinks               `json:"links,omitempty"`
	MentionName *string                  `json:"mentionName"`
	Mobile      *string                  `json:"mobile"`
	Office      *UserOfficeSummaryModel  `json:"office,omitempty"`
	Phone       *string                  `json:"phone"`
	Position    *string                  `json:"position"`
	TimeZone    *string                  `json:"timeZone"`
	UpdatedAt   *time.Time               `json:"updatedAt,omitempty"`
	UserGroups  *[]UserGroupSummaryModel `json:"userGroups"`
	UserId      int32                    `json:"userId"`
}

// UserSummaryModel defines model for UserSummaryModel.
type UserSummaryModel struct {
	CreatedAt   *time.Time              `json:"createdAt,omitempty"`
	Deleted     *bool                   `json:"deleted,omitempty"`
	Email       *string                 `json:"email"`
	FirstName   *string                 `json:"firstName"`
	Inactive    *bool                   `json:"inactive,omitempty"`
	LastName    *string                 `json:"lastName"`
	MentionName *string                 `json:"mentionName"`
	Mobile      *string                 `json:"mobile"`
	Office      *UserOfficeSummaryModel `json:"office,omitempty"`
	Phone       *string                 `json:"phone"`
	Position    *string                 `json:"position"`
	UpdatedAt   *time.Time              `json:"updatedAt,omitempty"`
	UserId      int32                   `json:"userId"`
}

// UserTaskLinks defines model for UserTaskLinks.
type UserTaskLinks struct {
	Note *string `json:"note"`
	Self *string `json:"self"`
}

// UserTaskListRepresentation defines model for UserTaskListRepresentation.
type UserTaskListRepresentation struct {
	Items      *[]UserTaskSummaryModel `json:"items"`
	Links      *PageLinks              `json:"links,omitempty"`
	TotalCount int32                   `json:"totalCount"`
}

// UserTaskModel defines model for UserTaskModel.
type UserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// UserTaskRepresentation defines model for UserTaskRepresentation.
type UserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// UserTaskSummaryModel defines model for UserTaskSummaryModel.
type UserTaskSummaryModel struct {
	AllDay          *bool            `json:"allDay,omitempty"`
	AssignedTo      *UserNameModel   `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel `json:"assignees"`
	Complete        *bool            `json:"complete,omitempty"`
	CreatedAt       *time.Time       `json:"createdAt"`
	CreatedBy       *UserNameModel   `json:"createdBy,omitempty"`
	EndAt           *time.Time       `json:"endAt"`
	Owner           *UserNameModel   `json:"owner,omitempty"`
	ReminderMinutes *int32           `json:"reminderMinutes"`
	StartAt         *time.Time       `json:"startAt"`
	TaskId          *int64           `json:"taskId,omitempty"`
	Text            *string          `json:"text"`
	UpdatedAt       *time.Time       `json:"updatedAt"`
	UpdatedBy       *UserNameModel   `json:"updatedBy,omitempty"`
}

// WebhookEventFilterModel defines model for WebhookEventFilterModel.
type WebhookEventFilterModel struct {
	JobapplicationStatusChanged *WebhookEventStatusChangeFilterModel `json:"jobapplication_status_changed,omitempty"`
}

// WebhookEventStatusChangeFilterModel defines model for WebhookEventStatusChangeFilterModel.
type WebhookEventStatusChangeFilterModel struct {
	// StatusActive Limit events to an active/open status
	StatusActive *bool `json:"statusActive,omitempty"`

	// StatusId Limit events to a specific status
	StatusId *[]int32 `json:"statusId"`
}

// WebhookListRepresentation defines model for WebhookListRepresentation.
type WebhookListRepresentation struct {
	Items *[]WebhookModel `json:"items"`
	Links *ModelLinks     `json:"links,omitempty"`
}

// WebhookModel defines model for WebhookModel.
type WebhookModel struct {
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	DisabledAt   *time.Time               `json:"disabledAt"`
	EnabledAt    *time.Time               `json:"enabledAt"`
	EventFilters *WebhookEventFilterModel `json:"eventFilters,omitempty"`
	Events       *[]EventName             `json:"events"`
	FailedAt     *time.Time               `json:"failedAt"`
	Name         *string                  `json:"name"`
	Status       *WebhookStatus           `json:"status,omitempty"`
	SuspendedAt  *time.Time               `json:"suspendedAt"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	Url          *string                  `json:"url"`
	WebhookId    *openapi_types.UUID      `json:"webhookId,omitempty"`
}

// WebhookRepresentation defines model for WebhookRepresentation.
type WebhookRepresentation struct {
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	DisabledAt   *time.Time               `json:"disabledAt"`
	EnabledAt    *time.Time               `json:"enabledAt"`
	EventFilters *WebhookEventFilterModel `json:"eventFilters,omitempty"`
	Events       *[]EventName             `json:"events"`
	FailedAt     *time.Time               `json:"failedAt"`
	Links        *ModelLinks              `json:"links,omitempty"`
	Name         *string                  `json:"name"`
	Status       *WebhookStatus           `json:"status,omitempty"`
	SuspendedAt  *time.Time               `json:"suspendedAt"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	Url          *string                  `json:"url"`
	WebhookId    *openapi_types.UUID      `json:"webhookId,omitempty"`
}

// WebhookStatus defines model for WebhookStatus.
type WebhookStatus string

// WorkTypeListRepresentation defines model for WorkTypeListRepresentation.
type WorkTypeListRepresentation struct {
	Items *[]WorkTypeModel `json:"items"`
	Links *ModelLinks      `json:"links,omitempty"`
}

// WorkTypeModel defines model for WorkTypeModel.
type WorkTypeModel struct {
	Name       string         `json:"name"`
	RatePer    *SalaryRatePer `json:"ratePer,omitempty"`
	WorkTypeId int32          `json:"workTypeId"`
}

// FindJobApplicationsParams defines parameters for FindJobApplications.
type FindJobApplicationsParams struct {
	// ApplicationId Application Id
	ApplicationId *[]int64 `form:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`

	// CandidateId Candidate Id
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// JobId Job Id
	JobId *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// AdId Job Ad Id
	AdId *[]int32 `form:"AdId,omitempty" json:"AdId,omitempty"`

	// StatusId Job application status
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	JobTitle *string  `form:"JobTitle,omitempty" json:"JobTitle,omitempty"`

	// Active Search for active job applications
	Active *bool `form:"Active,omitempty" json:"Active,omitempty"`

	// Rejected Search for rejected job applications
	Rejected *bool `form:"Rejected,omitempty" json:"Rejected,omitempty"`

	// ReviewStage Search for job applications at the specified review stage.
	ReviewStage *[]JobApplicationReviewStage `form:"Review.Stage,omitempty" json:"Review.Stage,omitempty"`

	// ReviewUserId Search for job applications submitted for review by the specified users.
	ReviewUserId *[]int32 `form:"Review.UserId,omitempty" json:"Review.UserId,omitempty"`

	// ReviewContactId Search for job applications submitted for review to the specified hiring manager contacts
	ReviewContactId *[]int32 `form:"Review.ContactId,omitempty" json:"Review.ContactId,omitempty"`

	// ReviewSubmittedAt Search for job applications submitted for review at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	ReviewSubmittedAt *[]string `form:"Review.SubmittedAt,omitempty" json:"Review.SubmittedAt,omitempty"`

	// ReviewReviewedAt Search for job applications reviewed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	ReviewReviewedAt *[]string `form:"Review.ReviewedAt,omitempty" json:"Review.ReviewedAt,omitempty"`

	// Keywords Search for key words within the applicant's resume
	Keywords *string `form:"Keywords,omitempty" json:"Keywords,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// CreatedAt Search for job applications created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for job applications last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for job applications updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: createdAt, status.name, review.stage, review.submittedAt, review.reviewedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindJobApplicationActivityParams defines parameters for FindJobApplicationActivity.
type FindJobApplicationActivityParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindJobApplicationActivitySettingsParams defines parameters for FindJobApplicationActivitySettings.
type FindJobApplicationActivitySettingsParams struct {
	Query *FindJobApplicationActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// GetJobApplicationStatusListParams defines parameters for GetJobApplicationStatusList.
type GetJobApplicationStatusListParams struct {
	Rejected *bool    `form:"Rejected,omitempty" json:"Rejected,omitempty"`
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// GetJobApplicationWorkflowListParams defines parameters for GetJobApplicationWorkflowList.
type GetJobApplicationWorkflowListParams struct {
	Query *GetJobApplicationStatusByWorkflowListQuery `form:"query,omitempty" json:"query,omitempty"`
}

// FindJobApplicationAttachmentsParams defines parameters for FindJobApplicationAttachments.
type FindJobApplicationAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]CandidateAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Category Search by attachment label
	Category *[]string `form:"Category,omitempty" json:"Category,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddJobApplicationAttachmentMultipartBody defines parameters for AddJobApplicationAttachment.
type AddJobApplicationAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetJobApplicationInterviewsParams defines parameters for GetJobApplicationInterviews.
type GetJobApplicationInterviewsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetJobApplicationNotesParams defines parameters for GetJobApplicationNotes.
type GetJobApplicationNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindCandidatesParams defines parameters for FindCandidates.
type FindCandidatesParams struct {
	// CandidateId Candidate Id
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// Name Candidate name
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`

	// Email Candidate email
	Email *string `form:"Email,omitempty" json:"Email,omitempty"`

	// Phone Candidate phone or mobile number
	Phone *string `form:"Phone,omitempty" json:"Phone,omitempty"`

	// CurrentPosition Current Position
	CurrentPosition *string `form:"CurrentPosition,omitempty" json:"CurrentPosition,omitempty"`

	// City City
	City *string `form:"City,omitempty" json:"City,omitempty"`

	// State State
	State *string `form:"State,omitempty" json:"State,omitempty"`

	// Location Location (city and/or state)
	Location *string `form:"Location,omitempty" json:"Location,omitempty"`

	// DateOfBirth Candidate date of birth available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	DateOfBirth *time.Time `form:"DateOfBirth,omitempty" json:"DateOfBirth,omitempty"`

	// Keywords Search for key-words within the latest candidate resume
	Keywords *string `form:"Keywords,omitempty" json:"Keywords,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// StatusId Candidate status
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`

	// RecruiterUserId User Id - search candidates by associated recruiters
	RecruiterUserId *[]int32 `form:"RecruiterUserId,omitempty" json:"RecruiterUserId,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// CreatedAt Search for candidates created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for candidates updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Default sort order is by candidateID in ascending order
	// Fields available for sorting are: firstName, lastName, status.name, candidateId, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: recruiters, statistics
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, applications, placements, skills, notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddCandidateParams defines parameters for AddCandidate.
type AddCandidateParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// FindCandidateActivitiesParams defines parameters for FindCandidateActivities.
type FindCandidateActivitiesParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindCandidateActivitySettingsParams defines parameters for FindCandidateActivitySettings.
type FindCandidateActivitySettingsParams struct {
	Query *FindCandidateActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// FindAllCandidateAttachmentsParams defines parameters for FindAllCandidateAttachments.
type FindAllCandidateAttachmentsParams struct {
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// Type Attachment types to include
	Type *[]CandidateAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Category Search by attachment category
	Category *[]string `form:"Category,omitempty" json:"Category,omitempty"`

	// CreatedAt Search for candidate attachment created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for candidate attachment updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// ExpiryDate Search for candidate attachment expiring in the specified date range
	// ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.
	// Specify multiple parameters to search for a range.
	ExpiryDate *[]string `form:"ExpiryDate,omitempty" json:"ExpiryDate,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: candidate
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetCandidateAttachmentCategoryListParams defines parameters for GetCandidateAttachmentCategoryList.
type GetCandidateAttachmentCategoryListParams struct {
	// Type Optionally filter to specific attachment types
	Type *[]CandidateAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`
}

// GetCandidateNoteTypeListParams defines parameters for GetCandidateNoteTypeList.
type GetCandidateNoteTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetCandidateRatingListParams defines parameters for GetCandidateRatingList.
type GetCandidateRatingListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetCandidateSalutationListParams defines parameters for GetCandidateSalutationList.
type GetCandidateSalutationListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetCandidateSourceListParams defines parameters for GetCandidateSourceList.
type GetCandidateSourceListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetCandidateStatusListParams defines parameters for GetCandidateStatusList.
type GetCandidateStatusListParams struct {
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// FindCandidatesPayrollBillingsParams defines parameters for FindCandidatesPayrollBillings.
type FindCandidatesPayrollBillingsParams struct {
	// CandidateId Candidate Ids
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`
}

// GetCandidateParams defines parameters for GetCandidate.
type GetCandidateParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: skills, notes, applications, placements
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// UpdateCandidateParams defines parameters for UpdateCandidate.
type UpdateCandidateParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// GetCandidateJobApplicationsParams defines parameters for GetCandidateJobApplications.
type GetCandidateJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetActiveCandidateJobApplicationsParams defines parameters for GetActiveCandidateJobApplications.
type GetActiveCandidateJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// FindCandidateAttachmentsParams defines parameters for FindCandidateAttachments.
type FindCandidateAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]CandidateAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Category Search by attachment category
	Category *[]string `form:"Category,omitempty" json:"Category,omitempty"`

	// Latest Find the latest version of each attachment type
	Latest *bool `form:"Latest,omitempty" json:"Latest,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddCandidateAttachmentMultipartBody defines parameters for AddCandidateAttachment.
type AddCandidateAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// DeleteCandidateAvailabilityWeekParams defines parameters for DeleteCandidateAvailabilityWeek.
type DeleteCandidateAvailabilityWeekParams struct {
	// WeekOf Remove availability for the week (beginning Sunday) containing the specified date
	WeekOf time.Time `form:"WeekOf" json:"WeekOf"`

	// Recurring Remove availability in following weeks. Previous/past recurring schedules will be terminated prior to this schedule, all existing future overlapping schedules will be cancelled.
	Recurring *bool `form:"Recurring,omitempty" json:"Recurring,omitempty"`

	// Until Optional end date of repeating availability removal
	Until *time.Time `form:"Until,omitempty" json:"Until,omitempty"`
}

// GetCandidateInterviewsParams defines parameters for GetCandidateInterviews.
type GetCandidateInterviewsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetCandidateNotesParams defines parameters for GetCandidateNotes.
type GetCandidateNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetCandidatePhotoParams defines parameters for GetCandidatePhoto.
type GetCandidatePhotoParams struct {
	// W Reduce the size of the photo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the photo to fit the height specified by h
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// HeadCandidatePhotoParams defines parameters for HeadCandidatePhoto.
type HeadCandidatePhotoParams struct {
	// W Reduce the size of the photo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the photo to fit the height specified by h
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// UpdateCandidatePhotoMultipartBody defines parameters for UpdateCandidatePhoto.
type UpdateCandidatePhotoMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// FindCategoriesParams defines parameters for FindCategories.
type FindCategoriesParams struct {
	CategoryId *[]int32               `form:"CategoryId,omitempty" json:"CategoryId,omitempty"`
	Embed      *[]FindCategoriesEmbed `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindCompaniesParams defines parameters for FindCompanies.
type FindCompaniesParams struct {
	// Name Company name
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`

	// CompanyId Companies by Id
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// ParentId Find subsidiaries of specified parent companies
	ParentId *[]int32 `form:"ParentId,omitempty" json:"ParentId,omitempty"`

	// SubsidiaryId Find parents of specified subsidiaries
	SubsidiaryId *[]int32 `form:"SubsidiaryId,omitempty" json:"SubsidiaryId,omitempty"`

	// StatusId Company status
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// CreatedBy User Id - search for companies created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for companies created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for companies last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for companies updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, addresses, contacts, subsidiaries, skills, notes, jobs, placements, workflows
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddCompanyParams defines parameters for AddCompany.
type AddCompanyParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// FindCompanyActivityParams defines parameters for FindCompanyActivity.
type FindCompanyActivityParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindCompanyActivitySettingsParams defines parameters for FindCompanyActivitySettings.
type FindCompanyActivitySettingsParams struct {
	Query *FindCompanyActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// GetCompanyAttachmentCategoryListParams defines parameters for GetCompanyAttachmentCategoryList.
type GetCompanyAttachmentCategoryListParams struct {
	// Type Optionally filter to specific attachment types
	Type *[]CompanyAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`
}

// GetCompanyNoteTypeListParams defines parameters for GetCompanyNoteTypeList.
type GetCompanyNoteTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetCompanyStatusListParams defines parameters for GetCompanyStatusList.
type GetCompanyStatusListParams struct {
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// GetCompanyParams defines parameters for GetCompany.
type GetCompanyParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: addresses, contacts, subsidiaries, skills, notes, jobs, placements, workflows
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// UpdateCompanyParams defines parameters for UpdateCompany.
type UpdateCompanyParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// FindCompanyAttachmentsParams defines parameters for FindCompanyAttachments.
type FindCompanyAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]CompanyAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Latest Find the latest version of each attachment type
	Latest *bool `form:"Latest,omitempty" json:"Latest,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddCompanyAttachmentMultipartBody defines parameters for AddCompanyAttachment.
type AddCompanyAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetCompanyLogoParams defines parameters for GetCompanyLogo.
type GetCompanyLogoParams struct {
	// W Reduce the size of the logo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the logo to fit the height specified by h
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// HeadCompanyLogoParams defines parameters for HeadCompanyLogo.
type HeadCompanyLogoParams struct {
	// W Reduce the size of the logo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the logo to fit the height specified by h
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// UpdateCompanyLogoMultipartBody defines parameters for UpdateCompanyLogo.
type UpdateCompanyLogoMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetCompanyNotesParams defines parameters for GetCompanyNotes.
type GetCompanyNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// ListCompanyWorkflowsParams defines parameters for ListCompanyWorkflows.
type ListCompanyWorkflowsParams struct {
	WorkflowId *[]int32                       `form:"WorkflowId,omitempty" json:"WorkflowId,omitempty"`
	Include    *[]FindCompanyWorkflowsInclude `form:"Include,omitempty" json:"Include,omitempty"`

	// Embed Embed related resources within the results.
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// FindContactsParams defines parameters for FindContacts.
type FindContactsParams struct {
	// ContactId Contact Id
	ContactId *[]int32 `form:"ContactId,omitempty" json:"ContactId,omitempty"`

	// Name Contact name
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`

	// Email Contact email
	Email *string `form:"Email,omitempty" json:"Email,omitempty"`

	// Phone Contact phone or mobile number
	Phone *string `form:"Phone,omitempty" json:"Phone,omitempty"`

	// CompanyId Company Id
	CompanyId     *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`
	HiringManager *bool    `form:"HiringManager,omitempty" json:"HiringManager,omitempty"`
	StatusId      *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// CreatedBy User Id - search for contacts created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for contacts created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for contacts last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for contacts updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, skills, notes, jobs
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddContactParams defines parameters for AddContact.
type AddContactParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// FindContactActivityParams defines parameters for FindContactActivity.
type FindContactActivityParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindContactActivitySettingsParams defines parameters for FindContactActivitySettings.
type FindContactActivitySettingsParams struct {
	Query *FindContactActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// GetContactAttachmentCategoryListParams defines parameters for GetContactAttachmentCategoryList.
type GetContactAttachmentCategoryListParams struct {
	// Type Optionally filter to specific attachment types
	Type *[]ContactAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`
}

// GetContactNoteTypeListParams defines parameters for GetContactNoteTypeList.
type GetContactNoteTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetContactSalutationListParams defines parameters for GetContactSalutationList.
type GetContactSalutationListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetContactStatusListParams defines parameters for GetContactStatusList.
type GetContactStatusListParams struct {
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// GetContactParams defines parameters for GetContact.
type GetContactParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: skills, notes, jobs
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// UpdateContactParams defines parameters for UpdateContact.
type UpdateContactParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// FindContactAttachmentsParams defines parameters for FindContactAttachments.
type FindContactAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]ContactAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Latest Find the latest version of each attachment type
	Latest *bool `form:"Latest,omitempty" json:"Latest,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddContactAttachmentMultipartBody defines parameters for AddContactAttachment.
type AddContactAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetContactInterviewsParams defines parameters for GetContactInterviews.
type GetContactInterviewsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetContactNotesParams defines parameters for GetContactNotes.
type GetContactNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetContactPhotoParams defines parameters for GetContactPhoto.
type GetContactPhotoParams struct {
	// W Reduce the size of the photo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the photo to fit the height specified by g
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// HeadContactPhotoParams defines parameters for HeadContactPhoto.
type HeadContactPhotoParams struct {
	// W Reduce the size of the photo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the photo to fit the height specified by g
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// UpdateContactPhotoMultipartBody defines parameters for UpdateContactPhoto.
type UpdateContactPhotoMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// FindCountriesParams defines parameters for FindCountries.
type FindCountriesParams struct {
	Code *[]string `form:"Code,omitempty" json:"Code,omitempty"`
}

// GetFloatsParams defines parameters for GetFloats.
type GetFloatsParams struct {
	// FloatId Float Id
	FloatId *[]int64 `form:"FloatId,omitempty" json:"FloatId,omitempty"`

	// CandidateId Candidate Id
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// CompanyId Company Id
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// CreatedAt Search for floats created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for floats updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindFoldersParams defines parameters for FindFolders.
type FindFoldersParams struct {
	// FolderId Folder Id
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// JobId Job Id
	JobId *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// CandidateId Candidate Id
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// ApplicationId Job Application Id
	ApplicationId *[]int64 `form:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`

	// PlacementId Placement Id
	PlacementId *[]int32 `form:"PlacementId,omitempty" json:"PlacementId,omitempty"`

	// CompanyId Company Id
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// ContactId Contact Id
	ContactId *[]int32 `form:"ContactId,omitempty" json:"ContactId,omitempty"`

	// UserId User Id - search for folders by owner or shared with the specified users
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// OwnerUserId User Id - search for folders by owner
	OwnerUserId *[]int32 `form:"OwnerUserId,omitempty" json:"OwnerUserId,omitempty"`

	// SharedWithUserId User Id - search folders shared with the specified users
	SharedWithUserId *[]int32 `form:"SharedWithUserId,omitempty" json:"SharedWithUserId,omitempty"`

	// OwnerStatus Owner status
	OwnerStatus *FolderOwnerStatus `form:"OwnerStatus,omitempty" json:"OwnerStatus,omitempty"`

	// CreatedAt Search for folders created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for folders updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: sharedWith
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, jobs, candidates, applications, contacts, companies, placements
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// EmbedMode Determines what gets returned when embed option is one of self or candidates/contacts/etc.<br />
	// Resources available to embedMode are: id
	EmbedMode *string `form:"EmbedMode,omitempty" json:"EmbedMode,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetFolderParams defines parameters for GetFolder.
type GetFolderParams struct {
	// EmbedMode Determines what gets returned when embed option is one of self or canddiates/contacts/etc.<br />
	// Resources available to embedMode are: id
	EmbedMode *string `form:"EmbedMode,omitempty" json:"EmbedMode,omitempty"`
}

// PatchFolderJSONBody defines parameters for PatchFolder.
type PatchFolderJSONBody = []Operation

// FindInterviewsParams defines parameters for FindInterviews.
type FindInterviewsParams struct {
	InterviewId *[]int32 `form:"InterviewId,omitempty" json:"InterviewId,omitempty"`
	JobId       *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// UserId User Id - search for internal/user interviewers
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// ContactId Contact Id - search for external/contact interviewers
	ContactId *[]int32 `form:"ContactId,omitempty" json:"ContactId,omitempty"`

	// CandidateId Candidate Id - search for interviewees by candidateId
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// ApplicationId Application Id - search for interviewees by applicationId
	ApplicationId *[]int64         `form:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`
	Type          *[]InterviewType `form:"Type,omitempty" json:"Type,omitempty"`

	// StartAt Search for interviews starting at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	StartAt *[]string `form:"StartAt,omitempty" json:"StartAt,omitempty"`

	// EndAt Search for interviews ending at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	EndAt    *[]string `form:"EndAt,omitempty" json:"EndAt,omitempty"`
	Location *string   `form:"Location,omitempty" json:"Location,omitempty"`

	// CreatedBy User Id - search for interviews created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for interviews created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for interviews updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, evaluations
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetInterviewParams defines parameters for GetInterview.
type GetInterviewParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: evaluations
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// GetJobAdsParams defines parameters for GetJobAds.
type GetJobAdsParams struct {
	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: self,applications,partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, applications
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetJobAdParams defines parameters for GetJobAd.
type GetJobAdParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: applications
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// GetJobAdJobApplicationsParams defines parameters for GetJobAdJobApplications.
type GetJobAdJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetJobAdActiveJobApplicationsParams defines parameters for GetJobAdActiveJobApplications.
type GetJobAdActiveJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindJobBoardsParams defines parameters for FindJobBoards.
type FindJobBoardsParams struct {
	// BoardId Job Board Id
	BoardId *[]int32 `form:"BoardId,omitempty" json:"BoardId,omitempty"`
}

// FindJobBoardJobAdsParams defines parameters for FindJobBoardJobAds.
type FindJobBoardJobAdsParams struct {
	AdId           *[]int32  `form:"AdId,omitempty" json:"AdId,omitempty"`
	Reference      *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`
	PortalHotJob   *bool     `form:"Portal.HotJob,omitempty" json:"Portal.HotJob,omitempty"`
	PortalValue    *[]string `form:"Portal.Value,omitempty" json:"Portal.Value,omitempty"`
	PortalValueId  *[]int32  `form:"Portal.ValueId,omitempty" json:"Portal.ValueId,omitempty"`
	PortalTemplate *[]string `form:"Portal.Template,omitempty" json:"Portal.Template,omitempty"`

	// PostedAt Search for job ads posted at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PostedAt *[]string `form:"PostedAt,omitempty" json:"PostedAt,omitempty"`

	// UpdatedAt Search for job ads updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// ExpiresAt Search for job ads expiring at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	ExpiresAt *[]string `form:"ExpiresAt,omitempty" json:"ExpiresAt,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: ```description```, ```portal.fields```
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AttachJobBoardJobApplicationDocumentMultipartBody defines parameters for AttachJobBoardJobApplicationDocument.
type AttachJobBoardJobApplicationDocumentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// FindJobOrdersParams defines parameters for FindJobOrders.
type FindJobOrdersParams struct {
	// JobId Job Id
	JobId *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// JobTitle Job title
	JobTitle *string `form:"JobTitle,omitempty" json:"JobTitle,omitempty"`

	// CompanyCompanyId Companies by Id
	CompanyCompanyId *[]int32 `form:"Company.CompanyId,omitempty" json:"Company.CompanyId,omitempty"`

	// CompanyName Company name
	CompanyName *string `form:"Company.Name,omitempty" json:"Company.Name,omitempty"`

	// CompanyId Alias for company.companyId
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// ContactId Contact Id
	ContactId *[]int32 `form:"ContactId,omitempty" json:"ContactId,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// StatusId Job status
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`

	// Active Search for active/open jobs
	Active *bool `form:"Active,omitempty" json:"Active,omitempty"`

	// UserFavourite Search for the user's favourite jobs
	UserFavourite *bool `form:"UserFavourite,omitempty" json:"UserFavourite,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// UserId User Id - search for jobs by owner or associated recruiter
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// OwnerUserId User Id - search for jobs by owner
	OwnerUserId *[]int32 `form:"OwnerUserId,omitempty" json:"OwnerUserId,omitempty"`

	// RecruiterUserId User Id - search jobs by associated recruiters
	RecruiterUserId *[]int32 `form:"RecruiterUserId,omitempty" json:"RecruiterUserId,omitempty"`

	// CreatedBy User Id - search for jobs created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for jobs created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for jobs last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for jobs updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// ClosedBy User Id - search for jobs last closed by the specified user(s)
	ClosedBy *[]int32 `form:"ClosedBy,omitempty" json:"ClosedBy,omitempty"`

	// ClosedAt Search for jobs closed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	ClosedAt *[]string `form:"ClosedAt,omitempty" json:"ClosedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: jobTitle, status.name, createdAt, updatedAt, closedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: recruiters, statistics, partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, notes, applications
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindJobOrderActivityParams defines parameters for FindJobOrderActivity.
type FindJobOrderActivityParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindJobOrderActivitySettingsParams defines parameters for FindJobOrderActivitySettings.
type FindJobOrderActivitySettingsParams struct {
	Query *FindJobOrderActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// GetJobOrderAttachmentCategoryListParams defines parameters for GetJobOrderAttachmentCategoryList.
type GetJobOrderAttachmentCategoryListParams struct {
	// Type Optionally filter to specific attachment types
	Type *[]JobOrderAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`
}

// GetJobOrderNoteTypeListParams defines parameters for GetJobOrderNoteTypeList.
type GetJobOrderNoteTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetJobOrderSourceListParams defines parameters for GetJobOrderSourceList.
type GetJobOrderSourceListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetJobOrderStatusListParams defines parameters for GetJobOrderStatusList.
type GetJobOrderStatusListParams struct {
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// GetJobOrderParams defines parameters for GetJobOrder.
type GetJobOrderParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: applications, notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// GetJobOrderJobApplicationsParams defines parameters for GetJobOrderJobApplications.
type GetJobOrderJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetJobOrderActiveJobApplicationsParams defines parameters for GetJobOrderActiveJobApplications.
type GetJobOrderActiveJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// FindJobOrderAttachmentsParams defines parameters for FindJobOrderAttachments.
type FindJobOrderAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]JobOrderAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Latest Find the latest version of each attachment type
	Latest *bool `form:"Latest,omitempty" json:"Latest,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddJobOrderAttachmentMultipartBody defines parameters for AddJobOrderAttachment.
type AddJobOrderAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetJobOrderNotesParams defines parameters for GetJobOrderNotes.
type GetJobOrderNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindLocationsParams defines parameters for FindLocations.
type FindLocationsParams struct {
	LocationId *[]int32              `form:"LocationId,omitempty" json:"LocationId,omitempty"`
	Embed      *[]FindLocationsEmbed `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// FindNotesParams defines parameters for FindNotes.
type FindNotesParams struct {
	// CandidateId Candidate Id
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// CompanyId Company Id
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// ContactId Contact Id
	ContactId *[]int32 `form:"ContactId,omitempty" json:"ContactId,omitempty"`

	// JobId Job Id
	JobId *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// RequisitionId Requisition Id
	RequisitionId *[]int32 `form:"RequisitionId,omitempty" json:"RequisitionId,omitempty"`

	// ApplicationId Job Application Id
	ApplicationId *[]int64 `form:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`

	// PlacementId Placement Id
	PlacementId *[]int32 `form:"PlacementId,omitempty" json:"PlacementId,omitempty"`

	// EntityType Filter notes by Entity Type.<br />
	// Entity Type must be any of: candidate, contact, company, job, placement, requisition
	EntityType *string `form:"EntityType,omitempty" json:"EntityType,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, candidates, contacts, placements, jobs, jobapplications, companies, requisitions
	// Note: embed=self everything is embeded by default
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddNoteAttachmentMultipartBody defines parameters for AddNoteAttachment.
type AddNoteAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// FindPartnerActionsParams defines parameters for FindPartnerActions.
type FindPartnerActionsParams struct {
	// ActionType Type of action
	ActionType *[]PartnerActionType `form:"ActionType,omitempty" json:"ActionType,omitempty"`

	// ActionId Unique identifier for partner actions
	ActionId *[]openapi_types.UUID `form:"ActionId,omitempty" json:"ActionId,omitempty"`

	// Reference Partner supplied unique reference for the action
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`
}

// GetPartnerActionJobApplicationsParams defines parameters for GetPartnerActionJobApplications.
type GetPartnerActionJobApplicationsParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionCandidatesParams defines parameters for GetPartnerActionCandidates.
type GetPartnerActionCandidatesParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionCompaniesParams defines parameters for GetPartnerActionCompanies.
type GetPartnerActionCompaniesParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionContactsParams defines parameters for GetPartnerActionContacts.
type GetPartnerActionContactsParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionJobAdsParams defines parameters for GetPartnerActionJobAds.
type GetPartnerActionJobAdsParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionJobOrdersParams defines parameters for GetPartnerActionJobOrders.
type GetPartnerActionJobOrdersParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionPlacementsParams defines parameters for GetPartnerActionPlacements.
type GetPartnerActionPlacementsParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindPlacementsParams defines parameters for FindPlacements.
type FindPlacementsParams struct {
	// PlacementId Placement Id
	PlacementId *[]int32 `form:"PlacementId,omitempty" json:"PlacementId,omitempty"`

	// Type Placement Type
	Type *[]PlacementType `form:"Type,omitempty" json:"Type,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// StatusId Placement status
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`

	// CandidateCandidateId Candidate Id
	CandidateCandidateId *[]int32 `form:"Candidate.CandidateId,omitempty" json:"Candidate.CandidateId,omitempty"`

	// CandidateName Candidate name
	CandidateName *string `form:"Candidate.Name,omitempty" json:"Candidate.Name,omitempty"`

	// CandidateId Alias for candidate.candidateId
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// CompanyCompanyId Companies by Id
	CompanyCompanyId *[]int32 `form:"Company.CompanyId,omitempty" json:"Company.CompanyId,omitempty"`

	// CompanyName Company name
	CompanyName *string `form:"Company.Name,omitempty" json:"Company.Name,omitempty"`

	// CompanyId Alias for company.companyId
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// JobId Job Id
	JobId *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// ApplicationId Job Application Id
	ApplicationId *[]int64 `form:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`

	// StartDate Search for placements starting in the specified date range
	// ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.
	// Specify multiple parameters to search for a range.
	StartDate *[]string `form:"StartDate,omitempty" json:"StartDate,omitempty"`

	// EndDate Search for placements ending in the specified date range
	// ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.
	// Specify multiple parameters to search for a range.
	EndDate *[]string `form:"EndDate,omitempty" json:"EndDate,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// UserId User Id - search for placements by owner or associated recruiter
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// OwnerUserId User Id - search for placements by owner
	OwnerUserId *[]int32 `form:"OwnerUserId,omitempty" json:"OwnerUserId,omitempty"`

	// RecruiterUserId User Id - search placements by associated recruiters
	RecruiterUserId *[]int32 `form:"RecruiterUserId,omitempty" json:"RecruiterUserId,omitempty"`

	// CreatedBy User Id - search for placements created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for placements created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for placements last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for placements updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Approved Search for approved placements
	Approved *bool `form:"Approved,omitempty" json:"Approved,omitempty"`

	// ApprovedBy User Id - search for placements approved by the specified user(s)
	ApprovedBy *[]int32 `form:"ApprovedBy,omitempty" json:"ApprovedBy,omitempty"`

	// ApprovedAt Search for placements approved at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	ApprovedAt *[]string `form:"ApprovedAt,omitempty" json:"ApprovedAt,omitempty"`

	// Export Search for placements that have been flagged by the user for export to integration partners.
	Export *[]FindPlacementByExport `form:"Export,omitempty" json:"Export,omitempty"`

	// TimesheetPeriod Find placements with timesheets in the specified date range
	// ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.
	// Specify multiple parameters to search for a range.
	TimesheetPeriod *[]string `form:"Timesheet.Period,omitempty" json:"Timesheet.Period,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindPlacementActivityParams defines parameters for FindPlacementActivity.
type FindPlacementActivityParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindPlacementActivitySettingsParams defines parameters for FindPlacementActivitySettings.
type FindPlacementActivitySettingsParams struct {
	Query *FindPlacementActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// GetPlacementAttachmentCategoryListParams defines parameters for GetPlacementAttachmentCategoryList.
type GetPlacementAttachmentCategoryListParams struct {
	// Type Optionally filter to specific attachment types
	Type *[]PlacementAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`
}

// GetPlacementAwardListParams defines parameters for GetPlacementAwardList.
type GetPlacementAwardListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetPlacementBillingTermsListParams defines parameters for GetPlacementBillingTermsList.
type GetPlacementBillingTermsListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetPlacementIndustryCodeListParams defines parameters for GetPlacementIndustryCodeList.
type GetPlacementIndustryCodeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetPlacementNoteTypeListParams defines parameters for GetPlacementNoteTypeList.
type GetPlacementNoteTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetPlacementPaymentTypeListParams defines parameters for GetPlacementPaymentTypeList.
type GetPlacementPaymentTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetPlacementStatusListParams defines parameters for GetPlacementStatusList.
type GetPlacementStatusListParams struct {
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// GetPlacementParams defines parameters for GetPlacement.
type GetPlacementParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// FindPlacementAttachmentsParams defines parameters for FindPlacementAttachments.
type FindPlacementAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]PlacementAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Latest Find the latest version of each attachment type
	Latest *bool `form:"Latest,omitempty" json:"Latest,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddPlacementAttachmentMultipartBody defines parameters for AddPlacementAttachment.
type AddPlacementAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetPlacementNotesParams defines parameters for GetPlacementNotes.
type GetPlacementNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPlacementTimesheetsParams defines parameters for GetPlacementTimesheets.
type GetPlacementTimesheetsParams struct {
	// Period Get timesheets for a specific date range
	// ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with < or > to search dates before or after (inclusive) the specified date.
	// Specify multiple parameters to search for a range.
	Period *[]string `form:"period,omitempty" json:"period,omitempty"`
}

// FindRequisitionsParams defines parameters for FindRequisitions.
type FindRequisitionsParams struct {
	// RequisitionId Requisition Id
	RequisitionId *[]int32 `form:"RequisitionId,omitempty" json:"RequisitionId,omitempty"`

	// CompanyId Company Id
	CompanyId              *[]int32             `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`
	Status                 *[]RequisitionStatus `form:"Status,omitempty" json:"Status,omitempty"`
	HiringManagerContactId *[]int32             `form:"HiringManager.ContactId,omitempty" json:"HiringManager.ContactId,omitempty"`
	HiringManagerName      *string              `form:"HiringManager.Name,omitempty" json:"HiringManager.Name,omitempty"`

	// ApproverContactId Find requisitions by approver contact id
	ApproverContactId *[]int32 `form:"Approver.ContactId,omitempty" json:"Approver.ContactId,omitempty"`
	ApproverName      *string  `form:"Approver.Name,omitempty" json:"Approver.Name,omitempty"`

	// ApproverPending Find requisitions pending approval by contacts specified in approver.contactId
	ApproverPending *bool `form:"Approver.Pending,omitempty" json:"Approver.Pending,omitempty"`

	// UserId User Id - search for requisitions by owner or associated recruiter
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// OwnerUserId User Id - search for requisitions by owner
	OwnerUserId *[]int32 `form:"OwnerUserId,omitempty" json:"OwnerUserId,omitempty"`

	// RecruiterUserId User Id - search for requisitions by associated recruiters
	RecruiterUserId *[]int32 `form:"RecruiterUserId,omitempty" json:"RecruiterUserId,omitempty"`

	// CreatedAt Search for jobs created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for jobs updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: jobTitle, status, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: workflow
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Linked resources to embed in the results<br />
	// Resources available are: self, notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetRequisitionParams defines parameters for GetRequisition.
type GetRequisitionParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// AddRequisitionAttachmentMultipartBody defines parameters for AddRequisitionAttachment.
type AddRequisitionAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetRequisitionApprovalHistoryParams defines parameters for GetRequisitionApprovalHistory.
type GetRequisitionApprovalHistoryParams struct {
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetRequisitionNotesParams defines parameters for GetRequisitionNotes.
type GetRequisitionNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindEmailAddressParams defines parameters for FindEmailAddress.
type FindEmailAddressParams struct {
	// Email Email address to search for.
	Email *string `form:"Email,omitempty" json:"Email,omitempty"`
}

// FindPhoneNumberParams defines parameters for FindPhoneNumber.
type FindPhoneNumberParams struct {
	// E164 [E.164 format phone number](https://en.wikipedia.org/wiki/E.164) to search for.
	E164 *string `form:"E164,omitempty" json:"E164,omitempty"`
}

// FindSubmissionsParams defines parameters for FindSubmissions.
type FindSubmissionsParams struct {
	SubmissionId *[]int64 `form:"SubmissionId,omitempty" json:"SubmissionId,omitempty"`
	CandidateId  *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`
	CompanyId    *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`
	JobId        *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// CreatedAt Search for submissions created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for submissions updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindUserGroupsParams defines parameters for FindUserGroups.
type FindUserGroupsParams struct {
	GroupId *[]int32 `form:"GroupId,omitempty" json:"GroupId,omitempty"`
	UserId  *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindUserOfficesParams defines parameters for FindUserOffices.
type FindUserOfficesParams struct {
	OfficeId *[]int32 `form:"OfficeId,omitempty" json:"OfficeId,omitempty"`
	UserId   *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindUsersParams defines parameters for FindUsers.
type FindUsersParams struct {
	UserId   *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`
	OfficeId *[]int32 `form:"OfficeId,omitempty" json:"OfficeId,omitempty"`
	GroupId  *[]int32 `form:"GroupId,omitempty" json:"GroupId,omitempty"`

	// CreatedAt Search for users created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for jobs last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for users updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string           `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	Include   *[]FindUsersInclude `form:"Include,omitempty" json:"Include,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetUserInterviewsParams defines parameters for GetUserInterviews.
type GetUserInterviewsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindUserUserTasksParams defines parameters for FindUserUserTasks.
type FindUserUserTasksParams struct {
	// StartAt Search for tasks starting at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	StartAt *[]string               `form:"StartAt,omitempty" json:"StartAt,omitempty"`
	Include *[]FindUserTasksInclude `form:"Include,omitempty" json:"Include,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindUserTasksParams defines parameters for FindUserTasks.
type FindUserTasksParams struct {
	// UserId Search for tasks assigned to or owned by the specified users
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// StartAt Search for tasks starting at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	StartAt *[]string `form:"StartAt,omitempty" json:"StartAt,omitempty"`

	// CreatedBy User Id - search for companies created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for tasks created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for companies last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for tasks updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string               `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	Include   *[]FindUserTasksInclude `form:"Include,omitempty" json:"Include,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindWebhooksParams defines parameters for FindWebhooks.
type FindWebhooksParams struct {
	Status *[]WebhookStatus `form:"Status,omitempty" json:"Status,omitempty"`
	Events *[]EventName     `form:"Events,omitempty" json:"Events,omitempty"`
}

// FindWorkTypesParams defines parameters for FindWorkTypes.
type FindWorkTypesParams struct {
	WorkTypeId *[]int32 `form:"WorkTypeId,omitempty" json:"WorkTypeId,omitempty"`
}

// PutJobApplicationCustomFieldListJSONRequestBody defines body for PutJobApplicationCustomFieldList for application/json ContentType.
type PutJobApplicationCustomFieldListJSONRequestBody = SetJobApplicationCustomFieldListValuesCommand

// UpdateJobApplicationJSONRequestBody defines body for UpdateJobApplication for application/json ContentType.
type UpdateJobApplicationJSONRequestBody = UpdateJobApplicationCommand

// AddJobApplicationActivityJSONRequestBody defines body for AddJobApplicationActivity for application/json ContentType.
type AddJobApplicationActivityJSONRequestBody = AddJobApplicationActivityCommand

// AddJobApplicationAttachmentMultipartRequestBody defines body for AddJobApplicationAttachment for multipart/form-data ContentType.
type AddJobApplicationAttachmentMultipartRequestBody AddJobApplicationAttachmentMultipartBody

// UpdateJobApplicationAttachmentJSONRequestBody defines body for UpdateJobApplicationAttachment for application/json ContentType.
type UpdateJobApplicationAttachmentJSONRequestBody = UpdateJobApplicationAttachmentCommand

// PostJobApplicationExternalInterviewJSONRequestBody defines body for PostJobApplicationExternalInterview for application/json ContentType.
type PostJobApplicationExternalInterviewJSONRequestBody = AddJobApplicationExternalInterviewCommand

// PutJobApplicationExternalInterviewJSONRequestBody defines body for PutJobApplicationExternalInterview for application/json ContentType.
type PutJobApplicationExternalInterviewJSONRequestBody = UpdateJobApplicationInterviewCommand

// PostJobApplicationInternalInterviewJSONRequestBody defines body for PostJobApplicationInternalInterview for application/json ContentType.
type PostJobApplicationInternalInterviewJSONRequestBody = AddJobApplicationInternalInterviewCommand

// PutJobApplicationInternalInterviewJSONRequestBody defines body for PutJobApplicationInternalInterview for application/json ContentType.
type PutJobApplicationInternalInterviewJSONRequestBody = UpdateJobApplicationInterviewCommand

// AddJobApplicationNoteJSONRequestBody defines body for AddJobApplicationNote for application/json ContentType.
type AddJobApplicationNoteJSONRequestBody = AddJobApplicationNoteCommand

// ReviewSubmitJobApplicationJSONRequestBody defines body for ReviewSubmitJobApplication for application/json ContentType.
type ReviewSubmitJobApplicationJSONRequestBody = ReviewSubmitJobApplicationCommand

// ReviewViewJobApplicationJSONRequestBody defines body for ReviewViewJobApplication for application/json ContentType.
type ReviewViewJobApplicationJSONRequestBody = ReviewViewJobApplicationCommand

// ReviewAcceptJobApplicationJSONRequestBody defines body for ReviewAcceptJobApplication for application/json ContentType.
type ReviewAcceptJobApplicationJSONRequestBody = ReviewAcceptJobApplicationCommand

// ReviewRejectJobApplicationJSONRequestBody defines body for ReviewRejectJobApplication for application/json ContentType.
type ReviewRejectJobApplicationJSONRequestBody = ReviewRejectJobApplicationCommand

// PutJobApplicationStatusJSONRequestBody defines body for PutJobApplicationStatus for application/json ContentType.
type PutJobApplicationStatusJSONRequestBody = SetJobApplicationStatusCommand

// AddJobApplicationUserTaskJSONRequestBody defines body for AddJobApplicationUserTask for application/json ContentType.
type AddJobApplicationUserTaskJSONRequestBody = AddJobApplicationUserTaskCommand

// UpdateJobApplicationUserTaskJSONRequestBody defines body for UpdateJobApplicationUserTask for application/json ContentType.
type UpdateJobApplicationUserTaskJSONRequestBody = UpdateJobApplicationUserTaskCommand

// AddJobApplicationVideoJSONRequestBody defines body for AddJobApplicationVideo for application/json ContentType.
type AddJobApplicationVideoJSONRequestBody = AddJobApplicationVideoCommand

// AddCandidateJSONRequestBody defines body for AddCandidate for application/json ContentType.
type AddCandidateJSONRequestBody = AddCandidateCommand

// PutCandidateCustomFieldListItemJSONRequestBody defines body for PutCandidateCustomFieldListItem for application/json ContentType.
type PutCandidateCustomFieldListItemJSONRequestBody = SetCandidateCustomFieldListValuesCommand

// UpdateCandidateJSONRequestBody defines body for UpdateCandidate for application/json ContentType.
type UpdateCandidateJSONRequestBody = UpdateCandidateCommand

// AddCandidateActivityJSONRequestBody defines body for AddCandidateActivity for application/json ContentType.
type AddCandidateActivityJSONRequestBody = AddCandidateActivityCommand

// AddCandidateJobOrdersJSONRequestBody defines body for AddCandidateJobOrders for application/json ContentType.
type AddCandidateJobOrdersJSONRequestBody = AddCandidateJobOrderCommand

// AddCandidateAttachmentMultipartRequestBody defines body for AddCandidateAttachment for multipart/form-data ContentType.
type AddCandidateAttachmentMultipartRequestBody AddCandidateAttachmentMultipartBody

// UpdateCandidateAttachmentJSONRequestBody defines body for UpdateCandidateAttachment for application/json ContentType.
type UpdateCandidateAttachmentJSONRequestBody = UpdateCandidateAttachmentCommand

// UpdateCandidateAvailabilityWeekJSONRequestBody defines body for UpdateCandidateAvailabilityWeek for application/json ContentType.
type UpdateCandidateAvailabilityWeekJSONRequestBody = SetCandidateAvailabilityByWeekCommand

// AddCandidateNoteJSONRequestBody defines body for AddCandidateNote for application/json ContentType.
type AddCandidateNoteJSONRequestBody = AddCandidateNoteCommand

// UpdateCandidatePhotoMultipartRequestBody defines body for UpdateCandidatePhoto for multipart/form-data ContentType.
type UpdateCandidatePhotoMultipartRequestBody UpdateCandidatePhotoMultipartBody

// DeleteCandidateSkillsJSONRequestBody defines body for DeleteCandidateSkills for application/json ContentType.
type DeleteCandidateSkillsJSONRequestBody = RemoveCandidateSkillsCommand

// PutCandidateSkillsJSONRequestBody defines body for PutCandidateSkills for application/json ContentType.
type PutCandidateSkillsJSONRequestBody = UpdateCandidateSkillsCommand

// PutCandidateStatusJSONRequestBody defines body for PutCandidateStatus for application/json ContentType.
type PutCandidateStatusJSONRequestBody = SetCandidateStatusCommand

// AddCandidateUserTaskJSONRequestBody defines body for AddCandidateUserTask for application/json ContentType.
type AddCandidateUserTaskJSONRequestBody = AddCandidateUserTaskCommand

// UpdateCandidateUserTaskJSONRequestBody defines body for UpdateCandidateUserTask for application/json ContentType.
type UpdateCandidateUserTaskJSONRequestBody = UpdateCandidateUserTaskCommand

// AddCandidateVideoJSONRequestBody defines body for AddCandidateVideo for application/json ContentType.
type AddCandidateVideoJSONRequestBody = AddCandidateVideoCommand

// AddCompanyJSONRequestBody defines body for AddCompany for application/json ContentType.
type AddCompanyJSONRequestBody = AddCompanyCommand

// PutCompanyCustomFieldListJSONRequestBody defines body for PutCompanyCustomFieldList for application/json ContentType.
type PutCompanyCustomFieldListJSONRequestBody = SetCompanyCustomFieldListValuesCommand

// UpdateCompanyJSONRequestBody defines body for UpdateCompany for application/json ContentType.
type UpdateCompanyJSONRequestBody = UpdateCompanyCommand

// AddCompanyActivityJSONRequestBody defines body for AddCompanyActivity for application/json ContentType.
type AddCompanyActivityJSONRequestBody = AddCompanyActivityCommand

// AddCompanyAddressJSONRequestBody defines body for AddCompanyAddress for application/json ContentType.
type AddCompanyAddressJSONRequestBody = AddCompanyAddressCommand

// UpdateCompanyAddressJSONRequestBody defines body for UpdateCompanyAddress for application/json ContentType.
type UpdateCompanyAddressJSONRequestBody = UpdateCompanyAddressCommand

// AddCompanyAttachmentMultipartRequestBody defines body for AddCompanyAttachment for multipart/form-data ContentType.
type AddCompanyAttachmentMultipartRequestBody AddCompanyAttachmentMultipartBody

// UpdateCompanyAttachmentJSONRequestBody defines body for UpdateCompanyAttachment for application/json ContentType.
type UpdateCompanyAttachmentJSONRequestBody = UpdateCompanyAttachmentCommand

// UpdateCompanyLogoMultipartRequestBody defines body for UpdateCompanyLogo for multipart/form-data ContentType.
type UpdateCompanyLogoMultipartRequestBody UpdateCompanyLogoMultipartBody

// AddCompanyNoteJSONRequestBody defines body for AddCompanyNote for application/json ContentType.
type AddCompanyNoteJSONRequestBody = AddCompanyNoteCommand

// PutCompanyStatusJSONRequestBody defines body for PutCompanyStatus for application/json ContentType.
type PutCompanyStatusJSONRequestBody = SetCompanyStatusCommand

// AddCompanyUserTaskJSONRequestBody defines body for AddCompanyUserTask for application/json ContentType.
type AddCompanyUserTaskJSONRequestBody = AddCompanyUserTaskCommand

// UpdateCompanyUserTaskJSONRequestBody defines body for UpdateCompanyUserTask for application/json ContentType.
type UpdateCompanyUserTaskJSONRequestBody = UpdateCompanyUserTaskCommand

// AddCompanyWorkflowJSONRequestBody defines body for AddCompanyWorkflow for application/json ContentType.
type AddCompanyWorkflowJSONRequestBody = AddCompanyWorkflowCommand

// UpdateCompanyWorkflowJSONRequestBody defines body for UpdateCompanyWorkflow for application/json ContentType.
type UpdateCompanyWorkflowJSONRequestBody = UpdateCompanyWorkflowCommand

// AddContactJSONRequestBody defines body for AddContact for application/json ContentType.
type AddContactJSONRequestBody = AddContactCommand

// PutContactCustomFieldListJSONRequestBody defines body for PutContactCustomFieldList for application/json ContentType.
type PutContactCustomFieldListJSONRequestBody = SetContactCustomFieldListValuesCommand

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody = UpdateContactCommand

// AddContactActivityJSONRequestBody defines body for AddContactActivity for application/json ContentType.
type AddContactActivityJSONRequestBody = AddContactActivityCommand

// AddContactAttachmentMultipartRequestBody defines body for AddContactAttachment for multipart/form-data ContentType.
type AddContactAttachmentMultipartRequestBody AddContactAttachmentMultipartBody

// UpdateContactAttachmentJSONRequestBody defines body for UpdateContactAttachment for application/json ContentType.
type UpdateContactAttachmentJSONRequestBody = UpdateContactAttachmentCommand

// AddContactNoteJSONRequestBody defines body for AddContactNote for application/json ContentType.
type AddContactNoteJSONRequestBody = AddContactNoteCommand

// UpdateContactPhotoMultipartRequestBody defines body for UpdateContactPhoto for multipart/form-data ContentType.
type UpdateContactPhotoMultipartRequestBody UpdateContactPhotoMultipartBody

// DeleteContactSkillsJSONRequestBody defines body for DeleteContactSkills for application/json ContentType.
type DeleteContactSkillsJSONRequestBody = RemoveContactSkillsCommand

// PutContactSkillsJSONRequestBody defines body for PutContactSkills for application/json ContentType.
type PutContactSkillsJSONRequestBody = UpdateContactSkillsCommand

// PutContactStatusJSONRequestBody defines body for PutContactStatus for application/json ContentType.
type PutContactStatusJSONRequestBody = SetContactStatusCommand

// AddContactUserTaskJSONRequestBody defines body for AddContactUserTask for application/json ContentType.
type AddContactUserTaskJSONRequestBody = AddContactUserTaskCommand

// UpdateContactUserTaskJSONRequestBody defines body for UpdateContactUserTask for application/json ContentType.
type UpdateContactUserTaskJSONRequestBody = UpdateContactUserTaskCommand

// PatchFolderJSONRequestBody defines body for PatchFolder for application/json ContentType.
type PatchFolderJSONRequestBody = PatchFolderJSONBody

// PutExternalInterviewEvaluationJSONRequestBody defines body for PutExternalInterviewEvaluation for application/json ContentType.
type PutExternalInterviewEvaluationJSONRequestBody = SubmitInterviewEvaluationCommand

// PutInternalInterviewEvaluationJSONRequestBody defines body for PutInternalInterviewEvaluation for application/json ContentType.
type PutInternalInterviewEvaluationJSONRequestBody = SubmitInterviewEvaluationCommand

// AddJobAdDraftJSONRequestBody defines body for AddJobAdDraft for application/json ContentType.
type AddJobAdDraftJSONRequestBody = AddJobAdDraftCommand

// UpdateJobAdDraftJSONRequestBody defines body for UpdateJobAdDraft for application/json ContentType.
type UpdateJobAdDraftJSONRequestBody = UpdateJobAdDraftCommand

// SubmitJobBoardJobApplicationJSONRequestBody defines body for SubmitJobBoardJobApplication for application/json ContentType.
type SubmitJobBoardJobApplicationJSONRequestBody = SubmitJobApplicationCommand

// AttachJobBoardJobApplicationDocumentMultipartRequestBody defines body for AttachJobBoardJobApplicationDocument for multipart/form-data ContentType.
type AttachJobBoardJobApplicationDocumentMultipartRequestBody AttachJobBoardJobApplicationDocumentMultipartBody

// AddJobOrderJSONRequestBody defines body for AddJobOrder for application/json ContentType.
type AddJobOrderJSONRequestBody = AddJobOrderCommand

// PutJobOrderCustomFieldListJSONRequestBody defines body for PutJobOrderCustomFieldList for application/json ContentType.
type PutJobOrderCustomFieldListJSONRequestBody = SetJobOrderCustomFieldListValuesCommand

// UpdateJobOrderJSONRequestBody defines body for UpdateJobOrder for application/json ContentType.
type UpdateJobOrderJSONRequestBody = UpdateJobOrderCommand

// AddJobOrderActivityJSONRequestBody defines body for AddJobOrderActivity for application/json ContentType.
type AddJobOrderActivityJSONRequestBody = AddJobOrderActivityCommand

// AddJobOrderCandidatesJSONRequestBody defines body for AddJobOrderCandidates for application/json ContentType.
type AddJobOrderCandidatesJSONRequestBody = AddJobOrderCandidateCommand

// SubmitJobOrderCandidateJSONRequestBody defines body for SubmitJobOrderCandidate for application/json ContentType.
type SubmitJobOrderCandidateJSONRequestBody = SubmitJobOrderCandidateCommand

// AddJobOrderAttachmentMultipartRequestBody defines body for AddJobOrderAttachment for multipart/form-data ContentType.
type AddJobOrderAttachmentMultipartRequestBody AddJobOrderAttachmentMultipartBody

// UpdateJobOrderAttachmentJSONRequestBody defines body for UpdateJobOrderAttachment for application/json ContentType.
type UpdateJobOrderAttachmentJSONRequestBody = UpdateJobOrderAttachmentCommand

// AddJobOrderNoteJSONRequestBody defines body for AddJobOrderNote for application/json ContentType.
type AddJobOrderNoteJSONRequestBody = AddJobOrderNoteCommand

// PutJobOrderStatusJSONRequestBody defines body for PutJobOrderStatus for application/json ContentType.
type PutJobOrderStatusJSONRequestBody = SetJobOrderStatusCommand

// AddJobOrderUserTaskJSONRequestBody defines body for AddJobOrderUserTask for application/json ContentType.
type AddJobOrderUserTaskJSONRequestBody = AddJobOrderUserTaskCommand

// UpdateJobOrderUserTaskJSONRequestBody defines body for UpdateJobOrderUserTask for application/json ContentType.
type UpdateJobOrderUserTaskJSONRequestBody = UpdateJobOrderUserTaskCommand

// AddNoteJSONRequestBody defines body for AddNote for application/json ContentType.
type AddNoteJSONRequestBody = AddNoteCommand

// UpdateNoteJSONRequestBody defines body for UpdateNote for application/json ContentType.
type UpdateNoteJSONRequestBody = UpdateNoteCommand

// AddNoteAttachmentMultipartRequestBody defines body for AddNoteAttachment for multipart/form-data ContentType.
type AddNoteAttachmentMultipartRequestBody AddNoteAttachmentMultipartBody

// AddOpportunityJSONRequestBody defines body for AddOpportunity for application/json ContentType.
type AddOpportunityJSONRequestBody = AddOpportunityCommand

// UpdateOpportunityJSONRequestBody defines body for UpdateOpportunity for application/json ContentType.
type UpdateOpportunityJSONRequestBody = UpdateOpportunityCommand

// CompleteJobApplicationPartnerActionJSONRequestBody defines body for CompleteJobApplicationPartnerAction for application/json ContentType.
type CompleteJobApplicationPartnerActionJSONRequestBody = UpdateJobApplicationPartnerActionCommand

// ProgressJobApplicationPartnerActionJSONRequestBody defines body for ProgressJobApplicationPartnerAction for application/json ContentType.
type ProgressJobApplicationPartnerActionJSONRequestBody = UpdateJobApplicationPartnerActionCommand

// RejectJobApplicationPartnerActionJSONRequestBody defines body for RejectJobApplicationPartnerAction for application/json ContentType.
type RejectJobApplicationPartnerActionJSONRequestBody = UpdateJobApplicationPartnerActionCommand

// CompleteCandidatePartnerActionJSONRequestBody defines body for CompleteCandidatePartnerAction for application/json ContentType.
type CompleteCandidatePartnerActionJSONRequestBody = UpdateCandidatePartnerActionCommand

// ProgressCandidatePartnerActionJSONRequestBody defines body for ProgressCandidatePartnerAction for application/json ContentType.
type ProgressCandidatePartnerActionJSONRequestBody = UpdateCandidatePartnerActionCommand

// RejectCandidatePartnerActionJSONRequestBody defines body for RejectCandidatePartnerAction for application/json ContentType.
type RejectCandidatePartnerActionJSONRequestBody = UpdateCandidatePartnerActionCommand

// CompleteCompanyPartnerActionJSONRequestBody defines body for CompleteCompanyPartnerAction for application/json ContentType.
type CompleteCompanyPartnerActionJSONRequestBody = UpdateCompanyPartnerActionCommand

// ProgressCompanyPartnerActionJSONRequestBody defines body for ProgressCompanyPartnerAction for application/json ContentType.
type ProgressCompanyPartnerActionJSONRequestBody = UpdateCompanyPartnerActionCommand

// RejectCompanyPartnerActionJSONRequestBody defines body for RejectCompanyPartnerAction for application/json ContentType.
type RejectCompanyPartnerActionJSONRequestBody = UpdateCompanyPartnerActionCommand

// CompleteContactPartnerActionJSONRequestBody defines body for CompleteContactPartnerAction for application/json ContentType.
type CompleteContactPartnerActionJSONRequestBody = UpdateContactPartnerActionCommand

// ProgressContactPartnerActionJSONRequestBody defines body for ProgressContactPartnerAction for application/json ContentType.
type ProgressContactPartnerActionJSONRequestBody = UpdateContactPartnerActionCommand

// RejectContactPartnerActionJSONRequestBody defines body for RejectContactPartnerAction for application/json ContentType.
type RejectContactPartnerActionJSONRequestBody = UpdateContactPartnerActionCommand

// CompleteJobAdPartnerActionJSONRequestBody defines body for CompleteJobAdPartnerAction for application/json ContentType.
type CompleteJobAdPartnerActionJSONRequestBody = UpdateJobAdPartnerActionCommand

// ProgressJobAdPartnerActionJSONRequestBody defines body for ProgressJobAdPartnerAction for application/json ContentType.
type ProgressJobAdPartnerActionJSONRequestBody = UpdateJobAdPartnerActionCommand

// RejectJobAdPartnerActionJSONRequestBody defines body for RejectJobAdPartnerAction for application/json ContentType.
type RejectJobAdPartnerActionJSONRequestBody = UpdateJobAdPartnerActionCommand

// CompleteJobOrderPartnerActionJSONRequestBody defines body for CompleteJobOrderPartnerAction for application/json ContentType.
type CompleteJobOrderPartnerActionJSONRequestBody = UpdateJobOrderPartnerActionCommand

// ProgressJobOrderPartnerActionJSONRequestBody defines body for ProgressJobOrderPartnerAction for application/json ContentType.
type ProgressJobOrderPartnerActionJSONRequestBody = UpdateJobOrderPartnerActionCommand

// RejectJobOrderPartnerActionJSONRequestBody defines body for RejectJobOrderPartnerAction for application/json ContentType.
type RejectJobOrderPartnerActionJSONRequestBody = UpdateJobOrderPartnerActionCommand

// CompletePlacementPartnerActionJSONRequestBody defines body for CompletePlacementPartnerAction for application/json ContentType.
type CompletePlacementPartnerActionJSONRequestBody = UpdatePlacementPartnerActionCommand

// ProgressPlacementPartnerActionJSONRequestBody defines body for ProgressPlacementPartnerAction for application/json ContentType.
type ProgressPlacementPartnerActionJSONRequestBody = UpdatePlacementPartnerActionCommand

// RejectPlacementPartnerActionJSONRequestBody defines body for RejectPlacementPartnerAction for application/json ContentType.
type RejectPlacementPartnerActionJSONRequestBody = UpdatePlacementPartnerActionCommand

// AddPartnerActionJSONRequestBody defines body for AddPartnerAction for application/json ContentType.
type AddPartnerActionJSONRequestBody = AddPartnerActionCommand

// UpdatePartnerActionJSONRequestBody defines body for UpdatePartnerAction for application/json ContentType.
type UpdatePartnerActionJSONRequestBody = UpdatePartnerActionCommand

// PutPlacementCustomFieldListJSONRequestBody defines body for PutPlacementCustomFieldList for application/json ContentType.
type PutPlacementCustomFieldListJSONRequestBody = SetPlacementCustomFieldListValuesCommand

// UpdatePlacementJSONRequestBody defines body for UpdatePlacement for application/json ContentType.
type UpdatePlacementJSONRequestBody = UpdatePlacementCommand

// AddPlacementActivityJSONRequestBody defines body for AddPlacementActivity for application/json ContentType.
type AddPlacementActivityJSONRequestBody = AddPlacementActivityCommand

// AddPlacementAttachmentMultipartRequestBody defines body for AddPlacementAttachment for multipart/form-data ContentType.
type AddPlacementAttachmentMultipartRequestBody AddPlacementAttachmentMultipartBody

// UpdatePlacementAttachmentJSONRequestBody defines body for UpdatePlacementAttachment for application/json ContentType.
type UpdatePlacementAttachmentJSONRequestBody = UpdatePlacementAttachmentCommand

// AddPlacementNoteJSONRequestBody defines body for AddPlacementNote for application/json ContentType.
type AddPlacementNoteJSONRequestBody = AddPlacementNoteCommand

// PutPlacementStatusJSONRequestBody defines body for PutPlacementStatus for application/json ContentType.
type PutPlacementStatusJSONRequestBody = SetPlacementStatusCommand

// AddPlacementUserTaskJSONRequestBody defines body for AddPlacementUserTask for application/json ContentType.
type AddPlacementUserTaskJSONRequestBody = AddPlacementUserTaskCommand

// UpdatePlacementUserTaskJSONRequestBody defines body for UpdatePlacementUserTask for application/json ContentType.
type UpdatePlacementUserTaskJSONRequestBody = UpdatePlacementUserTaskCommand

// AddRequisitionJSONRequestBody defines body for AddRequisition for application/json ContentType.
type AddRequisitionJSONRequestBody = AddRequisitionCommand

// UpdateRequisitionJSONRequestBody defines body for UpdateRequisition for application/json ContentType.
type UpdateRequisitionJSONRequestBody = UpdateRequisitionCommand

// ApproveRequisitionJSONRequestBody defines body for ApproveRequisition for application/json ContentType.
type ApproveRequisitionJSONRequestBody = ApproveRequisitionCommand

// AddRequisitionAttachmentMultipartRequestBody defines body for AddRequisitionAttachment for multipart/form-data ContentType.
type AddRequisitionAttachmentMultipartRequestBody AddRequisitionAttachmentMultipartBody

// AddRequisitionNoteJSONRequestBody defines body for AddRequisitionNote for application/json ContentType.
type AddRequisitionNoteJSONRequestBody = AddRequisitionNoteCommand

// RejectRequisitionJSONRequestBody defines body for RejectRequisition for application/json ContentType.
type RejectRequisitionJSONRequestBody = RejectRequisitionCommand

// SubmitRequisitionJSONRequestBody defines body for SubmitRequisition for application/json ContentType.
type SubmitRequisitionJSONRequestBody = SubmitRequisitionCommand

// SendJobApplcationSmsJSONRequestBody defines body for SendJobApplcationSms for application/json ContentType.
type SendJobApplcationSmsJSONRequestBody = SendJobApplicationSmsCommand

// SendJobApplicationContactSmsJSONRequestBody defines body for SendJobApplicationContactSms for application/json ContentType.
type SendJobApplicationContactSmsJSONRequestBody = SendJobApplicationContactSmsCommand

// SendCandidateSmsJSONRequestBody defines body for SendCandidateSms for application/json ContentType.
type SendCandidateSmsJSONRequestBody = SendCandidateSmsCommand

// SendCompanySmsJSONRequestBody defines body for SendCompanySms for application/json ContentType.
type SendCompanySmsJSONRequestBody = SendCompanySmsCommand

// SendContactSmsJSONRequestBody defines body for SendContactSms for application/json ContentType.
type SendContactSmsJSONRequestBody = SendContactSmsCommand

// SendJobOrderSmsJSONRequestBody defines body for SendJobOrderSms for application/json ContentType.
type SendJobOrderSmsJSONRequestBody = SendJobOrderSmsCommand

// SendPlacementSmsJSONRequestBody defines body for SendPlacementSms for application/json ContentType.
type SendPlacementSmsJSONRequestBody = SendPlacementSmsCommand

// AddUserTaskJSONRequestBody defines body for AddUserTask for application/json ContentType.
type AddUserTaskJSONRequestBody = AddUserTaskCommand

// UpdateUserTaskJSONRequestBody defines body for UpdateUserTask for application/json ContentType.
type UpdateUserTaskJSONRequestBody = UpdateUserTaskCommand

// AddWebhookJSONRequestBody defines body for AddWebhook for application/json ContentType.
type AddWebhookJSONRequestBody = AddWebhookCommand

// UpdateWebhookJSONRequestBody defines body for UpdateWebhook for application/json ContentType.
type UpdateWebhookJSONRequestBody = UpdateWebhookCommand
