{
  "openapi": "3.0.1",
  "info": {
    "title": "JobAdder API",
    "description": "# Getting Started\r\n\r\n## Authentication\r\n\r\nJobAdder uses the OAuth 2.0 authorization code flow to issue API access tokens on behalf of users.\r\n\r\nAt a high-level, this flow has the following steps:\r\n\r\n- Your application directs the browser to the JobAdder authorization page.\r\n- The user authenticates and approves your application's request.\r\n- The user is redirected back to your application with an authorization code in the query string.\r\n- Your application sends this code to JobAdder to exchange for an API access token and optionally a refresh token.\r\n- Your application can now use these tokens to call the JobAdder API on behalf of the user.\r\n\r\n&nbsp;\r\n### 1. Redirect to the JobAdder authorization URL.\r\n\r\nYour application should redirect the user to the authorization URL\r\n\r\n```\r\nhttps://id.jobadder.com/connect/authorize\r\n```\r\n\r\nThe following query parameters should be passed with the GET request:\r\n\r\n| parameter     | description                                                                       |\r\n|:--------------|:----------------------------------------------------------------------------------|\r\n| response_type | **code** (required)                                                               |\r\n| client_id     | issued when you created your application (required)                               |\r\n| scope         | permissions to request, see [Scopes](#section/Getting-Started/Scopes) (required)  |\r\n| redirect_uri  | URL to redirect back to (required)                                                | \r\n| state         | unique string to be passed back (optional)                                        |\r\n\r\nThe **scope** parameter is a space-separated list of OAuth scopes indicating the desired access.\r\nSee [Scopes](#section/Getting-Started/Scopes) for the complete list of scopes.\r\n\r\nThe **redirect_uri** parameter must match one of the URLs specified when the client_id was issued.\r\n\r\nThe **state** parameter can be provided to carry through server-specific state. For example, you can use\r\nthis to help prevent forgery attacks.\r\n\r\nThe user will be presented with a login screen, and then a confirmation screen where they will grant your\r\napplication access to their JobAdder data.\r\n\r\n&nbsp;\r\n### 2. Receive an authorization code from JobAdder.\r\n\r\nAfter a successful login, the authorization server will redirect to the URL specified in step 1 passing \r\nthe following parameters passed with the GET request:\r\n\r\n| parameter     | description                           |\r\n|:--------------|:--------------------------------------|\r\n| code          | a temporary authorization code        | \r\n| state         | the unique string specified in step 1 |\r\n\r\nIf you passed a **state** parameter in step 1 then at this point you should compare the state parameter\r\nfrom this request with the state parameter from the request in step 1. If the states don't match then\r\nthe request may have been created by an unknown third party and you should abort the process.\r\n\r\nIf your request for access is denied by the user then the user will be redirected to the URL specified in step 1\r\nwith the following query parameters passed with the GET request:\r\n\r\n| parameter     | value         |\r\n|:--------------|:--------------|\r\n| error         | access_denied | \r\n\r\n&nbsp;\r\n### 3. Exchange the authorization code for an access token.\r\n\r\nThe authorization code received in step 2 will remain valid for 5 minutes and should be exchanged for an \r\naccess token. To do this, submit a POST request to the token URL:\r\n\r\n```\r\nhttps://id.jobadder.com/connect/token\r\n```\r\n\r\nThe following  parameters should be included in the POST request:\r\n\r\n| parameter     | description                                                     |\r\n|:--------------|:----------------------------------------------------------------|\r\n| client_id     | issued when you created your application (required)             |\r\n| client_secret | issued when you created your application (required)             |\r\n| grant_type    | **authorization_code** (required)                               |\r\n| code          | the temporary authorization code received in step 2 (required)  |\r\n| redirect_uri  | the URL specified in step 1 (required)                          |\r\n\r\nThis request will return a JSON response containing the access token, for example\r\n\r\n```json\r\n{\r\n  access_token: \"31ff7431b4c1dde02e386122702f5460\",\r\n  expires_in: 3600,\r\n  token_type: \"Bearer\",\r\n  refresh_token: \"e7672885d6da2db1e56d200dd292c801\",\r\n  api: \"https://api.jobadder.com/v2\"\r\n}\r\n```\r\n\r\n| parameter     | description                                                                           |\r\n|:--------------|:--------------------------------------------------------------------------------------|\r\n| access_token  | token to be used as the Bearer token in the Authorization header of all API requests  |\r\n| expires_in    | expiration time of the access token in seconds since the response was generated       |\r\n| refresh_token | token to be used to request new access tokens                                         |\r\n| api           | The base URL to use for API access                                                    |\r\n\r\n&nbsp;\r\n### 4. Exchange a refresh token for an access token.\r\n\r\nThe access token has a limited lifetime (currently 60 minutes). \r\nIf your application requested the **offline_access** scope (in step 1) then it is possible to gain \r\nextended access to the user's data by requesting a new access token using the refresh token.\r\nTo do this, submit a POST request to the token URL:\r\n\r\n```\r\nhttps://id.jobadder.com/connect/token\r\n```\r\n\r\nThe following  parameters should be included in the POST request:\r\n\r\n| parameter     | description                                         |\r\n|:--------------|:----------------------------------------------------|\r\n| client_id     | issued when you created your application (required) |\r\n| client_secret | issued when you created your application (required) |\r\n| grant_type    | **refresh_token** (required)                        |\r\n| refresh_token | the refresh token returned in step 3                |\r\n\r\nThis request will return a JSON response containing a new access token and request token.\r\n```json\r\n{\r\n  access_token: \"d2534958b2d3b9e3b0e16c98f91f0184\",\r\n  expires_in: 3600,\r\n  token_type: \"Bearer\",\r\n  refresh_token: \"e1b495fa69c9bdacbc7e5dd535d4564f\",\r\n  api: \"https://api.jobadder.com/v2\"\r\n}\r\n```\r\n\r\n&nbsp;\r\n## Scopes\r\n\r\nScopes allow you to clearly specify the type of information your application will access and the level of access it will need.\r\n\r\nIt's a good idea to limit the scopes that you request to the bare minimum so that users will feel confident with your application when granting access to their data.\r\n\r\n\r\n| scope | description |\r\n|:------|:------------|\r\n| **read** | View JobAdder data |\r\n| **write** | Manage JobAdder data |\r\n| **read_candidate** | View candidates |\r\n| **write_candidate** | Manage candidates |\r\n| **read_candidate_note** | View candidate notes |\r\n| **write_candidate_note** | Manage candidate notes |\r\n| **manage_candidate_custom** | Manage candidate custom fields |\r\n| **read_company** | View companies |\r\n| **write_company** | Manage companies |\r\n| **read_company_note** | View company notes |\r\n| **write_company_note** | Manage company notes |\r\n| **manage_company_custom** | Manage company custom fields |\r\n| **read_contact** | View contacts |\r\n| **write_contact** | Manage contacts |\r\n| **read_contact_note** | View contact notes |\r\n| **write_contact_note** | Manage contact notes |\r\n| **manage_contact_custom** | Manage contact custom fields |\r\n| **read_jobad** | View job ads |\r\n| **write_jobad** | Manage job ads |\r\n| **read_jobapplication** | View job applications |\r\n| **write_jobapplication** | Manage job applications |\r\n| **read_jobapplication_note** | View job application notes |\r\n| **write_jobapplication_note** | Manage job application notes |\r\n| **manage_jobapplication_custom** | Manage job application custom fields |\r\n| **read_interview** | View job interviews |\r\n| **write_interview** | Manage job interviews |\r\n| **read_job** | View jobs |\r\n| **write_job** | Manage jobs |\r\n| **read_job_note** | View job notes |\r\n| **write_job_note** | Manage job notes |\r\n| **manage_job_custom** | Manage job custom fields |\r\n| **read_placement** | View placements |\r\n| **write_placement** | Manage placements |\r\n| **read_placement_note** | View placement notes |\r\n| **write_placement_note** | Manage placement notes |\r\n| **manage_placement_custom** | Manage placement custom fields |\r\n| **read_requisition** | View requisitions |\r\n| **write_requisition** | Manage requisitions |\r\n| **read_requisition_note** | View requisition notes |\r\n| **write_requisition_note** | Manage requisition notes |\r\n| **read_float** | View floats |\r\n| **read_submission** | View submissions |\r\n| **read_note** | View notes |\r\n| **write_note** | Manage notes |\r\n| **read_folder** | View folders |\r\n| **write_folder** | Manage folders |\r\n| **read_user** | View users |\r\n| **read_usergroup** | View user groups |\r\n| **read_usertask** | View user tasks |\r\n| **partner_jobboard** | View active job ads and submit job applications |\r\n| **partner_ui_action** | Add partner actions to JobAdder |\r\n| **offline_access** | Access JobAdder data for an extended period of time, must always be combined with other scopes |\r\n\r\n\r\n&nbsp;\r\n# Webhooks\r\n\r\nThe JobAdder API supports webhooks for event notification using the [Webhook API](#tag/Webhook-API:Webhooks).\r\n\r\nThe order of webhook notifications are not guaranteed, and idempotency may lead to duplicate notifications.\r\n\r\n&nbsp;\r\n## Notification messages\r\n\r\nWhen an event occurs, JobAdder will issue an HTTP POST to the URL you specified on your webhook.\r\n\r\n```json\r\n{\r\n  \"apiVersion\": 2,\r\n  \"event\": \"placement_approved\",\r\n  \"eventId\": \"00000000-0000-0000-0000-000000000000\",\r\n  \"eventDate\": \"2019-01-01T09:00:00Z\",\r\n  \"eventUser\": {},\r\n  \"eventData\": {},\r\n  <event details>\r\n}\r\n```\r\n\r\n&nbsp;\r\n## Events\r\n\r\nAll events require the **offline_access** scope, along with the scopes relevant to the event.\r\n\r\n| event name                      | required scopes                                   |\r\n|:--------------------------------|:--------------------------------------------------|\r\n| job_status_changed              | read or read_job                                  |\r\n| job_invoice_sent                | read or read_job                                  |\r\n| job_partner_action              | read or read_job, partner_ui_action               |\r\n| jobad_posted                    | read or read_jobad                                |\r\n| jobad_expired                   | read or read_jobad                                |\r\n| jobad_partner_action            | read or read_jobad, partner_ui_action             |\r\n| candidate_status_changed        | read or read_candidate                            |\r\n| candidate_updated               | read or read_candidate                            |\r\n| candidate_partner_action        | read or read_candidate, partner_ui_action         |\r\n| jobapplication_status_changed   | read or read_jobapplication                       |\r\n| jobapplication_partner_action   | read or read_jobapplication, partner_ui_action    |\r\n| placement_approved              | read or read_placement                            |\r\n| placement_status_changed        | read or read_placement                            |\r\n| placement_partner_action        | read or read_placement, partner_ui_action         |\r\n| company_status_changed          | read or read_company                              |\r\n| company_partner_action          | read or read_company, partner_ui_action           |\r\n| contact_status_changed          | read or read_contact                              |\r\n| contact_partner_action          | read or read_contact, partner_ui_action           |\r\n| interview_scheduled             | read or read_interview                            |\r\n| interview_evaluation_submitted  | read or read_interview                            |\r\n| folder_job_added                | read or read_job, read or read_folder             |\r\n| folder_job_removed              | read or read_job, read or read_folder             |\r\n| folder_candidate_added          | read or read_candidate, read or read_folder       |\r\n| folder_candidate_removed        | read or read_candidate, read or read_folder       |\r\n| folder_jobapplication_added     | read or read_jobapplication, read or read_folder  |\r\n| folder_jobapplication_removed   | read or read_jobapplication, read or read_folder  |\r\n| folder_placement_added          | read or read_placement, read or read_folder       |\r\n| folder_placement_removed        | read or read_placement, read or read_folder       |\r\n| folder_company_added            | read or read_company, read or read_folder         |\r\n| folder_company_removed          | read or read_company, read or read_folder         |\r\n| folder_contact_added            | read or read_contact, read or read_folder         |\r\n| folder_contact_removed          | read or read_contact, read or read_folder         |\r\n| folder_updated                  | read or read_folder                               |\r\n| user_suspended                  | read or read_user                                 |\r\n| sms_sent                        | read                                              |\r\n\r\n&nbsp;\r\n# Release Notes\r\n\r\n### Upcoming changes\r\n\r\n| eta | description |\r\n| :-- | :---------- |\r\n\r\n### Recent changes\r\n\r\n| date       | description                                                                                                         |\r\n| :--------- | :------------------------------------------------------------------------------------------------------------------ |\r\n| 2024-07-12 | Add MobileNormalized field to Candidates/Contacts endpoints                                                         |\r\n| 2024-05-27 | sms_sent webhook events                                                                                             |\r\n| 2024-05-08 | [Contact skills](#operation/PutContactSkills) endpoints                                                             |\r\n| 2023-08-21 | Add Createdbyintegration option to [Add Candidate Note](#operation/AddCandidateNote)                                | \r\n| 2023-08-10 | Add UpdateAt filter to [Find interviews](#operation/FindInterviews)                                                 | \r\n| 2023-07-10 | Add DateOfBirth filter to [Find candidates](#operation/FindCandidates)                                              | \r\n| 2023-06-13 | Add location in find Jobs endpoint                                                                                  | \r\n| 2023-06-01 | folder_updated, user_suspended webhook events                                                                       |\r\n| 2022-11-23 | Folders API optimized and added embedMode and embed option.                                                         |\r\n| 2022-08-18 | Added updatedAt filter to all entity Activities API endpoint                                                        |\r\n| 2022-08-15 | [Find Notes](#operation/FindNotes) - new filter (entityType)                                                        |\r\n| 2022-06-14 | Added Job invoices endpoints                                                                                        |\r\n| 2022-06-14 | Added JobInvoiceSent Webhook event                                                                                  |\r\n| 2022-05-16 | Add OwnerStatus query param to FindFolder api                                                                       |\r\n| 2022-05-09 | CRUD endpoints for Rate Card (Astute)                                                                               |\r\n| 2022-03-31 | Added CandidateUpdated Webhook event                                                                                |\r\n| 2022-03-07 | Update Notes query supports more embed options                                                                      |\r\n| 2022-02-22 | Add or remove entities in folder                                                                                    |\r\n| 2022-01-17 | Update GET Requisition to include Requisition Form ID                                                               |\r\n| 2022-01-17 | [Get all Requisition Forms and Fields](#operation/GetRequisitionForms) endpoint added                               |\r\n| 2022-01-05 | Add temp time and week data in get Placement endpoint                                                               |\r\n| 2021-11-25 | Add new endpoint to Candidate for attachments                                                                       |\r\n| 2021-11-18 | FIX: Retrieve payroll billings did not filter correctly by provider (applicable for FT360 users only)               |\r\n| 2021-11-12 | Add temp time and week data in get Job endpoint                                                                     |\r\n| 2021-11-05 | Add unsubscribed field to Candidates and Contacts (get, create, update) related endpoints                           |\r\n| 2021-10-30 | Update file upload whitelist to allow .csv uploads                                                                  |\r\n| 2021-10-30 | Update Requisition Attachment [DELETE](#operation/DeleteRequisitionAttachment) param attachmentType to attachmentId |\r\n| 2021-10-30 | Update Requisition Attachment [GET](#operation/GetRequisitionAttachment) param attachmentType to attachmentId       |\r\n| 2021-10-30 | [Get all Requisition Attachments](#operation/GetRequisitionAttachmentList) endpoint added                           |\r\n| 2021-10-28 | Add Candidate ExternalID for payroll billing fields (applicable for FT360 users only)                               |\r\n| 2021-09-27 | Add new endpoint to Candidate for payroll billing fields (applicable for FT360 users only)                          |\r\n| 2021-08-27 | FIX: write_interview returns invalid_scope in auth request                                                          |\r\n| 2021-07-29 | FIX: Update a placement did not update billing details                                                              |\r\n| 2021-07-29 | FIX: Update a candidate did not update mobile number in the candidate header                                        |\r\n| 2021-07-29 | FIX: Find contacts not finding mobile numbers                                                                       |\r\n| 2021-07-29 | FIX: Candidate Upload Attachment - Add a single attachment incorrectly flagged                                      |\r\n| 2021-07-29 | Add date of birth, emergency contact and phone fields to Candidate (get, create, update) related endpoints          |\r\n| 2021-07-29 | Add legal name field to Companies (get, create, update) related endpoints                                           |\r\n| 2021-07-29 | [Find Candidates](#operation/FindCandidates) - new filter (location)                                                |\r\n| 2021-07-29 | Add Other Apply URLs in Job Ad (get) endpoint                                                                       |\r\n| 2021-04-15 | Rate Calculator (update, get) related endpoints                                                                     |\r\n| 2021-03-15 | Tasks (create, update, get, delete) related endpoints                                                               |\r\n| 2021-03-15 | Interviews (create, update, delete) related endpoints                                                               |\r\n| 2021-01-11 | [Find Candidates](#operation/FindCandidates) - new filters (current position, city, state)                          |\r\n| 2021-01-11 | Create Pending Candidates when using [/candidates/](#operation/AddCandidate)                                        |\r\n| 2020-11-10 | Activities (create, find) related endpoints                                                                         |\r\n| 2019-09-23 | FIX: Status change note generation sometimes included an incorrect user name in the note content                    |\r\n| 2019-07-04 | FIX: [Find webhooks](#operation/FindWebhooks) events query parameter was not filtering the results                  |\r\n| 2019-06-11 | [Candidate skill coding](#operation/PutCandidateSkills)                                                             |\r\n| 2019-06-03 | Additional deleted record endpoints                                                                                 |\r\n| 2019-06-03 | embed=self query parameter to embed full details in results returned by key endpoints                               |\r\n| 2019-05-26 | [embed=self](#operation/FindCandidates) query parameter to embed full details and related resources on candidates   |\r\n| 2019-05-26 | [/candidates/deleted](#operation/DeletedCandidates) endpoint added to list recently deleted candidates              |\r\n| 2019-05-26 | [/contacts/deleted](#operation/DeletedContacts) endpoint added to list recently deleted contacts                    |\r\n| 2019-05-25 | jobad_posted webhook event                                                                                          |\r\n| 2019-05-25 | jobad_expired webhook event                                                                                         |\r\n| 2019-05-16 | Optional authorization header on webhook events                                                                     |\r\n| 2019-05-16 | Interview evaluation endpoints                                                                                      |\r\n| 2019-05-16 | interview_evaluation_submitted webhook event                                                                        |\r\n| 2019-05-16 | Interview endpoints for related entities                                                                            |\r\n| 2019-05-09 | [/interviews](#tag/Interview-API:Interviews) endpoint added to list scheduled internal and external interviews      |\r\n| 2019-05-09 | interview_scheduled webhook event                                                                                   |\r\n",
    "version": "v2",
    "x-logo": {
      "url": "/v2/docs/logo.svg",
      "altText": "JobAdder API",
      "href": "/v2/docs"
    }
  },
  "servers": [
    {
      "url": "/v2"
    }
  ],
  "paths": {
    "/opportunities": {
      "get": {
        "tags": [
          "Opportunity API:Opportunities"
        ],
        "summary": "Find opportunities",
        "operationId": "FindOpportunities",
        "responses": {
          "200": {
            "description": "List of opportunity matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_opportunity"
            ]
          }
        ],
        "x-apiName": "Opportunity API",
        "x-apiGroup": "Opportunities",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Opportunity API:Opportunities"
        ],
        "summary": "Add an opportunity",
        "operationId": "AddOpportunity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOpportunityCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Requested opportunity details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedOpportunityModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_opportunity"
            ]
          }
        ],
        "x-apiName": "Opportunity API",
        "x-apiGroup": "Opportunities",
        "x-apiOrder": 1
      }
    },
    "/opportunities/{opportunityId}": {
      "get": {
        "tags": [
          "Opportunity API:Opportunities"
        ],
        "summary": "Get an opportunity",
        "operationId": "GetOpportunity",
        "parameters": [
          {
            "name": "opportunityId",
            "in": "path",
            "description": "opportunity Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested opportunity details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunitySummaryModel"
                }
              }
            }
          },
          "404": {
            "description": "Opportunity was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_opportunity"
            ]
          }
        ],
        "x-apiName": "Opportunity API",
        "x-apiGroup": "Opportunities",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Opportunity API:Opportunities"
        ],
        "summary": "Update an opportunity",
        "operationId": "UpdateOpportunity",
        "parameters": [
          {
            "name": "opportunityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOpportunityCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Opportunity was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_opportunity"
            ]
          }
        ],
        "x-apiName": "Opportunity API",
        "x-apiGroup": "Opportunities",
        "x-apiOrder": 1
      }
    },
    "/sms/applications/candidate": {
      "post": {
        "tags": [
          "Sms API:Sms"
        ],
        "summary": "Send SMS to JobApplications' candidate",
        "operationId": "SendJobApplcationSms",
        "requestBody": {
          "description": "<seealso cref=\"P:JobAdder.ApiServer.Commands.SendAbstractSmsCommand`1.EntityID\" />\r\n<b>entityID</b> is the Array of JobApplication IDs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendJobApplicationSmsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BatchID for later tracking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write_sms"
            ]
          }
        ],
        "x-apiName": "Sms API",
        "x-apiGroup": "Sms",
        "x-apiOrder": 100
      }
    },
    "/sms/applications/contact": {
      "post": {
        "tags": [
          "Sms API:Sms"
        ],
        "summary": "Send SMS to JobApplications' contact",
        "operationId": "SendJobApplicationContactSms",
        "requestBody": {
          "description": "<seealso cref=\"P:JobAdder.ApiServer.Commands.SendAbstractSmsCommand`1.EntityID\" />\r\n<b>entityID</b> is the Array of JobApplication IDs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendJobApplicationContactSmsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BatchID for later tracking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write_sms"
            ]
          }
        ],
        "x-apiName": "Sms API",
        "x-apiGroup": "Sms",
        "x-apiOrder": 100
      }
    },
    "/sms/candidates": {
      "post": {
        "tags": [
          "Sms API:Sms"
        ],
        "summary": "Send SMS to Candidates",
        "operationId": "SendCandidateSms",
        "requestBody": {
          "description": "<member></member>\r\n<seealso cref=\"P:JobAdder.ApiServer.Commands.SendAbstractSmsCommand`1.EntityID\" />\r\n<b>entityID</b> is the Array of Candidate IDs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendCandidateSmsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BatchID for later tracking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write_sms"
            ]
          }
        ],
        "x-apiName": "Sms API",
        "x-apiGroup": "Sms",
        "x-apiOrder": 100
      }
    },
    "/sms/companies": {
      "post": {
        "tags": [
          "Sms API:Sms"
        ],
        "summary": "Send SMS to Company's Contacts",
        "operationId": "SendCompanySms",
        "requestBody": {
          "description": "<seealso cref=\"P:JobAdder.ApiServer.Commands.SendAbstractSmsCommand`1.EntityID\" />\r\n<b>entityID</b> is the Array of Contact IDs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendCompanySmsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BatchID for later tracking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write_sms"
            ]
          }
        ],
        "x-apiName": "Sms API",
        "x-apiGroup": "Sms",
        "x-apiOrder": 100
      }
    },
    "/sms/contacts": {
      "post": {
        "tags": [
          "Sms API:Sms"
        ],
        "summary": "Send SMS to Contacts",
        "operationId": "SendContactSms",
        "requestBody": {
          "description": "<seealso cref=\"P:JobAdder.ApiServer.Commands.SendAbstractSmsCommand`1.EntityID\" />\r\n<b>entityID</b> is the Array of Contact IDs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendContactSmsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BatchID for later tracking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write_sms"
            ]
          }
        ],
        "x-apiName": "Sms API",
        "x-apiGroup": "Sms",
        "x-apiOrder": 100
      }
    },
    "/sms/jobs": {
      "post": {
        "tags": [
          "Sms API:Sms"
        ],
        "summary": "Send SMS to JobOrders' Contact",
        "operationId": "SendJobOrderSms",
        "requestBody": {
          "description": "<seealso cref=\"P:JobAdder.ApiServer.Commands.SendAbstractSmsCommand`1.EntityID\" />\r\n<b>entityID</b> is the Array of JobOrder IDs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendJobOrderSmsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BatchID for later tracking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write_sms"
            ]
          }
        ],
        "x-apiName": "Sms API",
        "x-apiGroup": "Sms",
        "x-apiOrder": 100
      }
    },
    "/sms/placements/{entityType}": {
      "post": {
        "tags": [
          "Sms API:Sms"
        ],
        "summary": "Send SMS to Placements's Contact or Candidate",
        "operationId": "SendPlacementSms",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RecipientEntityType"
            }
          }
        ],
        "requestBody": {
          "description": "<seealso cref=\"P:JobAdder.ApiServer.Commands.SendAbstractSmsCommand`1.EntityID\" />\r\n<b>entityID</b> is the Array of Placement IDs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPlacementSmsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BatchID for later tracking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write_sms"
            ]
          }
        ],
        "x-apiName": "Sms API",
        "x-apiGroup": "Sms",
        "x-apiOrder": 100
      }
    },
    "/jobboards": {
      "get": {
        "tags": [
          "Job Board API:Job Boards"
        ],
        "summary": "Find job boards",
        "operationId": "FindJobBoards",
        "parameters": [
          {
            "name": "BoardId",
            "in": "query",
            "description": "Job Board Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job boards matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobBoardListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Boards",
        "x-apiOrder": 1
      }
    },
    "/jobboards/{boardId}": {
      "get": {
        "tags": [
          "Job Board API:Job Boards"
        ],
        "summary": "Get a job board",
        "operationId": "GetJobBoard",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job board details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobBoardModel"
                }
              }
            }
          },
          "404": {
            "description": "Requested job board was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Boards",
        "x-apiOrder": 1
      }
    },
    "/jobboards/{boardId}/ads": {
      "get": {
        "tags": [
          "Job Board API:Job Ads"
        ],
        "summary": "Find job ads",
        "operationId": "FindJobBoardJobAds",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AdId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Reference",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Portal.HotJob",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Portal.Value",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Portal.ValueId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Portal.Template",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PostedAt",
            "in": "query",
            "description": "Search for job ads posted at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for job ads updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ExpiresAt",
            "in": "query",
            "description": "Search for job ads expiring at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: ```description```, ```portal.fields```",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job ads matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobBoardJobAdListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 2
      }
    },
    "/jobboards/{boardId}/ads/{adId}": {
      "get": {
        "tags": [
          "Job Board API:Job Ads"
        ],
        "summary": "Get a job ad",
        "operationId": "GetJobBoardJobAd",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "adId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job ad details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobBoardJobAdRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job ad was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 2
      }
    },
    "/jobboards/{boardId}/ads/{adId}/applications": {
      "post": {
        "tags": [
          "Job Board API:Job Applications"
        ],
        "summary": "Submit a job application",
        "operationId": "SubmitJobBoardJobApplication",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "Job Board Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "adId",
            "in": "path",
            "description": "Job Ad Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitJobApplicationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job application attachment links",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmittedJobApplicationModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 3
      }
    },
    "/jobboards/{boardId}/ads/{adId}/applications/{applicationId}/{attachmentType}": {
      "post": {
        "tags": [
          "Job Board API:Job Applications"
        ],
        "summary": "Submit job application documents",
        "description": "Add a resume, cover letter or related document to a previously submitted job application.<br />\r\nDocuments can be added for a duration of 5 minutes after submitting the job application.",
        "operationId": "AttachJobBoardJobApplicationDocument",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "Job Board Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "adId",
            "in": "path",
            "description": "Job Ad Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "attachmentType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SubmitCandidateAttachmentType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 3
      }
    },
    "/jobs": {
      "get": {
        "tags": [
          "Job API:Jobs"
        ],
        "summary": "Find jobs",
        "operationId": "FindJobOrders",
        "parameters": [
          {
            "name": "JobId",
            "in": "query",
            "description": "Job Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "JobTitle",
            "in": "query",
            "description": "Job title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Company.CompanyId",
            "in": "query",
            "description": "Companies by Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Company.Name",
            "in": "query",
            "description": "Company name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CompanyId",
            "in": "query",
            "description": "Alias for company.companyId",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ContactId",
            "in": "query",
            "description": "Contact Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "PartnerAction.ActionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "PartnerAction.Reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PartnerAction.Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "PartnerAction.SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "StatusId",
            "in": "query",
            "description": "Job status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Active",
            "in": "query",
            "description": "Search for active/open jobs",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "UserFavourite",
            "in": "query",
            "description": "Search for the user's favourite jobs",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Search in specific folders",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "User Id - search for jobs by owner or associated recruiter",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "OwnerUserId",
            "in": "query",
            "description": "User Id - search for jobs by owner",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "RecruiterUserId",
            "in": "query",
            "description": "User Id - search jobs by associated recruiters",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedBy",
            "in": "query",
            "description": "User Id - search for jobs created by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for jobs created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedBy",
            "in": "query",
            "description": "User Id - search for jobs last updated by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for jobs updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ClosedBy",
            "in": "query",
            "description": "User Id - search for jobs last closed by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ClosedAt",
            "in": "query",
            "description": "Search for jobs closed at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: jobTitle, status.name, createdAt, updatedAt, closedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: recruiters, statistics, partnerActions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self, notes, applications",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Job API:Jobs"
        ],
        "summary": "Add a job",
        "operationId": "AddJobOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobOrderCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 1
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "tags": [
          "Job API:Jobs"
        ],
        "summary": "Get a job",
        "operationId": "GetJobOrder",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: applications, notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Job API:Jobs"
        ],
        "summary": "Update a job",
        "operationId": "UpdateJobOrder",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobOrderCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job was successfully updated"
          },
          "404": {
            "description": "Job was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 1
      }
    },
    "/jobs/{jobId}/applications": {
      "get": {
        "tags": [
          "Job API:Job Applications"
        ],
        "summary": "Get job applications",
        "operationId": "GetJobOrderJobApplications",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of applications for the specified job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 10
      },
      "post": {
        "tags": [
          "Job API:Job Applications"
        ],
        "summary": "Add candidates to a job",
        "operationId": "AddJobOrderCandidates",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobOrderCandidateCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationListRepresentation"
                }
              }
            }
          },
          "409": {
            "description": "Candidate already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 10
      }
    },
    "/jobs/{jobId}/applications/active": {
      "get": {
        "tags": [
          "Job API:Job Applications"
        ],
        "summary": "Get active job applications",
        "operationId": "GetJobOrderActiveJobApplications",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of active applications for the specified job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 10
      }
    },
    "/jobs/{jobId}/applications/submit": {
      "post": {
        "tags": [
          "Job API:Job Applications"
        ],
        "summary": "Submit a candidate to an evergreen job",
        "operationId": "SubmitJobOrderCandidate",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitJobOrderCandidateCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationRepresentation"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 10
      }
    },
    "/jobs/{jobId}/attachments": {
      "get": {
        "tags": [
          "Job API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindJobOrderAttachments",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Attachment types to include",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JobOrderAttachmentType"
              }
            }
          },
          {
            "name": "Latest",
            "in": "query",
            "description": "Find the latest version of each attachment type",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job attachments matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderAttachmentListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/jobs/{jobId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Job API:Attachments"
        ],
        "summary": "Get an attachment",
        "description": "Get a job attachment.<br />Setting the Accept header will attempt a file conversion.",
        "operationId": "GetJobOrderAttachment",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested job attachment was not found"
          },
          "200": {
            "description": "Requested job attachment",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Job API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddJobOrderAttachment",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/JobOrderAttachmentType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderAttachmentRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Job was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Job API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdateJobOrderAttachment",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobOrderAttachmentCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/jobs/{jobId}/submissions": {
      "get": {
        "tags": [
          "Job API:Submissions"
        ],
        "summary": "Get all submissions",
        "operationId": "GetJobOrderSubmissions",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate submissions for the requested job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionListRepresentation"
                }
              }
            }
          }
        },
        "x-apiName": "Job API",
        "x-apiGroup": "Submissions",
        "x-apiOrder": 20
      }
    },
    "/jobs/{jobId}/placements": {
      "get": {
        "tags": [
          "Job API:Placements"
        ],
        "summary": "Get all placements",
        "operationId": "GetJobOrderPlacements",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placements for the specified job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 30
      }
    },
    "/jobs/{jobId}/placements/approved": {
      "get": {
        "tags": [
          "Job API:Placements"
        ],
        "summary": "Get approved placements",
        "operationId": "GetJobOrderApprovedPlacements",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of approved placements for the specified job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 30
      }
    },
    "/jobs/{jobId}/status": {
      "put": {
        "tags": [
          "Job API:Jobs"
        ],
        "summary": "Set a job status",
        "description": "Change the job status and add an optional note",
        "operationId": "PutJobOrderStatus",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetJobOrderStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job status was successfully updated"
          },
          "202": {
            "description": "Job status already assigned"
          },
          "404": {
            "description": "Job was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 60
      }
    },
    "/jobs/{jobId}/notes": {
      "get": {
        "tags": [
          "Job API:Notes"
        ],
        "summary": "Get job notes",
        "operationId": "GetJobOrderNotes",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "NoteId",
            "in": "query",
            "description": "Note Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Note type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Reference",
            "in": "query",
            "description": "Reference value used to identify a note or group of notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for notes created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for notes updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: type, createdAt, updatedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.<br />\r\nFields available to include are: text",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_job_note"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Job API:Notes"
        ],
        "summary": "Add a note",
        "operationId": "AddJobOrderNote",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobOrderNoteCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteModel"
                }
              }
            }
          },
          "404": {
            "description": "Job was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_job_note"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/jobs/{jobId}/activities": {
      "post": {
        "tags": [
          "Job API:Activities"
        ],
        "summary": "Add a job activity",
        "operationId": "AddJobOrderActivity",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobOrderActivityCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderActivityModel"
                }
              }
            }
          },
          "404": {
            "description": "Job was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      },
      "get": {
        "tags": [
          "Job API:Activities"
        ],
        "summary": "Get job activities",
        "operationId": "GetJobOrderActivityByJobId",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job activities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderActivitySummaryListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/jobs/{jobId}/activities/{activityId}": {
      "get": {
        "tags": [
          "Job API:Activities"
        ],
        "summary": "Get a job activity",
        "operationId": "GetJobOrderActivity",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderActivityRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job activity was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/jobs/{jobId}/invoices": {
      "get": {
        "tags": [
          "Job API:Invoices"
        ],
        "summary": "Get job invoices",
        "operationId": "invoices",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job invoices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderInvoiceListModel"
                }
              }
            }
          },
          "404": {
            "description": "Requested job's invoices were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Invoices",
        "x-apiOrder": 100
      }
    },
    "/jobs/{jobId}/invoices/{invoiceId}": {
      "get": {
        "tags": [
          "Job API:Invoices"
        ],
        "summary": "Get a job invoice",
        "operationId": "GetJobOrderInvoice",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderRetainedInvoiceRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job invoice was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Invoices",
        "x-apiOrder": 100
      }
    },
    "/jobs/{jobId}/usertasks": {
      "post": {
        "tags": [
          "Job API:UserTasks"
        ],
        "summary": "Add a job user task",
        "operationId": "AddJobOrderUserTask",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobOrderUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Job was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/jobs/{jobId}/usertasks/{taskId}": {
      "get": {
        "tags": [
          "Job API:UserTasks"
        ],
        "summary": "Get a job user task",
        "operationId": "GetJobOrderUserTask",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job user task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderUserTaskRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job user task was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      },
      "put": {
        "tags": [
          "Job API:UserTasks"
        ],
        "summary": "Update a job user task",
        "operationId": "UpdateJobOrderUserTask",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobOrderUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job user task was successfully updated"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Job user task was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_usertask"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/jobs/{jobOrderId}/ratecard": {
      "get": {
        "tags": [
          "Job API:Payroll Billing"
        ],
        "summary": "Get the Rate Card ID for passed Job Order ID",
        "description": "Applicable to RateCalc generated RateCardID for Astute Payroll",
        "operationId": "GetJobOrderPayrollBilling",
        "parameters": [
          {
            "name": "jobOrderId",
            "in": "path",
            "description": "Job Order Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job rate card id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderRateCardModel"
                }
              }
            }
          },
          "404": {
            "description": "Requested job rate card id was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Payroll Billing",
        "x-apiOrder": 100
      },
      "delete": {
        "tags": [
          "Job API:Payroll Billing"
        ],
        "summary": "Remove the Rate Card ID for passed Job Order ID",
        "description": "Applicable to RateCalc generated RateCardID for Astute Payroll",
        "operationId": "DeleteJobOrderPayrollBilling",
        "parameters": [
          {
            "name": "jobOrderId",
            "in": "path",
            "description": "Job Order Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Requested job rate card id was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Payroll Billing",
        "x-apiOrder": 100
      }
    },
    "/jobs/{jobOrderId}/ratecard/{rateCardId}": {
      "post": {
        "tags": [
          "Job API:Payroll Billing"
        ],
        "summary": "Add the Rate Card ID for passed Job Order ID",
        "description": "Applicable to RateCalc generated RateCardID for Astute Payroll",
        "operationId": "AddJobOrderPayrollBilling",
        "parameters": [
          {
            "name": "jobOrderId",
            "in": "path",
            "description": "Job Order Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rateCardId",
            "in": "path",
            "description": "Rate Card ID generated by RateCalc",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderRateCardModel"
                }
              }
            }
          },
          "404": {
            "description": "Job Order was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Payroll Billing",
        "x-apiOrder": 100
      },
      "put": {
        "tags": [
          "Job API:Payroll Billing"
        ],
        "summary": "Update the Rate Card ID for passed Job Order ID",
        "description": "Applicable to RateCalc generated RateCardID for Astute Payroll",
        "operationId": "UpdateJobOrderPayrollBilling",
        "parameters": [
          {
            "name": "jobOrderId",
            "in": "path",
            "description": "Job Order Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rateCardId",
            "in": "path",
            "description": "Rate Card ID generated by RateCalc",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderRateCardModel"
                }
              }
            }
          },
          "404": {
            "description": "Job Order Rate Card was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Payroll Billing",
        "x-apiOrder": 100
      }
    },
    "/jobs/activities": {
      "get": {
        "tags": [
          "Job API:Activities"
        ],
        "summary": "Find job activities",
        "operationId": "FindJobOrderActivity",
        "parameters": [
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for activities performed at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for activities updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeDetails",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job activities matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderActivityListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/jobs/activitysettings": {
      "get": {
        "tags": [
          "Job API:Activities"
        ],
        "summary": "Get all job activity settings definitions",
        "operationId": "FindJobOrderActivitySettings",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindJobOrderActivitySettingsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job activity settings definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderActivitySettingsListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/jobs/activitysettings/{settingId}": {
      "get": {
        "tags": [
          "Job API:Activities"
        ],
        "summary": "Get job activity setting with details",
        "operationId": "GetJobOrderActivitySetting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "Activity Setting Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job activity settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderActivitySettingModel"
                }
              }
            }
          },
          "404": {
            "description": "Requested job activity settings were not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/jobs/deleted": {
      "get": {
        "tags": [
          "Job API:Jobs"
        ],
        "summary": "Recently deleted jobs",
        "description": "Provides a list of jobs recently (last 14 days) deleted from JobAdder.",
        "operationId": "DeletedJobOrders",
        "responses": {
          "200": {
            "description": "List of recently deleted jobs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedJobOrderListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 100
      }
    },
    "/jobs/fields/custom": {
      "get": {
        "tags": [
          "Job API:Lists"
        ],
        "summary": "Get all custom fields",
        "operationId": "GetJobOrderCustomFieldList",
        "responses": {
          "200": {
            "description": "List of job custom field definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/jobs/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Job API:Lists"
        ],
        "summary": "Get a custom field",
        "operationId": "GetJobOrderCustomFieldItem",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/jobs/fields/custom/custom/{fieldId}": {
      "put": {
        "tags": [
          "Job API:Lists"
        ],
        "summary": "Modify custom field list values",
        "operationId": "PutJobOrderCustomFieldList",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetJobOrderCustomFieldListValuesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated job custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "manage_job_custom"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/jobs/lists/attachmentcategory": {
      "get": {
        "tags": [
          "Job API:Attachments"
        ],
        "summary": "Get all attachment categories",
        "operationId": "GetJobOrderAttachmentCategoryList",
        "parameters": [
          {
            "name": "Type",
            "in": "query",
            "description": "Optionally filter to specific attachment types",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JobOrderAttachmentType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job attachment categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderAttachmentCategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 100
      }
    },
    "/jobs/lists/notetype": {
      "get": {
        "tags": [
          "Job API:Notes"
        ],
        "summary": "Get all note types",
        "operationId": "GetJobOrderNoteTypeList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of note type definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteTypeListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_job_note"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 100
      }
    },
    "/jobs/lists/source": {
      "get": {
        "tags": [
          "Job API:Lists"
        ],
        "summary": "Get all job sources",
        "operationId": "GetJobOrderSourceList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job sources",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameModelListOf"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/jobs/lists/status": {
      "get": {
        "tags": [
          "Job API:Lists"
        ],
        "summary": "Get all status definitions",
        "operationId": "GetJobOrderStatusList",
        "parameters": [
          {
            "name": "StatusId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Default",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job status definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusListRepresentation"
                }
              }
            }
          }
        },
        "x-apiName": "Job API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/jobs/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Job API:Lists"
        ],
        "summary": "Get a status definition",
        "operationId": "GetJobOrderStatusItem",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job status definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job status definition was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusRepresentation"
                }
              }
            }
          }
        },
        "x-apiName": "Job API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/requisitions": {
      "get": {
        "tags": [
          "Requisition API:Requisitions"
        ],
        "summary": "Find requisitions",
        "operationId": "FindRequisitions",
        "parameters": [
          {
            "name": "RequisitionId",
            "in": "query",
            "description": "Requisition Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CompanyId",
            "in": "query",
            "description": "Company Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RequisitionStatus"
              }
            }
          },
          {
            "name": "HiringManager.ContactId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "HiringManager.Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Approver.ContactId",
            "in": "query",
            "description": "Find requisitions by approver contact id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Approver.Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Approver.Pending",
            "in": "query",
            "description": "Find requisitions pending approval by contacts specified in approver.contactId",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "User Id - search for requisitions by owner or associated recruiter",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "OwnerUserId",
            "in": "query",
            "description": "User Id - search for requisitions by owner",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "RecruiterUserId",
            "in": "query",
            "description": "User Id - search for requisitions by associated recruiters",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for jobs created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for jobs updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: jobTitle, status, createdAt, updatedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.<br />\r\nFields available to include are: workflow",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Linked resources to embed in the results<br />\r\nResources available are: self, notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of requisitions matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequisitionListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Requisition API:Requisitions"
        ],
        "summary": "Add a requisition",
        "operationId": "AddRequisition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRequisitionCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequisitionRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 1
      }
    },
    "/requisitions/{requisitionId}": {
      "get": {
        "tags": [
          "Requisition API:Requisitions"
        ],
        "summary": "Get a requisition",
        "operationId": "GetRequisition",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested requisition details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequisitionRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Requisition API:Requisitions"
        ],
        "summary": "Update a requisition",
        "operationId": "UpdateRequisition",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequisitionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 1
      },
      "delete": {
        "tags": [
          "Requisition API:Requisitions"
        ],
        "summary": "Remove a requisition",
        "operationId": "DeleteRequisition",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 1
      }
    },
    "/requisitions/{requisitionId}/attachments": {
      "get": {
        "tags": [
          "Requisition API:Attachments"
        ],
        "summary": "Get all attachments",
        "operationId": "GetRequisitionAttachmentList",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of requisition attachments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteAttachmentListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 10
      }
    },
    "/requisitions/{requisitionId}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Requisition API:Attachments"
        ],
        "summary": "Get an attachment",
        "operationId": "GetRequisitionAttachment",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requisition attachment was not found"
          },
          "200": {
            "description": "Requested requisition attachment",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 10
      },
      "delete": {
        "tags": [
          "Requisition API:Attachments"
        ],
        "summary": "Remove an attachment",
        "operationId": "DeleteRequisitionAttachment",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Requisition attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 10
      }
    },
    "/requisitions/{requisitionId}/attachments/{attachmentType}": {
      "post": {
        "tags": [
          "Requisition API:Attachments"
        ],
        "summary": "Add an attachment",
        "operationId": "AddRequisitionAttachment",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attachmentType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequisitionAttachmentType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 10
      }
    },
    "/requisitions/{requisitionId}/approve": {
      "put": {
        "tags": [
          "Requisition API:Approval"
        ],
        "summary": "Approve a requisition",
        "operationId": "ApproveRequisition",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveRequisitionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Approval",
        "x-apiOrder": 20
      }
    },
    "/requisitions/{requisitionId}/history": {
      "get": {
        "tags": [
          "Requisition API:Approval"
        ],
        "summary": "Get approval history",
        "operationId": "GetRequisitionApprovalHistory",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested requisition approval history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequisitionHistoryModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Approval",
        "x-apiOrder": 20
      }
    },
    "/requisitions/{requisitionId}/reject": {
      "put": {
        "tags": [
          "Requisition API:Approval"
        ],
        "summary": "Reject a requisition",
        "operationId": "RejectRequisition",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectRequisitionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Approval",
        "x-apiOrder": 20
      }
    },
    "/requisitions/{requisitionId}/submit": {
      "put": {
        "tags": [
          "Requisition API:Approval"
        ],
        "summary": "Submit a requisition for approval",
        "operationId": "SubmitRequisition",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitRequisitionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Approval",
        "x-apiOrder": 20
      }
    },
    "/requisitions/{requisitionId}/notes": {
      "get": {
        "tags": [
          "Requisition API:Notes"
        ],
        "summary": "Get requisition notes",
        "operationId": "GetRequisitionNotes",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "NoteId",
            "in": "query",
            "description": "Note Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Note type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Reference",
            "in": "query",
            "description": "Reference value used to identify a note or group of notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for notes created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for notes updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: type, createdAt, updatedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.<br />\r\nFields available to include are: text",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified requisition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_requisition_note"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Requisition API:Notes"
        ],
        "summary": "Add a requisition note",
        "operationId": "AddRequisitionNote",
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRequisitionNoteCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteModel"
                }
              }
            }
          },
          "404": {
            "description": "Requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_requisition_note"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/requisitions/forms": {
      "get": {
        "tags": [
          "Requisition API:Notes"
        ],
        "summary": "Get all requisition forms and fields",
        "operationId": "GetRequisitionForms",
        "responses": {
          "200": {
            "description": "List of requisition forms and fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequisitionFormListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/requisitions/fields/custom": {
      "get": {
        "tags": [
          "Requisition API:Lists"
        ],
        "summary": "Get all custom fields",
        "operationId": "GetRequisitionCustomFieldList",
        "responses": {
          "200": {
            "description": "List of requisition custom field definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/requisitions/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Requisition API:Lists"
        ],
        "summary": "Get a custom field",
        "operationId": "GetRequisitionCustomFieldItem",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested requisition custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested requisition custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/jobads": {
      "get": {
        "tags": [
          "Job Ad API:Job Ads"
        ],
        "summary": "Find job ads",
        "operationId": "GetJobAds",
        "parameters": [
          {
            "name": "PartnerAction.ActionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "PartnerAction.Reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PartnerAction.Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "PartnerAction.SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: self,applications,partnerActions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self, applications",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job ads matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobAdListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad"
            ]
          }
        ],
        "x-apiName": "Job Ad API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Job Ad API:Job Ads"
        ],
        "summary": "Add a draft job ad",
        "operationId": "AddJobAdDraft",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobAdDraftCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobAdRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobad"
            ]
          }
        ],
        "x-apiName": "Job Ad API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 1
      }
    },
    "/jobads/{adId}": {
      "get": {
        "tags": [
          "Job Ad API:Job Ads"
        ],
        "summary": "Get a job ad",
        "operationId": "GetJobAd",
        "parameters": [
          {
            "name": "adId",
            "in": "path",
            "description": "Job Ad Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: applications",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job ad details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobAdRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job ad was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad"
            ]
          }
        ],
        "x-apiName": "Job Ad API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Job Ad API:Job Ads"
        ],
        "summary": "Update a draft job ad",
        "operationId": "UpdateJobAdDraft",
        "parameters": [
          {
            "name": "adId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobAdDraftCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobad"
            ]
          }
        ],
        "x-apiName": "Job Ad API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 1
      }
    },
    "/jobads/{adId}/applications": {
      "get": {
        "tags": [
          "Job Ad API:Job Applications"
        ],
        "summary": "Get job applications",
        "operationId": "GetJobAdJobApplications",
        "parameters": [
          {
            "name": "adId",
            "in": "path",
            "description": "Job Ad Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of applications for the specified job ad",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Ad API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 10
      }
    },
    "/jobads/{adId}/applications/active": {
      "get": {
        "tags": [
          "Job Ad API:Job Applications"
        ],
        "summary": "Get active job applications",
        "operationId": "GetJobAdActiveJobApplications",
        "parameters": [
          {
            "name": "adId",
            "in": "path",
            "description": "Job Ad Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of active applications for the specified job ad",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Ad API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 10
      }
    },
    "/candidates": {
      "get": {
        "tags": [
          "Candidate API:Candidates"
        ],
        "summary": "Find candidates",
        "operationId": "FindCandidates",
        "parameters": [
          {
            "name": "CandidateId",
            "in": "query",
            "description": "Candidate Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Candidate name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "Candidate email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Phone",
            "in": "query",
            "description": "Candidate phone or mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CurrentPosition",
            "in": "query",
            "description": "Current Position",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "City",
            "in": "query",
            "description": "City",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "State",
            "in": "query",
            "description": "State",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Location",
            "in": "query",
            "description": "Location (city and/or state)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DateOfBirth",
            "in": "query",
            "description": "Candidate date of birth available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Keywords",
            "in": "query",
            "description": "Search for key-words within the latest candidate resume",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PartnerAction.ActionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "PartnerAction.Reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PartnerAction.Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "PartnerAction.SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "StatusId",
            "in": "query",
            "description": "Candidate status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "RecruiterUserId",
            "in": "query",
            "description": "User Id - search candidates by associated recruiters",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Search in specific folders",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for candidates created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for candidates updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nDefault sort order is by candidateID in ascending order\r\nFields available for sorting are: firstName, lastName, status.name, candidateId, createdAt, updatedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: recruiters, statistics",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self, applications, placements, skills, notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Candidate API:Candidates"
        ],
        "summary": "Add a candidate",
        "operationId": "AddCandidate",
        "parameters": [
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCandidateCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateRepresentation"
                }
              }
            }
          },
          "409": {
            "description": "Candidate with this email already exists",
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 1
      }
    },
    "/candidates/{candidateId}": {
      "get": {
        "tags": [
          "Candidate API:Candidates"
        ],
        "summary": "Get a candidate",
        "operationId": "GetCandidate",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: skills, notes, applications, placements",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Candidate API:Candidates"
        ],
        "summary": "Update a candidate",
        "operationId": "UpdateCandidate",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCandidateCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Candidate was successfully updated"
          },
          "404": {
            "description": "Candidate was not found"
          },
          "409": {
            "description": "Candidate with this email already exists",
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 1
      }
    },
    "/candidates/{candidateId}/photo": {
      "head": {
        "tags": [
          "Candidate API:Photo"
        ],
        "summary": "Get photo headers",
        "operationId": "HeadCandidatePhoto",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the photo to fit the width specified by w",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the photo to fit the height specified by h",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "Photo version, can be used for cache validation",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate photo was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Photo",
        "x-apiOrder": 2
      },
      "get": {
        "tags": [
          "Candidate API:Photo"
        ],
        "summary": "Get a photo",
        "operationId": "GetCandidatePhoto",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the photo to fit the width specified by w",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the photo to fit the height specified by h",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested candidate photo was not found"
          },
          "200": {
            "description": "Requested candidate photo",
            "headers": {
              "ETag": {
                "description": "Photo version, can be used for cache validation",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Photo",
        "x-apiOrder": 2
      },
      "put": {
        "tags": [
          "Candidate API:Photo"
        ],
        "summary": "Update a photo",
        "operationId": "UpdateCandidatePhoto",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Photo",
        "x-apiOrder": 2
      },
      "delete": {
        "tags": [
          "Candidate API:Photo"
        ],
        "summary": "Remove a photo",
        "operationId": "DeleteCandidatePhoto",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Photo",
        "x-apiOrder": 2
      }
    },
    "/candidates/{candidateId}/availability": {
      "get": {
        "tags": [
          "Candidate API:Availability"
        ],
        "summary": "Get availability",
        "operationId": "GetCandidateAvailability",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Availability for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateAvailabilityListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Availability",
        "x-apiOrder": 3
      }
    },
    "/candidates/{candidateId}/availability/weekly": {
      "put": {
        "tags": [
          "Candidate API:Availability"
        ],
        "summary": "Update weekly availability",
        "description": "Set the candidates availability schedule for a single week",
        "operationId": "UpdateCandidateAvailabilityWeek",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCandidateAvailabilityByWeekCommand"
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Availability",
        "x-apiOrder": 3
      },
      "delete": {
        "tags": [
          "Candidate API:Availability"
        ],
        "summary": "Remove weekly availability",
        "description": "Remove the candidates availability schedule for a single week",
        "operationId": "DeleteCandidateAvailabilityWeek",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "WeekOf",
            "in": "query",
            "description": "Remove availability for the week (beginning Sunday) containing the specified date",
            "required": true,
            "schema": {
              "type": "string",
              "properties": {
                "timeOfDay": {
                  "format": "time"
                }
              },
              "format": "date-time"
            }
          },
          {
            "name": "Recurring",
            "in": "query",
            "description": "Remove availability in following weeks. Previous/past recurring schedules will be terminated prior to this schedule, all existing future overlapping schedules will be cancelled.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Until",
            "in": "query",
            "description": "Optional end date of repeating availability removal",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Availability",
        "x-apiOrder": 3
      }
    },
    "/candidates/{candidateId}/videos": {
      "get": {
        "tags": [
          "Candidate API:Videos"
        ],
        "summary": "Get all videos",
        "operationId": "GetCandidateVideos",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate videos",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateVideoListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      }
    },
    "/candidates/{candidateId}/videos/{videoType}": {
      "get": {
        "tags": [
          "Candidate API:Videos"
        ],
        "summary": "Get a recent video",
        "operationId": "GetLatestCandidateVideo",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "videoType",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CandidateVideoType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate video",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateVideoRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate video was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      },
      "post": {
        "tags": [
          "Candidate API:Videos"
        ],
        "summary": "Add a video",
        "operationId": "AddCandidateVideo",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "videoType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CandidateVideoType"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCandidateVideoCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateVideoModel"
                }
              }
            }
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      }
    },
    "/candidates/{candidateId}/skills": {
      "get": {
        "tags": [
          "Candidate API:Skills"
        ],
        "summary": "Get skills",
        "operationId": "GetCandidateSkills",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of skills for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 10
      },
      "put": {
        "tags": [
          "Candidate API:Skills"
        ],
        "summary": "Update skills",
        "operationId": "PutCandidateSkills",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCandidateSkillsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of skills for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 10
      },
      "post": {
        "tags": [
          "Candidate API:Skills"
        ],
        "summary": "Remove skills",
        "operationId": "DeleteCandidateSkills",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveCandidateSkillsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of skills for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 10
      }
    },
    "/candidates/{candidateId}/skills/{categoryId}": {
      "delete": {
        "tags": [
          "Candidate API:Skills"
        ],
        "summary": "Remove a category",
        "description": "Remove a single category and all associated sub-categories and skills",
        "operationId": "DeleteCandidateCategory",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of skills for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 10
      }
    },
    "/candidates/{candidateId}/attachments": {
      "get": {
        "tags": [
          "Candidate API:Attachments"
        ],
        "summary": "Find candidate attachments",
        "operationId": "FindCandidateAttachments",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Attachment types to include",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CandidateAttachmentType"
              }
            }
          },
          {
            "name": "Category",
            "in": "query",
            "description": "Search by attachment category",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Latest",
            "in": "query",
            "description": "Find the latest version of each attachment type",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate attachments matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateAttachmentListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/candidates/{candidateId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Candidate API:Attachments"
        ],
        "summary": "Get an attachment",
        "description": "Get a candidate attachment.<br />Setting the Accept header will attempt a file conversion.",
        "operationId": "GetCandidateAttachment",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested candidate attachment was not found"
          },
          "200": {
            "description": "Requested candidate attachment",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Candidate API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddCandidateAttachment",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Type of attachment being added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SubmitCandidateAttachmentType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateAttachmentRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Candidate API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdateCandidateAttachment",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCandidateAttachmentCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateAttachmentRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/candidates/attachments": {
      "get": {
        "tags": [
          "Candidate API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindAllCandidateAttachments",
        "parameters": [
          {
            "name": "CandidateId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Attachment types to include",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CandidateAttachmentType"
              }
            }
          },
          {
            "name": "Category",
            "in": "query",
            "description": "Search by attachment category",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for candidate attachment created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for candidate attachment updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ExpiryDate",
            "in": "query",
            "description": "Search for candidate attachment expiring in the specified date range\r\n([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.\r\nSpecify multiple parameters to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "properties": {
                  "date": {
                    "format": "date"
                  }
                }
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: candidate",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate attachments matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateAttachmentListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/candidates/{candidateId}/floats": {
      "get": {
        "tags": [
          "Candidate API:Floats"
        ],
        "summary": "Get all floats",
        "operationId": "GetCandidateFloats",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of floats for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloatListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_float"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Floats",
        "x-apiOrder": 50
      }
    },
    "/candidates/{candidateId}/applications": {
      "get": {
        "tags": [
          "Candidate API:Job Applications"
        ],
        "summary": "Get job applications",
        "description": "This will include both active and complete/closed job applications",
        "operationId": "GetCandidateJobApplications",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job applications for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      },
      "post": {
        "tags": [
          "Candidate API:Job Applications"
        ],
        "summary": "Add jobs to a candidate",
        "operationId": "AddCandidateJobOrders",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCandidateJobOrderCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationListRepresentation"
                }
              }
            }
          },
          "409": {
            "description": "Job application already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/candidates/{candidateId}/applications/active": {
      "get": {
        "tags": [
          "Candidate API:Job Applications"
        ],
        "summary": "Get active job applications",
        "operationId": "GetActiveCandidateJobApplications",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of active job applications for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/candidates/{candidateId}/interviews": {
      "get": {
        "tags": [
          "Candidate API:Interviews"
        ],
        "summary": "Get all Interviews",
        "operationId": "GetCandidateInterviews",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Interviews for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_interview"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Interviews",
        "x-apiOrder": 53
      }
    },
    "/candidates/{candidateId}/submissions": {
      "get": {
        "tags": [
          "Candidate API:Submissions"
        ],
        "summary": "Get all submissions",
        "operationId": "GetCandidateSubmissions",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of submissions for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_submission"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Submissions",
        "x-apiOrder": 54
      }
    },
    "/candidates/{candidateId}/placements": {
      "get": {
        "tags": [
          "Candidate API:Placements"
        ],
        "summary": "Get all placements",
        "operationId": "GetCandidatePlacements",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placements for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 55
      }
    },
    "/candidates/{candidateId}/placements/approved": {
      "get": {
        "tags": [
          "Candidate API:Placements"
        ],
        "summary": "Get all approved placements",
        "operationId": "GetCandidateApprovedPlacements",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of approved placements for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 55
      }
    },
    "/candidates/{candidateId}/status": {
      "put": {
        "tags": [
          "Candidate API:Candidates"
        ],
        "summary": "Set a candidate status",
        "description": "Change the candidate status and add an optional note",
        "operationId": "PutCandidateStatus",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCandidateStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Candidate status was successfully updated"
          },
          "202": {
            "description": "Candidate status already assigned"
          },
          "404": {
            "description": "Candidate was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 60
      }
    },
    "/candidates/{candidateId}/notes": {
      "get": {
        "tags": [
          "Candidate API:Notes"
        ],
        "summary": "Get candidate notes",
        "operationId": "GetCandidateNotes",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "NoteId",
            "in": "query",
            "description": "Note Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Note type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Reference",
            "in": "query",
            "description": "Reference value used to identify a note or group of notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for notes created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for notes updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: type, createdAt, updatedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.<br />\r\nFields available to include are: text",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_candidate_note"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Candidate API:Notes"
        ],
        "summary": "Add a note",
        "operationId": "AddCandidateNote",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCandidateNoteCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteModel"
                }
              }
            }
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_candidate_note"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/candidates/{candidateId}/privacy": {
      "delete": {
        "tags": [
          "Candidate API:Privacy"
        ],
        "summary": "Remove a candidate at their request",
        "operationId": "PrivacyDeleteCandidate",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Privacy",
        "x-apiOrder": 99
      }
    },
    "/candidates/{candidateId}/activities": {
      "post": {
        "tags": [
          "Candidate API:Activities"
        ],
        "summary": "Add a candidate activity",
        "operationId": "AddCandidateActivity",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCandidateActivityCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateActivityModel"
                }
              }
            }
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      },
      "get": {
        "tags": [
          "Candidate API:Activities"
        ],
        "summary": "Get candidate activities",
        "operationId": "GetCandidateActivityByCandidateId",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate activities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateActivitySummaryListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/candidates/{candidateId}/activities/{activityId}": {
      "get": {
        "tags": [
          "Candidate API:Activities"
        ],
        "summary": "Get a candidate activity",
        "operationId": "GetCandidateActivity",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateActivityRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate activity was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/candidates/{candidateId}/payrollbilling": {
      "get": {
        "tags": [
          "Candidate API:Payroll Billing"
        ],
        "summary": "Get a candidate payroll billing",
        "description": "Applicable to FT360 enabled accounts only",
        "operationId": "GetCandidatePayrollBilling",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate payroll billing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidatePayrollBillingModel"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate payroll billing was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Payroll Billing",
        "x-apiOrder": 100
      }
    },
    "/candidates/{candidateId}/usertasks": {
      "post": {
        "tags": [
          "Candidate API:UserTasks"
        ],
        "summary": "Add a candidate user task",
        "operationId": "AddCandidateUserTask",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCandidateUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/candidates/{candidateId}/usertasks/{taskId}": {
      "get": {
        "tags": [
          "Candidate API:UserTasks"
        ],
        "summary": "Get a candidate user task",
        "operationId": "GetCandidateUserTask",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate user task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateUserTaskRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate user task was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      },
      "put": {
        "tags": [
          "Candidate API:UserTasks"
        ],
        "summary": "Update a candidate user task",
        "operationId": "UpdateCandidateUserTask",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCandidateUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Candidate user task was successfully updated"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Candidate user task was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_usertask"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/candidates/activities": {
      "get": {
        "tags": [
          "Candidate API:Activities"
        ],
        "summary": "Find candidate activities",
        "operationId": "FindCandidateActivities",
        "parameters": [
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for activities performed at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for activities updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeDetails",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate activities matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateActivityListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/candidates/activitysettings": {
      "get": {
        "tags": [
          "Candidate API:Activities"
        ],
        "summary": "Get all candidate activity settings definitions",
        "operationId": "FindCandidateActivitySettings",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindCandidateActivitySettingsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate activity settings definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateActivitySettingsListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/candidates/activitysettings/{settingId}": {
      "get": {
        "tags": [
          "Candidate API:Activities"
        ],
        "summary": "Get candidate activity settings with details",
        "operationId": "GetCandidateActivitySetting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "Activity Setting Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate activity settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateActivitySettingModel"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate activity settings were not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/candidates/deleted": {
      "get": {
        "tags": [
          "Candidate API:Candidates"
        ],
        "summary": "Recently deleted candidates",
        "description": "Provides a list of candidates recently (last 14 days) deleted from JobAdder, allowing the management\r\nof referenced data for local privacy law compliance (e.g. GDPR).",
        "operationId": "DeletedCandidates",
        "responses": {
          "200": {
            "description": "List of recently deleted candidates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCandidateListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 100
      }
    },
    "/candidates/fields/custom": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get all candidate custom field definitions",
        "operationId": "GetCandidateCustomFieldList",
        "responses": {
          "200": {
            "description": "List of candidate custom field definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get a custom field definition",
        "operationId": "GetCandidateCustomFieldListItem",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      },
      "put": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Modify custom field list values",
        "operationId": "PutCandidateCustomFieldListItem",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCandidateCustomFieldListValuesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated candidate custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "manage_candidate_custom"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/attachmentcategory": {
      "get": {
        "tags": [
          "Candidate API:Attachments"
        ],
        "summary": "Get all attachment categories",
        "operationId": "GetCandidateAttachmentCategoryList",
        "parameters": [
          {
            "name": "Type",
            "in": "query",
            "description": "Optionally filter to specific attachment types",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CandidateAttachmentType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate attachment categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateAttachmentCategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/notetype": {
      "get": {
        "tags": [
          "Candidate API:Notes"
        ],
        "summary": "Get all note types",
        "operationId": "GetCandidateNoteTypeList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate note type definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteTypeListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_candidate_note"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/rating": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get internal ratings",
        "operationId": "GetCandidateRatingList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate internal ratings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameModelListOf"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/salutation": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get salutations (honorifics/titles)",
        "operationId": "GetCandidateSalutationList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate salutations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameModelListOf"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/source": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get all candidate sources",
        "operationId": "GetCandidateSourceList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate sources",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameModelListOf"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/status": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get all status definitions",
        "operationId": "GetCandidateStatusList",
        "parameters": [
          {
            "name": "StatusId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Default",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate status definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get a status definition",
        "operationId": "GetCandidateStatusListItem",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate status definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate status definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/payrollbilling": {
      "get": {
        "tags": [
          "Candidate API:Payroll Billing"
        ],
        "summary": "Find payroll billings",
        "description": "Applicable to FT360 enabled accounts only",
        "operationId": "FindCandidatesPayrollBillings",
        "parameters": [
          {
            "name": "CandidateId",
            "in": "query",
            "description": "Candidate Ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates payroll billing matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidatePayrollBillingListModel"
                }
              }
            }
          },
          "400": {
            "description": "Requested list of candidates payroll billing exceeds the limit of 500 records",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Payroll Billing",
        "x-apiOrder": 100
      }
    },
    "/floats": {
      "get": {
        "tags": [
          "Candidate Float API:Floats"
        ],
        "summary": "Find floats",
        "operationId": "GetFloats",
        "parameters": [
          {
            "name": "FloatId",
            "in": "query",
            "description": "Float Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "CandidateId",
            "in": "query",
            "description": "Candidate Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CompanyId",
            "in": "query",
            "description": "Company Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for floats created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for floats updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate floats matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloatListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_float"
            ]
          }
        ],
        "x-apiName": "Candidate Float API",
        "x-apiGroup": "Floats",
        "x-apiOrder": 100
      }
    },
    "/floats/{floatId}": {
      "get": {
        "tags": [
          "Candidate Float API:Floats"
        ],
        "summary": "Get a float",
        "operationId": "GetFloat",
        "parameters": [
          {
            "name": "floatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate float details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloatRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate float was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_float"
            ]
          }
        ],
        "x-apiName": "Candidate Float API",
        "x-apiGroup": "Floats",
        "x-apiOrder": 100
      }
    },
    "/submissions": {
      "get": {
        "tags": [
          "Candidate Submission API:Submissions"
        ],
        "summary": "Find submissions",
        "operationId": "FindSubmissions",
        "parameters": [
          {
            "name": "SubmissionId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "CandidateId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CompanyId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "JobId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for submissions created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for submissions updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate submissions matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_submission"
            ]
          }
        ],
        "x-apiName": "Candidate Submission API",
        "x-apiGroup": "Submissions",
        "x-apiOrder": 100
      }
    },
    "/submissions/{submissionId}": {
      "get": {
        "tags": [
          "Candidate Submission API:Submissions"
        ],
        "summary": "Get a submission",
        "operationId": "GetSubmission",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate submission details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested candidate submission was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_submission"
            ]
          }
        ],
        "x-apiName": "Candidate Submission API",
        "x-apiGroup": "Submissions",
        "x-apiOrder": 100
      }
    },
    "/applications": {
      "get": {
        "tags": [
          "Job Application API:Job Applications"
        ],
        "summary": "Find job applications",
        "operationId": "FindJobApplications",
        "parameters": [
          {
            "name": "ApplicationId",
            "in": "query",
            "description": "Application Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "CandidateId",
            "in": "query",
            "description": "Candidate Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "JobId",
            "in": "query",
            "description": "Job Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "AdId",
            "in": "query",
            "description": "Job Ad Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "StatusId",
            "in": "query",
            "description": "Job application status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "JobTitle",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "description": "Search for active job applications",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Rejected",
            "in": "query",
            "description": "Search for rejected job applications",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Review.Stage",
            "in": "query",
            "description": "Search for job applications at the specified review stage.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JobApplicationReviewStage"
              }
            }
          },
          {
            "name": "Review.UserId",
            "in": "query",
            "description": "Search for job applications submitted for review by the specified users.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Review.ContactId",
            "in": "query",
            "description": "Search for job applications submitted for review to the specified hiring manager contacts",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Review.SubmittedAt",
            "in": "query",
            "description": "Search for job applications submitted for review at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Review.ReviewedAt",
            "in": "query",
            "description": "Search for job applications reviewed at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Keywords",
            "in": "query",
            "description": "Search for key words within the applicant's resume",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PartnerAction.ActionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "PartnerAction.Reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PartnerAction.Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "PartnerAction.SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Search in specific folders",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for job applications created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedBy",
            "in": "query",
            "description": "User Id - search for job applications last updated by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for job applications updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: createdAt, status.name, review.stage, review.submittedAt, review.reviewedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: partnerActions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job applications matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 1
      }
    },
    "/applications/{applicationId}": {
      "get": {
        "tags": [
          "Job Application API:Job Applications"
        ],
        "summary": "Get a job application",
        "operationId": "GetJobApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job application details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Job Application API:Job Applications"
        ],
        "summary": "Update a job application",
        "description": "Update job application status and custom fields",
        "operationId": "UpdateJobApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobApplicationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job application was successfully updated"
          },
          "204": {
            "description": "Job application was successfully updated"
          },
          "404": {
            "description": "Job application was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 1
      }
    },
    "/applications/{applicationId}/videos": {
      "get": {
        "tags": [
          "Job Application API:Videos"
        ],
        "summary": "Get all videos",
        "operationId": "GetJobApplicationVideos",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job application videos",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateVideoListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      }
    },
    "/applications/{applicationId}/videos/{videoType}": {
      "get": {
        "tags": [
          "Job Application API:Videos"
        ],
        "summary": "Get a recent video",
        "operationId": "GetLatestJobApplicationVideo",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "videoType",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CandidateVideoType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job application video",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateVideoRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job application video was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      },
      "post": {
        "tags": [
          "Job Application API:Videos"
        ],
        "summary": "Add a video",
        "operationId": "AddJobApplicationVideo",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "videoType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CandidateVideoType"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobApplicationVideoCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateVideoModel"
                }
              }
            }
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      }
    },
    "/applications/{applicationId}/attachments": {
      "get": {
        "tags": [
          "Job Application API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindJobApplicationAttachments",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Attachment types to include",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CandidateAttachmentType"
              }
            }
          },
          {
            "name": "Category",
            "in": "query",
            "description": "Search by attachment label",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job application attachments matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateAttachmentListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/applications/{applicationId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Job Application API:Attachments"
        ],
        "summary": "Get an attachment",
        "description": "Get a job application attachment.<br />Setting the Accept header will attempt a file conversion.",
        "operationId": "GetJobApplicationAttachment",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested job application attachment was not found"
          },
          "200": {
            "description": "Requested job application attachment",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Job Application API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddJobApplicationAttachment",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SubmitCandidateAttachmentType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateAttachmentRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Job Application API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdateJobApplicationAttachment",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobApplicationAttachmentCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/applications/{applicationId}/review": {
      "post": {
        "tags": [
          "Job Application API:Review"
        ],
        "summary": "Submit a job application for review",
        "operationId": "ReviewSubmitJobApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewSubmitJobApplicationCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Review",
        "x-apiOrder": 30
      },
      "put": {
        "tags": [
          "Job Application API:Review"
        ],
        "summary": "Mark a job application as viewed by the hiring manager",
        "operationId": "ReviewViewJobApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewViewJobApplicationCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Review",
        "x-apiOrder": 30
      }
    },
    "/applications/{applicationId}/review/accept": {
      "put": {
        "tags": [
          "Job Application API:Review"
        ],
        "summary": "Accept a job application",
        "operationId": "ReviewAcceptJobApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewAcceptJobApplicationCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Review",
        "x-apiOrder": 30
      }
    },
    "/applications/{applicationId}/review/reject": {
      "put": {
        "tags": [
          "Job Application API:Review"
        ],
        "summary": "Reject a job application",
        "operationId": "ReviewRejectJobApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewRejectJobApplicationCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Review",
        "x-apiOrder": 30
      }
    },
    "/applications/{applicationId}/interviews": {
      "get": {
        "tags": [
          "Job Application API:Interviews"
        ],
        "summary": "Get all Interviews",
        "operationId": "GetJobApplicationInterviews",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Interviews for the specified job application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_interview"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Interviews",
        "x-apiOrder": 31
      }
    },
    "/applications/{applicationId}/interviews/external": {
      "post": {
        "tags": [
          "Job Application API:Interviews"
        ],
        "summary": "Create an external interview",
        "operationId": "PostJobApplicationExternalInterview",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobApplicationExternalInterviewCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewModel"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest"
          },
          "404": {
            "description": "Application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_interview"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Interviews",
        "x-apiOrder": 31
      }
    },
    "/applications/{applicationId}/interviews/external/{interviewId}": {
      "put": {
        "tags": [
          "Job Application API:Interviews"
        ],
        "summary": "Update an external interview",
        "operationId": "PutJobApplicationExternalInterview",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "interviewId",
            "in": "path",
            "description": "Interview Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobApplicationInterviewCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewModel"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest"
          },
          "404": {
            "description": "Interview was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_interview"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Interviews",
        "x-apiOrder": 31
      }
    },
    "/applications/{applicationId}/interviews/internal": {
      "post": {
        "tags": [
          "Job Application API:Interviews"
        ],
        "summary": "Create an internal interview",
        "operationId": "PostJobApplicationInternalInterview",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobApplicationInternalInterviewCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewModel"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest"
          },
          "404": {
            "description": "Application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_interview"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Interviews",
        "x-apiOrder": 31
      }
    },
    "/applications/{applicationId}/interviews/internal/{interviewId}": {
      "put": {
        "tags": [
          "Job Application API:Interviews"
        ],
        "summary": "Update an internal interview",
        "operationId": "PutJobApplicationInternalInterview",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "interviewId",
            "in": "path",
            "description": "Interview Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobApplicationInterviewCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewModel"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest"
          },
          "404": {
            "description": "Interview was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_interview"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Interviews",
        "x-apiOrder": 31
      }
    },
    "/applications/{applicationId}/status": {
      "put": {
        "tags": [
          "Job Application API:Job Applications"
        ],
        "summary": "Set a job application status",
        "description": "Change the job application status and add an optional note",
        "operationId": "PutJobApplicationStatus",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetJobApplicationStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job application status was successfully updated"
          },
          "202": {
            "description": "Job application status already assigned"
          },
          "404": {
            "description": "Job application was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 60
      }
    },
    "/applications/{applicationId}/notes": {
      "get": {
        "tags": [
          "Job Application API:Notes"
        ],
        "summary": "Get job application notes",
        "operationId": "GetJobApplicationNotes",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "NoteId",
            "in": "query",
            "description": "Note Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Note type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Reference",
            "in": "query",
            "description": "Reference value used to identify a note or group of notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for notes created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for notes updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: type, createdAt, updatedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.<br />\r\nFields available to include are: text",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified job application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_jobapplication_note"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Job Application API:Notes"
        ],
        "summary": "Add a note",
        "operationId": "AddJobApplicationNote",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobApplicationNoteCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteModel"
                }
              }
            }
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_jobapplication_note"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/applications/{applicationId}/activities": {
      "post": {
        "tags": [
          "Job Application API:Activities"
        ],
        "summary": "Add a job application activity",
        "operationId": "AddJobApplicationActivity",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobApplicationActivityCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationActivityModel"
                }
              }
            }
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      },
      "get": {
        "tags": [
          "Job Application API:Activities"
        ],
        "summary": "Get job application activities",
        "operationId": "GetJobApplicationActivityByApplicationId",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job application activities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationActivitySummaryListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/applications/{applicationId}/activities/{activityId}": {
      "get": {
        "tags": [
          "Job Application API:Activities"
        ],
        "summary": "Get a job application activity",
        "operationId": "GetJobApplicationActivity",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job application activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationActivityRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job application activity was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/applications/{applicationId}/usertasks": {
      "post": {
        "tags": [
          "Job Application API:UserTasks"
        ],
        "summary": "Add an application user task",
        "operationId": "AddJobApplicationUserTask",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddJobApplicationUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/applications/{applicationId}/usertasks/{taskId}": {
      "get": {
        "tags": [
          "Job Application API:UserTasks"
        ],
        "summary": "Get an application user task",
        "operationId": "GetJobApplicationUserTask",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested application user task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationUserTaskRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested  application user task was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      },
      "put": {
        "tags": [
          "Job Application API:UserTasks"
        ],
        "summary": "Update an application user task",
        "operationId": "UpdateJobApplicationUserTask",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobApplicationUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Application user task was successfully updated"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Application user task was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_usertask"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/applications/activities": {
      "get": {
        "tags": [
          "Job Application API:Activities"
        ],
        "summary": "Find job application activities",
        "operationId": "FindJobApplicationActivity",
        "parameters": [
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for activities performed at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for activities updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeDetails",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job application activities matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationActivityListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/applications/activitysettings": {
      "get": {
        "tags": [
          "Job Application API:Activities"
        ],
        "summary": "Get all job application activity settings definitions",
        "operationId": "FindJobApplicationActivitySettings",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindJobApplicationActivitySettingsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job application activity settings definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationActivitySettingsListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/applications/activitysettings/{settingId}": {
      "get": {
        "tags": [
          "Job Application API:Activities"
        ],
        "summary": "Get job application activity settings with details",
        "operationId": "GetJobApplicationActivitySetting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "Activity Setting Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job application activity settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationActivitySettingModel"
                }
              }
            }
          },
          "404": {
            "description": "Requested job application activity settings were not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/applications/deleted": {
      "get": {
        "tags": [
          "Job Application API:Job Applications"
        ],
        "summary": "Recently deleted job applications",
        "description": "Provides a list of job applications recently (last 14 days) deleted from JobAdder, allowing the management\r\nof referenced data for local privacy law compliance (e.g. GDPR).",
        "operationId": "DeletedJobApplications",
        "responses": {
          "200": {
            "description": "List of recently deleted job applications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedJobApplicationListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 100
      }
    },
    "/applications/fields/custom": {
      "get": {
        "tags": [
          "Job Application API:Lists"
        ],
        "summary": "Get all custom fields",
        "operationId": "GetJobApplicationCustomFieldList",
        "responses": {
          "200": {
            "description": "List of job application custom field definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/applications/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Job Application API:Lists"
        ],
        "summary": "Get a custom field",
        "operationId": "GetJobApplicationCustomFieldListItem",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job application custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job application custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/applications/fields/custom/custom/{fieldId}": {
      "put": {
        "tags": [
          "Job Application API:Lists"
        ],
        "summary": "Modify custom field list values",
        "operationId": "PutJobApplicationCustomFieldList",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetJobApplicationCustomFieldListValuesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated job application custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job application custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "manage_jobapplication_custom"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/applications/lists/status": {
      "get": {
        "tags": [
          "Job Application API:Lists"
        ],
        "summary": "Get all status definitions",
        "operationId": "GetJobApplicationStatusList",
        "parameters": [
          {
            "name": "Rejected",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "StatusId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Default",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job application status definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationStatusListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/applications/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Job Application API:Lists"
        ],
        "summary": "Get a status definition",
        "operationId": "GetJobApplicationStatusListItem",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job application status definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationStatusRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested job application status definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/applications/lists/workflow": {
      "get": {
        "tags": [
          "Job Application API:Lists"
        ],
        "summary": "Get the job application workflow",
        "operationId": "GetJobApplicationWorkflowList",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetJobApplicationStatusByWorkflowListQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job application workflow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationStatusByWorkflowListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements": {
      "get": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Find placements",
        "operationId": "FindPlacements",
        "parameters": [
          {
            "name": "PlacementId",
            "in": "query",
            "description": "Placement Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Placement Type",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlacementType"
              }
            }
          },
          {
            "name": "PartnerAction.ActionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "PartnerAction.Reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PartnerAction.Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "PartnerAction.SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "StatusId",
            "in": "query",
            "description": "Placement status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Candidate.CandidateId",
            "in": "query",
            "description": "Candidate Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Candidate.Name",
            "in": "query",
            "description": "Candidate name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CandidateId",
            "in": "query",
            "description": "Alias for candidate.candidateId",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Company.CompanyId",
            "in": "query",
            "description": "Companies by Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Company.Name",
            "in": "query",
            "description": "Company name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CompanyId",
            "in": "query",
            "description": "Alias for company.companyId",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "JobId",
            "in": "query",
            "description": "Job Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ApplicationId",
            "in": "query",
            "description": "Job Application Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Search for placements starting in the specified date range\r\n([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.\r\nSpecify multiple parameters to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "properties": {
                  "date": {
                    "format": "date"
                  }
                }
              }
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "Search for placements ending in the specified date range\r\n([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.\r\nSpecify multiple parameters to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "properties": {
                  "date": {
                    "format": "date"
                  }
                }
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Search in specific folders",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "User Id - search for placements by owner or associated recruiter",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "OwnerUserId",
            "in": "query",
            "description": "User Id - search for placements by owner",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "RecruiterUserId",
            "in": "query",
            "description": "User Id - search placements by associated recruiters",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedBy",
            "in": "query",
            "description": "User Id - search for placements created by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for placements created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedBy",
            "in": "query",
            "description": "User Id - search for placements last updated by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for placements updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Approved",
            "in": "query",
            "description": "Search for approved placements",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ApprovedBy",
            "in": "query",
            "description": "User Id - search for placements approved by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ApprovedAt",
            "in": "query",
            "description": "Search for placements approved at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Export",
            "in": "query",
            "description": "Search for placements that have been flagged by the user for export to integration partners.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FindPlacementByExport"
              }
            }
          },
          {
            "name": "Timesheet.Period",
            "in": "query",
            "description": "Find placements with timesheets in the specified date range\r\n([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.\r\nSpecify multiple parameters to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "properties": {
                  "date": {
                    "format": "date"
                  }
                }
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: partnerActions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self, notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placements matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 1
      }
    },
    "/placements/{placementId}": {
      "get": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Get a placement",
        "operationId": "GetPlacement",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested placement details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested placement was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Update a placement",
        "operationId": "UpdatePlacement",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlacementCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Placement was successfully updated"
          },
          "404": {
            "description": "Placement was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 1
      }
    },
    "/placements/{placementId}/attachments": {
      "get": {
        "tags": [
          "Placement API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindPlacementAttachments",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Attachment types to include",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlacementAttachmentType"
              }
            }
          },
          {
            "name": "Latest",
            "in": "query",
            "description": "Find the latest version of each attachment type",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement attachments matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementAttachmentListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/placements/{placementId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Placement API:Attachments"
        ],
        "summary": "Get an attachment",
        "description": "Get a placement attachment.<br />Setting the Accept header will attempt a file conversion.",
        "operationId": "GetPlacementAttachment",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested placement attachment was not found"
          },
          "200": {
            "description": "Requested placement attachment",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Placement API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddPlacementAttachment",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlacementAttachmentType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementAttachmentRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Placement was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Placement API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdatePlacementAttachment",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlacementAttachmentCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/placements/{placementId}/status": {
      "put": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Set a placement status",
        "description": "Change the placement status and add an optional note",
        "operationId": "PutPlacementStatus",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPlacementStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Placement status was successfully updated"
          },
          "202": {
            "description": "Placement status already assigned"
          },
          "404": {
            "description": "Placement was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 60
      }
    },
    "/placements/{placementId}/timesheets": {
      "get": {
        "tags": [
          "Placement API:Timesheets"
        ],
        "summary": "Get timesheets",
        "operationId": "GetPlacementTimesheets",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Get timesheets for a specific date range\r\n([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with < or > to search dates before or after (inclusive) the specified date.\r\nSpecify multiple parameters to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "properties": {
                  "date": {
                    "format": "date"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of timesheets for the specified placement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementTimesheetListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Timesheets",
        "x-apiOrder": 80
      }
    },
    "/placements/{placementId}/notes": {
      "get": {
        "tags": [
          "Placement API:Notes"
        ],
        "summary": "Get placement notes",
        "operationId": "GetPlacementNotes",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "NoteId",
            "in": "query",
            "description": "Note Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Note type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Reference",
            "in": "query",
            "description": "Reference value used to identify a note or group of notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for notes created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for notes updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: type, createdAt, updatedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.<br />\r\nFields available to include are: text",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified placement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_placement_note"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Placement API:Notes"
        ],
        "summary": "Add a note",
        "operationId": "AddPlacementNote",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPlacementNoteCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteModel"
                }
              }
            }
          },
          "404": {
            "description": "Placement was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_placement_note"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/placements/{placementId}/activities": {
      "post": {
        "tags": [
          "Placement API:Activities"
        ],
        "summary": "Add a placement activity",
        "operationId": "AddPlacementActivity",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPlacementActivityCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementActivityModel"
                }
              }
            }
          },
          "404": {
            "description": "Placement was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      },
      "get": {
        "tags": [
          "Placement API:Activities"
        ],
        "summary": "Get placement activities",
        "operationId": "GetPlacementActivityByPlacementId",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement activities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementActivitySummaryListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/placements/{placementId}/activities/{activityId}": {
      "get": {
        "tags": [
          "Placement API:Activities"
        ],
        "summary": "Get a placement activity",
        "operationId": "GetPlacementActivity",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested placement activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementActivityRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested placement activity was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/placements/{placementId}/usertasks": {
      "post": {
        "tags": [
          "Placement API:UserTasks"
        ],
        "summary": "Add a placement user task",
        "operationId": "AddPlacementUserTask",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPlacementUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Placement was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/placements/{placementId}/usertasks/{taskId}": {
      "get": {
        "tags": [
          "Placement API:UserTasks"
        ],
        "summary": "Get a placement user task",
        "operationId": "GetPlacementUserTask",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested placement user task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementUserTaskRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested placement user task was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      },
      "put": {
        "tags": [
          "Placement API:UserTasks"
        ],
        "summary": "Update a placement user task",
        "operationId": "UpdatePlacementUserTask",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlacementUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Placement user task was successfully updated"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Placement user task was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_usertask"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/placements/activities": {
      "get": {
        "tags": [
          "Placement API:Activities"
        ],
        "summary": "Find placement activities",
        "operationId": "FindPlacementActivity",
        "parameters": [
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for activities performed at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for activities updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeDetails",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement activities matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementActivityListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/placements/activitysettings": {
      "get": {
        "tags": [
          "Placement API:Activities"
        ],
        "summary": "Get all placement activity settings definitions",
        "operationId": "FindPlacementActivitySettings",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindPlacementActivitySettingsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Placement activity settings definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementActivitySettingsListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/placements/activitysettings/{settingId}": {
      "get": {
        "tags": [
          "Placement API:Activities"
        ],
        "summary": "Get placement activity settings with details",
        "operationId": "GetPlacementActivitySetting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "Activity Setting Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Placement activity settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementActivitySettingModel"
                }
              }
            }
          },
          "404": {
            "description": "Requested placement activity settings were not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/placements/deleted": {
      "get": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Recently deleted placements",
        "description": "Provides a list of placements recently (last 14 days) deleted from JobAdder.",
        "operationId": "DeletedPlacements",
        "responses": {
          "200": {
            "description": "List of recently deleted placements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedPlacementListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 100
      }
    },
    "/placements/fields/custom": {
      "get": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Get all custom fields",
        "operationId": "GetPlacementCustomFieldList",
        "responses": {
          "200": {
            "description": "List of placement custom field definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 100
      }
    },
    "/placements/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Get a custom field",
        "operationId": "GetPlacementCustomFieldItem",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested placement custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested placement custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 100
      }
    },
    "/placements/fields/custom/custom/{fieldId}": {
      "put": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Modify custom field list values",
        "operationId": "PutPlacementCustomFieldList",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPlacementCustomFieldListValuesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated placement custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested placement custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "manage_placement_custom"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/attachmentcategory": {
      "get": {
        "tags": [
          "Placement API:Attachments"
        ],
        "summary": "Get all attachment categories",
        "operationId": "GetPlacementAttachmentCategoryList",
        "parameters": [
          {
            "name": "Type",
            "in": "query",
            "description": "Optionally filter to specific attachment types",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlacementAttachmentType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement attachment categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementAttachmentCategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/awards": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get all awards",
        "operationId": "GetPlacementAwardList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement award definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameModelListOf"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/billingterms": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get all billing terms",
        "operationId": "GetPlacementBillingTermsList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement billing terms definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameModelListOf"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/industrycodes": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get all industry codes",
        "operationId": "GetPlacementIndustryCodeList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement industry code definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameModelListOf"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/notetype": {
      "get": {
        "tags": [
          "Placement API:Notes"
        ],
        "summary": "Get all note types",
        "operationId": "GetPlacementNoteTypeList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement note type definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteTypeListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_placement_note"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/paymenttypes": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get all payment types",
        "operationId": "GetPlacementPaymentTypeList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement payment type definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameModelListOf"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/status": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get all status definitions",
        "operationId": "GetPlacementStatusList",
        "parameters": [
          {
            "name": "StatusId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Default",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement status definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get a status definition",
        "operationId": "GetPlacementStatusItem",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested placement status definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested placement status definition was *not found*"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/companies": {
      "get": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Find companies",
        "operationId": "FindCompanies",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Company name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CompanyId",
            "in": "query",
            "description": "Companies by Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ParentId",
            "in": "query",
            "description": "Find subsidiaries of specified parent companies",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "SubsidiaryId",
            "in": "query",
            "description": "Find parents of specified subsidiaries",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "StatusId",
            "in": "query",
            "description": "Company status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "PartnerAction.ActionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "PartnerAction.Reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PartnerAction.Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "PartnerAction.SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Search in specific folders",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "CreatedBy",
            "in": "query",
            "description": "User Id - search for companies created by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for companies created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedBy",
            "in": "query",
            "description": "User Id - search for companies last updated by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for companies updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: partnerActions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self, addresses, contacts, subsidiaries, skills, notes, jobs, placements, workflows",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of companies matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Add a new company",
        "operationId": "AddCompany",
        "parameters": [
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCompanyCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyRepresentation"
                }
              }
            }
          },
          "409": {
            "description": "Company with this name already exists",
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 1
      }
    },
    "/companies/{companyId}": {
      "get": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Get a company",
        "operationId": "GetCompany",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: addresses, contacts, subsidiaries, skills, notes, jobs, placements, workflows",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested company was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Update an existing company",
        "operationId": "UpdateCompany",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company was successfully updated"
          },
          "404": {
            "description": "Requested company was not found"
          },
          "409": {
            "description": "Company with this name already exists",
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 1
      }
    },
    "/companies/{companyId}/logo": {
      "head": {
        "tags": [
          "Company API:Logo"
        ],
        "summary": "Get company logo headers",
        "operationId": "HeadCompanyLogo",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the logo to fit the width specified by w",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the logo to fit the height specified by h",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "Logo version, can be used for cache validation",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Requested company logo was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Logo",
        "x-apiOrder": 2
      },
      "get": {
        "tags": [
          "Company API:Logo"
        ],
        "summary": "Get a company logo",
        "operationId": "GetCompanyLogo",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the logo to fit the width specified by w",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the logo to fit the height specified by h",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested company logo was not found"
          },
          "200": {
            "description": "Requested company logo",
            "headers": {
              "ETag": {
                "description": "Logo version, can be used for cache validation",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Logo",
        "x-apiOrder": 2
      },
      "put": {
        "tags": [
          "Company API:Logo"
        ],
        "summary": "Add or update a company logo",
        "operationId": "UpdateCompanyLogo",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Company was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Logo",
        "x-apiOrder": 2
      },
      "delete": {
        "tags": [
          "Company API:Logo"
        ],
        "summary": "Remove a company logo",
        "operationId": "DeleteCompanyLogo",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Company was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Logo",
        "x-apiOrder": 2
      }
    },
    "/companies/{companyId}/addresses": {
      "get": {
        "tags": [
          "Company API:Addresses"
        ],
        "summary": "Get all addresses",
        "operationId": "GetCompanyAddresses",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of addresses for the specified company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAddressListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Addresses",
        "x-apiOrder": 3
      },
      "post": {
        "tags": [
          "Company API:Addresses"
        ],
        "summary": "Add an address",
        "operationId": "AddCompanyAddress",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCompanyAddressCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAddressRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Company not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Addresses",
        "x-apiOrder": 3
      }
    },
    "/companies/{companyId}/addresses/{addressId}": {
      "get": {
        "tags": [
          "Company API:Addresses"
        ],
        "summary": "Get an address",
        "operationId": "GetCompanyAddress",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "Address Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAddressRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested company address was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Addresses",
        "x-apiOrder": 3
      },
      "put": {
        "tags": [
          "Company API:Addresses"
        ],
        "summary": "Update an address",
        "operationId": "UpdateCompanyAddress",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyAddressCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Company address not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Addresses",
        "x-apiOrder": 3
      },
      "delete": {
        "tags": [
          "Company API:Addresses"
        ],
        "summary": "Remove an address",
        "operationId": "RemoveCompanyAddress",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Company address not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Addresses",
        "x-apiOrder": 3
      }
    },
    "/companies/{companyId}/skills": {
      "get": {
        "tags": [
          "Company API:Skills"
        ],
        "summary": "Get company skills",
        "operationId": "GetCompanySkills",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of skills for the specified company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 5
      }
    },
    "/companies/{companyId}/subsidiaries": {
      "get": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Get all subsidiaries for a company",
        "operationId": "GetCompanySubsidiaries",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of subsidiaries for the specified company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 10
      }
    },
    "/companies/{companyId}/contacts": {
      "get": {
        "tags": [
          "Company API:Contacts"
        ],
        "summary": "Get company contacts",
        "operationId": "GetCompanyContacts",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts for the specified company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 11
      }
    },
    "/companies/{companyId}/attachments": {
      "get": {
        "tags": [
          "Company API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindCompanyAttachments",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Attachment types to include",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CompanyAttachmentType"
              }
            }
          },
          {
            "name": "Latest",
            "in": "query",
            "description": "Find the latest version of each attachment type",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of company attachments matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAttachmentListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/companies/{companyId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Company API:Attachments"
        ],
        "summary": "Get an attachment",
        "operationId": "GetCompanyAttachment",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested company attachment was not found"
          },
          "200": {
            "description": "Requested company attachment",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Company API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddCompanyAttachment",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CompanyAttachmentType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAttachmentRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Company was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Company API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdateCompanyAttachment",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyAttachmentCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/companies/{companyId}/jobs": {
      "get": {
        "tags": [
          "Company API:Jobs"
        ],
        "summary": "Get all jobs for a company",
        "operationId": "GetCompanyJobOrders",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs for a company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 60
      }
    },
    "/companies/{companyId}/jobs/active": {
      "get": {
        "tags": [
          "Company API:Jobs"
        ],
        "summary": "Get all active/open jobs for a company",
        "operationId": "GetCompanyActiveJobOrders",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of active jobs for a company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 60
      }
    },
    "/companies/{companyId}/status": {
      "put": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Set a company status",
        "description": "Change the company status and add an optional note",
        "operationId": "PutCompanyStatus",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCompanyStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company status was successfully updated"
          },
          "202": {
            "description": "Company status already assigned"
          },
          "404": {
            "description": "Company was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 60
      }
    },
    "/companies/{companyId}/requisitions": {
      "get": {
        "tags": [
          "Company API:Requisitions"
        ],
        "summary": "Get all requisitions for a company",
        "operationId": "GetCompanyRequisitions",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of requisitions for the specified company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequisitionListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 61
      }
    },
    "/companies/{companyId}/floats": {
      "get": {
        "tags": [
          "Company API:Floats"
        ],
        "summary": "Get all floats for a company",
        "operationId": "GetCompanyFloats",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates floats for a company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloatListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_float"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Floats",
        "x-apiOrder": 70
      }
    },
    "/companies/{companyId}/submissions": {
      "get": {
        "tags": [
          "Company API:Submissions"
        ],
        "summary": "Get all candidate submissions for a company",
        "operationId": "GetCompanySubmissions",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate submissions for the requested company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_submission"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Submissions",
        "x-apiOrder": 71
      }
    },
    "/companies/{companyId}/placements": {
      "get": {
        "tags": [
          "Company API:Placements"
        ],
        "summary": "Get all approved and unapproved placements for a company",
        "operationId": "GetCompanyPlacements",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placements for the specified company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 75
      }
    },
    "/companies/{companyId}/placements/approved": {
      "get": {
        "tags": [
          "Company API:Placements"
        ],
        "summary": "Get all approved placements for a company",
        "operationId": "GetCompanyApprovedPlacements",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of approved placements for the specified company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 75
      }
    },
    "/companies/{companyId}/workflows/{workflowType}": {
      "get": {
        "tags": [
          "Company API:Workflows"
        ],
        "summary": "Get all company workflows",
        "operationId": "ListCompanyWorkflows",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowType",
            "in": "path",
            "description": "Valid values: \"Requisition\"",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CompanyWorkflowType"
            }
          },
          {
            "name": "WorkflowId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FindCompanyWorkflowsInclude"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources within the results.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of company workflows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyWorkflowListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Workflows",
        "x-apiOrder": 85
      },
      "post": {
        "tags": [
          "Company API:Workflows"
        ],
        "summary": "Add a company workflow",
        "operationId": "AddCompanyWorkflow",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowType",
            "in": "path",
            "description": "Valid values: \"Requisition\"",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CompanyWorkflowType"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCompanyWorkflowCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Add a company workflow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyWorkflowRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Workflows",
        "x-apiOrder": 85
      }
    },
    "/companies/{companyId}/workflows/{workflowType}/{workflowId}": {
      "get": {
        "tags": [
          "Company API:Workflows"
        ],
        "summary": "Get a company workflow and approvers",
        "operationId": "GetCompanyWorkflow",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowType",
            "in": "path",
            "description": "Valid values: \"Requisition\"",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CompanyWorkflowType"
            }
          },
          {
            "name": "workflowId",
            "in": "path",
            "description": "Workflow Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a company workflow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyWorkflowRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Workflows",
        "x-apiOrder": 85
      },
      "put": {
        "tags": [
          "Company API:Workflows"
        ],
        "summary": "Update a company workflow",
        "operationId": "UpdateCompanyWorkflow",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowType",
            "in": "path",
            "description": "Valid values: \"Requisition\"",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CompanyWorkflowType"
            }
          },
          {
            "name": "workflowId",
            "in": "path",
            "description": "Workflow Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyWorkflowCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated a company workflow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyWorkflowRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Workflows",
        "x-apiOrder": 85
      }
    },
    "/companies/{companyId}/notes": {
      "get": {
        "tags": [
          "Company API:Notes"
        ],
        "summary": "Get company notes",
        "operationId": "GetCompanyNotes",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "NoteId",
            "in": "query",
            "description": "Note Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Note type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Reference",
            "in": "query",
            "description": "Reference value used to identify a note or group of notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for notes created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for notes updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: type, createdAt, updatedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.<br />\r\nFields available to include are: text",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_company_note"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Company API:Notes"
        ],
        "summary": "Add a company note",
        "operationId": "AddCompanyNote",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCompanyNoteCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteModel"
                }
              }
            }
          },
          "404": {
            "description": "Company was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_company_note"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/companies/{companyId}/activities": {
      "post": {
        "tags": [
          "Company API:Activities"
        ],
        "summary": "Add a company activity",
        "operationId": "AddCompanyActivity",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCompanyActivityCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyActivityModel"
                }
              }
            }
          },
          "404": {
            "description": "Company was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      },
      "get": {
        "tags": [
          "Company API:Activities"
        ],
        "summary": "Get company activities",
        "operationId": "GetCompanyActivityByCompanyId",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of company activities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyActivitySummaryListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/companies/{companyId}/activities/{activityId}": {
      "get": {
        "tags": [
          "Company API:Activities"
        ],
        "summary": "Get a company activity",
        "operationId": "GetCompanyActivity",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyActivityRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested company activity was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/companies/{companyId}/usertasks": {
      "post": {
        "tags": [
          "Company API:UserTasks"
        ],
        "summary": "Add a company user task",
        "operationId": "AddCompanyUserTask",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCompanyUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Company was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/companies/{companyId}/usertasks/{taskId}": {
      "get": {
        "tags": [
          "Company API:UserTasks"
        ],
        "summary": "Get a company user task",
        "operationId": "GetCompanyUserTask",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company user task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyUserTaskRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested company user task was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      },
      "put": {
        "tags": [
          "Company API:UserTasks"
        ],
        "summary": "Update a company user task",
        "operationId": "UpdateCompanyUserTask",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company user task was successfully updated"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Company user task was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_usertask"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/companies/activities": {
      "get": {
        "tags": [
          "Company API:Activities"
        ],
        "summary": "Find company activities",
        "operationId": "FindCompanyActivity",
        "parameters": [
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for activities performed at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for activities updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeDetails",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of company activities matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyActivityListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/companies/activitysettings": {
      "get": {
        "tags": [
          "Company API:Activities"
        ],
        "summary": "Get all company activity settings definitions",
        "operationId": "FindCompanyActivitySettings",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindCompanyActivitySettingsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of company activity settings definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyActivitySettingsListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/companies/activitysettings/{settingId}": {
      "get": {
        "tags": [
          "Company API:Activities"
        ],
        "summary": "Get Company activity settings with details",
        "operationId": "GetCompanyActivitySetting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "Activity Setting Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company activity settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyActivitySettingModel"
                }
              }
            }
          },
          "404": {
            "description": "Requested company activity settings were not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/companies/deleted": {
      "get": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Recently deleted companies",
        "description": "Provides a list of companies recently (last 14 days) deleted from JobAdder.",
        "operationId": "DeletedCompanies",
        "responses": {
          "200": {
            "description": "List of recently deleted companies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCompanyListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 100
      }
    },
    "/companies/fields/custom": {
      "get": {
        "tags": [
          "Company API:Lists"
        ],
        "summary": "Get the list of company custom fields",
        "operationId": "GetCompanyCustomFieldList",
        "responses": {
          "200": {
            "description": "List of company custom field definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/companies/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Company API:Lists"
        ],
        "summary": "Get a company custom field",
        "operationId": "GetCompanyCustomFieldListItem",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested company custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      },
      "put": {
        "tags": [
          "Company API:Lists"
        ],
        "summary": "Modify custom field list values",
        "operationId": "PutCompanyCustomFieldList",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCompanyCustomFieldListValuesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated company custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested company custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "manage_company_custom"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/companies/lists/attachmentcategory": {
      "get": {
        "tags": [
          "Company API:Attachments"
        ],
        "summary": "Get all attachment categories",
        "operationId": "GetCompanyAttachmentCategoryList",
        "parameters": [
          {
            "name": "Type",
            "in": "query",
            "description": "Optionally filter to specific attachment types",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CompanyAttachmentType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of company attachment categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAttachmentCategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 100
      }
    },
    "/companies/lists/notetype": {
      "get": {
        "tags": [
          "Company API:Notes"
        ],
        "summary": "Get a list of company note types",
        "operationId": "GetCompanyNoteTypeList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of company note types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteTypeListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_candidate_note"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 100
      }
    },
    "/companies/lists/status": {
      "get": {
        "tags": [
          "Company API:Lists"
        ],
        "summary": "Get a list of company status definitions",
        "operationId": "GetCompanyStatusList",
        "parameters": [
          {
            "name": "StatusId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Default",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of company status definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/companies/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Company API:Lists"
        ],
        "summary": "Get a company status",
        "operationId": "GetCompanyStatusListItem",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company status definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested company status definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Find contacts",
        "operationId": "FindContacts",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "description": "Contact Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Contact name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "Contact email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Phone",
            "in": "query",
            "description": "Contact phone or mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CompanyId",
            "in": "query",
            "description": "Company Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "HiringManager",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "StatusId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "PartnerAction.ActionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "PartnerAction.Reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PartnerAction.Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "PartnerAction.SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Search in specific folders",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "CreatedBy",
            "in": "query",
            "description": "User Id - search for contacts created by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for contacts created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedBy",
            "in": "query",
            "description": "User Id - search for contacts last updated by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for contacts updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: partnerActions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self, skills, notes, jobs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Add a new contact",
        "operationId": "AddContact",
        "parameters": [
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRepresentation"
                }
              }
            }
          },
          "409": {
            "description": "Contact with this email already exists",
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 1
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Get a contact",
        "operationId": "GetContact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: skills, notes, jobs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested contact details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Update an existing contact",
        "operationId": "UpdateContact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact was successfully updated"
          },
          "404": {
            "description": "Requested contact was not found"
          },
          "409": {
            "description": "Contact with this email already exists",
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 1
      }
    },
    "/contacts/{contactId}/photo": {
      "head": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Get a contact photo headers",
        "operationId": "HeadContactPhoto",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the photo to fit the width specified by w",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the photo to fit the height specified by g",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "Photo version, can be used for cache validation",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Requested contact photo was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 2
      },
      "get": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Get a contact photo",
        "operationId": "GetContactPhoto",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the photo to fit the width specified by w",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the photo to fit the height specified by g",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested contact photo was not found"
          },
          "200": {
            "description": "Requested contact photo",
            "headers": {
              "ETag": {
                "description": "Photo version, can be used for cache validation",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 2
      },
      "put": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Update a contact photo",
        "operationId": "UpdateContactPhoto",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 2
      },
      "delete": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Remove photo",
        "operationId": "DeletteContactPhoto",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 2
      }
    },
    "/contacts/{contactId}/jobs": {
      "get": {
        "tags": [
          "Contact API:Jobs"
        ],
        "summary": "Get all jobs for a contact",
        "operationId": "GetContactJobOrders",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs for the specified contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 3
      }
    },
    "/contacts/{contactId}/jobs/active": {
      "get": {
        "tags": [
          "Contact API:Jobs"
        ],
        "summary": "Get all active/open jobs for a contact",
        "operationId": "GetContactActiveJobOrders",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of active/open jobs for the specified contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 3
      }
    },
    "/contacts/{contactId}/interviews": {
      "get": {
        "tags": [
          "Contact API:Interviews"
        ],
        "summary": "Get all Interviews",
        "operationId": "GetContactInterviews",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Interviews for the specified contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_interview"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Interviews",
        "x-apiOrder": 4
      }
    },
    "/contacts/{contactId}/skills": {
      "get": {
        "tags": [
          "Contact API:Skills"
        ],
        "summary": "Get contact skills",
        "operationId": "GetContactSkills",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of skills for the specified contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 5
      },
      "put": {
        "tags": [
          "Contact API:Skills"
        ],
        "summary": "Update skills",
        "operationId": "PutContactSkills",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactSkillsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of skills for the specified contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 5
      },
      "post": {
        "tags": [
          "Contact API:Skills"
        ],
        "summary": "Remove skills",
        "operationId": "DeleteContactSkills",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveContactSkillsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of skills for the specified contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 5
      }
    },
    "/contacts/{contactId}/skills/{categoryId}": {
      "delete": {
        "tags": [
          "Contact API:Skills"
        ],
        "summary": "Remove a category",
        "description": "Remove a single category and all associated sub-categories and skills",
        "operationId": "DeleteContactCategory",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of skills for the specified contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 5
      }
    },
    "/contacts/{contactId}/attachments": {
      "get": {
        "tags": [
          "Contact API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindContactAttachments",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Attachment types to include",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContactAttachmentType"
              }
            }
          },
          {
            "name": "Latest",
            "in": "query",
            "description": "Find the latest version of each attachment type",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact attachments matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAttachmentListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/contacts/{contactId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Contact API:Attachments"
        ],
        "summary": "Get an attachment",
        "operationId": "GetContactAttachment",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested contact attachment was not found"
          },
          "200": {
            "description": "Requested contact attachment",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Contact API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddContactAttachment",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ContactAttachmentType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAttachmentRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Contact API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdateContactAttachment",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactAttachmentCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/contacts/{contactId}/status": {
      "put": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Set a contact status",
        "description": "Change the contact status and add an optional note",
        "operationId": "PutContactStatus",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetContactStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact status was successfully updated"
          },
          "202": {
            "description": "Contact status already assigned"
          },
          "404": {
            "description": "Contact was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 60
      }
    },
    "/contacts/{contactId}/notes": {
      "get": {
        "tags": [
          "Contact API:Notes"
        ],
        "summary": "Get contact notes",
        "operationId": "GetContactNotes",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "NoteId",
            "in": "query",
            "description": "Note Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Note type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Reference",
            "in": "query",
            "description": "Reference value used to identify a note or group of notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for notes created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for notes updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: type, createdAt, updatedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.<br />\r\nFields available to include are: text",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_contact_note"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Contact API:Notes"
        ],
        "summary": "Add a contact note",
        "operationId": "AddContactNote",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactNoteCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteModel"
                }
              }
            }
          },
          "404": {
            "description": "Contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_contact_note"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/contacts/{contactId}/activities": {
      "post": {
        "tags": [
          "Contact API:Activities"
        ],
        "summary": "Add a contact activity",
        "operationId": "AddContactActivity",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactActivityCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactActivityModel"
                }
              }
            }
          },
          "404": {
            "description": "Contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      },
      "get": {
        "tags": [
          "Contact API:Activities"
        ],
        "summary": "Get contact activities",
        "operationId": "GetContactActivityByContactId",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact activities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactActivitySummaryListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/contacts/{contactId}/activities/{activityId}": {
      "get": {
        "tags": [
          "Contact API:Activities"
        ],
        "summary": "Get a contact activity",
        "operationId": "GetContactActivity",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested contact activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactActivityRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested contact activity was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/contacts/{contactId}/usertasks": {
      "post": {
        "tags": [
          "Contact API:UserTasks"
        ],
        "summary": "Add a contact user task",
        "operationId": "AddContactUserTask",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/contacts/{contactId}/usertasks/{taskId}": {
      "get": {
        "tags": [
          "Contact API:UserTasks"
        ],
        "summary": "Get a contact user task",
        "operationId": "GetContactUserTask",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested contact user task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactUserTaskRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested contact user task was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      },
      "put": {
        "tags": [
          "Contact API:UserTasks"
        ],
        "summary": "Update a contact user task",
        "operationId": "UpdateContactUserTask",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact user task was successfully updated"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactUserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "Contact user task was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_usertask"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "UserTasks",
        "x-apiOrder": 100
      }
    },
    "/contacts/activities": {
      "get": {
        "tags": [
          "Contact API:Activities"
        ],
        "summary": "Find contact activities",
        "operationId": "FindContactActivity",
        "parameters": [
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for activities performed at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for activities updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeDetails",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact activities matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactActivityListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/contacts/activitysettings": {
      "get": {
        "tags": [
          "Contact API:Activities"
        ],
        "summary": "Get all contact activity settings definitions",
        "operationId": "FindContactActivitySettings",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindContactActivitySettingsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact activity settings definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactActivitySettingsListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/contacts/activitysettings/{settingId}": {
      "get": {
        "tags": [
          "Contact API:Activities"
        ],
        "summary": "Get contact activity settings with details",
        "operationId": "GetContactActivitySetting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "Activity Setting Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact activity settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactActivitySettingModel"
                }
              }
            }
          },
          "404": {
            "description": "Requested contact activity settings were not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Activities",
        "x-apiOrder": 100
      }
    },
    "/contacts/deleted": {
      "get": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Recently deleted contacts",
        "description": "Provides a list of contacts recently (last 14 days) deleted from JobAdder, allowing the management\r\nof referenced data for local privacy law compliance (e.g. GDPR).",
        "operationId": "DeletedContacts",
        "responses": {
          "200": {
            "description": "List of recently deleted contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedContactListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 100
      }
    },
    "/contacts/fields/custom": {
      "get": {
        "tags": [
          "Contact API:Lists"
        ],
        "summary": "Get the list of Contact custom fields",
        "operationId": "GetContactCustomFieldList",
        "responses": {
          "200": {
            "description": "List of contact custom field definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/contacts/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Contact API:Lists"
        ],
        "summary": "Get a Contact custom field",
        "operationId": "GetContactCustomFieldListItem",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested contact custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested contact custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/contacts/fields/custom/custom/{fieldId}": {
      "put": {
        "tags": [
          "Contact API:Lists"
        ],
        "summary": "Modify custom field list values",
        "operationId": "PutContactCustomFieldList",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetContactCustomFieldListValuesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated contact custom field definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested contact custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "manage_contact_custom"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/contacts/lists/attachmentcategory": {
      "get": {
        "tags": [
          "Contact API:Attachments"
        ],
        "summary": "Get all attachment categories",
        "operationId": "GetContactAttachmentCategoryList",
        "parameters": [
          {
            "name": "Type",
            "in": "query",
            "description": "Optionally filter to specific attachment types",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContactAttachmentType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact attachment categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAttachmentCategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 100
      }
    },
    "/contacts/lists/notetype": {
      "get": {
        "tags": [
          "Contact API:Notes"
        ],
        "summary": "Get a list of contact note types",
        "operationId": "GetContactNoteTypeList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact note type definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteTypeListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_contact_note"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 100
      }
    },
    "/contacts/lists/salutation": {
      "get": {
        "tags": [
          "Contact API:Lists"
        ],
        "summary": "Get salutations (honorifics/titles)",
        "operationId": "GetContactSalutationList",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact salutations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameModelListOf"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/contacts/lists/status": {
      "get": {
        "tags": [
          "Contact API:Lists"
        ],
        "summary": "Get a list of contact status definitions",
        "operationId": "GetContactStatusList",
        "parameters": [
          {
            "name": "StatusId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Default",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact status definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/contacts/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Contact API:Lists"
        ],
        "summary": "Get a contact status definition",
        "operationId": "GetContactStatusListItem",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested contact status definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested contact status definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/notes": {
      "get": {
        "tags": [
          "Note API:Notes"
        ],
        "summary": "Find notes",
        "operationId": "FindNotes",
        "parameters": [
          {
            "name": "CandidateId",
            "in": "query",
            "description": "Candidate Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CompanyId",
            "in": "query",
            "description": "Company Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ContactId",
            "in": "query",
            "description": "Contact Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "JobId",
            "in": "query",
            "description": "Job Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "RequisitionId",
            "in": "query",
            "description": "Requisition Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ApplicationId",
            "in": "query",
            "description": "Job Application Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "PlacementId",
            "in": "query",
            "description": "Placement Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "EntityType",
            "in": "query",
            "description": "Filter notes by Entity Type.<br />\r\nEntity Type must be any of: candidate, contact, company, job, placement, requisition",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self, candidates, contacts, placements, jobs, jobapplications, companies, requisitions\r\nNote: embed=self everything is embeded by default",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "NoteId",
            "in": "query",
            "description": "Note Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Note type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Reference",
            "in": "query",
            "description": "Reference value used to identify a note or group of notes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for notes created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for notes updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: type, createdAt, updatedAt",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.<br />\r\nFields available to include are: text",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note"
            ]
          }
        ],
        "x-apiName": "Note API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Note API:Notes"
        ],
        "summary": "Add a note",
        "operationId": "AddNote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNoteCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note"
            ]
          }
        ],
        "x-apiName": "Note API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 1
      }
    },
    "/notes/{noteId}": {
      "get": {
        "tags": [
          "Note API:Notes"
        ],
        "summary": "Get a note",
        "operationId": "GetNote",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "Note Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested note details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested note was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note"
            ]
          }
        ],
        "x-apiName": "Note API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Note API:Notes"
        ],
        "summary": "Update a note",
        "operationId": "UpdateNote",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Specified note was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note"
            ]
          }
        ],
        "x-apiName": "Note API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 1
      }
    },
    "/notes/{noteId}/attachments": {
      "post": {
        "tags": [
          "Note API:Attachments"
        ],
        "summary": "Add a single attachment",
        "description": "The file can be submitted either as multipart/form-data with a single part containing only the file, or as binary data",
        "operationId": "AddNoteAttachment",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "fileData"
                ],
                "type": "object",
                "properties": {
                  "fileData": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Note was not found"
          }
        },
        "x-apiName": "Note API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 10
      }
    },
    "/notes/{noteId}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Note API:Attachments"
        ],
        "summary": "Get a note attachment",
        "operationId": "GetNoteAttachment",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "Note Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested note attachment was not found"
          },
          "200": {
            "description": "Requested note attachment",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-apiName": "Note API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 10
      }
    },
    "/folders": {
      "get": {
        "tags": [
          "Folder API:Folders"
        ],
        "summary": "Find folders",
        "operationId": "FindFolders",
        "parameters": [
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "JobId",
            "in": "query",
            "description": "Job Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CandidateId",
            "in": "query",
            "description": "Candidate Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ApplicationId",
            "in": "query",
            "description": "Job Application Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "PlacementId",
            "in": "query",
            "description": "Placement Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CompanyId",
            "in": "query",
            "description": "Company Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ContactId",
            "in": "query",
            "description": "Contact Id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "User Id - search for folders by owner or shared with the specified users",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "OwnerUserId",
            "in": "query",
            "description": "User Id - search for folders by owner",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "SharedWithUserId",
            "in": "query",
            "description": "User Id - search folders shared with the specified users",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "OwnerStatus",
            "in": "query",
            "description": "Owner status",
            "schema": {
              "$ref": "#/components/schemas/FolderOwnerStatus"
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for folders created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for folders updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: sharedWith",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self, jobs, candidates, applications, contacts, companies, placements",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "EmbedMode",
            "in": "query",
            "description": "Determines what gets returned when embed option is one of self or candidates/contacts/etc.<br />\r\nResources available to embedMode are: id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of folders matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_folder"
            ]
          }
        ],
        "x-apiName": "Folder API",
        "x-apiGroup": "Folders",
        "x-apiOrder": 1
      }
    },
    "/folders/{folderId}": {
      "get": {
        "tags": [
          "Folder API:Folders"
        ],
        "summary": "Get a folder",
        "operationId": "GetFolder",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "EmbedMode",
            "in": "query",
            "description": "Determines what gets returned when embed option is one of self or canddiates/contacts/etc.<br />\r\nResources available to embedMode are: id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested folder details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested folder was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_folder"
            ]
          }
        ],
        "x-apiName": "Folder API",
        "x-apiGroup": "Folders",
        "x-apiOrder": 1
      },
      "patch": {
        "tags": [
          "Folder API:Folders"
        ],
        "summary": "Add or remove entities in folder",
        "description": "Allows bulk adding or removing of entities (jobs, candidates, applications, placements, companies and contacts) for a specific folder",
        "operationId": "PatchFolder",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Specified folder was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_folder"
            ]
          }
        ],
        "x-apiName": "Folder API",
        "x-apiGroup": "Folders",
        "x-apiOrder": 1
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User API:Users"
        ],
        "summary": "Find users",
        "operationId": "FindUsers",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "OfficeId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "GroupId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for users created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedBy",
            "in": "query",
            "description": "User Id - search for jobs last updated by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for users updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FindUsersInclude"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Users",
        "x-apiOrder": 1
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "User API:Users"
        ],
        "summary": "Get a user",
        "operationId": "GetUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested user was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Users",
        "x-apiOrder": 1
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "User API:Users"
        ],
        "summary": "Get the current user",
        "operationId": "GetCurrentUser",
        "responses": {
          "200": {
            "description": "Current user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Current user was not found (huh?)"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Users",
        "x-apiOrder": 1
      }
    },
    "/users/{userId}/photo": {
      "get": {
        "tags": [
          "User API:Users"
        ],
        "summary": "Get a user photo",
        "operationId": "GetUserPhoto",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested user photo was not found"
          },
          "200": {
            "description": "Requested user photo",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Users",
        "x-apiOrder": 2
      }
    },
    "/users/{userId}/usertasks": {
      "get": {
        "tags": [
          "User API:Tasks"
        ],
        "summary": "Find user tasks",
        "operationId": "FindUserUserTasks",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartAt",
            "in": "query",
            "description": "Search for tasks starting at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FindUserTasksInclude"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user tasks matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTaskListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usertask"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Tasks",
        "x-apiOrder": 10
      }
    },
    "/users/{userId}/interviews": {
      "get": {
        "tags": [
          "User API:Interviews"
        ],
        "summary": "Get all Interviews",
        "operationId": "GetUserInterviews",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of interviews for the specified user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_interview"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Interviews",
        "x-apiOrder": 11
      }
    },
    "/users/{userId}/usergroups": {
      "get": {
        "tags": [
          "User API:Groups"
        ],
        "summary": "Get user groups",
        "operationId": "GetUserUserGroups",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user groups that the specified user belongs to",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usergroup"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Groups",
        "x-apiOrder": 20
      }
    },
    "/usergroups": {
      "get": {
        "tags": [
          "User Group API:Groups"
        ],
        "summary": "Find groups",
        "operationId": "FindUserGroups",
        "parameters": [
          {
            "name": "GroupId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user groups matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usergroup"
            ]
          }
        ],
        "x-apiName": "User Group API",
        "x-apiGroup": "Groups",
        "x-apiOrder": 100
      }
    },
    "/usergroups/{groupId}": {
      "get": {
        "tags": [
          "User Group API:Groups"
        ],
        "summary": "Get a group",
        "operationId": "GetUserGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested user group details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested user group was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usergroup"
            ]
          }
        ],
        "x-apiName": "User Group API",
        "x-apiGroup": "Groups",
        "x-apiOrder": 100
      }
    },
    "/usergroups/{groupId}/users": {
      "get": {
        "tags": [
          "User Group API:Users"
        ],
        "summary": "Get users",
        "operationId": "GetGroupUsers",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users belonging to the specified user group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User Group API",
        "x-apiGroup": "Users",
        "x-apiOrder": 100
      }
    },
    "/useroffices": {
      "get": {
        "tags": [
          "User Office API:Offices"
        ],
        "summary": "Find user offices",
        "operationId": "FindUserOffices",
        "parameters": [
          {
            "name": "OfficeId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user offices matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOfficeListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User Office API",
        "x-apiGroup": "Offices",
        "x-apiOrder": 100
      }
    },
    "/useroffices/{officeId}": {
      "get": {
        "tags": [
          "User Office API:Offices"
        ],
        "summary": "Get a user office",
        "operationId": "GetUserOffice",
        "parameters": [
          {
            "name": "officeId",
            "in": "path",
            "description": "Office Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested user office details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOfficeRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested user office was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User Office API",
        "x-apiGroup": "Offices",
        "x-apiOrder": 100
      }
    },
    "/useroffices/{officeId}/users": {
      "get": {
        "tags": [
          "User Office API:Users"
        ],
        "summary": "Get users",
        "operationId": "GetOfficeUsers",
        "parameters": [
          {
            "name": "officeId",
            "in": "path",
            "description": "Office Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users belonging to the specified office",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User Office API",
        "x-apiGroup": "Users",
        "x-apiOrder": 100
      }
    },
    "/usertasks": {
      "get": {
        "tags": [
          "User Task API:Tasks"
        ],
        "summary": "Find user tasks",
        "operationId": "FindUserTasks",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Search for tasks assigned to or owned by the specified users",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "StartAt",
            "in": "query",
            "description": "Search for tasks starting at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CreatedBy",
            "in": "query",
            "description": "User Id - search for companies created by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for tasks created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedBy",
            "in": "query",
            "description": "User Id - search for companies last updated by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for tasks updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FindUserTasksInclude"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user tasks matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTaskListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usertask"
            ]
          }
        ],
        "x-apiName": "User Task API",
        "x-apiGroup": "Tasks",
        "x-apiOrder": 10
      },
      "post": {
        "tags": [
          "User Task API:Tasks"
        ],
        "summary": "Create a user task",
        "operationId": "AddUserTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_usertask"
            ]
          }
        ],
        "x-apiName": "User Task API",
        "x-apiGroup": "Tasks",
        "x-apiOrder": 10
      }
    },
    "/usertasks/{taskId}": {
      "get": {
        "tags": [
          "User Task API:Tasks"
        ],
        "summary": "Get a user task",
        "operationId": "GetUserTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested user task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTaskRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usertask"
            ]
          }
        ],
        "x-apiName": "User Task API",
        "x-apiGroup": "Tasks",
        "x-apiOrder": 10
      },
      "delete": {
        "tags": [
          "User Task API:Tasks"
        ],
        "summary": "Delete a user task",
        "operationId": "DeleteUserTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "User task was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_usertask"
            ]
          }
        ],
        "x-apiName": "User Task API",
        "x-apiGroup": "Tasks",
        "x-apiOrder": 10
      },
      "put": {
        "tags": [
          "User Task API:Tasks"
        ],
        "summary": "Update a user task",
        "operationId": "UpdateUserTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserTaskCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User task was successfully updated"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTaskModel"
                }
              }
            }
          },
          "404": {
            "description": "User task was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_usertask"
            ]
          }
        ],
        "x-apiName": "User Task API",
        "x-apiGroup": "Tasks",
        "x-apiOrder": 10
      }
    },
    "/usertasks/{taskId}/complete": {
      "put": {
        "tags": [
          "User Task API:Tasks"
        ],
        "summary": "Mark user task as complete",
        "operationId": "MarkCompleteUserTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "User task was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_usertask"
            ]
          }
        ],
        "x-apiName": "User Task API",
        "x-apiGroup": "Tasks",
        "x-apiOrder": 10
      }
    },
    "/usertasks/{taskId}/incomplete": {
      "put": {
        "tags": [
          "User Task API:Tasks"
        ],
        "summary": "Mark user task as incomplete",
        "operationId": "MarkIncompleteUserTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "User task was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_usertask"
            ]
          }
        ],
        "x-apiName": "User Task API",
        "x-apiGroup": "Tasks",
        "x-apiOrder": 10
      }
    },
    "/interviews": {
      "get": {
        "tags": [
          "Interview API:Interviews"
        ],
        "summary": "Find interviews",
        "operationId": "FindInterviews",
        "parameters": [
          {
            "name": "InterviewId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "JobId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "User Id - search for internal/user interviewers",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ContactId",
            "in": "query",
            "description": "Contact Id - search for external/contact interviewers",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CandidateId",
            "in": "query",
            "description": "Candidate Id - search for interviewees by candidateId",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ApplicationId",
            "in": "query",
            "description": "Application Id - search for interviewees by applicationId",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InterviewType"
              }
            }
          },
          {
            "name": "StartAt",
            "in": "query",
            "description": "Search for interviews starting at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "EndAt",
            "in": "query",
            "description": "Search for interviews ending at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreatedBy",
            "in": "query",
            "description": "User Id - search for interviews created by the specified user(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "CreatedAt",
            "in": "query",
            "description": "Search for interviews created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UpdatedAt",
            "in": "query",
            "description": "Search for interviews updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: self, evaluations",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of interviews matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_interview"
            ]
          }
        ],
        "x-apiName": "Interview API",
        "x-apiGroup": "Interviews",
        "x-apiOrder": 1
      }
    },
    "/interviews/{interviewId}": {
      "delete": {
        "tags": [
          "Interview API:Interviews"
        ],
        "summary": "Delete an interview",
        "operationId": "DeleteInterview",
        "parameters": [
          {
            "name": "interviewId",
            "in": "path",
            "description": "Interview Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Interview was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_interview"
            ]
          }
        ],
        "x-apiName": "Interview API",
        "x-apiGroup": "Interviews",
        "x-apiOrder": 1
      }
    },
    "/interviews/{interviewId}/{applicationId}": {
      "get": {
        "tags": [
          "Interview API:Interviews"
        ],
        "summary": "Get an interview",
        "operationId": "GetInterview",
        "parameters": [
          {
            "name": "interviewId",
            "in": "path",
            "description": "Interview Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "description": "Embed related resources.<br />\r\nResources available to embed are: evaluations",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested interview details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Requested interview was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_interview"
            ]
          }
        ],
        "x-apiName": "Interview API",
        "x-apiGroup": "Interviews",
        "x-apiOrder": 1
      }
    },
    "/interviews/{interviewId}/{applicationId}/evaluations": {
      "get": {
        "tags": [
          "Interview API:Evaluations"
        ],
        "summary": "Get interview evaluations",
        "operationId": "GetInterviewEvaluations",
        "parameters": [
          {
            "name": "interviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of interview evaluations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewEvaluationListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_interview"
            ]
          }
        ],
        "x-apiName": "Interview API",
        "x-apiGroup": "Evaluations",
        "x-apiOrder": 2
      }
    },
    "/interviews/{interviewId}/{applicationId}/evaluations/external/{contactId}": {
      "get": {
        "tags": [
          "Interview API:Evaluations"
        ],
        "summary": "Get an external/contact interview evaluation",
        "operationId": "GetExternalInterviewEvaluation",
        "parameters": [
          {
            "name": "interviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "External/contact interview evaluation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewEvaluationRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_interview"
            ]
          }
        ],
        "x-apiName": "Interview API",
        "x-apiGroup": "Evaluations",
        "x-apiOrder": 2
      },
      "put": {
        "tags": [
          "Interview API:Evaluations"
        ],
        "summary": "Submit an external/contact interview evaluation",
        "operationId": "PutExternalInterviewEvaluation",
        "parameters": [
          {
            "name": "interviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitInterviewEvaluationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "External/contact interview evaluation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewEvaluationRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_interview"
            ]
          }
        ],
        "x-apiName": "Interview API",
        "x-apiGroup": "Evaluations",
        "x-apiOrder": 2
      }
    },
    "/interviews/{interviewId}/{applicationId}/evaluations/internal/{userId}": {
      "get": {
        "tags": [
          "Interview API:Evaluations"
        ],
        "summary": "Get an internal/user interview evaluation",
        "operationId": "GetInternalInterviewEvaluation",
        "parameters": [
          {
            "name": "interviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Internal/user interview evaluation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewEvaluationRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_interview"
            ]
          }
        ],
        "x-apiName": "Interview API",
        "x-apiGroup": "Evaluations",
        "x-apiOrder": 2
      },
      "put": {
        "tags": [
          "Interview API:Evaluations"
        ],
        "summary": "Submit an internal/user interview evaluation",
        "operationId": "PutInternalInterviewEvaluation",
        "parameters": [
          {
            "name": "interviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitInterviewEvaluationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal/user interview evaluation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterviewEvaluationRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_interview"
            ]
          }
        ],
        "x-apiName": "Interview API",
        "x-apiGroup": "Evaluations",
        "x-apiOrder": 2
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Category API:Categories"
        ],
        "summary": "Find categories",
        "operationId": "FindCategories",
        "parameters": [
          {
            "name": "CategoryId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FindCategoriesEmbed"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read"
            ]
          }
        ],
        "x-apiName": "Category API",
        "x-apiGroup": "Categories",
        "x-apiOrder": 100
      }
    },
    "/countries": {
      "get": {
        "tags": [
          "Location API:Countries"
        ],
        "summary": "Find countries",
        "operationId": "FindCountries",
        "parameters": [
          {
            "name": "Code",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of countries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read"
            ]
          }
        ],
        "x-apiName": "Location API",
        "x-apiGroup": "Countries",
        "x-apiOrder": 100
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Location API:Locations"
        ],
        "summary": "Find locations",
        "operationId": "FindLocations",
        "parameters": [
          {
            "name": "LocationId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Embed",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FindLocationsEmbed"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of locations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read"
            ]
          }
        ],
        "x-apiName": "Location API",
        "x-apiGroup": "Locations",
        "x-apiOrder": 100
      }
    },
    "/worktypes": {
      "get": {
        "tags": [
          "Work Type API:Work Types"
        ],
        "summary": "Find work types",
        "operationId": "FindWorkTypes",
        "parameters": [
          {
            "name": "WorkTypeId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of work types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkTypeListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read"
            ]
          }
        ],
        "x-apiName": "Work Type API",
        "x-apiGroup": "Work Types",
        "x-apiOrder": 100
      }
    },
    "/search/emailaddress": {
      "get": {
        "tags": [
          "Search API:Search"
        ],
        "summary": "Search by email address.",
        "description": "Find candidates, contacts or users by email address.",
        "operationId": "FindEmailAddress",
        "parameters": [
          {
            "name": "Email",
            "in": "query",
            "description": "Email address to search for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidates, contacts or users matching the specified email address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchedByEmailAddressModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate",
              "read_contact",
              "read_user"
            ]
          }
        ],
        "x-apiName": "Search API",
        "x-apiGroup": "Search",
        "x-apiOrder": 100
      }
    },
    "/search/phonenumber": {
      "get": {
        "tags": [
          "Search API:Search"
        ],
        "summary": "Search by phone number.",
        "description": "Find candidates, contacts, companies or users by phone number.",
        "operationId": "FindPhoneNumber",
        "parameters": [
          {
            "name": "E164",
            "in": "query",
            "description": "[E.164 format phone number](https://en.wikipedia.org/wiki/E.164) to search for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidates, contacts, companies or users matching the specified number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchedByPhoneNumberModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate",
              "read_contact",
              "read_company",
              "read_user"
            ]
          }
        ],
        "x-apiName": "Search API",
        "x-apiGroup": "Search",
        "x-apiOrder": 100
      }
    },
    "/partners/actions": {
      "get": {
        "tags": [
          "Partner Action API:Actions"
        ],
        "summary": "Find partner actions",
        "operationId": "FindPartnerActions",
        "parameters": [
          {
            "name": "ActionType",
            "in": "query",
            "description": "Type of action",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionType"
              }
            }
          },
          {
            "name": "ActionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of partner actions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerActionListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Actions",
        "x-apiOrder": 1
      }
    },
    "/partners/actions/{act}": {
      "get": {
        "tags": [
          "Partner Action API:Actions"
        ],
        "summary": "Get a partner action",
        "operationId": "GetPartnerAction",
        "parameters": [
          {
            "name": "act",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested partner action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerActionRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Partner action was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Actions",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Partner Action API:Actions"
        ],
        "summary": "Add a partner action",
        "operationId": "AddPartnerAction",
        "parameters": [
          {
            "name": "act",
            "in": "path",
            "description": "Action type. The type cannot be changed once assigned.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PartnerActionType"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerActionRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Actions",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Partner Action API:Actions"
        ],
        "summary": "Update a partner action",
        "operationId": "UpdatePartnerAction",
        "parameters": [
          {
            "name": "act",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerActionRepresentation"
                }
              }
            }
          },
          "404": {
            "description": "Partner action was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Actions",
        "x-apiOrder": 1
      },
      "delete": {
        "tags": [
          "Partner Action API:Actions"
        ],
        "summary": "Delete a partner action",
        "operationId": "DeletePartnerAction",
        "parameters": [
          {
            "name": "act",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Partner action was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Actions",
        "x-apiOrder": 1
      }
    },
    "/partners/actions/{actionId}/applications": {
      "get": {
        "tags": [
          "Partner Action API:Job Applications"
        ],
        "summary": "Find job applications submitted to an action",
        "operationId": "GetPartnerActionJobApplications",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job applications submitted to the specified partner action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/applications/{applicationId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Job Applications"
        ],
        "summary": "Complete a job application action",
        "operationId": "CompleteJobApplicationPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobApplicationPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/applications/{applicationId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Job Applications"
        ],
        "summary": "Update job application action progress",
        "operationId": "ProgressJobApplicationPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobApplicationPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/applications/{applicationId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Job Applications"
        ],
        "summary": "Reject a job application action",
        "operationId": "RejectJobApplicationPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobApplicationPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/candidates": {
      "get": {
        "tags": [
          "Partner Action API:Candidates"
        ],
        "summary": "Find candidates submitted to an action",
        "operationId": "GetPartnerActionCandidates",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates submitted to the specified partner action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/candidates/{candidateId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Candidates"
        ],
        "summary": "Complete a candidate action",
        "operationId": "CompleteCandidatePartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCandidatePartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/candidates/{candidateId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Candidates"
        ],
        "summary": "Update candidate action progress",
        "operationId": "ProgressCandidatePartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCandidatePartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/candidates/{candidateId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Candidates"
        ],
        "summary": "Reject a candidate action",
        "operationId": "RejectCandidatePartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCandidatePartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/companies": {
      "get": {
        "tags": [
          "Partner Action API:Companies"
        ],
        "summary": "Find companies submitted to an action",
        "operationId": "GetPartnerActionCompanies",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of companies submitted to the specified partner action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/companies/{companyId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Companies"
        ],
        "summary": "Complete a company action",
        "operationId": "CompleteCompanyPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/companies/{companyId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Companies"
        ],
        "summary": "Update company action progress",
        "operationId": "ProgressCompanyPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/companies/{companyId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Companies"
        ],
        "summary": "Reject a company action",
        "operationId": "RejectCompanyPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/contacts": {
      "get": {
        "tags": [
          "Partner Action API:Contacts"
        ],
        "summary": "Find contacts submitted to an action",
        "operationId": "GetPartnerActionContacts",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts submitted to the specified partner action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/contacts/{contactId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Contacts"
        ],
        "summary": "Complete a contact action",
        "operationId": "CompleteContactPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/contacts/{contactId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Contacts"
        ],
        "summary": "Update contact action progress",
        "operationId": "ProgressContactPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/contacts/{contactId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Contacts"
        ],
        "summary": "Reject a contact action",
        "operationId": "RejectContactPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobads": {
      "get": {
        "tags": [
          "Partner Action API:Job Ads"
        ],
        "summary": "Find job ads submitted to an action",
        "operationId": "GetPartnerActionJobAds",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job ads submitted to the specified partner action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobAdListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobads/{adId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Job Ads"
        ],
        "summary": "Complete a job ad action",
        "operationId": "CompleteJobAdPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "adId",
            "in": "path",
            "description": "Job Ad Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobAdPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobad",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobads/{adId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Job Ads"
        ],
        "summary": "Update job ad action progress",
        "operationId": "ProgressJobAdPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "adId",
            "in": "path",
            "description": "Job Ad Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobAdPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobad",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobads/{adId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Job Ads"
        ],
        "summary": "Reject a job ad action",
        "operationId": "RejectJobAdPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "adId",
            "in": "path",
            "description": "Job Ad Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobAdPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobad",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobs": {
      "get": {
        "tags": [
          "Partner Action API:Jobs"
        ],
        "summary": "Find jobs submitted to an action",
        "operationId": "GetPartnerActionJobOrders",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs submitted to the specified partner action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOrderListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobs/{jobId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Jobs"
        ],
        "summary": "Complete a job action",
        "operationId": "CompleteJobOrderPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobOrderPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobs/{jobId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Jobs"
        ],
        "summary": "Update job action progress",
        "operationId": "ProgressJobOrderPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobOrderPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobs/{jobId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Jobs"
        ],
        "summary": "Reject a job action",
        "operationId": "RejectJobOrderPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobOrderPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/placements": {
      "get": {
        "tags": [
          "Partner Action API:Placements"
        ],
        "summary": "Find placements submitted to an action",
        "operationId": "GetPartnerActionPlacements",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PartnerActionStage"
              }
            }
          },
          {
            "name": "SubmittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of placements submitted to the specified partner action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacementListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/placements/{placementId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Placements"
        ],
        "summary": "Complete a placement action",
        "operationId": "CompletePlacementPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlacementPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/placements/{placementId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Placements"
        ],
        "summary": "Update placement action progress",
        "operationId": "ProgressPlacementPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlacementPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/placements/{placementId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Placements"
        ],
        "summary": "Reject a placement action",
        "operationId": "RejectPlacementPartnerAction",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlacementPartnerActionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement",
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 51
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhook API:Webhooks"
        ],
        "summary": "Find webhooks",
        "operationId": "FindWebhooks",
        "parameters": [
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WebhookStatus"
              }
            }
          },
          {
            "name": "Events",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EventName"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookListRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "offline_access"
            ]
          }
        ],
        "x-apiName": "Webhook API",
        "x-apiGroup": "Webhooks",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Webhook API:Webhooks"
        ],
        "summary": "Add a new webhook",
        "operationId": "AddWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddWebhookCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookRepresentation"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "offline_access"
            ]
          }
        ],
        "x-apiName": "Webhook API",
        "x-apiGroup": "Webhooks",
        "x-apiOrder": 1
      }
    },
    "/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Webhook API:Webhooks"
        ],
        "summary": "Get a webhook",
        "operationId": "GetWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested webhook details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "offline_access"
            ]
          }
        ],
        "x-apiName": "Webhook API",
        "x-apiGroup": "Webhooks",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Webhook API:Webhooks"
        ],
        "summary": "Update an existing webhook",
        "operationId": "UpdateWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook was successfully updated"
          },
          "404": {
            "description": "Webhook was not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "offline_access"
            ]
          }
        ],
        "x-apiName": "Webhook API",
        "x-apiGroup": "Webhooks",
        "x-apiOrder": 1
      },
      "delete": {
        "tags": [
          "Webhook API:Webhooks"
        ],
        "summary": "Delete a webhook",
        "operationId": "DeleteWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "Webhook Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Webhook was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "offline_access"
            ]
          }
        ],
        "x-apiName": "Webhook API",
        "x-apiGroup": "Webhooks",
        "x-apiOrder": 1
      }
    }
  },
  "components": {
    "schemas": {
      "ActivityAnswerListModel": {
        "type": "object",
        "properties": {
          "textAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityTextAnswerModel"
            },
            "nullable": true
          },
          "listValueAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityListValueAnswerModel"
            },
            "nullable": true
          },
          "dateRangeValueAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityDateRangeAnswerModel"
            },
            "nullable": true
          },
          "ratingValueAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityRatingAnswerModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivityDateRangeAnswerModel": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ActivityDateValueDetailModel": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivityDetailListModel": {
        "type": "object",
        "properties": {
          "textAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivitySingleValueDetailModel"
            },
            "nullable": true
          },
          "listValueAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityListValueDetailModel"
            },
            "nullable": true
          },
          "dateValueAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityDateValueDetailModel"
            },
            "nullable": true
          },
          "ratingValueAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityRatingValueDetailModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivityListValueAnswerModel": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "integer",
            "format": "int32"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivityListValueDetailModel": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivityQuestionModel": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "mandatory": {
            "type": "boolean"
          },
          "possibleValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "questionAnswerType": {
            "type": "string",
            "nullable": true
          },
          "minimumRating": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximumRating": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "conditionalAnswer": {
            "type": "string",
            "nullable": true
          },
          "conditionalQuestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityQuestionModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivityRatingAnswerModel": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "integer",
            "format": "int32"
          },
          "rating": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ActivityRatingValueDetailModel": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "nullable": true
          },
          "percentage": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ActivitySingleValueDetailModel": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "nullable": true
          },
          "answer": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivityTextAnswerModel": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddCandidateActivityCommand": {
        "type": "object",
        "properties": {
          "activitySettingId": {
            "type": "integer",
            "format": "int32"
          },
          "statusId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "answers": {
            "$ref": "#/components/schemas/ActivityAnswerListModel"
          }
        },
        "additionalProperties": false
      },
      "AddCandidateCommand": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "phone": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "salutation": {
            "maxLength": 20,
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "description": "Candidate status",
            "format": "int32",
            "nullable": true
          },
          "rating": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "source": {
            "maxLength": 50,
            "type": "string",
            "description": "Candidate source",
            "nullable": true
          },
          "seeking": {
            "$ref": "#/components/schemas/CandidateSeekingStatus"
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "emergencyContact": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "emergencyPhone": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "social": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri"
            },
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/SubmitAddressModel"
          },
          "skillTags": {
            "maxLength": 100,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "employment": {
            "$ref": "#/components/schemas/SubmitEmploymentModel"
          },
          "availability": {
            "$ref": "#/components/schemas/SubmitCandidateAvailabilityModel"
          },
          "education": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCandidateEducationModel"
            },
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "nullable": true
          },
          "recruiterUserId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddCandidateJobOrderCommand": {
        "required": [
          "jobId"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "source": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddCandidateNoteCommand": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "type": "string",
            "description": "Note type",
            "nullable": true
          },
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "Note content"
          },
          "applicationId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Optional list of related job applications to link to the note",
            "nullable": true
          },
          "createdByIntegration": {
            "type": "boolean",
            "description": "When set to true, it indicates that the note is created by integration as a part of some automation workflows, not by a specific user"
          },
          "reference": {
            "maxLength": 200,
            "type": "string",
            "description": "Optional reference string used to identify a note or group of notes",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/SubmitUserModel"
          }
        },
        "additionalProperties": false
      },
      "AddCandidateUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddCandidateVideoCommand": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Video URL",
            "format": "uri"
          },
          "reference": {
            "maxLength": 200,
            "type": "string",
            "description": "Optional unique reference for this video type, if specified then an existing video \r\nwith the same type and reference will be updated if found.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddCompanyActivityCommand": {
        "type": "object",
        "properties": {
          "activitySettingId": {
            "type": "integer",
            "format": "int32"
          },
          "statusId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "answers": {
            "$ref": "#/components/schemas/ActivityAnswerListModel"
          }
        },
        "additionalProperties": false
      },
      "AddCompanyAddressCommand": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "street": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "isPrimaryAddress": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AddCompanyCommand": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "parentCompanyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "legalName": {
            "maxLength": 200,
            "type": "string",
            "description": "Company LegalName",
            "nullable": true
          },
          "social": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri"
            },
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "description": "Company status",
            "format": "int32",
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "description": "Custom field values. Only the specified fields will be updated, each fieldId can specified once.",
            "nullable": true
          },
          "ownerUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "recruiterUserId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddCompanyNoteCommand": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "type": "string",
            "description": "Note type",
            "nullable": true
          },
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "Note content"
          },
          "contactId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Optional list of related contacts to link to the note",
            "nullable": true
          },
          "reference": {
            "maxLength": 200,
            "type": "string",
            "description": "Optional reference string used to identify a note or group of notes",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/SubmitUserModel"
          }
        },
        "additionalProperties": false
      },
      "AddCompanyUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddCompanyWorkflowCommand": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "approvers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCompanyWorkflowApproverModel"
            },
            "description": "Approvers for this workflow. Only the specified workflow stages will be updated, each stageIndex can be specified once.",
            "nullable": true
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AddContactActivityCommand": {
        "type": "object",
        "properties": {
          "activitySettingId": {
            "type": "integer",
            "format": "int32"
          },
          "statusId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "answers": {
            "$ref": "#/components/schemas/ActivityAnswerListModel"
          }
        },
        "additionalProperties": false
      },
      "AddContactCommand": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "phone": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "salutation": {
            "maxLength": 20,
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "social": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri"
            },
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reportsToContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "officeAddressId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "description": "Contact status",
            "format": "int32",
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "nullable": true
          },
          "ownerUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "recruiterUserId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddContactNoteCommand": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "type": "string",
            "description": "Note type",
            "nullable": true
          },
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "Note content"
          },
          "createdByIntegration": {
            "type": "boolean",
            "description": "When set to true, it indicates that the note is created by integration as a part of some automation workflows, not by a specific user"
          },
          "reference": {
            "maxLength": 200,
            "type": "string",
            "description": "Optional reference string used to identify a note or group of notes",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/SubmitUserModel"
          }
        },
        "additionalProperties": false
      },
      "AddContactUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddJobAdDraftCommand": {
        "required": [
          "ownerUserId",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "summary": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "bulletPoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "jobId": {
            "type": "integer",
            "description": "Associated job",
            "format": "int32"
          },
          "ownerUserId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AddJobApplicationActivityCommand": {
        "type": "object",
        "properties": {
          "activitySettingId": {
            "type": "integer",
            "format": "int32"
          },
          "statusId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "answers": {
            "$ref": "#/components/schemas/ActivityAnswerListModel"
          }
        },
        "additionalProperties": false
      },
      "AddJobApplicationExternalInterviewCommand": {
        "required": [
          "location",
          "interviewersContactIds"
        ],
        "type": "object",
        "properties": {
          "startAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Interview start time. The allowed minutes for the time are 0, 15, 30 and 45.",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Interview end time. The allowed minutes for the time are 0, 15, 30 and 45.",
            "format": "date-time"
          },
          "location": {
            "maxLength": 200,
            "type": "string",
            "description": "Interview location",
            "nullable": true
          },
          "interviewersContactIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Contact IDs of the interviewers",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddJobApplicationInternalInterviewCommand": {
        "required": [
          "location",
          "interviewersUserIds"
        ],
        "type": "object",
        "properties": {
          "startAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Interview start time. The allowed minutes for the time are 0, 15, 30 and 45.",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Interview end time. The allowed minutes for the time are 0, 15, 30 and 45.",
            "format": "date-time"
          },
          "location": {
            "maxLength": 200,
            "type": "string",
            "description": "Interview location",
            "nullable": true
          },
          "interviewersUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "User IDs of the interviewers",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddJobApplicationNoteCommand": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "type": "string",
            "description": "Note type",
            "nullable": true
          },
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "Note content"
          },
          "reference": {
            "maxLength": 200,
            "type": "string",
            "description": "Optional reference string used to identify a note or group of notes",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/SubmitUserModel"
          }
        },
        "additionalProperties": false
      },
      "AddJobApplicationUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddJobApplicationVideoCommand": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Video URL",
            "format": "uri"
          },
          "reference": {
            "maxLength": 200,
            "type": "string",
            "description": "Optional unique reference for this video type, if specified then an existing video \r\nwith the same type and reference will be updated if found.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddJobOrderActivityCommand": {
        "type": "object",
        "properties": {
          "activitySettingId": {
            "type": "integer",
            "format": "int32"
          },
          "statusId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "answers": {
            "$ref": "#/components/schemas/ActivityAnswerListModel"
          }
        },
        "additionalProperties": false
      },
      "AddJobOrderCandidateCommand": {
        "required": [
          "candidateId"
        ],
        "type": "object",
        "properties": {
          "candidateId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "source": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddJobOrderCommand": {
        "required": [
          "jobTitle"
        ],
        "type": "object",
        "properties": {
          "jobTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "jobDescription": {
            "type": "string",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "description": "Job status",
            "format": "int32",
            "nullable": true
          },
          "userFavourite": {
            "type": "boolean",
            "description": "Job is a favourite for the current user",
            "nullable": true
          },
          "category": {
            "$ref": "#/components/schemas/SubmitCategoryModel"
          },
          "location": {
            "$ref": "#/components/schemas/SubmitLocationModel"
          },
          "workplaceAddressId": {
            "type": "string",
            "description": "Workplace Address Id",
            "format": "uuid",
            "nullable": true
          },
          "start": {
            "$ref": "#/components/schemas/SubmitJobOrderStartModel"
          },
          "duration": {
            "$ref": "#/components/schemas/SubmitDurationModel"
          },
          "workTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "salary": {
            "$ref": "#/components/schemas/SubmitJobOrderSalaryRangeModel"
          },
          "fee": {
            "$ref": "#/components/schemas/SubmitJobOrderFeeModel"
          },
          "numberOfJobs": {
            "type": "integer",
            "format": "int32"
          },
          "source": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "nullable": true
          },
          "skillTags": {
            "$ref": "#/components/schemas/SubmitJobOrderSkillTagsModel"
          },
          "ownerUserId": {
            "type": "integer",
            "description": "User Id - Owner of this job",
            "format": "int32"
          },
          "recruiterUserId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "User Id - Optional list of recruiters assigned to the job",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddJobOrderNoteCommand": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "type": "string",
            "description": "Note type",
            "nullable": true
          },
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "Note content"
          },
          "applicationId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "reference": {
            "maxLength": 200,
            "type": "string",
            "description": "Optional reference string used to identify a note or group of notes",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/SubmitUserModel"
          }
        },
        "additionalProperties": false
      },
      "AddJobOrderUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNoteCommand": {
        "required": [
          "text",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "Note content"
          },
          "jobId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "requisitionId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "candidateId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applicationId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "placementId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companyId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contactId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "createdByIntegration": {
            "type": "boolean"
          },
          "reference": {
            "maxLength": 200,
            "type": "string",
            "description": "Optional reference string used to identify a note or group of notes",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/SubmitUserModel"
          }
        },
        "additionalProperties": false
      },
      "AddOpportunityCommand": {
        "required": [
          "companyId",
          "opportunityTitle",
          "ownerUserIds",
          "stageId"
        ],
        "type": "object",
        "properties": {
          "opportunityTitle": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "workTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stageId": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "estimatedClose": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ownerUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalInformation": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddPartnerActionCommand": {
        "required": [
          "actionName"
        ],
        "type": "object",
        "properties": {
          "actionName": {
            "maxLength": 100,
            "type": "string",
            "description": "Menu item label that will appear to the end-user",
            "nullable": true
          },
          "reference": {
            "maxLength": 100,
            "type": "string",
            "description": "Unique partner defined reference/identifier for the action",
            "nullable": true
          },
          "url": {
            "maxLength": 500,
            "type": "string",
            "description": "URL to open after the action is selected and assigned the `\"Submitted\"` stage.\\\r\nTemplates parameters can be used in the URL to identify the resource submitted to the action\r\n<table><tr><td>`{userId}`</td><td>Replaced with the User Id of the user performing the action</td></tr><tr><td>`{jobId}`</td><td>Replaced with the Job Id</td></tr><tr><td>`{adId}`</td><td>Replaced with the Job Ad Id</td></tr><tr><td>`{candidateId}`</td><td>Replaced with the Candidate Id</td></tr><tr><td>`{applicationId}`</td><td>Replaced with the Job Application Id</td></tr><tr><td>`{placementId}`</td><td>Replaced with the Placement Id</td></tr><tr><td>`{companyId}`</td><td>Replaced with the Company Id</td></tr><tr><td>`{contactId}`</td><td>Replaced with the Contact Id</td></tr></table>",
            "format": "uri",
            "nullable": true
          },
          "urlType": {
            "$ref": "#/components/schemas/PartnerActionUrlType"
          },
          "allowResubmit": {
            "type": "boolean",
            "description": "Allow resources to be resubmitted to an action."
          },
          "actionFilter": {
            "$ref": "#/components/schemas/PartnerActionFilterModel"
          },
          "webhookData": {
            "description": "Additional data to include with the webhook notification",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddPlacementActivityCommand": {
        "type": "object",
        "properties": {
          "activitySettingId": {
            "type": "integer",
            "format": "int32"
          },
          "statusId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "answers": {
            "$ref": "#/components/schemas/ActivityAnswerListModel"
          }
        },
        "additionalProperties": false
      },
      "AddPlacementNoteCommand": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "type": "string",
            "description": "Note type",
            "nullable": true
          },
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "Note content"
          },
          "reference": {
            "maxLength": 200,
            "type": "string",
            "description": "Optional reference string used to identify a note or group of notes",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/SubmitUserModel"
          }
        },
        "additionalProperties": false
      },
      "AddPlacementUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddRequisitionCommand": {
        "required": [
          "contactId",
          "jobTitle"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Hiring manager (contact) submitting the requisition.",
            "format": "int32"
          },
          "jobTitle": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "jobDescription": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "$ref": "#/components/schemas/SubmitCategoryModel"
          },
          "location": {
            "$ref": "#/components/schemas/SubmitLocationModel"
          },
          "workplaceAddressId": {
            "type": "string",
            "description": "Workplace address Id",
            "format": "uuid",
            "nullable": true
          },
          "start": {
            "$ref": "#/components/schemas/SubmitJobOrderStartModel"
          },
          "duration": {
            "$ref": "#/components/schemas/SubmitDurationModel"
          },
          "workTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "salary": {
            "$ref": "#/components/schemas/SubmitJobOrderSalaryRangeModel"
          },
          "numberOfJobs": {
            "type": "integer",
            "format": "int32"
          },
          "source": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "nullable": true
          },
          "workflowId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "recruiterUserId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "User Id - Optional list of recruiters assigned to the requisition.",
            "nullable": true
          },
          "formID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddRequisitionNoteCommand": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "type": "string",
            "description": "Note type",
            "nullable": true
          },
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "Note content"
          },
          "reference": {
            "maxLength": 200,
            "type": "string",
            "description": "Optional reference string used to identify a note or group of notes",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/SubmitUserModel"
          }
        },
        "additionalProperties": false
      },
      "AddUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AddWebhookCommand": {
        "required": [
          "name",
          "events",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventName"
            },
            "nullable": true
          },
          "eventFilters": {
            "$ref": "#/components/schemas/SubmitWebhookEventFilterModel"
          },
          "url": {
            "type": "string",
            "description": "Target URL that will listen for incoming HTTP POST notification messages.",
            "format": "uri",
            "nullable": true
          },
          "authorization": {
            "type": "string",
            "description": "Optional authorization header to include with the HTTP POST notification.",
            "nullable": true,
            "example": "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
          },
          "status": {
            "$ref": "#/components/schemas/SubmitWebhookStatus"
          }
        },
        "additionalProperties": false
      },
      "AddressModel": {
        "type": "object",
        "properties": {
          "street": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApproveRequisitionCommand": {
        "required": [
          "approverId"
        ],
        "type": "object",
        "properties": {
          "approverId": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateActivityListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateActivityModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "CandidateActivityModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "candidateId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CandidateActivityRepresentation": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "candidateId": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CandidateActivitySettingModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "validStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "nullable": true
          },
          "statusMandatory": {
            "type": "boolean",
            "nullable": true
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityQuestionModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateActivitySettingSummaryModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateActivitySettingsListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateActivitySettingSummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateActivitySummaryListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateActivitySummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateActivitySummaryModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "candidateId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CandidateAttachmentCategoryListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateAttachmentCategoryModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CandidateAttachmentCategoryModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CandidateAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateAttachmentLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "CandidateAttachmentListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateAttachmentModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "CandidateAttachmentModel": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/CandidateAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "candidateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "CandidateAttachmentRepresentation": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/CandidateAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "candidateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/CandidateAttachmentLinks"
          }
        }
      },
      "CandidateAttachmentType": {
        "enum": [
          "Other",
          "Resume",
          "CoverLetter",
          "FormattedResume",
          "Screening",
          "Check",
          "Reference",
          "License"
        ],
        "type": "string",
        "format": "string"
      },
      "CandidateAvailabilityListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateAvailabilityModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CandidateAvailabilityModel": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "properties": {
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Date available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))",
            "format": "date"
          },
          "day": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "shifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeRangeModel"
            },
            "description": "Time available, at least one and at most two shifts",
            "nullable": true,
            "readOnly": true
          },
          "recurring": {
            "type": "boolean",
            "description": "Availability is repeated in following weeks"
          },
          "until": {
            "type": "string",
            "description": "Optional end date of repeating availability",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateEducationModel": {
        "type": "object",
        "properties": {
          "institution": {
            "type": "string",
            "nullable": true
          },
          "course": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Year, month or date completed.<br />\r\nYear must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />\r\nMonth must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) \"-\" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />\r\nDate must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CandidateEmploymentHistoryModel": {
        "type": "object",
        "properties": {
          "employer": {
            "type": "string",
            "description": "Name of the employer",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "Year, month or date employment started.<br />\r\nYear must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />\r\nMonth must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) \"-\" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />\r\nDate must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31",
            "nullable": true
          },
          "end": {
            "type": "string",
            "description": "Year, month or date employment finished, or \"Present\" for a current role.<br />\r\nYear must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />\r\nMonth must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) \"-\" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />\r\nDate must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of responsibilities and achievements.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateEmploymentModel": {
        "type": "object",
        "properties": {
          "current": {
            "$ref": "#/components/schemas/CurrentEmploymentModel"
          },
          "ideal": {
            "$ref": "#/components/schemas/CandidateIdealEmploymentModel"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateEmploymentHistoryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateIdealEmploymentModel": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "nullable": true
          },
          "workType": {
            "$ref": "#/components/schemas/WorkTypeModel"
          },
          "salary": {
            "$ref": "#/components/schemas/SalaryRangeModel"
          },
          "other": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateIdealSalaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateIdealSalaryModel": {
        "type": "object",
        "properties": {
          "workType": {
            "$ref": "#/components/schemas/WorkTypeModel"
          },
          "salary": {
            "$ref": "#/components/schemas/SalaryRangeModel"
          }
        },
        "additionalProperties": false
      },
      "CandidateJobApplicationStatisticsSummaryModel": {
        "type": "object",
        "properties": {
          "new": {
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CandidateLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "contact": {
            "type": "string",
            "description": "Optional contact if candidate is also a contact",
            "format": "uri",
            "nullable": true
          },
          "photo": {
            "type": "string",
            "description": "Candidate photo",
            "format": "uri",
            "nullable": true
          },
          "skills": {
            "type": "string",
            "description": "Skills",
            "format": "uri",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "format": "uri",
            "nullable": true
          },
          "attachments": {
            "type": "string",
            "description": "Attachments",
            "format": "uri",
            "nullable": true
          },
          "videos": {
            "type": "string",
            "description": "Videos",
            "format": "uri",
            "nullable": true
          },
          "floats": {
            "type": "string",
            "description": "Floats",
            "format": "uri",
            "nullable": true
          },
          "submissions": {
            "type": "string",
            "description": "Submissions",
            "format": "uri",
            "nullable": true
          },
          "applications": {
            "type": "string",
            "description": "Job Applications",
            "format": "uri",
            "nullable": true
          },
          "placements": {
            "type": "string",
            "description": "Placements",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "CandidateListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "CandidateMatchedByEmailModel": {
        "type": "object",
        "properties": {
          "match": {
            "$ref": "#/components/schemas/MatchedEmailAddressModel"
          },
          "candidateId": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastNoteAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateMatchedByPhoneModel": {
        "type": "object",
        "properties": {
          "match": {
            "$ref": "#/components/schemas/MatchedPhoneNumberModel"
          },
          "candidateId": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastNoteAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateNameModel": {
        "required": [
          "candidateId"
        ],
        "type": "object",
        "properties": {
          "candidateId": {
            "type": "integer",
            "description": "Candidate Id",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Primary email address",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Contact phone number",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "description": "Mobile/cell number",
            "nullable": true
          },
          "mobileNormalized": {
            "type": "string",
            "description": "Mobile/cell normalized number",
            "nullable": true
          },
          "contactMethod": {
            "type": "string",
            "description": "Preferred contact method",
            "nullable": true
          },
          "salutation": {
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "rating": {
            "type": "string",
            "description": "Internal rating of the candidate",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the candidate",
            "nullable": true
          },
          "seeking": {
            "$ref": "#/components/schemas/CandidateSeekingStatus"
          }
        },
        "additionalProperties": false
      },
      "CandidatePayrollBillingListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidatePayrollBillingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidatePayrollBillingModel": {
        "type": "object",
        "properties": {
          "candidateId": {
            "type": "integer",
            "description": "Candidate Id",
            "format": "int32"
          },
          "externalCandidateId": {
            "type": "string",
            "description": "Candidate ExternalID",
            "nullable": true
          },
          "office": {
            "type": "string",
            "description": "Office Code",
            "nullable": true
          },
          "position": {
            "type": "string",
            "description": "Position",
            "nullable": true
          },
          "skillGroup": {
            "type": "string",
            "description": "Skill Group",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidatePlacementModel": {
        "required": [
          "candidateId"
        ],
        "type": "object",
        "properties": {
          "candidateId": {
            "type": "integer",
            "description": "Candidate Id",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Primary email address",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Contact phone number",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "description": "Mobile/cell number",
            "nullable": true
          },
          "mobileNormalized": {
            "type": "string",
            "description": "Mobile/cell normalized number",
            "nullable": true
          },
          "contactMethod": {
            "type": "string",
            "description": "Preferred contact method",
            "nullable": true
          },
          "salutation": {
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "rating": {
            "type": "string",
            "description": "Internal rating of the candidate",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the candidate",
            "nullable": true
          },
          "seeking": {
            "$ref": "#/components/schemas/CandidateSeekingStatus"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Candidate date of birth available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidatePlacementStatisticsSummaryModel": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CandidateRepresentation": {
        "required": [
          "candidateId"
        ],
        "type": "object",
        "properties": {
          "candidateId": {
            "type": "integer",
            "description": "Candidate Id",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Primary email address",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Contact phone number",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "description": "Mobile/cell number",
            "nullable": true
          },
          "mobileNormalized": {
            "type": "string",
            "description": "Mobile/cell normalized number",
            "nullable": true
          },
          "contactMethod": {
            "type": "string",
            "description": "Preferred contact method",
            "nullable": true
          },
          "salutation": {
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "rating": {
            "type": "string",
            "description": "Internal rating of the candidate",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the candidate",
            "nullable": true
          },
          "seeking": {
            "$ref": "#/components/schemas/CandidateSeekingStatus"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Candidate date of birth available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))",
            "format": "date",
            "nullable": true
          },
          "emergencyContact": {
            "type": "string",
            "description": "The emergency contact of the candidate",
            "nullable": true
          },
          "emergencyPhone": {
            "type": "string",
            "description": "The emergency phone of the candidate",
            "nullable": true
          },
          "otherEmail": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Other email addresses used by the candidate",
            "nullable": true
          },
          "social": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri"
            },
            "description": "Candidate social profiles",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "employment": {
            "$ref": "#/components/schemas/CandidateEmploymentModel"
          },
          "availability": {
            "$ref": "#/components/schemas/CandidateStartModel"
          },
          "education": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateEducationModel"
            },
            "nullable": true
          },
          "skillTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValueModel"
            },
            "nullable": true
          },
          "recruiters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "partnerActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerActionStageModel"
            },
            "nullable": true
          },
          "statistics": {
            "$ref": "#/components/schemas/CandidateStatisticsModel"
          },
          "links": {
            "$ref": "#/components/schemas/CandidateLinks"
          }
        }
      },
      "CandidateSeekingStatus": {
        "enum": [
          "Yes",
          "Maybe",
          "No"
        ],
        "type": "string",
        "format": "string"
      },
      "CandidateStartModel": {
        "type": "object",
        "properties": {
          "immediate": {
            "type": "boolean"
          },
          "relative": {
            "$ref": "#/components/schemas/RelativeStartModel"
          },
          "date": {
            "type": "string",
            "description": "The specific date that a job starts or a candidate is available",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The date the candidate is available to start. Specify ONE OF immediate, relative or date."
      },
      "CandidateStatisticsModel": {
        "type": "object",
        "properties": {
          "applications": {
            "$ref": "#/components/schemas/CandidateJobApplicationStatisticsSummaryModel"
          },
          "placements": {
            "$ref": "#/components/schemas/CandidatePlacementStatisticsSummaryModel"
          }
        },
        "additionalProperties": false
      },
      "CandidateSummaryModel": {
        "required": [
          "candidateId"
        ],
        "type": "object",
        "properties": {
          "candidateId": {
            "type": "integer",
            "description": "Candidate Id",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Primary email address",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Contact phone number",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "description": "Mobile/cell number",
            "nullable": true
          },
          "mobileNormalized": {
            "type": "string",
            "description": "Mobile/cell normalized number",
            "nullable": true
          },
          "contactMethod": {
            "type": "string",
            "description": "Preferred contact method",
            "nullable": true
          },
          "salutation": {
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "rating": {
            "type": "string",
            "description": "Internal rating of the candidate",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the candidate",
            "nullable": true
          },
          "seeking": {
            "$ref": "#/components/schemas/CandidateSeekingStatus"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CandidateUserTaskModel": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "candidateId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateUserTaskRepresentation": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "candidateId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/UserTaskLinks"
          }
        },
        "additionalProperties": false
      },
      "CandidateVideoListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateVideoModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "CandidateVideoModel": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CandidateVideoType"
          },
          "url": {
            "type": "string",
            "description": "Video URL",
            "format": "uri",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Optional unique reference for this video type.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Date this video was added to the candidate",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Date this video was last updated (updates are possible when a video is added with a Reference)",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateVideoRepresentation": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CandidateVideoType"
          },
          "url": {
            "type": "string",
            "description": "Video URL",
            "format": "uri",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Optional unique reference for this video type.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Date this video was added to the candidate",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Date this video was last updated (updates are possible when a video is added with a Reference)",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateVideoType": {
        "enum": [
          "Other",
          "Profile",
          "CoverLetter"
        ],
        "type": "string",
        "format": "string"
      },
      "CategoryListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CategoryModel": {
        "required": [
          "categoryId",
          "name"
        ],
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "subCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubCategoryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyActivityListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyActivityModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "CompanyActivityModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CompanyActivityRepresentation": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CompanyActivitySettingModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "validStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "nullable": true
          },
          "statusMandatory": {
            "type": "boolean",
            "nullable": true
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityQuestionModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyActivitySettingSummaryModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyActivitySettingsListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyActivitySettingSummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyActivitySummaryListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyActivitySummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyActivitySummaryModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CompanyAddressListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyAddressModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CompanyAddressModel": {
        "required": [
          "addressId"
        ],
        "type": "object",
        "properties": {
          "addressId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyAddressRepresentation": {
        "required": [
          "addressId"
        ],
        "type": "object",
        "properties": {
          "addressId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CompanyAttachmentCategoryListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyAttachmentCategoryModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CompanyAttachmentCategoryModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CompanyAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyAttachmentLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "CompanyAttachmentListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyAttachmentModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "CompanyAttachmentModel": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/CompanyAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyAttachmentRepresentation": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/CompanyAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/CompanyAttachmentLinks"
          }
        },
        "additionalProperties": false
      },
      "CompanyAttachmentType": {
        "enum": [
          "Other",
          "Terms"
        ],
        "type": "string",
        "format": "string"
      },
      "CompanyLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "description": "Company logo",
            "format": "uri",
            "nullable": true
          },
          "contacts": {
            "type": "string",
            "description": "Company contacts",
            "format": "uri",
            "nullable": true
          },
          "subsidiaries": {
            "type": "string",
            "description": "Company subsidiaries",
            "format": "uri",
            "nullable": true
          },
          "addresses": {
            "type": "string",
            "description": "Company addresses",
            "format": "uri",
            "nullable": true
          },
          "skills": {
            "type": "string",
            "description": "Skills",
            "format": "uri",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Company notes",
            "format": "uri",
            "nullable": true
          },
          "attachments": {
            "type": "string",
            "description": "Attachments",
            "format": "uri",
            "nullable": true
          },
          "jobs": {
            "type": "string",
            "description": "Company jobs",
            "format": "uri",
            "nullable": true
          },
          "requisitions": {
            "type": "string",
            "description": "Company requisitions",
            "format": "uri",
            "nullable": true
          },
          "floats": {
            "type": "string",
            "description": "Company floats",
            "format": "uri",
            "nullable": true
          },
          "submissions": {
            "type": "string",
            "description": "Company submissions",
            "format": "uri",
            "nullable": true
          },
          "placements": {
            "type": "string",
            "description": "Company placements",
            "format": "uri",
            "nullable": true
          },
          "workflows": {
            "$ref": "#/components/schemas/CompanyWorkflowLinks"
          }
        }
      },
      "CompanyListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanySummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "CompanyMatchedByPhoneModel": {
        "type": "object",
        "properties": {
          "match": {
            "$ref": "#/components/schemas/MatchedPhoneNumberModel"
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastNoteAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyNameModel": {
        "required": [
          "companyId"
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "integer",
            "description": "Unique identifier for the company",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Company name",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          }
        },
        "additionalProperties": false
      },
      "CompanyRepresentation": {
        "required": [
          "companyId"
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "integer",
            "description": "Unique identifier for the company",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Company name",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "mainContact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "primaryAddress": {
            "$ref": "#/components/schemas/CompanyAddressModel"
          },
          "legalName": {
            "type": "string",
            "nullable": true
          },
          "social": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri"
            },
            "description": "Company social profiles",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "parent": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValueModel"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "recruiters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "partnerActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerActionStageModel"
            },
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/CompanyLinks"
          }
        }
      },
      "CompanySummaryModel": {
        "required": [
          "companyId"
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "integer",
            "description": "Unique identifier for the company",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Company name",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "mainContact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "primaryAddress": {
            "$ref": "#/components/schemas/CompanyAddressModel"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CompanyUserTaskModel": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyUserTaskRepresentation": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/UserTaskLinks"
          }
        },
        "additionalProperties": false
      },
      "CompanyWorkflowApproverModel": {
        "required": [
          "contactId",
          "stageIndex"
        ],
        "type": "object",
        "properties": {
          "stageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "position": {
            "type": "string",
            "description": "Position or job title",
            "nullable": true
          },
          "salutation": {
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "description": "Primary email address",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "description": "Mobile/cell number",
            "nullable": true
          },
          "mobileNormalized": {
            "type": "string",
            "description": "Mobile/cell normalized number",
            "nullable": true
          },
          "inactive": {
            "type": "boolean",
            "description": "Contact is no longer with the company"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          }
        },
        "additionalProperties": false
      },
      "CompanyWorkflowLinks": {
        "type": "object",
        "properties": {
          "requisition": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyWorkflowListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyWorkflowNameModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CompanyWorkflowModel": {
        "required": [
          "name",
          "workflowId"
        ],
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "approvers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyWorkflowApproverModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyWorkflowNameModel": {
        "required": [
          "name",
          "workflowId"
        ],
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CompanyWorkflowRepresentation": {
        "required": [
          "name",
          "workflowId"
        ],
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "approvers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyWorkflowApproverModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CompanyWorkflowType": {
        "enum": [
          "Requisition"
        ],
        "type": "string",
        "format": "string"
      },
      "ContactActivityListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactActivityModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "ContactActivityModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ContactActivityRepresentation": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "ContactActivitySettingModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "validStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "nullable": true
          },
          "statusMandatory": {
            "type": "boolean",
            "nullable": true
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityQuestionModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactActivitySettingSummaryModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactActivitySettingsListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactActivitySettingSummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactActivitySummaryListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactActivitySummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactActivitySummaryModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ContactAttachmentCategoryListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactAttachmentCategoryModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "ContactAttachmentCategoryModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ContactAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactAttachmentLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "ContactAttachmentListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactAttachmentModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "ContactAttachmentModel": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/ContactAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactAttachmentRepresentation": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/ContactAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ContactAttachmentLinks"
          }
        },
        "additionalProperties": false
      },
      "ContactAttachmentType": {
        "enum": [
          "Other",
          "Terms"
        ],
        "type": "string",
        "format": "string"
      },
      "ContactLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "candidate": {
            "type": "string",
            "description": "Optional candidate if contact is also a candidate",
            "format": "uri",
            "nullable": true
          },
          "photo": {
            "type": "string",
            "description": "Photo",
            "format": "uri",
            "nullable": true
          },
          "company": {
            "type": "string",
            "description": "Company",
            "format": "uri",
            "nullable": true
          },
          "officeAddress": {
            "type": "string",
            "description": "Office address",
            "format": "uri",
            "nullable": true
          },
          "skills": {
            "type": "string",
            "description": "Skills",
            "format": "uri",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "format": "uri",
            "nullable": true
          },
          "attachments": {
            "type": "string",
            "description": "Attachments",
            "format": "uri",
            "nullable": true
          },
          "jobs": {
            "type": "string",
            "description": "Jobs",
            "format": "uri",
            "nullable": true
          },
          "floats": {
            "type": "string",
            "description": "Floats",
            "format": "uri",
            "nullable": true
          },
          "submissions": {
            "type": "string",
            "description": "Submissions",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "ContactListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "ContactMatchedByEmailModel": {
        "type": "object",
        "properties": {
          "match": {
            "$ref": "#/components/schemas/MatchedEmailAddressModel"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "$ref": "#/components/schemas/MatchedEmailAddressModelCompanyName"
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastNoteAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactMatchedByPhoneModel": {
        "type": "object",
        "properties": {
          "match": {
            "$ref": "#/components/schemas/MatchedPhoneNumberModel"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "$ref": "#/components/schemas/MatchedPhoneNumberModelCompanyName"
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastNoteAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactNameModel": {
        "required": [
          "contactId"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "position": {
            "type": "string",
            "description": "Position or job title",
            "nullable": true
          },
          "salutation": {
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "description": "Primary email address",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "description": "Mobile/cell number",
            "nullable": true
          },
          "mobileNormalized": {
            "type": "string",
            "description": "Mobile/cell normalized number",
            "nullable": true
          },
          "inactive": {
            "type": "boolean",
            "description": "Contact is no longer with the company"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          }
        },
        "additionalProperties": false
      },
      "ContactRepresentation": {
        "required": [
          "contactId"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "position": {
            "type": "string",
            "description": "Position or job title",
            "nullable": true
          },
          "salutation": {
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "description": "Primary email address",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "description": "Mobile/cell number",
            "nullable": true
          },
          "mobileNormalized": {
            "type": "string",
            "description": "Mobile/cell normalized number",
            "nullable": true
          },
          "inactive": {
            "type": "boolean",
            "description": "Contact is no longer with the company"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "officeAddress": {
            "$ref": "#/components/schemas/CompanyAddressModel"
          },
          "previousContactId": {
            "type": "integer",
            "description": "contactId from the previous company when a contact moves between companies",
            "format": "int32",
            "nullable": true
          },
          "originalContactId": {
            "type": "integer",
            "description": "contactId from the original/first company when a contact moves between companies",
            "format": "int32",
            "nullable": true
          },
          "otherEmail": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Other email addresses used by the contact",
            "nullable": true
          },
          "social": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri"
            },
            "description": "Contact social profiles",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "reportsTo": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "hiringManager": {
            "type": "boolean"
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValueModel"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "recruiters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "partnerActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerActionStageModel"
            },
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ContactLinks"
          }
        }
      },
      "ContactSummaryModel": {
        "required": [
          "contactId"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "position": {
            "type": "string",
            "description": "Position or job title",
            "nullable": true
          },
          "salutation": {
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "description": "Primary email address",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "description": "Mobile/cell number",
            "nullable": true
          },
          "mobileNormalized": {
            "type": "string",
            "description": "Mobile/cell normalized number",
            "nullable": true
          },
          "inactive": {
            "type": "boolean",
            "description": "Contact is no longer with the company"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "officeAddress": {
            "$ref": "#/components/schemas/CompanyAddressModel"
          },
          "previousContactId": {
            "type": "integer",
            "description": "contactId from the previous company when a contact moves between companies",
            "format": "int32",
            "nullable": true
          },
          "originalContactId": {
            "type": "integer",
            "description": "contactId from the original/first company when a contact moves between companies",
            "format": "int32",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ContactUserTaskModel": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactUserTaskRepresentation": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/UserTaskLinks"
          }
        },
        "additionalProperties": false
      },
      "CountryListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CountryModel": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "code": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreatedOpportunityModel": {
        "type": "object",
        "properties": {
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CurrentEmploymentModel": {
        "type": "object",
        "properties": {
          "employer": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "workType": {
            "$ref": "#/components/schemas/WorkTypeModel"
          },
          "salary": {
            "$ref": "#/components/schemas/SalaryModel"
          }
        },
        "additionalProperties": false
      },
      "CustomFieldListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CustomFieldModel": {
        "required": [
          "fieldId",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/CustomFieldType"
          },
          "mandatory": {
            "type": "boolean",
            "description": "Field is mandatory and a value must be provided",
            "nullable": true
          },
          "maxLength": {
            "type": "integer",
            "description": "Maximum length of a text field",
            "format": "int32",
            "nullable": true
          },
          "multiLine": {
            "type": "boolean",
            "description": "Text field can contain a multi-line value",
            "nullable": true
          },
          "multiSelect": {
            "type": "boolean",
            "description": "List field allows multiple selections",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available values for a list custom field",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomFieldRepresentation": {
        "required": [
          "fieldId",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/CustomFieldType"
          },
          "mandatory": {
            "type": "boolean",
            "description": "Field is mandatory and a value must be provided",
            "nullable": true
          },
          "maxLength": {
            "type": "integer",
            "description": "Maximum length of a text field",
            "format": "int32",
            "nullable": true
          },
          "multiLine": {
            "type": "boolean",
            "description": "Text field can contain a multi-line value",
            "nullable": true
          },
          "multiSelect": {
            "type": "boolean",
            "description": "List field allows multiple selections",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available values for a list custom field",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "CustomFieldType": {
        "enum": [
          "Text",
          "List",
          "Date",
          "Lookup",
          "Url"
        ],
        "type": "string",
        "description": "The type of value a custom field expects",
        "format": "string"
      },
      "CustomFieldValueModel": {
        "required": [
          "fieldId",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/CustomFieldType"
          },
          "value": {
            "description": "Text, List or Date value for this custom field (depending on the field \"type\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Custom field value"
      },
      "DateRangeModel": {
        "required": [
          "end",
          "start"
        ],
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "properties": {
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date"
          },
          "end": {
            "type": "string",
            "properties": {
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "DayOfWeek": {
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string",
        "format": "string"
      },
      "DeletedCandidateListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeletedCandidateModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeletedCandidateModel": {
        "type": "object",
        "properties": {
          "candidateId": {
            "type": "integer",
            "format": "int32"
          },
          "deletedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DeletedCompanyListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeletedCompanyModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeletedCompanyModel": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "deletedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DeletedContactListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeletedContactModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeletedContactModel": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "deletedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DeletedJobApplicationListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeletedJobApplicationModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeletedJobApplicationModel": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "integer",
            "format": "int64"
          },
          "deletedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DeletedJobOrderListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeletedJobOrderModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeletedJobOrderModel": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "integer",
            "format": "int32"
          },
          "deletedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DeletedPlacementListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeletedPlacementModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeletedPlacementModel": {
        "type": "object",
        "properties": {
          "placementId": {
            "type": "integer",
            "format": "int32"
          },
          "deletedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DurationModel": {
        "type": "object",
        "properties": {
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "$ref": "#/components/schemas/DurationUnit"
          }
        },
        "additionalProperties": false
      },
      "DurationUnit": {
        "enum": [
          "Hour",
          "Day",
          "Week",
          "Month"
        ],
        "type": "string",
        "format": "string"
      },
      "EmailAddressMatchType": {
        "enum": [
          "Email",
          "OtherEmail"
        ],
        "type": "string",
        "format": "string"
      },
      "ErrorCode": {
        "enum": [
          "Invalid",
          "Missing",
          "MissingField",
          "AlreadyExists"
        ],
        "type": "string",
        "format": "string"
      },
      "ErrorItemModel": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorModel": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "minLength": 1,
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorItemModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventName": {
        "enum": [
          "job_status_changed",
          "job_invoice_sent",
          "job_partner_action",
          "jobad_posted",
          "jobad_expired",
          "jobad_partner_action",
          "candidate_status_changed",
          "candidate_partner_action",
          "candidate_updated",
          "jobapplication_status_changed",
          "jobapplication_partner_action",
          "placement_approved",
          "placement_status_changed",
          "placement_partner_action",
          "company_status_changed",
          "company_partner_action",
          "contact_status_changed",
          "contact_partner_action",
          "interview_scheduled",
          "interview_evaluation_submitted",
          "folder_job_added",
          "folder_job_removed",
          "folder_candidate_added",
          "folder_candidate_removed",
          "folder_jobapplication_added",
          "folder_jobapplication_removed",
          "folder_placement_added",
          "folder_placement_removed",
          "folder_company_added",
          "folder_company_removed",
          "folder_contact_added",
          "folder_contact_removed",
          "folder_updated",
          "user_suspended",
          "sms_sent"
        ],
        "type": "string",
        "format": "string"
      },
      "FindCandidateActivitySettingsQuery": {
        "type": "object",
        "additionalProperties": false
      },
      "FindCategoriesEmbed": {
        "enum": [
          "SubCategories",
          "Skills"
        ],
        "type": "string",
        "format": "string"
      },
      "FindCompanyActivitySettingsQuery": {
        "type": "object",
        "additionalProperties": false
      },
      "FindCompanyWorkflowsInclude": {
        "enum": [
          "Archived"
        ],
        "type": "string",
        "format": "string"
      },
      "FindContactActivitySettingsQuery": {
        "type": "object",
        "additionalProperties": false
      },
      "FindJobApplicationActivitySettingsQuery": {
        "type": "object",
        "additionalProperties": false
      },
      "FindJobOrderActivitySettingsQuery": {
        "type": "object",
        "additionalProperties": false
      },
      "FindLocationsEmbed": {
        "enum": [
          "Areas"
        ],
        "type": "string",
        "format": "string"
      },
      "FindPlacementActivitySettingsQuery": {
        "type": "object",
        "additionalProperties": false
      },
      "FindPlacementByExport": {
        "enum": [
          "Payroll",
          "Timesheets",
          "Onboarding"
        ],
        "type": "string",
        "description": "Search for placements that should be exported to payroll, timesheets or onboarding",
        "format": "string"
      },
      "FindUserTasksInclude": {
        "enum": [
          "Old",
          "Complete"
        ],
        "type": "string",
        "format": "string"
      },
      "FindUsersInclude": {
        "enum": [
          "Inactive",
          "Deleted"
        ],
        "type": "string",
        "format": "string"
      },
      "FloatLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "FloatListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FloatSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "FloatRepresentation": {
        "required": [
          "floatId"
        ],
        "type": "object",
        "properties": {
          "floatId": {
            "type": "integer",
            "format": "int64"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "candidate": {
            "$ref": "#/components/schemas/CandidateSummaryModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "candidateSummary": {
            "type": "string",
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "links": {
            "$ref": "#/components/schemas/FloatLinks"
          }
        }
      },
      "FloatSummaryModel": {
        "required": [
          "floatId"
        ],
        "type": "object",
        "properties": {
          "floatId": {
            "type": "integer",
            "format": "int64"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "candidate": {
            "$ref": "#/components/schemas/CandidateSummaryModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FolderLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "FolderListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolderNameModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "FolderNameModel": {
        "required": [
          "folderId"
        ],
        "type": "object",
        "properties": {
          "folderId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        }
      },
      "FolderOwnerStatus": {
        "enum": [
          "Active",
          "Inactive"
        ],
        "type": "string",
        "format": "string"
      },
      "FolderRepresentation": {
        "required": [
          "folderId"
        ],
        "type": "object",
        "properties": {
          "folderId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "sharedWith": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "entityIDs": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "nullable": true,
            "readOnly": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "links": {
            "$ref": "#/components/schemas/FolderLinks"
          }
        }
      },
      "GetJobApplicationStatusByWorkflowListQuery": {
        "type": "object",
        "additionalProperties": false
      },
      "InterviewEvaluationListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterviewEvaluationModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "InterviewEvaluationModel": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "expiresAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "hasReplied": {
            "type": "boolean"
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterviewEvaluationRatingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InterviewEvaluationRatingModel": {
        "type": "object",
        "properties": {
          "criteria": {
            "type": "string",
            "description": "Criteria being rated",
            "nullable": true
          },
          "rating": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Criteria rating, from 0 to 100",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InterviewEvaluationRepresentation": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "expiresAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "hasReplied": {
            "type": "boolean"
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterviewEvaluationRatingModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "InterviewInterviewersModel": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "description": "Internal/user interviewers",
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "description": "External/contact interviewers",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Internal/user and External/contact interviewers"
      },
      "InterviewLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "evaluations": {
            "type": "string",
            "description": "Evaluations and ratings",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "InterviewListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterviewSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "InterviewModel": {
        "required": [
          "interviewee",
          "interviewId",
          "type"
        ],
        "type": "object",
        "properties": {
          "interviewId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/InterviewType"
          },
          "startAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "interviewee": {
            "$ref": "#/components/schemas/JobApplicationSummaryModel"
          },
          "interviewers": {
            "$ref": "#/components/schemas/InterviewInterviewersModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        }
      },
      "InterviewRepresentation": {
        "required": [
          "interviewee",
          "interviewId",
          "type"
        ],
        "type": "object",
        "properties": {
          "interviewId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/InterviewType"
          },
          "startAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "interviewee": {
            "$ref": "#/components/schemas/JobApplicationSummaryModel"
          },
          "interviewers": {
            "$ref": "#/components/schemas/InterviewInterviewersModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "links": {
            "$ref": "#/components/schemas/InterviewLinks"
          }
        }
      },
      "InterviewSummaryModel": {
        "required": [
          "interviewee",
          "interviewId",
          "type"
        ],
        "type": "object",
        "properties": {
          "interviewId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/InterviewType"
          },
          "startAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "interviewee": {
            "$ref": "#/components/schemas/JobApplicationSummaryModel"
          },
          "interviewers": {
            "$ref": "#/components/schemas/InterviewInterviewersModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        }
      },
      "InterviewType": {
        "enum": [
          "Internal",
          "External"
        ],
        "type": "string",
        "format": "string"
      },
      "JobAdLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "job": {
            "type": "string",
            "description": "Job",
            "format": "uri",
            "nullable": true
          },
          "company": {
            "type": "string",
            "description": "Company",
            "format": "uri",
            "nullable": true
          },
          "contact": {
            "type": "string",
            "description": "Contact",
            "format": "uri",
            "nullable": true
          },
          "applications": {
            "type": "string",
            "description": "Job applications",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "JobAdListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobAdSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "JobAdOtherApplyUrlModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobAdPortalChildFieldModel": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer",
            "format": "int32"
          },
          "fieldName": {
            "type": "string",
            "nullable": true
          },
          "valueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "externalValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobAdPortalFieldModel": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer",
            "format": "int32"
          },
          "fieldName": {
            "type": "string",
            "nullable": true
          },
          "valueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "externalValue": {
            "type": "string",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobAdPortalChildFieldModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobAdPortalModel": {
        "type": "object",
        "properties": {
          "hotJob": {
            "type": "boolean",
            "description": "Classed as a hot job"
          },
          "salary": {
            "$ref": "#/components/schemas/JobAdPortalSalaryModel"
          },
          "template": {
            "type": "string",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobAdPortalFieldModel"
            },
            "nullable": true
          }
        }
      },
      "JobAdPortalSalaryModel": {
        "type": "object",
        "properties": {
          "ratePer": {
            "$ref": "#/components/schemas/SalaryRatePer"
          },
          "rateLow": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rateHigh": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobAdPortalSummaryModel": {
        "type": "object",
        "properties": {
          "hotJob": {
            "type": "boolean",
            "description": "Classed as a hot job"
          },
          "salary": {
            "$ref": "#/components/schemas/JobAdPortalSalaryModel"
          },
          "template": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "JobAdRepresentation": {
        "required": [
          "adId"
        ],
        "type": "object",
        "properties": {
          "adId": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "bulletPoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "job": {
            "$ref": "#/components/schemas/JobOrderTitleModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "screening": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobAdScreeningQuestionModel"
            },
            "nullable": true
          },
          "jobBoards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobBoardSummaryModel"
            },
            "nullable": true
          },
          "otherApplyUrls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobAdOtherApplyUrlModel"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "postAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expireAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "partnerActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerActionStageModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/JobAdLinks"
          }
        }
      },
      "JobAdScreeningAnswerType": {
        "enum": [
          "Text",
          "List"
        ],
        "type": "string",
        "format": "string"
      },
      "JobAdScreeningQuestionModel": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "nullable": true
          },
          "answerType": {
            "$ref": "#/components/schemas/JobAdScreeningAnswerType"
          },
          "mandatory": {
            "type": "boolean",
            "description": "Field is mandatory and a value must be provided",
            "nullable": true
          },
          "maxLength": {
            "type": "integer",
            "description": "Maximum length of a text field",
            "format": "int32",
            "nullable": true
          },
          "multiSelect": {
            "type": "boolean",
            "description": "List selection allows multiple values",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of predefined values to select from",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobAdSummaryModel": {
        "required": [
          "adId"
        ],
        "type": "object",
        "properties": {
          "adId": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "bulletPoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "postAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expireAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "JobApplicationActivityListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationActivityModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "JobApplicationActivityModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "applicationId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "JobApplicationActivityRepresentation": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "applicationId": {
            "type": "integer",
            "format": "int64"
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "JobApplicationActivitySettingModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "validStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "nullable": true
          },
          "statusMandatory": {
            "type": "boolean",
            "nullable": true
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityQuestionModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobApplicationActivitySettingSummaryModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobApplicationActivitySettingsListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationActivitySettingSummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobApplicationActivitySummaryListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationActivitySummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobApplicationActivitySummaryModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "applicationId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "JobApplicationLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "attachments": {
            "type": "string",
            "description": "Attachments",
            "format": "uri",
            "nullable": true
          },
          "resume": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "coverLetter": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "JobApplicationListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "JobApplicationRepresentation": {
        "required": [
          "applicationId"
        ],
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "integer",
            "format": "int64"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "jobReference": {
            "type": "string",
            "nullable": true
          },
          "manual": {
            "type": "boolean"
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/JobApplicationStatusModel"
          },
          "review": {
            "$ref": "#/components/schemas/JobApplicationReviewModel"
          },
          "candidate": {
            "$ref": "#/components/schemas/CandidateNameModel"
          },
          "job": {
            "$ref": "#/components/schemas/JobOrderTitleModel"
          },
          "jobAd": {
            "$ref": "#/components/schemas/JobAdSummaryModel"
          },
          "submittedDetails": {
            "$ref": "#/components/schemas/JobApplicationSubmittedDetailsModel"
          },
          "screening": {
            "$ref": "#/components/schemas/JobApplicationScreeningModel"
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValueModel"
            },
            "nullable": true
          },
          "partnerActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerActionStageModel"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/JobApplicationLinks"
          }
        }
      },
      "JobApplicationReviewModel": {
        "required": [
          "stage"
        ],
        "type": "object",
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/JobApplicationReviewStage"
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "submittedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "reviewedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "reviewedBy": {
            "$ref": "#/components/schemas/ContactNameModel"
          }
        },
        "additionalProperties": false
      },
      "JobApplicationReviewStage": {
        "enum": [
          "Submitted",
          "Viewed",
          "Accepted",
          "Rejected"
        ],
        "type": "string",
        "format": "string"
      },
      "JobApplicationScreeningModel": {
        "type": "object",
        "properties": {
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationScreeningQuestionModel"
            },
            "nullable": true
          },
          "score": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobApplicationScreeningQuestionModel": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "nullable": true
          },
          "answers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "score": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobApplicationStatusByWorkflowListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationStatusByWorkflowModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "JobApplicationStatusByWorkflowModel": {
        "required": [
          "stage"
        ],
        "type": "object",
        "properties": {
          "stage": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the workflow stage"
          },
          "stageIndex": {
            "type": "integer",
            "description": "Position in the workflow",
            "format": "int32",
            "nullable": true
          },
          "step": {
            "type": "integer",
            "description": "[Obsolete] Please reference stageIndex instead",
            "format": "int32",
            "nullable": true
          },
          "progress": {
            "$ref": "#/components/schemas/SimpleWorkflow"
          },
          "status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationStatusNameModel"
            },
            "description": "Ordered status list for this workflow stage",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobApplicationStatusLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "JobApplicationStatusListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationStatusModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "JobApplicationStatusModel": {
        "required": [
          "name",
          "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "rejected": {
            "type": "boolean",
            "default": false
          },
          "default": {
            "type": "boolean",
            "default": false
          },
          "defaultRejected": {
            "type": "boolean",
            "default": false
          },
          "workflow": {
            "$ref": "#/components/schemas/JobApplicationWorkflowModel"
          }
        },
        "additionalProperties": false
      },
      "JobApplicationStatusNameModel": {
        "required": [
          "name",
          "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "rejected": {
            "type": "boolean",
            "default": false
          },
          "default": {
            "type": "boolean",
            "default": false
          },
          "defaultRejected": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "JobApplicationStatusRepresentation": {
        "required": [
          "name",
          "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "rejected": {
            "type": "boolean",
            "default": false
          },
          "default": {
            "type": "boolean",
            "default": false
          },
          "defaultRejected": {
            "type": "boolean",
            "default": false
          },
          "workflow": {
            "$ref": "#/components/schemas/JobApplicationWorkflowModel"
          },
          "links": {
            "$ref": "#/components/schemas/JobApplicationStatusLinks"
          }
        },
        "additionalProperties": false
      },
      "JobApplicationSubmittedDetailsModel": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobApplicationSummaryModel": {
        "required": [
          "applicationId"
        ],
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "integer",
            "format": "int64"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "jobReference": {
            "type": "string",
            "nullable": true
          },
          "manual": {
            "type": "boolean"
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/JobApplicationStatusModel"
          },
          "review": {
            "$ref": "#/components/schemas/JobApplicationReviewModel"
          },
          "candidate": {
            "$ref": "#/components/schemas/CandidateNameModel"
          },
          "job": {
            "$ref": "#/components/schemas/JobOrderTitleModel"
          },
          "jobAd": {
            "$ref": "#/components/schemas/JobAdSummaryModel"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "JobApplicationUserTaskModel": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "applicationId": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobApplicationUserTaskRepresentation": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "applicationId": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/UserTaskLinks"
          }
        },
        "additionalProperties": false
      },
      "JobApplicationWorkflowModel": {
        "required": [
          "stage"
        ],
        "type": "object",
        "properties": {
          "stage": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the workflow stage"
          },
          "stageIndex": {
            "type": "integer",
            "description": "Position in the workflow",
            "format": "int32",
            "nullable": true
          },
          "step": {
            "type": "integer",
            "description": "[Obsolete] Please reference stageIndex instead",
            "format": "int32",
            "nullable": true
          },
          "progress": {
            "$ref": "#/components/schemas/SimpleWorkflow"
          }
        },
        "additionalProperties": false
      },
      "JobBoardJobAdLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "applications": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "ui": {
            "$ref": "#/components/schemas/JobBoardJobAdUILinks"
          }
        }
      },
      "JobBoardJobAdListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobBoardJobAdSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        }
      },
      "JobBoardJobAdRepresentation": {
        "type": "object",
        "properties": {
          "adId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "bulletPoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "screening": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobAdScreeningQuestionModel"
            },
            "nullable": true
          },
          "portal": {
            "$ref": "#/components/schemas/JobAdPortalModel"
          },
          "postedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/JobBoardJobAdLinks"
          }
        }
      },
      "JobBoardJobAdSummaryModel": {
        "type": "object",
        "properties": {
          "adId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "bulletPoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "portal": {
            "$ref": "#/components/schemas/JobAdPortalSummaryModel"
          },
          "postedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "JobBoardJobAdUILinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "applications": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "JobBoardListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobBoardSummaryModel"
            },
            "nullable": true
          }
        }
      },
      "JobBoardModel": {
        "type": "object",
        "properties": {
          "boardId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "portal": {
            "$ref": "#/components/schemas/JobBoardPortalModel"
          }
        }
      },
      "JobBoardPortalChildFieldModel": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/JobBoardPortalFieldType"
          },
          "listValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobBoardPortalFieldValueModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobBoardPortalFieldModel": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/JobBoardPortalFieldType"
          },
          "listValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobBoardPortalFieldValueModel"
            },
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobBoardPortalChildFieldModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobBoardPortalFieldType": {
        "enum": [
          "Text",
          "List"
        ],
        "type": "string",
        "format": "string"
      },
      "JobBoardPortalFieldValueModel": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer",
            "format": "int32"
          },
          "valueId": {
            "type": "integer",
            "format": "int32"
          },
          "parentValueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "externalValue": {
            "type": "string",
            "description": "Job board partner defined field value",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobBoardPortalModel": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobBoardPortalFieldModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobBoardSummaryModel": {
        "type": "object",
        "properties": {
          "boardId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "JobOrderActivityListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderActivityModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "JobOrderActivityModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "jobId": {
            "type": "integer",
            "format": "int32"
          },
          "invoiceId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderActivityRepresentation": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "jobId": {
            "type": "integer",
            "format": "int32"
          },
          "invoiceId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "JobOrderActivitySettingModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "validStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "nullable": true
          },
          "statusMandatory": {
            "type": "boolean",
            "nullable": true
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityQuestionModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderActivitySettingSummaryModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderActivitySettingsListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderActivitySettingSummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderActivitySummaryListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderActivitySummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderActivitySummaryModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "jobId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "JobOrderAttachmentCategoryListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderAttachmentCategoryModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "JobOrderAttachmentCategoryModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/JobOrderAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderAttachmentLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "JobOrderAttachmentListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderAttachmentModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "JobOrderAttachmentModel": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/JobOrderAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderAttachmentRepresentation": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/JobOrderAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/JobOrderAttachmentLinks"
          }
        },
        "additionalProperties": false
      },
      "JobOrderAttachmentType": {
        "enum": [
          "Other",
          "JobDescription"
        ],
        "type": "string",
        "format": "string"
      },
      "JobOrderCategoryModel": {
        "required": [
          "categoryId",
          "name"
        ],
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "subCategory": {
            "$ref": "#/components/schemas/JobOrderSubCategoryModel"
          }
        },
        "additionalProperties": false
      },
      "JobOrderFeeModel": {
        "type": "object",
        "properties": {
          "rateType": {
            "$ref": "#/components/schemas/JobOrderFeeRateType"
          },
          "rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "estimatedTotal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderFeeRateType": {
        "enum": [
          "Percent",
          "Fixed",
          "Margin"
        ],
        "type": "string",
        "format": "string"
      },
      "JobOrderInvoiceExpenseListModel": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderInvoiceExpenseModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderInvoiceExpenseModel": {
        "type": "object",
        "properties": {
          "cost": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderInvoiceListModel": {
        "type": "object",
        "properties": {
          "job": {
            "$ref": "#/components/schemas/JobOrderRetainedModel"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderInvoiceSummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderInvoiceModel": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "integer",
            "format": "int32"
          },
          "invoiceId": {
            "type": "integer",
            "format": "int32"
          },
          "invoiceNumber": {
            "type": "string",
            "nullable": true
          },
          "stage": {
            "$ref": "#/components/schemas/JobOrderInvoiceStageModel"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "triggerType": {
            "type": "string",
            "nullable": true
          },
          "triggerJobOrderStatus": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "triggerAt": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "forecastedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "expenses": {
            "$ref": "#/components/schemas/JobOrderInvoiceExpenseListModel"
          },
          "sentDetails": {
            "$ref": "#/components/schemas/JobOrderSentInvoiceModel"
          },
          "placements": {
            "$ref": "#/components/schemas/JobOrderInvoicePlacementListModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderInvoicePlacementListModel": {
        "type": "object",
        "properties": {
          "totalPlacements": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderInvoicePlacementModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderInvoicePlacementModel": {
        "type": "object",
        "properties": {
          "candidateId": {
            "type": "integer",
            "format": "int32"
          },
          "placementId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderInvoiceStageModel": {
        "required": [
          "name",
          "stageId"
        ],
        "type": "object",
        "properties": {
          "stageId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "JobOrderInvoiceSummaryModel": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "integer",
            "format": "int32"
          },
          "invoiceId": {
            "type": "integer",
            "format": "int32"
          },
          "invoiceNumber": {
            "type": "string",
            "nullable": true
          },
          "stage": {
            "$ref": "#/components/schemas/JobOrderInvoiceStageModel"
          },
          "amount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "JobOrderJobApplicationStatisticsSummaryModel": {
        "type": "object",
        "properties": {
          "new": {
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "JobOrderLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "attachments": {
            "type": "string",
            "description": "Attachments",
            "format": "uri",
            "nullable": true
          },
          "applications": {
            "type": "string",
            "description": "Job applications",
            "format": "uri",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "JobOrderListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "JobOrderLocationAreaModel": {
        "required": [
          "areaId",
          "name"
        ],
        "type": "object",
        "properties": {
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "JobOrderLocationModel": {
        "required": [
          "locationId",
          "name"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "area": {
            "$ref": "#/components/schemas/JobOrderLocationAreaModel"
          }
        },
        "additionalProperties": false
      },
      "JobOrderRateCardModel": {
        "type": "object",
        "properties": {
          "jobOrderId": {
            "type": "integer",
            "format": "int32"
          },
          "rateCard": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderRepresentation": {
        "required": [
          "jobId"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "type": "integer",
            "format": "int32"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/JobOrderLocationModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "userFavourite": {
            "type": "boolean",
            "nullable": true
          },
          "jobDescription": {
            "type": "string",
            "nullable": true
          },
          "numberOfJobs": {
            "type": "integer",
            "format": "int32"
          },
          "workplaceAddress": {
            "$ref": "#/components/schemas/CompanyAddressModel"
          },
          "category": {
            "$ref": "#/components/schemas/JobOrderCategoryModel"
          },
          "start": {
            "$ref": "#/components/schemas/JobOrderStartModel"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "workShift": {
            "$ref": "#/components/schemas/JobOrderWorkShiftModel"
          },
          "duration": {
            "$ref": "#/components/schemas/DurationModel"
          },
          "workType": {
            "$ref": "#/components/schemas/WorkTypeModel"
          },
          "jobType": {
            "type": "string",
            "nullable": true
          },
          "salary": {
            "$ref": "#/components/schemas/JobOrderSalaryRangeModel"
          },
          "fee": {
            "$ref": "#/components/schemas/JobOrderFeeModel"
          },
          "otherContacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "skillTags": {
            "$ref": "#/components/schemas/JobOrderSkillTags"
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValueModel"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "recruiters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "partnerActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerActionStageModel"
            },
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "closedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "statistics": {
            "$ref": "#/components/schemas/JobOrderStatisticsSummaryModel"
          },
          "links": {
            "$ref": "#/components/schemas/JobOrderLinks"
          }
        }
      },
      "JobOrderRetainedInvoiceRepresentation": {
        "type": "object",
        "properties": {
          "job": {
            "$ref": "#/components/schemas/JobOrderRetainedModel"
          },
          "invoice": {
            "$ref": "#/components/schemas/JobOrderInvoiceModel"
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "JobOrderRetainedModel": {
        "required": [
          "jobId"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "type": "integer",
            "format": "int32"
          },
          "jobType": {
            "type": "string",
            "nullable": true
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "feeCurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          }
        },
        "additionalProperties": false
      },
      "JobOrderSalaryRangeModel": {
        "type": "object",
        "properties": {
          "ratePer": {
            "$ref": "#/components/schemas/SalaryRatePer"
          },
          "rateLow": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rateHigh": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Optional ISO 4217 3-letter alphabetic currency code",
            "nullable": true
          },
          "timePerWeek": {
            "type": "number",
            "description": "Number of days per week for a daily rate or hours per week for an hourly rate.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderSentInvoiceModel": {
        "type": "object",
        "properties": {
          "billingContactNames": {
            "type": "string",
            "nullable": true
          },
          "billingContactEmails": {
            "type": "string",
            "nullable": true
          },
          "poNumber": {
            "type": "string",
            "nullable": true
          },
          "paymentTermsDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sentAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sentBy": {
            "$ref": "#/components/schemas/UserNameModel"
          }
        },
        "additionalProperties": false
      },
      "JobOrderSkillTags": {
        "type": "object",
        "properties": {
          "matchAll": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderStartModel": {
        "type": "object",
        "properties": {
          "immediate": {
            "type": "boolean"
          },
          "relative": {
            "$ref": "#/components/schemas/RelativeStartModel"
          },
          "date": {
            "type": "string",
            "description": "The specific date that a job starts or a candidate is available",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderStatisticsSummaryModel": {
        "type": "object",
        "properties": {
          "applications": {
            "$ref": "#/components/schemas/JobOrderJobApplicationStatisticsSummaryModel"
          }
        },
        "additionalProperties": false
      },
      "JobOrderSubCategoryModel": {
        "required": [
          "name",
          "subCategoryId"
        ],
        "type": "object",
        "properties": {
          "subCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "JobOrderSummaryModel": {
        "required": [
          "jobId"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "type": "integer",
            "format": "int32"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/JobOrderLocationModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "userFavourite": {
            "type": "boolean",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "closedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "JobOrderTitleModel": {
        "required": [
          "jobId"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "type": "integer",
            "format": "int32"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/JobOrderLocationModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          }
        },
        "additionalProperties": false
      },
      "JobOrderUserTaskModel": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "jobId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobOrderUserTaskRepresentation": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "jobId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/UserTaskLinks"
          }
        },
        "additionalProperties": false
      },
      "JobOrderWorkShiftModel": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "nullable": true
          },
          "workDays": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocationAreaModel": {
        "required": [
          "areaId",
          "name"
        ],
        "type": "object",
        "properties": {
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LocationListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "LocationModel": {
        "required": [
          "locationId",
          "name"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "areas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationAreaModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchedByEmailAddressModel": {
        "type": "object",
        "properties": {
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateMatchedByEmailModel"
            },
            "description": "Top 5 most recently updated matching candidates",
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactMatchedByEmailModel"
            },
            "description": "Top 5 most recently updated matching contacts",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMatchedByEmailModel"
            },
            "description": "Top 5 most recently updated matching users",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchedByPhoneNumberModel": {
        "type": "object",
        "properties": {
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateMatchedByPhoneModel"
            },
            "description": "Top 5 most recently updated matching candidates",
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactMatchedByPhoneModel"
            },
            "description": "Top 5 most recently updated matching contacts",
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyMatchedByPhoneModel"
            },
            "description": "Top 5 most recently updated matching companies",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMatchedByPhoneModel"
            },
            "description": "Top 5 most recently updated matching users",
            "nullable": true
          },
          "quality": {
            "$ref": "#/components/schemas/PhoneNumberMatchQuality"
          }
        },
        "additionalProperties": false
      },
      "MatchedEmailAddressModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EmailAddressMatchType"
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchedEmailAddressModelCompanyName": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchedPhoneNumberModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PhoneNumberMatchType"
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "normalized": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchedPhoneNumberModelCompanyName": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ModelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "NameModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Resource name"
          }
        },
        "additionalProperties": false
      },
      "NameModelListOf": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NameModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NoteAttachmentListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteAttachmentModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "NoteAttachmentModel": {
        "required": [
          "attachmentId"
        ],
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "NoteLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "NoteListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "NoteModel": {
        "required": [
          "noteId"
        ],
        "type": "object",
        "properties": {
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "readonly": {
            "type": "boolean",
            "description": "This note cannot be updated"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteAttachmentModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NoteRepresentation": {
        "required": [
          "noteId"
        ],
        "type": "object",
        "properties": {
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "readonly": {
            "type": "boolean",
            "description": "This note cannot be updated"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteAttachmentModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "links": {
            "$ref": "#/components/schemas/NoteLinks"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "NoteSummaryModel": {
        "required": [
          "noteId"
        ],
        "type": "object",
        "properties": {
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "textPartial": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "readonly": {
            "type": "boolean",
            "description": "This note cannot be updated"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NoteTypeDefaultModel": {
        "type": "object",
        "properties": {
          "note": {
            "type": "boolean",
            "default": false
          },
          "email": {
            "type": "boolean",
            "default": false
          },
          "sms": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "NoteTypeListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteTypeModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NoteTypeModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "default": {
            "$ref": "#/components/schemas/NoteTypeDefaultModel"
          }
        },
        "additionalProperties": false
      },
      "Operation": {
        "type": "object",
        "properties": {
          "op": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "description": "Single entity path to address, e.g. /jobs, /candidates, /applications, /placements, /companies or /contacts",
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Comma separated entitiy ids, e.g. 1000, 1001, 1002",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationType": {
        "enum": [
          "Add",
          "Remove"
        ],
        "type": "string",
        "format": "string"
      },
      "OpportunityListModel": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpportunitySummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OpportunityStageModel": {
        "type": "object",
        "properties": {
          "stageId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OpportunitySummaryModel": {
        "type": "object",
        "properties": {
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityTitle": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "integer",
            "format": "int32"
          },
          "workType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "currentStage": {
            "$ref": "#/components/schemas/OpportunityStageModel"
          },
          "value": {
            "$ref": "#/components/schemas/OpportunityValueModel"
          },
          "estimatedClose": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "additionalInformation": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "type": "integer",
            "format": "int32"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OpportunityValueModel": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PageLinks": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "prev": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PartnerActionFilterModel": {
        "type": "object",
        "properties": {
          "adminOnly": {
            "type": "boolean",
            "description": "Action is available to admin users only"
          },
          "approvedOnly": {
            "type": "boolean",
            "description": "Action is only available on approved entities (currently only supported for placements)"
          },
          "status": {
            "$ref": "#/components/schemas/PartnerActionStatusFilterModel"
          }
        },
        "additionalProperties": false
      },
      "PartnerActionListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerActionModel"
            },
            "description": "Partner actions",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "PartnerActionModel": {
        "type": "object",
        "properties": {
          "actionId": {
            "type": "string",
            "description": "Unique identifier for the partner action",
            "format": "uuid"
          },
          "actionType": {
            "$ref": "#/components/schemas/PartnerActionType"
          },
          "actionName": {
            "type": "string",
            "description": "Menu item label that will appear to the end-user",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Unique partner defined reference/identifier for the action",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "URL to open after the action is selected and assigned the `\"Submitted\"` stage.",
            "format": "uri",
            "nullable": true
          },
          "urlType": {
            "$ref": "#/components/schemas/PartnerActionUrlType"
          },
          "allowResubmit": {
            "type": "boolean",
            "description": "Allow resources to be resubmitted to an action."
          },
          "actionFilter": {
            "$ref": "#/components/schemas/PartnerActionFilterModel"
          },
          "webhookData": {
            "description": "Additional data that will be included with the webhook notification",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Date the partner action was added",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Date the partner action was last updated",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PartnerActionRepresentation": {
        "type": "object",
        "properties": {
          "actionId": {
            "type": "string",
            "description": "Unique identifier for the partner action",
            "format": "uuid"
          },
          "actionType": {
            "$ref": "#/components/schemas/PartnerActionType"
          },
          "actionName": {
            "type": "string",
            "description": "Menu item label that will appear to the end-user",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Unique partner defined reference/identifier for the action",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "URL to open after the action is selected and assigned the `\"Submitted\"` stage.",
            "format": "uri",
            "nullable": true
          },
          "urlType": {
            "$ref": "#/components/schemas/PartnerActionUrlType"
          },
          "allowResubmit": {
            "type": "boolean",
            "description": "Allow resources to be resubmitted to an action."
          },
          "actionFilter": {
            "$ref": "#/components/schemas/PartnerActionFilterModel"
          },
          "webhookData": {
            "description": "Additional data that will be included with the webhook notification",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Date the partner action was added",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Date the partner action was last updated",
            "format": "date-time"
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "PartnerActionResultCommandModel": {
        "type": "object",
        "properties": {
          "score": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Optional partner score for the action result",
            "format": "int32",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "Optional partner defined URL for the action result",
            "format": "uri",
            "nullable": true
          },
          "urlType": {
            "$ref": "#/components/schemas/PartnerActionResultUrlType"
          }
        },
        "additionalProperties": false,
        "description": "Optional complete or partial results for a partner action"
      },
      "PartnerActionResultModel": {
        "type": "object",
        "properties": {
          "score": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Optional partner score for the action result",
            "format": "int32",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "Optional partner defined URL for the action result",
            "format": "uri",
            "nullable": true
          },
          "urlType": {
            "$ref": "#/components/schemas/PartnerActionResultUrlType"
          }
        },
        "additionalProperties": false
      },
      "PartnerActionResultUrlType": {
        "enum": [
          "Popup",
          "Page"
        ],
        "type": "string",
        "format": "string"
      },
      "PartnerActionStage": {
        "enum": [
          "Submitted",
          "InProgress",
          "Completed",
          "Rejected",
          "Cancelled"
        ],
        "type": "string",
        "format": "string"
      },
      "PartnerActionStageModel": {
        "type": "object",
        "properties": {
          "actionId": {
            "type": "string",
            "format": "uuid"
          },
          "actionName": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Unique partner defined reference/identifier for the action",
            "nullable": true
          },
          "stage": {
            "$ref": "#/components/schemas/PartnerActionStage"
          },
          "status": {
            "type": "string",
            "description": "Partner defined progress status message for the action",
            "nullable": true
          },
          "result": {
            "$ref": "#/components/schemas/PartnerActionResultModel"
          },
          "submittedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "submittedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          }
        },
        "additionalProperties": false
      },
      "PartnerActionStatusFilterModel": {
        "type": "object",
        "properties": {
          "activeOnly": {
            "type": "boolean",
            "description": "Action is available to entities with an active status"
          },
          "statusId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Action is available to entities with a specific status",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PartnerActionType": {
        "enum": [
          "Job",
          "JobAd",
          "Candidate",
          "JobApplication",
          "Placement",
          "Company",
          "Contact"
        ],
        "type": "string",
        "format": "string"
      },
      "PartnerActionUrlType": {
        "enum": [
          "Popup",
          "Page",
          "SideDrawer"
        ],
        "type": "string",
        "format": "string"
      },
      "PhoneNumberMatchQuality": {
        "enum": [
          "Exact",
          "National",
          "Subscriber"
        ],
        "type": "string",
        "format": "string"
      },
      "PhoneNumberMatchType": {
        "enum": [
          "Phone",
          "Mobile"
        ],
        "type": "string",
        "format": "string"
      },
      "PlacementActivityListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementActivityModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "PlacementActivityModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "placementId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PlacementActivityRepresentation": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetailListModel"
          },
          "placementId": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "PlacementActivitySettingModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "validStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "nullable": true
          },
          "statusMandatory": {
            "type": "boolean",
            "nullable": true
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityQuestionModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementActivitySettingSummaryModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementActivitySettingsListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementActivitySettingSummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementActivitySummaryListModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementActivitySummaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementActivitySummaryModel": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int64"
          },
          "activityName": {
            "type": "string",
            "nullable": true
          },
          "activityType": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "placementId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PlacementApproverModel": {
        "required": [
          "contactId"
        ],
        "type": "object",
        "properties": {
          "primary": {
            "type": "boolean"
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "position": {
            "type": "string",
            "description": "Position or job title",
            "nullable": true
          },
          "salutation": {
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "description": "Primary email address",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "description": "Mobile/cell number",
            "nullable": true
          },
          "mobileNormalized": {
            "type": "string",
            "description": "Mobile/cell normalized number",
            "nullable": true
          },
          "inactive": {
            "type": "boolean",
            "description": "Contact is no longer with the company"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          }
        },
        "additionalProperties": false
      },
      "PlacementAttachmentCategoryListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementAttachmentCategoryModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "PlacementAttachmentCategoryModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PlacementAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementAttachmentLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PlacementAttachmentListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementAttachmentModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "PlacementAttachmentModel": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/PlacementAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementAttachmentRepresentation": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/PlacementAttachmentType"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/PlacementAttachmentLinks"
          }
        },
        "additionalProperties": false
      },
      "PlacementAttachmentType": {
        "enum": [
          "Other",
          "Resume",
          "FormattedResume",
          "CoverLetter",
          "Screening",
          "Check",
          "Reference",
          "License",
          "Terms",
          "CompanyTerms",
          "StandardTerms"
        ],
        "type": "string",
        "format": "string"
      },
      "PlacementBillingModel": {
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "address": {
            "$ref": "#/components/schemas/CompanyAddressModel"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "orderRef": {
            "type": "string",
            "description": "PO Number/Reference",
            "nullable": true
          },
          "invoiceRef": {
            "type": "string",
            "description": "Invoice Number/Reference",
            "nullable": true
          },
          "terms": {
            "type": "string",
            "description": "Billing payment terms",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "description": "Payment due date",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementContractRateModel": {
        "type": "object",
        "properties": {
          "ratePer": {
            "$ref": "#/components/schemas/PlacementContractRatePer"
          },
          "hoursPerWeek": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "daysPerWeek": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "clientRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "candidateRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "onCostsType": {
            "$ref": "#/components/schemas/RatePortion"
          },
          "onCosts": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "netMargin": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementContractRatePer": {
        "enum": [
          "Hour",
          "Day",
          "Week",
          "Month"
        ],
        "type": "string",
        "format": "string"
      },
      "PlacementExportModel": {
        "type": "object",
        "properties": {
          "payroll": {
            "type": "boolean",
            "description": "Placement has been selected for export to a payroll service",
            "nullable": true
          },
          "timesheets": {
            "type": "boolean",
            "description": "Placement has been selected for export to a timesheet service",
            "nullable": true
          },
          "approvers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementApproverModel"
            },
            "description": "Timesheet/payroll approver contacts",
            "nullable": true
          },
          "onboarding": {
            "type": "boolean",
            "description": "Placement has been selected for export to an onboarding service",
            "nullable": true
          },
          "onboardingManagers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementApproverModel"
            },
            "description": "Onboarding manager contacts",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "extendsPlacement": {
            "type": "string",
            "description": "Extends placement",
            "format": "uri",
            "nullable": true
          },
          "extendedByPlacement": {
            "type": "string",
            "description": "Extended by placement",
            "format": "uri",
            "nullable": true
          },
          "creditsPlacement": {
            "type": "string",
            "description": "Credits placement",
            "format": "uri",
            "nullable": true
          },
          "creditedByPlacement": {
            "type": "string",
            "description": "Credited by placement",
            "format": "uri",
            "nullable": true
          },
          "application": {
            "type": "string",
            "description": "Job application",
            "format": "uri",
            "nullable": true
          },
          "attachments": {
            "type": "string",
            "description": "Attachments",
            "format": "uri",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PlacementListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "PlacementRateModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "default": {
            "type": "boolean"
          },
          "displayIndex": {
            "type": "integer",
            "format": "int32"
          },
          "payRate": {
            "type": "number",
            "format": "double"
          },
          "chargeRate": {
            "type": "number",
            "format": "double"
          },
          "chargeCurrency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementRecruiterModel": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "feeSplit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "inactive": {
            "type": "boolean",
            "default": false
          },
          "deleted": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "PlacementRepresentation": {
        "required": [
          "placementId",
          "type"
        ],
        "type": "object",
        "properties": {
          "placementId": {
            "type": "integer",
            "format": "int32"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "job": {
            "$ref": "#/components/schemas/JobOrderTitleModel"
          },
          "candidate": {
            "$ref": "#/components/schemas/CandidatePlacementModel"
          },
          "approved": {
            "type": "boolean"
          },
          "approvedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PlacementType"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "startDate": {
            "type": "string",
            "description": "Date employment begins",
            "format": "date",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Date a contract or temporary employment ends",
            "format": "date",
            "nullable": true
          },
          "workShift": {
            "$ref": "#/components/schemas/PlacementWorkShiftModel"
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "source": {
            "$ref": "#/components/schemas/PlacementSourceModel"
          },
          "workplaceAddress": {
            "$ref": "#/components/schemas/CompanyAddressModel"
          },
          "paymentType": {
            "type": "string",
            "nullable": true
          },
          "salary": {
            "$ref": "#/components/schemas/PlacementSalaryModel"
          },
          "contractRate": {
            "$ref": "#/components/schemas/PlacementContractRateModel"
          },
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementRateModel"
            },
            "nullable": true
          },
          "award": {
            "type": "string",
            "nullable": true
          },
          "industryCode": {
            "type": "string",
            "nullable": true
          },
          "chargeCurrency": {
            "type": "string",
            "nullable": true
          },
          "feeSplit": {
            "$ref": "#/components/schemas/RatePortion"
          },
          "billing": {
            "$ref": "#/components/schemas/PlacementBillingModel"
          },
          "export": {
            "$ref": "#/components/schemas/PlacementExportModel"
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValueModel"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "recruiters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementRecruiterModel"
            },
            "nullable": true
          },
          "partnerActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerActionStageModel"
            },
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/PlacementLinks"
          }
        }
      },
      "PlacementSalaryModel": {
        "type": "object",
        "properties": {
          "base": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "superannuation": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "benefits": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "total": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementSourceModel": {
        "type": "object",
        "properties": {
          "placement": {
            "type": "string",
            "description": "The source of candidate that lead to this placement",
            "nullable": true
          },
          "candidate": {
            "type": "string",
            "description": "The original source of the candidate",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementSummaryModel": {
        "required": [
          "placementId",
          "type"
        ],
        "type": "object",
        "properties": {
          "placementId": {
            "type": "integer",
            "format": "int32"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "job": {
            "$ref": "#/components/schemas/JobOrderTitleModel"
          },
          "candidate": {
            "$ref": "#/components/schemas/CandidatePlacementModel"
          },
          "approved": {
            "type": "boolean"
          },
          "approvedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PlacementType"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "startDate": {
            "type": "string",
            "description": "Date employment begins",
            "format": "date",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Date a contract or temporary employment ends",
            "format": "date",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "PlacementTimesheetApproverModel": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "position": {
            "type": "string",
            "description": "Position or job title",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Primary email address",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "description": "Mobile/cell number",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementTimesheetDaysModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PlacementTimesheetEntryModel"
          },
          {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "properties": {
                  "timeOfDay": {
                    "format": "time"
                  }
                },
                "format": "date"
              },
              "type": {
                "enum": [
                  "Days"
                ],
                "type": "object"
              },
              "halfDay": {
                "type": "boolean",
                "nullable": true
              }
            }
          }
        ],
        "additionalProperties": false
      },
      "PlacementTimesheetEntryModel": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "properties": {
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date"
          },
          "type": {
            "$ref": "#/components/schemas/PlacementTimesheetType"
          }
        },
        "additionalProperties": false,
        "x-extendedDiscriminator": "type"
      },
      "PlacementTimesheetHoursModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PlacementTimesheetEntryModel"
          },
          {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "properties": {
                  "timeOfDay": {
                    "format": "time"
                  }
                },
                "format": "date"
              },
              "type": {
                "enum": [
                  "Hours"
                ],
                "type": "object"
              },
              "hours": {
                "type": "number",
                "format": "double",
                "nullable": true
              }
            }
          }
        ],
        "additionalProperties": false
      },
      "PlacementTimesheetListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementTimesheetModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementTimesheetModel": {
        "type": "object",
        "properties": {
          "period": {
            "$ref": "#/components/schemas/DateRangeModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approvedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approvedBy": {
            "$ref": "#/components/schemas/PlacementTimesheetApproverModel"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementTimesheetEntryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementTimesheetTimeModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PlacementTimesheetEntryModel"
          },
          {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "properties": {
                  "timeOfDay": {
                    "format": "time"
                  }
                },
                "format": "date"
              },
              "type": {
                "enum": [
                  "Time"
                ],
                "type": "object"
              },
              "start": {
                "type": "string",
                "properties": {
                  "value": {
                    "format": "time"
                  }
                },
                "format": "time",
                "nullable": true
              },
              "end": {
                "type": "string",
                "properties": {
                  "value": {
                    "format": "time"
                  }
                },
                "format": "time",
                "nullable": true
              },
              "break": {
                "type": "string",
                "properties": {
                  "value": {
                    "format": "time"
                  }
                },
                "format": "time",
                "nullable": true
              }
            }
          }
        ],
        "additionalProperties": false
      },
      "PlacementTimesheetType": {
        "enum": [
          "Time",
          "Hours",
          "Days"
        ],
        "type": "string",
        "format": "string"
      },
      "PlacementType": {
        "enum": [
          "Permanent",
          "Contract",
          "Temporary",
          "Credit"
        ],
        "type": "string",
        "format": "string"
      },
      "PlacementUserTaskModel": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "placementId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlacementUserTaskRepresentation": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "placementId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/UserTaskLinks"
          }
        },
        "additionalProperties": false
      },
      "PlacementWorkShiftModel": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "properties": {
              "value": {
                "format": "time"
              }
            },
            "format": "time",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "properties": {
              "value": {
                "format": "time"
              }
            },
            "format": "time",
            "nullable": true
          },
          "workDays": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RatePortion": {
        "enum": [
          "Fixed",
          "Percent"
        ],
        "type": "string",
        "format": "string"
      },
      "RecipientEntityType": {
        "enum": [
          "Candidate",
          "Contact"
        ],
        "type": "string",
        "format": "string"
      },
      "RejectRequisitionCommand": {
        "required": [
          "approverId"
        ],
        "type": "object",
        "properties": {
          "approverId": {
            "type": "integer",
            "format": "int32"
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelativeStartModel": {
        "type": "object",
        "properties": {
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "$ref": "#/components/schemas/RelativeStartUnit"
          }
        },
        "additionalProperties": false
      },
      "RelativeStartUnit": {
        "enum": [
          "Week",
          "Month"
        ],
        "type": "string",
        "format": "string"
      },
      "RemoveCandidateSkillsCommand": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RemoveCategoriesModel"
            },
            "description": "Skill categories to remove from this candidate.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RemoveCategoriesModel": {
        "required": [
          "categoryId"
        ],
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "description": "Category to remove.<br />\r\nSpecify a categoryId without subCategories to remove the category and all previously\r\nlinked sub-categories associated with the category.",
            "format": "int32"
          },
          "subCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RemoveSubCategoriesModel"
            },
            "description": "Optional list of sub-categories and skills to remove.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RemoveContactSkillsCommand": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RemoveCategoriesModel"
            },
            "description": "Skill categories to remove from this contact.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RemoveSubCategoriesModel": {
        "required": [
          "subCategoryId"
        ],
        "type": "object",
        "properties": {
          "subCategoryId": {
            "type": "integer",
            "description": "Sub-category to remove.<br />\r\nSpecify a subCategoryId without skills to remove the sub-category and all previously\r\nlinked skills associated with the sub-category.",
            "format": "int32"
          },
          "skills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitSkillsModel"
            },
            "description": "Optional list of skills to remove.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequisitionAttachmentType": {
        "enum": [
          "Other",
          "JobDescription"
        ],
        "type": "string",
        "format": "string"
      },
      "RequisitionFormFieldModel": {
        "type": "object",
        "properties": {
          "fieldID": {
            "type": "integer",
            "format": "int32"
          },
          "formID": {
            "type": "integer",
            "format": "int32"
          },
          "fieldName": {
            "type": "string",
            "nullable": true
          },
          "visible": {
            "type": "boolean"
          },
          "required": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RequisitionFormListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionFormModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "RequisitionFormModel": {
        "type": "object",
        "properties": {
          "formName": {
            "type": "string",
            "nullable": true
          },
          "formID": {
            "type": "integer",
            "format": "int32"
          },
          "default": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          },
          "formFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionFormFieldModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequisitionHistoryModel": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionLogModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RequisitionLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "workflow": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "job": {
            "type": "string",
            "description": "Link to job created for an approved requisition",
            "format": "uri",
            "nullable": true
          },
          "history": {
            "type": "string",
            "description": "Link to requisition approval history",
            "format": "uri",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "RequisitionListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "RequisitionLogModel": {
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "oldStatus": {
            "$ref": "#/components/schemas/RequisitionStatus"
          },
          "newStatus": {
            "$ref": "#/components/schemas/RequisitionStatus"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "RequisitionRepresentation": {
        "required": [
          "jobTitle",
          "requisitionId"
        ],
        "type": "object",
        "properties": {
          "requisitionId": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/RequisitionStatus"
          },
          "workflowStageIndex": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "jobTitle": {
            "minLength": 1,
            "type": "string"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "hiringManager": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "workflow": {
            "$ref": "#/components/schemas/CompanyWorkflowModel"
          },
          "jobDescription": {
            "type": "string",
            "nullable": true
          },
          "numberOfJobs": {
            "type": "integer",
            "format": "int32"
          },
          "source": {
            "type": "string",
            "description": "Source of the requisition, or reason the requisition is being raised.",
            "nullable": true
          },
          "workplaceAddress": {
            "$ref": "#/components/schemas/CompanyAddressModel"
          },
          "category": {
            "$ref": "#/components/schemas/JobOrderCategoryModel"
          },
          "location": {
            "$ref": "#/components/schemas/JobOrderLocationModel"
          },
          "start": {
            "$ref": "#/components/schemas/JobOrderStartModel"
          },
          "duration": {
            "$ref": "#/components/schemas/DurationModel"
          },
          "workType": {
            "$ref": "#/components/schemas/WorkTypeModel"
          },
          "salary": {
            "$ref": "#/components/schemas/JobOrderSalaryRangeModel"
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValueModel"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "recruiters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "formID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/RequisitionLinks"
          }
        }
      },
      "RequisitionStatus": {
        "enum": [
          "Draft",
          "Submitted",
          "Rejected",
          "Approved",
          "Closed"
        ],
        "type": "string",
        "format": "string"
      },
      "RequisitionSummaryModel": {
        "required": [
          "jobTitle",
          "requisitionId"
        ],
        "type": "object",
        "properties": {
          "requisitionId": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/RequisitionStatus"
          },
          "workflowStageIndex": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "jobTitle": {
            "minLength": 1,
            "type": "string"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "hiringManager": {
            "$ref": "#/components/schemas/ContactNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ReviewAcceptJobApplicationCommand": {
        "required": [
          "contactId"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Hiring manager contact accepting the applicant",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Optional feedback",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReviewRejectJobApplicationCommand": {
        "required": [
          "contactId"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Hiring manager contact rejecting the applicant",
            "format": "int32"
          },
          "reason": {
            "type": "string",
            "description": "Optional feedback",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReviewSubmitJobApplicationCommand": {
        "type": "object",
        "properties": {
          "submittedByUserId": {
            "type": "integer",
            "description": "Optionally specify the user submitting the job application for review (if not the authenticated user)",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReviewViewJobApplicationCommand": {
        "required": [
          "contactId"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Hiring manager contact viewing the applicant",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SalaryModel": {
        "type": "object",
        "properties": {
          "ratePer": {
            "$ref": "#/components/schemas/SalaryRatePer"
          },
          "rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Optional ISO 4217 3-letter alphabetic currency code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SalaryRangeModel": {
        "type": "object",
        "properties": {
          "ratePer": {
            "$ref": "#/components/schemas/SalaryRatePer"
          },
          "rateLow": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rateHigh": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Optional ISO 4217 3-letter alphabetic currency code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SalaryRatePer": {
        "enum": [
          "Hour",
          "Day",
          "Week",
          "Month",
          "Year"
        ],
        "type": "string",
        "format": "string"
      },
      "SendCandidateSmsCommand": {
        "required": [
          "entityID",
          "text"
        ],
        "type": "object",
        "properties": {
          "senderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "noteType": {
            "type": "string",
            "nullable": true
          },
          "entityID": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "text": {
            "minLength": 1,
            "type": "string"
          },
          "sendAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendCompanySmsCommand": {
        "required": [
          "companyID",
          "entityID",
          "text"
        ],
        "type": "object",
        "properties": {
          "senderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "noteType": {
            "type": "string",
            "nullable": true
          },
          "entityID": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "text": {
            "minLength": 1,
            "type": "string"
          },
          "sendAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "companyID": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SendContactSmsCommand": {
        "required": [
          "entityID",
          "text"
        ],
        "type": "object",
        "properties": {
          "senderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "noteType": {
            "type": "string",
            "nullable": true
          },
          "entityID": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "text": {
            "minLength": 1,
            "type": "string"
          },
          "sendAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendJobApplicationContactSmsCommand": {
        "required": [
          "entityID",
          "jobOrderID",
          "text"
        ],
        "type": "object",
        "properties": {
          "senderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "noteType": {
            "type": "string",
            "nullable": true
          },
          "entityID": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "text": {
            "minLength": 1,
            "type": "string"
          },
          "sendAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "jobOrderID": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SendJobApplicationSmsCommand": {
        "required": [
          "entityID",
          "text"
        ],
        "type": "object",
        "properties": {
          "senderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "noteType": {
            "type": "string",
            "nullable": true
          },
          "entityID": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "text": {
            "minLength": 1,
            "type": "string"
          },
          "sendAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "statusID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendJobOrderSmsCommand": {
        "required": [
          "entityID",
          "text"
        ],
        "type": "object",
        "properties": {
          "senderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "noteType": {
            "type": "string",
            "nullable": true
          },
          "entityID": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "text": {
            "minLength": 1,
            "type": "string"
          },
          "sendAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendPlacementSmsCommand": {
        "required": [
          "entityID",
          "text"
        ],
        "type": "object",
        "properties": {
          "senderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "noteType": {
            "type": "string",
            "nullable": true
          },
          "entityID": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "text": {
            "minLength": 1,
            "type": "string"
          },
          "sendAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetCandidateAvailabilityByWeekCommand": {
        "required": [
          "availability",
          "weekOf"
        ],
        "type": "object",
        "properties": {
          "weekOf": {
            "type": "string",
            "properties": {
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Update availability for the week (beginning Sunday) containing the specified date",
            "format": "date"
          },
          "availability": {
            "type": "object",
            "properties": {
              "Sunday": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeRangeModel"
                },
                "description": "Availability, specify at most two shifts"
              },
              "Monday": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeRangeModel"
                },
                "description": "Availability, specify at most two shifts"
              },
              "Tuesday": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeRangeModel"
                },
                "description": "Availability, specify at most two shifts"
              },
              "Wednesday": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeRangeModel"
                },
                "description": "Availability, specify at most two shifts"
              },
              "Thursday": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeRangeModel"
                },
                "description": "Availability, specify at most two shifts"
              },
              "Friday": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeRangeModel"
                },
                "description": "Availability, specify at most two shifts"
              },
              "Saturday": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeRangeModel"
                },
                "description": "Availability, specify at most two shifts"
              }
            },
            "additionalProperties": false,
            "description": "Weekly availability, at most two shifts per day"
          },
          "recurring": {
            "type": "boolean",
            "description": "Availability repeats in following weeks. Previous/past recurring schedules will be terminated prior to this schedule, existing future overlapping schedules will be cancelled."
          },
          "until": {
            "type": "string",
            "description": "Optional end date of repeating availability",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetCandidateCustomFieldListValuesCommand": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available values for a list custom field",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetCandidateStatusCommand": {
        "required": [
          "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "description": "Status Id",
            "format": "int32"
          },
          "note": {
            "$ref": "#/components/schemas/SubmitStatusNoteModel"
          }
        },
        "additionalProperties": false
      },
      "SetCompanyCustomFieldListValuesCommand": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available values for a list custom field",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetCompanyStatusCommand": {
        "required": [
          "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "description": "Status Id",
            "format": "int32"
          },
          "note": {
            "$ref": "#/components/schemas/SubmitStatusNoteModel"
          }
        },
        "additionalProperties": false
      },
      "SetContactCustomFieldListValuesCommand": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available values for a list custom field",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetContactStatusCommand": {
        "required": [
          "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "description": "Status Id",
            "format": "int32"
          },
          "note": {
            "$ref": "#/components/schemas/SubmitStatusNoteModel"
          }
        },
        "additionalProperties": false
      },
      "SetJobApplicationCustomFieldListValuesCommand": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available values for a list custom field",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetJobApplicationStatusCommand": {
        "required": [
          "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "description": "Status Id",
            "format": "int32"
          },
          "note": {
            "$ref": "#/components/schemas/SubmitStatusNoteModel"
          }
        },
        "additionalProperties": false
      },
      "SetJobOrderCustomFieldListValuesCommand": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available values for a list custom field",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetJobOrderStatusCommand": {
        "required": [
          "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "description": "Status Id",
            "format": "int32"
          },
          "note": {
            "$ref": "#/components/schemas/SubmitStatusNoteModel"
          }
        },
        "additionalProperties": false
      },
      "SetPlacementCustomFieldListValuesCommand": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available values for a list custom field",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetPlacementStatusCommand": {
        "required": [
          "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "description": "Status Id",
            "format": "int32"
          },
          "note": {
            "$ref": "#/components/schemas/SubmitStatusNoteModel"
          }
        },
        "additionalProperties": false
      },
      "SimpleWorkflow": {
        "enum": [
          "Started",
          "InProgress",
          "Complete"
        ],
        "type": "string",
        "format": "string"
      },
      "SkillCategoryModel": {
        "required": [
          "name",
          "skillId"
        ],
        "type": "object",
        "properties": {
          "skillId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SmsRepresentation": {
        "type": "object",
        "properties": {
          "batchID": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "StatusListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "StatusModel": {
        "required": [
          "name",
          "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "default": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "StatusRepresentation": {
        "required": [
          "name",
          "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "default": {
            "type": "boolean",
            "default": false
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "SubCategoryModel": {
        "required": [
          "name",
          "subCategoryId"
        ],
        "type": "object",
        "properties": {
          "subCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "skills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SkillCategoryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmissionLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "SubmissionListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmissionSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "SubmissionRepresentation": {
        "required": [
          "submissionId"
        ],
        "type": "object",
        "properties": {
          "submissionId": {
            "type": "integer",
            "format": "int64"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "candidate": {
            "$ref": "#/components/schemas/CandidateSummaryModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "job": {
            "$ref": "#/components/schemas/JobOrderSummaryModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "candidateSummary": {
            "type": "string",
            "nullable": true
          },
          "application": {
            "$ref": "#/components/schemas/JobApplicationSummaryModel"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "links": {
            "$ref": "#/components/schemas/SubmissionLinks"
          }
        }
      },
      "SubmissionSummaryModel": {
        "required": [
          "submissionId"
        ],
        "type": "object",
        "properties": {
          "submissionId": {
            "type": "integer",
            "format": "int64"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "candidate": {
            "$ref": "#/components/schemas/CandidateSummaryModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyNameModel"
          },
          "job": {
            "$ref": "#/components/schemas/JobOrderSummaryModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitAddressModel": {
        "type": "object",
        "properties": {
          "street": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitCandidateAttachmentType": {
        "enum": [
          "Other",
          "Resume",
          "FormattedResume",
          "CoverLetter",
          "Screening",
          "Check",
          "Reference",
          "License"
        ],
        "type": "string",
        "format": "string"
      },
      "SubmitCandidateAvailabilityModel": {
        "type": "object",
        "properties": {
          "immediate": {
            "type": "boolean",
            "description": "The candidate is available for an immediate start"
          },
          "relative": {
            "$ref": "#/components/schemas/SubmitRelativeStartModel"
          },
          "date": {
            "type": "string",
            "description": "The specific date that a job starts or a candidate is available",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The date the candidate is available to start. Specify ONE OF immediate, relative or date."
      },
      "SubmitCandidateEducationModel": {
        "type": "object",
        "properties": {
          "institution": {
            "type": "string",
            "nullable": true
          },
          "course": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Year, month or date completed.<br />\r\nYear must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />\r\nMonth must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) \"-\" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />\r\nDate must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitCategoriesModel": {
        "required": [
          "categoryId"
        ],
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "description": "Category to add or update in the skill coding.<br />\r\nSpecify a categoryId without subCategories for a broad classification.\r\nThis will remove all previously linked sub-categories associated with the category.",
            "format": "int32"
          },
          "subCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitSubCategoriesModel"
            },
            "description": "Optional list of sub-categories and skills for detailed skill classification",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitCategoryModel": {
        "required": [
          "categoryId"
        ],
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "subCategoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitCompanyWorkflowApproverModel": {
        "required": [
          "contactId",
          "stageIndex"
        ],
        "type": "object",
        "properties": {
          "stageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "SubmitCurrentEmploymentModel": {
        "type": "object",
        "properties": {
          "employer": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "workTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "salary": {
            "$ref": "#/components/schemas/SubmitSalaryModel"
          }
        },
        "additionalProperties": false
      },
      "SubmitCustomFieldValueModel": {
        "required": [
          "fieldId"
        ],
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Text, List or Date ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)) value for this custom field (depending on the field `type`)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitDurationModel": {
        "type": "object",
        "properties": {
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "$ref": "#/components/schemas/DurationUnit"
          }
        },
        "additionalProperties": false
      },
      "SubmitEmploymentModel": {
        "type": "object",
        "properties": {
          "current": {
            "$ref": "#/components/schemas/SubmitCurrentEmploymentModel"
          },
          "ideal": {
            "$ref": "#/components/schemas/SubmitIdealEmploymentModel"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateEmploymentHistoryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitIdealEmploymentModel": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "nullable": true
          },
          "workTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "salary": {
            "$ref": "#/components/schemas/SubmitSalaryRangeModel"
          },
          "other": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitIdealSalaryModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitIdealSalaryModel": {
        "type": "object",
        "properties": {
          "workTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "salary": {
            "$ref": "#/components/schemas/SubmitSalaryRangeModel"
          }
        },
        "additionalProperties": false
      },
      "SubmitInterviewEvaluationCommand": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitInterviewEvaluationRatingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitInterviewEvaluationRatingModel": {
        "type": "object",
        "properties": {
          "criteria": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SubmitJobApplicationCommand": {
        "required": [
          "email",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "salutation": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "phone": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/SubmitAddressModel"
          },
          "social": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri"
            },
            "nullable": true
          },
          "employment": {
            "$ref": "#/components/schemas/SubmitEmploymentModel"
          },
          "availability": {
            "$ref": "#/components/schemas/SubmitCandidateAvailabilityModel"
          },
          "education": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCandidateEducationModel"
            },
            "nullable": true
          },
          "skillTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "screening": {
            "$ref": "#/components/schemas/SubmitScreeningQuesionResultsModel"
          },
          "custom": {
            "$ref": "#/components/schemas/SubmitJobApplicationCustomFieldsModel"
          }
        },
        "additionalProperties": false
      },
      "SubmitJobApplicationCustomFieldsModel": {
        "type": "object",
        "properties": {
          "candidate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "description": "Candidate custom field values",
            "nullable": true
          },
          "application": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "description": "Job application custom field values",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Candidate and job application custom field values"
      },
      "SubmitJobOrderCandidateCommand": {
        "required": [
          "email",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "salutation": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "phone": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/SubmitAddressModel"
          },
          "social": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri"
            },
            "nullable": true
          },
          "employment": {
            "$ref": "#/components/schemas/SubmitEmploymentModel"
          },
          "availability": {
            "$ref": "#/components/schemas/SubmitCandidateAvailabilityModel"
          },
          "education": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCandidateEducationModel"
            },
            "nullable": true
          },
          "skillTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "screening": {
            "$ref": "#/components/schemas/SubmitScreeningQuesionResultsModel"
          },
          "custom": {
            "$ref": "#/components/schemas/SubmitJobApplicationCustomFieldsModel"
          }
        },
        "additionalProperties": false
      },
      "SubmitJobOrderFeeModel": {
        "type": "object",
        "properties": {
          "rateType": {
            "$ref": "#/components/schemas/JobOrderFeeRateType"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "estimatedTotal": {
            "type": "number",
            "description": "Optional estimated total fee. If not specified it will be calculated from the duration, salary and fee rate.",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitJobOrderSalaryRangeModel": {
        "type": "object",
        "properties": {
          "ratePer": {
            "$ref": "#/components/schemas/SalaryRatePer"
          },
          "rateLow": {
            "maximum": 99999999,
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "rateHigh": {
            "maximum": 99999999,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Optional ISO 4217 3-letter alphabetic currency code",
            "nullable": true
          },
          "timePerWeek": {
            "type": "number",
            "description": "Number of days per week for a daily rate,\r\nhours per day for an hourly rate with a 'Day' duration unit or\r\nhours per day for an hourly rate with a 'Week' duration unit.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitJobOrderSkillTagsModel": {
        "type": "object",
        "properties": {
          "matchAll": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitJobOrderStartModel": {
        "type": "object",
        "properties": {
          "immediate": {
            "type": "boolean"
          },
          "relative": {
            "$ref": "#/components/schemas/SubmitRelativeStartModel"
          },
          "date": {
            "type": "string",
            "description": "The specific date that the job starts",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitLocationModel": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitPlacementBillingModel": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "addressId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "email": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "orderRef": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "PO Number/Reference",
            "nullable": true
          },
          "invoiceRef": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Invoice Number/Reference",
            "nullable": true
          },
          "terms": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Billing payment terms",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "description": "Payment due date",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitPlacementContractRateModel": {
        "type": "object",
        "properties": {
          "ratePer": {
            "$ref": "#/components/schemas/SubmitPlacementContractRatePer"
          },
          "hoursPerWeek": {
            "type": "number",
            "format": "double"
          },
          "daysPerWeek": {
            "type": "number",
            "format": "double"
          },
          "clientRate": {
            "type": "number",
            "format": "double"
          },
          "candidateRate": {
            "type": "number",
            "format": "double"
          },
          "onCostsType": {
            "$ref": "#/components/schemas/RatePortion"
          },
          "onCosts": {
            "type": "number",
            "format": "double"
          },
          "netMargin": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SubmitPlacementContractRatePer": {
        "enum": [
          "Hour",
          "Day"
        ],
        "type": "string",
        "format": "string"
      },
      "SubmitPlacementRecruiterModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Recruiter to be associated with the placement, must also be associated with the related job.",
            "format": "int32"
          },
          "feeSplit": {
            "type": "number",
            "description": "Optional fee portion, 0.0-1.0 (representing 0%-100%) if placement feeSplit='Percent', a currency amount if placement feeSplit='Fixed'",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitPlacementSalaryModel": {
        "type": "object",
        "properties": {
          "base": {
            "type": "number",
            "format": "double"
          },
          "superannuation": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "number",
            "format": "double"
          },
          "fee": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SubmitRelativeStartModel": {
        "type": "object",
        "properties": {
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "$ref": "#/components/schemas/RelativeStartUnit"
          }
        },
        "additionalProperties": false
      },
      "SubmitRequisitionCommand": {
        "type": "object",
        "additionalProperties": false
      },
      "SubmitSalaryModel": {
        "type": "object",
        "properties": {
          "ratePer": {
            "$ref": "#/components/schemas/SalaryRatePer"
          },
          "rate": {
            "maximum": 99999999,
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "Optional ISO 4217 3-letter alphabetic currency code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitSalaryRangeModel": {
        "type": "object",
        "properties": {
          "ratePer": {
            "$ref": "#/components/schemas/SalaryRatePer"
          },
          "rateLow": {
            "maximum": 99999999,
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "rateHigh": {
            "maximum": 99999999,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Optional ISO 4217 3-letter alphabetic currency code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitScreeningQuesionAnswerModel": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "nullable": true
          },
          "answer": {
            "description": "Text or List value answer for this screening question (depending on the question `answerType`)",
            "nullable": true
          },
          "score": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Optional score for this answer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitScreeningQuesionResultsModel": {
        "type": "object",
        "properties": {
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitScreeningQuesionAnswerModel"
            },
            "nullable": true
          },
          "score": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Optional overall score for these screening results",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitSkillsModel": {
        "required": [
          "skillId"
        ],
        "type": "object",
        "properties": {
          "skillId": {
            "type": "integer",
            "description": "Skill for detailed skill classification.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SubmitStatusNoteModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Optional note type",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "Note content",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Optional note"
      },
      "SubmitSubCategoriesModel": {
        "required": [
          "subCategoryId"
        ],
        "type": "object",
        "properties": {
          "subCategoryId": {
            "type": "integer",
            "description": "Sub-category for detailed skill classification.<br />\r\nSpecify a subCategoryId without skills for a broad classification.\r\nThis will remove all previously linked skills associated with the sub-category.",
            "format": "int32"
          },
          "skills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitSkillsModel"
            },
            "description": "Optional list of skills associated with the sub-category for detailed classification",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmitUserModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The user creating the note if not the authenticated user.<br />\r\nSpecify either userId or email."
      },
      "SubmitWebhookEventFilterModel": {
        "type": "object",
        "properties": {
          "jobapplication_status_changed": {
            "$ref": "#/components/schemas/SubmitWebhookEventStatusChangeFilterModel"
          }
        },
        "additionalProperties": false
      },
      "SubmitWebhookEventStatusChangeFilterModel": {
        "type": "object",
        "properties": {
          "statusId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Limit events to a specific status",
            "nullable": true
          },
          "statusActive": {
            "type": "boolean",
            "description": "Limit events to an active/open status"
          }
        },
        "additionalProperties": false
      },
      "SubmitWebhookStatus": {
        "enum": [
          "Enabled",
          "Disabled",
          "Suspended"
        ],
        "type": "string",
        "format": "string"
      },
      "SubmittedJobApplicationLinks": {
        "type": "object",
        "properties": {
          "resume": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "coverLetter": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "other": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmittedJobApplicationModel": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "integer",
            "format": "int64"
          },
          "links": {
            "$ref": "#/components/schemas/SubmittedJobApplicationLinks"
          }
        },
        "additionalProperties": false
      },
      "TimeRangeModel": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "Start time of day interval ([ISO partial-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))",
            "format": "time"
          },
          "end": {
            "type": "string",
            "description": "End time of day interval ([ISO partial-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))",
            "format": "time"
          }
        },
        "additionalProperties": false,
        "description": "Time of day interval"
      },
      "UpdateCandidateAttachmentCommand": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CandidateAttachmentType"
          },
          "category": {
            "type": "string",
            "description": "Optional additional categorization for the attachment type",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCandidateCommand": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "phone": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "salutation": {
            "maxLength": 20,
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "description": "Candidate status",
            "format": "int32",
            "nullable": true
          },
          "rating": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "seeking": {
            "$ref": "#/components/schemas/CandidateSeekingStatus"
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "emergencyContact": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "emergencyPhone": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "social": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri"
            },
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/SubmitAddressModel"
          },
          "skillTags": {
            "maxLength": 100,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "employment": {
            "$ref": "#/components/schemas/SubmitEmploymentModel"
          },
          "availability": {
            "$ref": "#/components/schemas/SubmitCandidateAvailabilityModel"
          },
          "education": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCandidateEducationModel"
            },
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "nullable": true
          },
          "recruiterUserId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCandidatePartnerActionCommand": {
        "type": "object",
        "properties": {
          "status": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional partner defined action status/progress",
            "nullable": true
          },
          "result": {
            "$ref": "#/components/schemas/PartnerActionResultCommandModel"
          }
        },
        "additionalProperties": false
      },
      "UpdateCandidateSkillsCommand": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCategoriesModel"
            },
            "description": "Skill categories to update for this candidate.<br />\r\nOnly skills and sub-categories for the submitted categories will be modified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCandidateUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCompanyAddressCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "isPrimaryAddress": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UpdateCompanyAttachmentCommand": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CompanyAttachmentType"
          },
          "category": {
            "type": "string",
            "description": "Optional additional categorization for the attachment type",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCompanyCommand": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "mainContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "primaryAddressId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "parentCompanyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "legalName": {
            "maxLength": 200,
            "type": "string",
            "description": "Company LegalName",
            "nullable": true
          },
          "social": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri"
            },
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "description": "Company status",
            "format": "int32",
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "description": "Custom field values. Only the specified fields will be updated, each fieldId can specified once.",
            "nullable": true
          },
          "ownerUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "recruiterUserId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCompanyPartnerActionCommand": {
        "type": "object",
        "properties": {
          "status": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional partner defined action status/progress",
            "nullable": true
          },
          "result": {
            "$ref": "#/components/schemas/PartnerActionResultCommandModel"
          }
        },
        "additionalProperties": false
      },
      "UpdateCompanyUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCompanyWorkflowCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "approvers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCompanyWorkflowApproverModel"
            },
            "description": "Approvers for this workflow. Only the specified workflow stages will be updated, each stageIndex can be specified once.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateContactAttachmentCommand": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ContactAttachmentType"
          },
          "category": {
            "type": "string",
            "description": "Optional additional categorization for the attachment type",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateContactCommand": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "phone": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "salutation": {
            "maxLength": 20,
            "type": "string",
            "description": "Salutation/honorific/title",
            "nullable": true
          },
          "unsubscribed": {
            "type": "boolean"
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "social": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri"
            },
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reportsToContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "officeAddressId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "description": "Contact status",
            "format": "int32",
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "nullable": true
          },
          "ownerUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "recruiterUserId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateContactPartnerActionCommand": {
        "type": "object",
        "properties": {
          "status": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional partner defined action status/progress",
            "nullable": true
          },
          "result": {
            "$ref": "#/components/schemas/PartnerActionResultCommandModel"
          }
        },
        "additionalProperties": false
      },
      "UpdateContactSkillsCommand": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCategoriesModel"
            },
            "description": "Skill categories to update for this contact.<br />\r\nOnly skills and sub-categories for the submitted categories will be modified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateContactUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateJobAdDraftCommand": {
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "summary": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "bulletPoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "jobId": {
            "type": "integer",
            "description": "Associated job",
            "format": "int32"
          },
          "ownerUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "UpdateJobAdPartnerActionCommand": {
        "type": "object",
        "properties": {
          "status": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional partner defined action status/progress",
            "nullable": true
          },
          "result": {
            "$ref": "#/components/schemas/PartnerActionResultCommandModel"
          }
        },
        "additionalProperties": false
      },
      "UpdateJobApplicationAttachmentCommand": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CandidateAttachmentType"
          },
          "category": {
            "type": "string",
            "description": "Optional additional categorization for the attachment type",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateJobApplicationCommand": {
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "description": "Job application status",
            "format": "int32"
          },
          "rating": {
            "maximum": 10,
            "minimum": 0,
            "type": "integer",
            "description": "Job application rating",
            "format": "int32"
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateJobApplicationInterviewCommand": {
        "type": "object",
        "properties": {
          "startAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Interview start time. The allowed minutes for the time are 0, 15, 30 and 45.",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Interview end time. The allowed minutes for the time are 0, 15, 30 and 45.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UpdateJobApplicationPartnerActionCommand": {
        "type": "object",
        "properties": {
          "status": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional partner defined action status/progress",
            "nullable": true
          },
          "result": {
            "$ref": "#/components/schemas/PartnerActionResultCommandModel"
          }
        },
        "additionalProperties": false
      },
      "UpdateJobApplicationUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateJobOrderAttachmentCommand": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/JobOrderAttachmentType"
          },
          "category": {
            "type": "string",
            "description": "Optional additional categorization for the attachment type",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateJobOrderCommand": {
        "required": [
          "jobTitle"
        ],
        "type": "object",
        "properties": {
          "jobTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "jobDescription": {
            "type": "string",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "description": "Job status",
            "format": "int32",
            "nullable": true
          },
          "userFavourite": {
            "type": "boolean",
            "description": "Job is a favourite for the current user",
            "nullable": true
          },
          "category": {
            "$ref": "#/components/schemas/SubmitCategoryModel"
          },
          "location": {
            "$ref": "#/components/schemas/SubmitLocationModel"
          },
          "workplaceAddressId": {
            "type": "string",
            "description": "Workplace Address Id",
            "format": "uuid",
            "nullable": true
          },
          "start": {
            "$ref": "#/components/schemas/SubmitJobOrderStartModel"
          },
          "duration": {
            "$ref": "#/components/schemas/SubmitDurationModel"
          },
          "workTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "salary": {
            "$ref": "#/components/schemas/SubmitJobOrderSalaryRangeModel"
          },
          "fee": {
            "$ref": "#/components/schemas/SubmitJobOrderFeeModel"
          },
          "numberOfJobs": {
            "type": "integer",
            "format": "int32"
          },
          "source": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "nullable": true
          },
          "skillTags": {
            "$ref": "#/components/schemas/SubmitJobOrderSkillTagsModel"
          },
          "ownerUserId": {
            "type": "integer",
            "description": "User Id - Owner of this job",
            "format": "int32"
          },
          "recruiterUserId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "User Id - Optional list of recruiters assigned to the job",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateJobOrderPartnerActionCommand": {
        "type": "object",
        "properties": {
          "status": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional partner defined action status/progress",
            "nullable": true
          },
          "result": {
            "$ref": "#/components/schemas/PartnerActionResultCommandModel"
          }
        },
        "additionalProperties": false
      },
      "UpdateJobOrderUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateNoteCommand": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Note type",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "Note content",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateOpportunityCommand": {
        "required": [
          "companyId",
          "opportunityTitle",
          "ownerUserIds",
          "stageId"
        ],
        "type": "object",
        "properties": {
          "opportunityTitle": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "workTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stageId": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "estimatedClose": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ownerUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalInformation": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePartnerActionCommand": {
        "required": [
          "actionName"
        ],
        "type": "object",
        "properties": {
          "actionName": {
            "maxLength": 100,
            "type": "string",
            "description": "Menu item label that will appear to the end-user",
            "nullable": true
          },
          "reference": {
            "maxLength": 100,
            "type": "string",
            "description": "Unique partner defined reference/identifier for the action",
            "nullable": true
          },
          "url": {
            "maxLength": 500,
            "type": "string",
            "description": "URL to open after the action is selected and assigned the `\"Submitted\"` stage.\\\r\nTemplates parameters can be used in the URL to identify the resource submitted to the action\r\n<table><tr><td>`{userId}`</td><td>Replaced with the User Id of the user performing the action</td></tr><tr><td>`{jobId}`</td><td>Replaced with the Job Id</td></tr><tr><td>`{adId}`</td><td>Replaced with the Job Ad Id</td></tr><tr><td>`{candidateId}`</td><td>Replaced with the Candidate Id</td></tr><tr><td>`{applicationId}`</td><td>Replaced with the Job Application Id</td></tr><tr><td>`{placementId}`</td><td>Replaced with the Placement Id</td></tr><tr><td>`{companyId}`</td><td>Replaced with the Company Id</td></tr><tr><td>`{contactId}`</td><td>Replaced with the Contact Id</td></tr></table>",
            "format": "uri",
            "nullable": true
          },
          "urlType": {
            "$ref": "#/components/schemas/PartnerActionUrlType"
          },
          "allowResubmit": {
            "type": "boolean",
            "description": "Allow resources to be resubmitted to an action."
          },
          "actionFilter": {
            "$ref": "#/components/schemas/PartnerActionFilterModel"
          },
          "webhookData": {
            "description": "Additional data to include with the webhook notification",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePlacementAttachmentCommand": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PlacementAttachmentType"
          },
          "category": {
            "type": "string",
            "description": "Optional additional categorization for the attachment type",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePlacementCommand": {
        "required": [
          "jobTitle"
        ],
        "type": "object",
        "properties": {
          "jobTitle": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "description": "Placement status",
            "format": "int32",
            "nullable": true
          },
          "paymentType": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "properties": {
              "timeOfDay": {
                "format": "time"
              }
            },
            "description": "Date employment begins",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "Date a contract or temporary employment ends",
            "format": "date",
            "nullable": true
          },
          "salary": {
            "$ref": "#/components/schemas/SubmitPlacementSalaryModel"
          },
          "contractRate": {
            "$ref": "#/components/schemas/SubmitPlacementContractRateModel"
          },
          "award": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "industryCode": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "billing": {
            "$ref": "#/components/schemas/SubmitPlacementBillingModel"
          },
          "feeSplit": {
            "$ref": "#/components/schemas/RatePortion"
          },
          "recruiters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitPlacementRecruiterModel"
            },
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePlacementPartnerActionCommand": {
        "type": "object",
        "properties": {
          "status": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional partner defined action status/progress",
            "nullable": true
          },
          "result": {
            "$ref": "#/components/schemas/PartnerActionResultCommandModel"
          }
        },
        "additionalProperties": false
      },
      "UpdatePlacementUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "candidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateRequisitionCommand": {
        "required": [
          "jobTitle"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Optional contact associated with the change, must be associated with the same company as the requisition.",
            "format": "int32",
            "nullable": true
          },
          "jobTitle": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "jobDescription": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "$ref": "#/components/schemas/SubmitCategoryModel"
          },
          "location": {
            "$ref": "#/components/schemas/SubmitLocationModel"
          },
          "workplaceAddressId": {
            "type": "string",
            "description": "Workplace address Id",
            "format": "uuid",
            "nullable": true
          },
          "start": {
            "$ref": "#/components/schemas/SubmitJobOrderStartModel"
          },
          "duration": {
            "$ref": "#/components/schemas/SubmitDurationModel"
          },
          "workTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "salary": {
            "$ref": "#/components/schemas/SubmitJobOrderSalaryRangeModel"
          },
          "numberOfJobs": {
            "type": "integer",
            "format": "int32"
          },
          "source": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitCustomFieldValueModel"
            },
            "nullable": true
          },
          "workflowId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "recruiterUserId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "User Id - Optional list of recruiters assigned to the requisition.",
            "nullable": true
          },
          "formID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateUserTaskCommand": {
        "required": [
          "title",
          "assignees"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "priority": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdateWebhookCommand": {
        "required": [
          "name",
          "events"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventName"
            },
            "nullable": true
          },
          "eventFilters": {
            "$ref": "#/components/schemas/SubmitWebhookEventFilterModel"
          },
          "url": {
            "type": "string",
            "description": "Target URL that will listen for incoming HTTP POST notification messages.",
            "format": "uri",
            "nullable": true
          },
          "authorization": {
            "type": "string",
            "description": "Optional authorization header to include with the HTTP POST notification.",
            "nullable": true,
            "example": "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
          },
          "status": {
            "$ref": "#/components/schemas/SubmitWebhookStatus"
          }
        },
        "additionalProperties": false
      },
      "UserGroupLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "users": {
            "type": "string",
            "description": "Users belonging to the group",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "UserGroupListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "UserGroupRepresentation": {
        "required": [
          "groupId",
          "name"
        ],
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSummaryModel"
            },
            "description": "Users belonging to the group",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/UserGroupLinks"
          }
        }
      },
      "UserGroupSummaryModel": {
        "required": [
          "groupId",
          "name"
        ],
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "photo": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "office": {
            "type": "string",
            "description": "Office the user belongs to",
            "format": "uri",
            "nullable": true
          },
          "userGroups": {
            "type": "string",
            "description": "User groups the user belongs to",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "UserListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "UserMatchedByEmailModel": {
        "type": "object",
        "properties": {
          "match": {
            "$ref": "#/components/schemas/MatchedEmailAddressModel"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "inactive": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserMatchedByPhoneModel": {
        "type": "object",
        "properties": {
          "match": {
            "$ref": "#/components/schemas/MatchedPhoneNumberModel"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "inactive": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserNameModel": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "inactive": {
            "type": "boolean",
            "default": false
          },
          "deleted": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "UserOfficeLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "users": {
            "type": "string",
            "description": "Users belonging to the office",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "UserOfficeListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserOfficeNameModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "UserOfficeNameModel": {
        "required": [
          "name",
          "officeId"
        ],
        "type": "object",
        "properties": {
          "officeId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserOfficeRepresentation": {
        "required": [
          "name",
          "officeId"
        ],
        "type": "object",
        "properties": {
          "officeId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "street": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "description": "Users belonging to the office",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/UserOfficeLinks"
          }
        }
      },
      "UserOfficeSummaryModel": {
        "required": [
          "name",
          "officeId"
        ],
        "type": "object",
        "properties": {
          "officeId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "street": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRepresentation": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "inactive": {
            "type": "boolean",
            "default": false
          },
          "deleted": {
            "type": "boolean",
            "default": false
          },
          "mentionName": {
            "type": "string",
            "nullable": true
          },
          "office": {
            "$ref": "#/components/schemas/UserOfficeSummaryModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          },
          "culture": {
            "type": "string",
            "nullable": true
          },
          "admin": {
            "type": "boolean",
            "default": false
          },
          "accountName": {
            "type": "string",
            "nullable": true
          },
          "userGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupSummaryModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/UserLinks"
          }
        }
      },
      "UserSummaryModel": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "inactive": {
            "type": "boolean",
            "default": false
          },
          "deleted": {
            "type": "boolean",
            "default": false
          },
          "mentionName": {
            "type": "string",
            "nullable": true
          },
          "office": {
            "$ref": "#/components/schemas/UserOfficeSummaryModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UserTaskLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "note": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "UserTaskListRepresentation": {
        "required": [
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTaskSummaryModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        },
        "additionalProperties": false
      },
      "UserTaskModel": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserTaskRepresentation": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOrderTitleModel"
            },
            "nullable": true
          },
          "requisitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequisitionSummaryModel"
            },
            "nullable": true
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateNameModel"
            },
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationSummaryModel"
            },
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementSummaryModel"
            },
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyNameModel"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNameModel"
            },
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/UserTaskLinks"
          }
        }
      },
      "UserTaskSummaryModel": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allDay": {
            "type": "boolean"
          },
          "reminderMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNameModel"
            },
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserNameModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookEventFilterModel": {
        "type": "object",
        "properties": {
          "jobapplication_status_changed": {
            "$ref": "#/components/schemas/WebhookEventStatusChangeFilterModel"
          }
        },
        "additionalProperties": false
      },
      "WebhookEventStatusChangeFilterModel": {
        "type": "object",
        "properties": {
          "statusId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Limit events to a specific status",
            "nullable": true
          },
          "statusActive": {
            "type": "boolean",
            "description": "Limit events to an active/open status"
          }
        },
        "additionalProperties": false
      },
      "WebhookListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "WebhookModel": {
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/WebhookStatus"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventName"
            },
            "nullable": true,
            "readOnly": true
          },
          "eventFilters": {
            "$ref": "#/components/schemas/WebhookEventFilterModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "enabledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disabledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "suspendedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "failedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookRepresentation": {
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/WebhookStatus"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventName"
            },
            "nullable": true,
            "readOnly": true
          },
          "eventFilters": {
            "$ref": "#/components/schemas/WebhookEventFilterModel"
          },
          "createdAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "properties": {
              "offset": {
                "format": "time"
              },
              "timeOfDay": {
                "format": "time"
              }
            },
            "format": "date-time"
          },
          "enabledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disabledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "suspendedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "failedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "WebhookStatus": {
        "enum": [
          "Enabled",
          "Disabled",
          "Suspended",
          "Failed"
        ],
        "type": "string",
        "format": "string"
      },
      "WorkTypeListRepresentation": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkTypeModel"
            },
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/ModelLinks"
          }
        },
        "additionalProperties": false
      },
      "WorkTypeModel": {
        "required": [
          "name",
          "workTypeId"
        ],
        "type": "object",
        "properties": {
          "workTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "ratePer": {
            "$ref": "#/components/schemas/SalaryRatePer"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "jobadder_identity": {
        "type": "oauth2",
        "description": "OAuth2 Authorization Code Flow",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://id.jobadder.com/connect/authorize",
            "tokenUrl": "https://id.jobadder.com/connect/token",
            "scopes": {
              "read": "View JobAdder data",
              "write": "Manage JobAdder data",
              "read_candidate": "View candidates",
              "write_candidate": "Manage candidates",
              "manage_candidate_custom": "Manage candidate custom fields",
              "read_candidate_note": "View candidate notes",
              "write_candidate_note": "Manage candidate notes",
              "read_company": "View companies",
              "write_company": "Manage companies",
              "manage_company_custom": "Manage company custom fields",
              "read_company_note": "View company notes",
              "write_company_note": "Manage company notes",
              "read_contact": "View contacts",
              "write_contact": "Manage contacts",
              "manage_contact_custom": "Manage contact custom fields",
              "read_contact_note": "View contact notes",
              "write_contact_note": "Manage contact notes",
              "read_float": "View floats",
              "read_folder": "View folders",
              "write_folder": "Manage folders",
              "read_interview": "View job interviews",
              "write_interview": "Manage job interviews",
              "read_job": "View jobs",
              "write_job": "Manage jobs",
              "manage_job_custom": "Manage job custom fields",
              "read_job_note": "View job notes",
              "write_job_note": "Manage job notes",
              "read_jobad": "View job ads",
              "write_jobad": "Manage job ads",
              "read_jobapplication": "View job applications",
              "write_jobapplication": "Manage job applications",
              "manage_jobapplication_custom": "Manage job application custom fields",
              "read_jobapplication_note": "View job application notes",
              "write_jobapplication_note": "Manage job application notes",
              "read_note": "View notes",
              "write_note": "Manage notes",
              "read_opportunity": "View opportunities",
              "write_opportunity": "Manage opportunities",
              "read_placement": "View placements",
              "write_placement": "Manage placements",
              "manage_placement_custom": "Manage placement custom fields",
              "read_placement_note": "View placement notes",
              "write_placement_note": "Manage placement notes",
              "read_requisition": "View requisitions",
              "write_requisition": "Manage requisitions",
              "read_requisition_note": "View requisition notes",
              "write_requisition_note": "Manage requisition notes",
              "write_sms": "Send sms",
              "read_submission": "View submissions",
              "read_user": "View users",
              "read_usergroup": "View user groups",
              "write_usertask": "write_usertask",
              "read_usertask": "View user tasks",
              "partner_jobboard": "View active job ads and submit job applications",
              "partner_ui_action": "Add partner actions to JobAdder",
              "offline_access": "Access JobAdder data for an extended period of time, must always be combined with other scopes"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Candidate API:Candidates",
      "x-displayName": "Candidates"
    },
    {
      "name": "Candidate API:Photo",
      "x-displayName": "Photo"
    },
    {
      "name": "Candidate API:Availability",
      "x-displayName": "Availability"
    },
    {
      "name": "Candidate API:Videos",
      "x-displayName": "Videos"
    },
    {
      "name": "Candidate API:Skills",
      "x-displayName": "Skills"
    },
    {
      "name": "Candidate API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Candidate API:Floats",
      "x-displayName": "Floats"
    },
    {
      "name": "Candidate API:Job Applications",
      "x-displayName": "Job Applications"
    },
    {
      "name": "Candidate API:Interviews",
      "x-displayName": "Interviews"
    },
    {
      "name": "Candidate API:Submissions",
      "x-displayName": "Submissions"
    },
    {
      "name": "Candidate API:Placements",
      "x-displayName": "Placements"
    },
    {
      "name": "Candidate API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Candidate API:Privacy",
      "x-displayName": "Privacy"
    },
    {
      "name": "Candidate API:Activities",
      "x-displayName": "Activities"
    },
    {
      "name": "Candidate API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Candidate API:Payroll Billing",
      "x-displayName": "Payroll Billing"
    },
    {
      "name": "Candidate API:UserTasks",
      "x-displayName": "UserTasks"
    },
    {
      "name": "Candidate Float API:Floats",
      "x-displayName": "Floats"
    },
    {
      "name": "Candidate Submission API:Submissions",
      "x-displayName": "Submissions"
    },
    {
      "name": "Category API:Categories",
      "x-displayName": "Categories"
    },
    {
      "name": "Company API:Companies",
      "x-displayName": "Companies"
    },
    {
      "name": "Company API:Logo",
      "x-displayName": "Logo"
    },
    {
      "name": "Company API:Addresses",
      "x-displayName": "Addresses"
    },
    {
      "name": "Company API:Skills",
      "x-displayName": "Skills"
    },
    {
      "name": "Company API:Contacts",
      "x-displayName": "Contacts"
    },
    {
      "name": "Company API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Company API:Jobs",
      "x-displayName": "Jobs"
    },
    {
      "name": "Company API:Requisitions",
      "x-displayName": "Requisitions"
    },
    {
      "name": "Company API:Floats",
      "x-displayName": "Floats"
    },
    {
      "name": "Company API:Submissions",
      "x-displayName": "Submissions"
    },
    {
      "name": "Company API:Placements",
      "x-displayName": "Placements"
    },
    {
      "name": "Company API:Workflows",
      "x-displayName": "Workflows"
    },
    {
      "name": "Company API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Company API:Activities",
      "x-displayName": "Activities"
    },
    {
      "name": "Company API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Company API:UserTasks",
      "x-displayName": "UserTasks"
    },
    {
      "name": "Contact API:Contacts",
      "x-displayName": "Contacts"
    },
    {
      "name": "Contact API:Jobs",
      "x-displayName": "Jobs"
    },
    {
      "name": "Contact API:Interviews",
      "x-displayName": "Interviews"
    },
    {
      "name": "Contact API:Skills",
      "x-displayName": "Skills"
    },
    {
      "name": "Contact API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Contact API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Contact API:Activities",
      "x-displayName": "Activities"
    },
    {
      "name": "Contact API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Contact API:UserTasks",
      "x-displayName": "UserTasks"
    },
    {
      "name": "Folder API:Folders",
      "x-displayName": "Folders"
    },
    {
      "name": "Interview API:Interviews",
      "x-displayName": "Interviews"
    },
    {
      "name": "Interview API:Evaluations",
      "x-displayName": "Evaluations"
    },
    {
      "name": "Job Ad API:Job Ads",
      "x-displayName": "Job Ads"
    },
    {
      "name": "Job Ad API:Job Applications",
      "x-displayName": "Job Applications"
    },
    {
      "name": "Job API:Jobs",
      "x-displayName": "Jobs"
    },
    {
      "name": "Job API:Job Applications",
      "x-displayName": "Job Applications"
    },
    {
      "name": "Job API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Job API:Submissions",
      "x-displayName": "Submissions"
    },
    {
      "name": "Job API:Placements",
      "x-displayName": "Placements"
    },
    {
      "name": "Job API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Job API:Activities",
      "x-displayName": "Activities"
    },
    {
      "name": "Job API:Invoices",
      "x-displayName": "Invoices"
    },
    {
      "name": "Job API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Job API:Payroll Billing",
      "x-displayName": "Payroll Billing"
    },
    {
      "name": "Job API:UserTasks",
      "x-displayName": "UserTasks"
    },
    {
      "name": "Job Application API:Job Applications",
      "x-displayName": "Job Applications"
    },
    {
      "name": "Job Application API:Videos",
      "x-displayName": "Videos"
    },
    {
      "name": "Job Application API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Job Application API:Review",
      "x-displayName": "Review"
    },
    {
      "name": "Job Application API:Interviews",
      "x-displayName": "Interviews"
    },
    {
      "name": "Job Application API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Job Application API:Activities",
      "x-displayName": "Activities"
    },
    {
      "name": "Job Application API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Job Application API:UserTasks",
      "x-displayName": "UserTasks"
    },
    {
      "name": "Job Board API:Job Boards",
      "x-displayName": "Job Boards"
    },
    {
      "name": "Job Board API:Job Ads",
      "x-displayName": "Job Ads"
    },
    {
      "name": "Job Board API:Job Applications",
      "x-displayName": "Job Applications"
    },
    {
      "name": "Location API:Countries",
      "x-displayName": "Countries"
    },
    {
      "name": "Location API:Locations",
      "x-displayName": "Locations"
    },
    {
      "name": "Note API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Note API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Partner Action API:Actions",
      "x-displayName": "Actions"
    },
    {
      "name": "Partner Action API:Candidates",
      "x-displayName": "Candidates"
    },
    {
      "name": "Partner Action API:Companies",
      "x-displayName": "Companies"
    },
    {
      "name": "Partner Action API:Contacts",
      "x-displayName": "Contacts"
    },
    {
      "name": "Partner Action API:Job Ads",
      "x-displayName": "Job Ads"
    },
    {
      "name": "Partner Action API:Job Applications",
      "x-displayName": "Job Applications"
    },
    {
      "name": "Partner Action API:Jobs",
      "x-displayName": "Jobs"
    },
    {
      "name": "Partner Action API:Placements",
      "x-displayName": "Placements"
    },
    {
      "name": "Placement API:Placements",
      "x-displayName": "Placements"
    },
    {
      "name": "Placement API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Placement API:Timesheets",
      "x-displayName": "Timesheets"
    },
    {
      "name": "Placement API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Placement API:Activities",
      "x-displayName": "Activities"
    },
    {
      "name": "Placement API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Placement API:UserTasks",
      "x-displayName": "UserTasks"
    },
    {
      "name": "Requisition API:Requisitions",
      "x-displayName": "Requisitions"
    },
    {
      "name": "Requisition API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Requisition API:Approval",
      "x-displayName": "Approval"
    },
    {
      "name": "Requisition API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Requisition API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Search API:Search",
      "x-displayName": "Search"
    },
    {
      "name": "User API:Users",
      "x-displayName": "Users"
    },
    {
      "name": "User API:Tasks",
      "x-displayName": "Tasks"
    },
    {
      "name": "User API:Interviews",
      "x-displayName": "Interviews"
    },
    {
      "name": "User API:Groups",
      "x-displayName": "Groups"
    },
    {
      "name": "User Group API:Groups",
      "x-displayName": "Groups"
    },
    {
      "name": "User Group API:Users",
      "x-displayName": "Users"
    },
    {
      "name": "User Office API:Offices",
      "x-displayName": "Offices"
    },
    {
      "name": "User Office API:Users",
      "x-displayName": "Users"
    },
    {
      "name": "User Task API:Tasks",
      "x-displayName": "Tasks"
    },
    {
      "name": "Webhook API:Webhooks",
      "x-displayName": "Webhooks"
    },
    {
      "name": "Work Type API:Work Types",
      "x-displayName": "Work Types"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Job Board API",
      "tags": [
        "Job Board API:Job Boards",
        "Job Board API:Job Ads",
        "Job Board API:Job Applications"
      ]
    },
    {
      "name": "Job API",
      "tags": [
        "Job API:Jobs",
        "Job API:Job Applications",
        "Job API:Attachments",
        "Job API:Submissions",
        "Job API:Placements",
        "Job API:Notes",
        "Job API:Activities",
        "Job API:Invoices",
        "Job API:Lists",
        "Job API:Payroll Billing",
        "Job API:UserTasks"
      ]
    },
    {
      "name": "Requisition API",
      "tags": [
        "Requisition API:Requisitions",
        "Requisition API:Attachments",
        "Requisition API:Approval",
        "Requisition API:Notes",
        "Requisition API:Lists"
      ]
    },
    {
      "name": "Job Ad API",
      "tags": [
        "Job Ad API:Job Ads",
        "Job Ad API:Job Applications"
      ]
    },
    {
      "name": "Candidate API",
      "tags": [
        "Candidate API:Candidates",
        "Candidate API:Photo",
        "Candidate API:Availability",
        "Candidate API:Videos",
        "Candidate API:Skills",
        "Candidate API:Attachments",
        "Candidate API:Floats",
        "Candidate API:Job Applications",
        "Candidate API:Interviews",
        "Candidate API:Submissions",
        "Candidate API:Placements",
        "Candidate API:Notes",
        "Candidate API:Privacy",
        "Candidate API:Activities",
        "Candidate API:Lists",
        "Candidate API:Payroll Billing",
        "Candidate API:UserTasks"
      ]
    },
    {
      "name": "Candidate Float API",
      "tags": [
        "Candidate Float API:Floats"
      ]
    },
    {
      "name": "Candidate Submission API",
      "tags": [
        "Candidate Submission API:Submissions"
      ]
    },
    {
      "name": "Job Application API",
      "tags": [
        "Job Application API:Job Applications",
        "Job Application API:Videos",
        "Job Application API:Attachments",
        "Job Application API:Review",
        "Job Application API:Interviews",
        "Job Application API:Notes",
        "Job Application API:Activities",
        "Job Application API:Lists",
        "Job Application API:UserTasks"
      ]
    },
    {
      "name": "Placement API",
      "tags": [
        "Placement API:Placements",
        "Placement API:Attachments",
        "Placement API:Timesheets",
        "Placement API:Notes",
        "Placement API:Activities",
        "Placement API:Lists",
        "Placement API:UserTasks"
      ]
    },
    {
      "name": "Company API",
      "tags": [
        "Company API:Companies",
        "Company API:Logo",
        "Company API:Addresses",
        "Company API:Skills",
        "Company API:Contacts",
        "Company API:Attachments",
        "Company API:Jobs",
        "Company API:Requisitions",
        "Company API:Floats",
        "Company API:Submissions",
        "Company API:Placements",
        "Company API:Workflows",
        "Company API:Notes",
        "Company API:Activities",
        "Company API:Lists",
        "Company API:UserTasks"
      ]
    },
    {
      "name": "Contact API",
      "tags": [
        "Contact API:Contacts",
        "Contact API:Jobs",
        "Contact API:Interviews",
        "Contact API:Skills",
        "Contact API:Attachments",
        "Contact API:Notes",
        "Contact API:Activities",
        "Contact API:Lists",
        "Contact API:UserTasks"
      ]
    },
    {
      "name": "Note API",
      "tags": [
        "Note API:Notes",
        "Note API:Attachments"
      ]
    },
    {
      "name": "Folder API",
      "tags": [
        "Folder API:Folders"
      ]
    },
    {
      "name": "User API",
      "tags": [
        "User API:Users",
        "User API:Tasks",
        "User API:Interviews",
        "User API:Groups"
      ]
    },
    {
      "name": "User Group API",
      "tags": [
        "User Group API:Groups",
        "User Group API:Users"
      ]
    },
    {
      "name": "User Office API",
      "tags": [
        "User Office API:Offices",
        "User Office API:Users"
      ]
    },
    {
      "name": "User Task API",
      "tags": [
        "User Task API:Tasks"
      ]
    },
    {
      "name": "Interview API",
      "tags": [
        "Interview API:Interviews",
        "Interview API:Evaluations"
      ]
    },
    {
      "name": "Category API",
      "tags": [
        "Category API:Categories"
      ]
    },
    {
      "name": "Location API",
      "tags": [
        "Location API:Countries",
        "Location API:Locations"
      ]
    },
    {
      "name": "Work Type API",
      "tags": [
        "Work Type API:Work Types"
      ]
    },
    {
      "name": "Search API",
      "tags": [
        "Search API:Search"
      ]
    },
    {
      "name": "Partner Action API",
      "tags": [
        "Partner Action API:Actions",
        "Partner Action API:Candidates",
        "Partner Action API:Companies",
        "Partner Action API:Contacts",
        "Partner Action API:Job Ads",
        "Partner Action API:Job Applications",
        "Partner Action API:Jobs",
        "Partner Action API:Placements"
      ]
    },
    {
      "name": "Webhook API",
      "tags": [
        "Webhook API:Webhooks"
      ]
    }
  ]
}
