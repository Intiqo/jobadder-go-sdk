// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Jobadder_identityScopes = "jobadder_identity.Scopes"
)

// Defines values for CandidateAttachmentType.
const (
	CandidateAttachmentTypeCheck           CandidateAttachmentType = "Check"
	CandidateAttachmentTypeCoverLetter     CandidateAttachmentType = "CoverLetter"
	CandidateAttachmentTypeFormattedResume CandidateAttachmentType = "FormattedResume"
	CandidateAttachmentTypeLicense         CandidateAttachmentType = "License"
	CandidateAttachmentTypeOther           CandidateAttachmentType = "Other"
	CandidateAttachmentTypeReference       CandidateAttachmentType = "Reference"
	CandidateAttachmentTypeResume          CandidateAttachmentType = "Resume"
	CandidateAttachmentTypeScreening       CandidateAttachmentType = "Screening"
)

// Defines values for CandidateSeekingStatus.
const (
	Maybe CandidateSeekingStatus = "Maybe"
	No    CandidateSeekingStatus = "No"
	Yes   CandidateSeekingStatus = "Yes"
)

// Defines values for CandidateVideoType.
const (
	CandidateVideoTypeCoverLetter CandidateVideoType = "CoverLetter"
	CandidateVideoTypeOther       CandidateVideoType = "Other"
	CandidateVideoTypeProfile     CandidateVideoType = "Profile"
)

// Defines values for CompanyAttachmentType.
const (
	CompanyAttachmentTypeOther CompanyAttachmentType = "Other"
	CompanyAttachmentTypeTerms CompanyAttachmentType = "Terms"
)

// Defines values for CompanyWorkflowType.
const (
	Requisition CompanyWorkflowType = "Requisition"
)

// Defines values for ContactAttachmentType.
const (
	ContactAttachmentTypeOther ContactAttachmentType = "Other"
	ContactAttachmentTypeTerms ContactAttachmentType = "Terms"
)

// Defines values for CustomFieldType.
const (
	CustomFieldTypeDate   CustomFieldType = "Date"
	CustomFieldTypeList   CustomFieldType = "List"
	CustomFieldTypeLookup CustomFieldType = "Lookup"
	CustomFieldTypeText   CustomFieldType = "Text"
	CustomFieldTypeUrl    CustomFieldType = "Url"
)

// Defines values for DayOfWeek.
const (
	Friday    DayOfWeek = "Friday"
	Monday    DayOfWeek = "Monday"
	Saturday  DayOfWeek = "Saturday"
	Sunday    DayOfWeek = "Sunday"
	Thursday  DayOfWeek = "Thursday"
	Tuesday   DayOfWeek = "Tuesday"
	Wednesday DayOfWeek = "Wednesday"
)

// Defines values for DurationUnit.
const (
	DurationUnitDay   DurationUnit = "Day"
	DurationUnitHour  DurationUnit = "Hour"
	DurationUnitMonth DurationUnit = "Month"
	DurationUnitWeek  DurationUnit = "Week"
)

// Defines values for EmailAddressMatchType.
const (
	Email      EmailAddressMatchType = "Email"
	OtherEmail EmailAddressMatchType = "OtherEmail"
)

// Defines values for ErrorCode.
const (
	AlreadyExists ErrorCode = "AlreadyExists"
	Invalid       ErrorCode = "Invalid"
	Missing       ErrorCode = "Missing"
	MissingField  ErrorCode = "MissingField"
)

// Defines values for EventName.
const (
	CandidatePartnerAction       EventName = "candidate_partner_action"
	CandidateStatusChanged       EventName = "candidate_status_changed"
	CandidateUpdated             EventName = "candidate_updated"
	CompanyPartnerAction         EventName = "company_partner_action"
	CompanyStatusChanged         EventName = "company_status_changed"
	ContactPartnerAction         EventName = "contact_partner_action"
	ContactStatusChanged         EventName = "contact_status_changed"
	FolderCandidateAdded         EventName = "folder_candidate_added"
	FolderCandidateRemoved       EventName = "folder_candidate_removed"
	FolderCompanyAdded           EventName = "folder_company_added"
	FolderCompanyRemoved         EventName = "folder_company_removed"
	FolderContactAdded           EventName = "folder_contact_added"
	FolderContactRemoved         EventName = "folder_contact_removed"
	FolderJobAdded               EventName = "folder_job_added"
	FolderJobRemoved             EventName = "folder_job_removed"
	FolderJobapplicationAdded    EventName = "folder_jobapplication_added"
	FolderJobapplicationRemoved  EventName = "folder_jobapplication_removed"
	FolderPlacementAdded         EventName = "folder_placement_added"
	FolderPlacementRemoved       EventName = "folder_placement_removed"
	FolderUpdated                EventName = "folder_updated"
	InterviewEvaluationSubmitted EventName = "interview_evaluation_submitted"
	InterviewScheduled           EventName = "interview_scheduled"
	JobInvoiceSent               EventName = "job_invoice_sent"
	JobPartnerAction             EventName = "job_partner_action"
	JobStatusChanged             EventName = "job_status_changed"
	JobadExpired                 EventName = "jobad_expired"
	JobadPartnerAction           EventName = "jobad_partner_action"
	JobadPosted                  EventName = "jobad_posted"
	JobapplicationPartnerAction  EventName = "jobapplication_partner_action"
	JobapplicationStatusChanged  EventName = "jobapplication_status_changed"
	PlacementApproved            EventName = "placement_approved"
	PlacementPartnerAction       EventName = "placement_partner_action"
	PlacementStatusChanged       EventName = "placement_status_changed"
	SmsSent                      EventName = "sms_sent"
	UserSuspended                EventName = "user_suspended"
)

// Defines values for FindCategoriesEmbed.
const (
	Skills        FindCategoriesEmbed = "Skills"
	SubCategories FindCategoriesEmbed = "SubCategories"
)

// Defines values for FindCompanyWorkflowsInclude.
const (
	Archived FindCompanyWorkflowsInclude = "Archived"
)

// Defines values for FindLocationsEmbed.
const (
	Areas FindLocationsEmbed = "Areas"
)

// Defines values for FindPlacementByExport.
const (
	Onboarding FindPlacementByExport = "Onboarding"
	Payroll    FindPlacementByExport = "Payroll"
	Timesheets FindPlacementByExport = "Timesheets"
)

// Defines values for FindUserTasksInclude.
const (
	FindUserTasksIncludeComplete FindUserTasksInclude = "Complete"
	FindUserTasksIncludeOld      FindUserTasksInclude = "Old"
)

// Defines values for FindUsersInclude.
const (
	FindUsersIncludeDeleted  FindUsersInclude = "Deleted"
	FindUsersIncludeInactive FindUsersInclude = "Inactive"
)

// Defines values for FolderOwnerStatus.
const (
	FolderOwnerStatusActive   FolderOwnerStatus = "Active"
	FolderOwnerStatusInactive FolderOwnerStatus = "Inactive"
)

// Defines values for InterviewType.
const (
	External InterviewType = "External"
	Internal InterviewType = "Internal"
)

// Defines values for JobAdScreeningAnswerType.
const (
	JobAdScreeningAnswerTypeList JobAdScreeningAnswerType = "List"
	JobAdScreeningAnswerTypeText JobAdScreeningAnswerType = "Text"
)

// Defines values for JobApplicationReviewStage.
const (
	JobApplicationReviewStageAccepted  JobApplicationReviewStage = "Accepted"
	JobApplicationReviewStageRejected  JobApplicationReviewStage = "Rejected"
	JobApplicationReviewStageSubmitted JobApplicationReviewStage = "Submitted"
	JobApplicationReviewStageViewed    JobApplicationReviewStage = "Viewed"
)

// Defines values for JobBoardPortalFieldType.
const (
	List JobBoardPortalFieldType = "List"
	Text JobBoardPortalFieldType = "Text"
)

// Defines values for JobOrderAttachmentType.
const (
	JobOrderAttachmentTypeJobDescription JobOrderAttachmentType = "JobDescription"
	JobOrderAttachmentTypeOther          JobOrderAttachmentType = "Other"
)

// Defines values for JobOrderFeeRateType.
const (
	JobOrderFeeRateTypeFixed   JobOrderFeeRateType = "Fixed"
	JobOrderFeeRateTypeMargin  JobOrderFeeRateType = "Margin"
	JobOrderFeeRateTypePercent JobOrderFeeRateType = "Percent"
)

// Defines values for OperationType.
const (
	Add    OperationType = "Add"
	Remove OperationType = "Remove"
)

// Defines values for PartnerActionResultUrlType.
const (
	PartnerActionResultUrlTypePage  PartnerActionResultUrlType = "Page"
	PartnerActionResultUrlTypePopup PartnerActionResultUrlType = "Popup"
)

// Defines values for PartnerActionStage.
const (
	PartnerActionStageCancelled  PartnerActionStage = "Cancelled"
	PartnerActionStageCompleted  PartnerActionStage = "Completed"
	PartnerActionStageInProgress PartnerActionStage = "InProgress"
	PartnerActionStageRejected   PartnerActionStage = "Rejected"
	PartnerActionStageSubmitted  PartnerActionStage = "Submitted"
)

// Defines values for PartnerActionType.
const (
	PartnerActionTypeCandidate      PartnerActionType = "Candidate"
	PartnerActionTypeCompany        PartnerActionType = "Company"
	PartnerActionTypeContact        PartnerActionType = "Contact"
	PartnerActionTypeJob            PartnerActionType = "Job"
	PartnerActionTypeJobAd          PartnerActionType = "JobAd"
	PartnerActionTypeJobApplication PartnerActionType = "JobApplication"
	PartnerActionTypePlacement      PartnerActionType = "Placement"
)

// Defines values for PartnerActionUrlType.
const (
	PartnerActionUrlTypePage       PartnerActionUrlType = "Page"
	PartnerActionUrlTypePopup      PartnerActionUrlType = "Popup"
	PartnerActionUrlTypeSideDrawer PartnerActionUrlType = "SideDrawer"
)

// Defines values for PhoneNumberMatchQuality.
const (
	Exact      PhoneNumberMatchQuality = "Exact"
	National   PhoneNumberMatchQuality = "National"
	Subscriber PhoneNumberMatchQuality = "Subscriber"
)

// Defines values for PhoneNumberMatchType.
const (
	Mobile PhoneNumberMatchType = "Mobile"
	Phone  PhoneNumberMatchType = "Phone"
)

// Defines values for PlacementAttachmentType.
const (
	PlacementAttachmentTypeCheck           PlacementAttachmentType = "Check"
	PlacementAttachmentTypeCompanyTerms    PlacementAttachmentType = "CompanyTerms"
	PlacementAttachmentTypeCoverLetter     PlacementAttachmentType = "CoverLetter"
	PlacementAttachmentTypeFormattedResume PlacementAttachmentType = "FormattedResume"
	PlacementAttachmentTypeLicense         PlacementAttachmentType = "License"
	PlacementAttachmentTypeOther           PlacementAttachmentType = "Other"
	PlacementAttachmentTypeReference       PlacementAttachmentType = "Reference"
	PlacementAttachmentTypeResume          PlacementAttachmentType = "Resume"
	PlacementAttachmentTypeScreening       PlacementAttachmentType = "Screening"
	PlacementAttachmentTypeStandardTerms   PlacementAttachmentType = "StandardTerms"
	PlacementAttachmentTypeTerms           PlacementAttachmentType = "Terms"
)

// Defines values for PlacementContractRatePer.
const (
	PlacementContractRatePerDay   PlacementContractRatePer = "Day"
	PlacementContractRatePerHour  PlacementContractRatePer = "Hour"
	PlacementContractRatePerMonth PlacementContractRatePer = "Month"
	PlacementContractRatePerWeek  PlacementContractRatePer = "Week"
)

// Defines values for PlacementTimesheetType.
const (
	Days  PlacementTimesheetType = "Days"
	Hours PlacementTimesheetType = "Hours"
	Time  PlacementTimesheetType = "Time"
)

// Defines values for PlacementType.
const (
	Contract  PlacementType = "Contract"
	Credit    PlacementType = "Credit"
	Permanent PlacementType = "Permanent"
	Temporary PlacementType = "Temporary"
)

// Defines values for RatePortion.
const (
	RatePortionFixed   RatePortion = "Fixed"
	RatePortionPercent RatePortion = "Percent"
)

// Defines values for RecipientEntityType.
const (
	RecipientEntityTypeCandidate RecipientEntityType = "Candidate"
	RecipientEntityTypeContact   RecipientEntityType = "Contact"
)

// Defines values for RelativeStartUnit.
const (
	RelativeStartUnitMonth RelativeStartUnit = "Month"
	RelativeStartUnitWeek  RelativeStartUnit = "Week"
)

// Defines values for RequisitionAttachmentType.
const (
	RequisitionAttachmentTypeJobDescription RequisitionAttachmentType = "JobDescription"
	RequisitionAttachmentTypeOther          RequisitionAttachmentType = "Other"
)

// Defines values for RequisitionStatus.
const (
	Approved  RequisitionStatus = "Approved"
	Closed    RequisitionStatus = "Closed"
	Draft     RequisitionStatus = "Draft"
	Rejected  RequisitionStatus = "Rejected"
	Submitted RequisitionStatus = "Submitted"
)

// Defines values for SalaryRatePer.
const (
	SalaryRatePerDay   SalaryRatePer = "Day"
	SalaryRatePerHour  SalaryRatePer = "Hour"
	SalaryRatePerMonth SalaryRatePer = "Month"
	SalaryRatePerWeek  SalaryRatePer = "Week"
	SalaryRatePerYear  SalaryRatePer = "Year"
)

// Defines values for SimpleWorkflow.
const (
	SimpleWorkflowComplete   SimpleWorkflow = "Complete"
	SimpleWorkflowInProgress SimpleWorkflow = "InProgress"
	SimpleWorkflowStarted    SimpleWorkflow = "Started"
)

// Defines values for SubmitCandidateAttachmentType.
const (
	SubmitCandidateAttachmentTypeCheck           SubmitCandidateAttachmentType = "Check"
	SubmitCandidateAttachmentTypeCoverLetter     SubmitCandidateAttachmentType = "CoverLetter"
	SubmitCandidateAttachmentTypeFormattedResume SubmitCandidateAttachmentType = "FormattedResume"
	SubmitCandidateAttachmentTypeLicense         SubmitCandidateAttachmentType = "License"
	SubmitCandidateAttachmentTypeOther           SubmitCandidateAttachmentType = "Other"
	SubmitCandidateAttachmentTypeReference       SubmitCandidateAttachmentType = "Reference"
	SubmitCandidateAttachmentTypeResume          SubmitCandidateAttachmentType = "Resume"
	SubmitCandidateAttachmentTypeScreening       SubmitCandidateAttachmentType = "Screening"
)

// Defines values for SubmitPlacementContractRatePer.
const (
	Day  SubmitPlacementContractRatePer = "Day"
	Hour SubmitPlacementContractRatePer = "Hour"
)

// Defines values for SubmitWebhookStatus.
const (
	SubmitWebhookStatusDisabled  SubmitWebhookStatus = "Disabled"
	SubmitWebhookStatusEnabled   SubmitWebhookStatus = "Enabled"
	SubmitWebhookStatusSuspended SubmitWebhookStatus = "Suspended"
)

// Defines values for WebhookStatus.
const (
	WebhookStatusDisabled  WebhookStatus = "Disabled"
	WebhookStatusEnabled   WebhookStatus = "Enabled"
	WebhookStatusFailed    WebhookStatus = "Failed"
	WebhookStatusSuspended WebhookStatus = "Suspended"
)

// ActivityAnswerListModel defines model for ActivityAnswerListModel.
type ActivityAnswerListModel struct {
	DateRangeValueAnswers *[]ActivityDateRangeAnswerModel `json:"dateRangeValueAnswers"`
	ListValueAnswers      *[]ActivityListValueAnswerModel `json:"listValueAnswers"`
	RatingValueAnswers    *[]ActivityRatingAnswerModel    `json:"ratingValueAnswers"`
	TextAnswers           *[]ActivityTextAnswerModel      `json:"textAnswers"`
}

// ActivityDateRangeAnswerModel defines model for ActivityDateRangeAnswerModel.
type ActivityDateRangeAnswerModel struct {
	EndDate    *time.Time `json:"endDate,omitempty"`
	QuestionId *int32     `json:"questionId,omitempty"`
	StartDate  *time.Time `json:"startDate,omitempty"`
}

// ActivityDateValueDetailModel defines model for ActivityDateValueDetailModel.
type ActivityDateValueDetailModel struct {
	EndDate   *time.Time `json:"endDate"`
	Question  *string    `json:"question"`
	StartDate *time.Time `json:"startDate,omitempty"`
}

// ActivityDetailListModel defines model for ActivityDetailListModel.
type ActivityDetailListModel struct {
	DateValueAnswers   *[]ActivityDateValueDetailModel   `json:"dateValueAnswers"`
	ListValueAnswers   *[]ActivityListValueDetailModel   `json:"listValueAnswers"`
	RatingValueAnswers *[]ActivityRatingValueDetailModel `json:"ratingValueAnswers"`
	TextAnswers        *[]ActivitySingleValueDetailModel `json:"textAnswers"`
}

// ActivityListValueAnswerModel defines model for ActivityListValueAnswerModel.
type ActivityListValueAnswerModel struct {
	QuestionId *int32    `json:"questionId,omitempty"`
	Values     *[]string `json:"values"`
}

// ActivityListValueDetailModel defines model for ActivityListValueDetailModel.
type ActivityListValueDetailModel struct {
	Question *string   `json:"question"`
	Values   *[]string `json:"values"`
}

// ActivityQuestionModel defines model for ActivityQuestionModel.
type ActivityQuestionModel struct {
	ConditionalAnswer    *string                  `json:"conditionalAnswer"`
	ConditionalQuestions *[]ActivityQuestionModel `json:"conditionalQuestions"`
	Mandatory            *bool                    `json:"mandatory,omitempty"`
	MaximumRating        *int32                   `json:"maximumRating"`
	MinimumRating        *int32                   `json:"minimumRating"`
	PossibleValues       *[]string                `json:"possibleValues"`
	QuestionAnswerType   *string                  `json:"questionAnswerType"`
	QuestionId           *int32                   `json:"questionId,omitempty"`
	Text                 *string                  `json:"text"`
}

// ActivityRatingAnswerModel defines model for ActivityRatingAnswerModel.
type ActivityRatingAnswerModel struct {
	QuestionId *int32 `json:"questionId,omitempty"`
	Rating     *int32 `json:"rating,omitempty"`
}

// ActivityRatingValueDetailModel defines model for ActivityRatingValueDetailModel.
type ActivityRatingValueDetailModel struct {
	Percentage *float64 `json:"percentage,omitempty"`
	Question   *string  `json:"question"`
}

// ActivitySingleValueDetailModel defines model for ActivitySingleValueDetailModel.
type ActivitySingleValueDetailModel struct {
	Answer   *string `json:"answer"`
	Question *string `json:"question"`
}

// ActivityTextAnswerModel defines model for ActivityTextAnswerModel.
type ActivityTextAnswerModel struct {
	QuestionId *int32  `json:"questionId,omitempty"`
	Text       *string `json:"text"`
}

// AddCandidateActivityCommand defines model for AddCandidateActivityCommand.
type AddCandidateActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddCandidateCommand defines model for AddCandidateCommand.
type AddCandidateCommand struct {
	Address *SubmitAddressModel `json:"address,omitempty"`

	// Availability The date the candidate is available to start. Specify ONE OF immediate, relative or date.
	Availability     *SubmitCandidateAvailabilityModel `json:"availability,omitempty"`
	Custom           *[]SubmitCustomFieldValueModel    `json:"custom"`
	DateOfBirth      *openapi_types.Date               `json:"dateOfBirth"`
	Education        *[]SubmitCandidateEducationModel  `json:"education"`
	Email            *string                           `json:"email"`
	EmergencyContact *string                           `json:"emergencyContact"`
	EmergencyPhone   *string                           `json:"emergencyPhone"`
	Employment       *SubmitEmploymentModel            `json:"employment,omitempty"`
	FirstName        *string                           `json:"firstName"`
	LastName         *string                           `json:"lastName"`
	Mobile           *string                           `json:"mobile"`
	Phone            *string                           `json:"phone"`
	Rating           *string                           `json:"rating"`
	RecruiterUserId  *[]int32                          `json:"recruiterUserId"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`
	SkillTags  *[]string               `json:"skillTags"`
	Social     *map[string]string      `json:"social"`

	// Source Candidate source
	Source *string `json:"source"`

	// StatusId Candidate status
	StatusId     *int32  `json:"statusId"`
	Summary      *string `json:"summary"`
	Unsubscribed *bool   `json:"unsubscribed,omitempty"`
}

// AddCandidateJobOrderCommand defines model for AddCandidateJobOrderCommand.
type AddCandidateJobOrderCommand struct {
	JobId  []int32 `json:"jobId"`
	Source *string `json:"source"`
}

// AddCandidateNoteCommand defines model for AddCandidateNoteCommand.
type AddCandidateNoteCommand struct {
	// ApplicationId Optional list of related job applications to link to the note
	ApplicationId *[]int64 `json:"applicationId"`

	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// CreatedByIntegration When set to true, it indicates that the note is created by integration as a part of some automation workflows, not by a specific user
	CreatedByIntegration *bool `json:"createdByIntegration,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddCandidateUserTaskCommand defines model for AddCandidateUserTaskCommand.
type AddCandidateUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddCandidateVideoCommand defines model for AddCandidateVideoCommand.
type AddCandidateVideoCommand struct {
	// Reference Optional unique reference for this video type, if specified then an existing video
	// with the same type and reference will be updated if found.
	Reference *string `json:"reference"`

	// Url Video URL
	Url string `json:"url"`
}

// AddCompanyActivityCommand defines model for AddCompanyActivityCommand.
type AddCompanyActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddCompanyAddressCommand defines model for AddCompanyAddressCommand.
type AddCompanyAddressCommand struct {
	City             *string   `json:"city"`
	CountryCode      *string   `json:"countryCode"`
	Fax              *string   `json:"fax"`
	IsPrimaryAddress *bool     `json:"isPrimaryAddress,omitempty"`
	Name             string    `json:"name"`
	Phone            *string   `json:"phone"`
	PostalCode       *string   `json:"postalCode"`
	State            *string   `json:"state"`
	Street           *[]string `json:"street"`
	Url              *string   `json:"url"`
}

// AddCompanyCommand defines model for AddCompanyCommand.
type AddCompanyCommand struct {
	// Custom Custom field values. Only the specified fields will be updated, each fieldId can specified once.
	Custom *[]SubmitCustomFieldValueModel `json:"custom"`

	// LegalName Company LegalName
	LegalName       *string            `json:"legalName"`
	Name            string             `json:"name"`
	OwnerUserId     *int32             `json:"ownerUserId"`
	ParentCompanyId *int32             `json:"parentCompanyId"`
	RecruiterUserId *[]int32           `json:"recruiterUserId"`
	Social          *map[string]string `json:"social"`

	// StatusId Company status
	StatusId *int32  `json:"statusId"`
	Summary  *string `json:"summary"`
}

// AddCompanyNoteCommand defines model for AddCompanyNoteCommand.
type AddCompanyNoteCommand struct {
	// ContactId Optional list of related contacts to link to the note
	ContactId *[]int32 `json:"contactId"`

	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddCompanyUserTaskCommand defines model for AddCompanyUserTaskCommand.
type AddCompanyUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddCompanyWorkflowCommand defines model for AddCompanyWorkflowCommand.
type AddCompanyWorkflowCommand struct {
	// Approvers Approvers for this workflow. Only the specified workflow stages will be updated, each stageIndex can be specified once.
	Approvers *[]SubmitCompanyWorkflowApproverModel `json:"approvers"`
	Name      string                                `json:"name"`
}

// AddContactActivityCommand defines model for AddContactActivityCommand.
type AddContactActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddContactCommand defines model for AddContactCommand.
type AddContactCommand struct {
	CompanyId          *int32                         `json:"companyId"`
	Custom             *[]SubmitCustomFieldValueModel `json:"custom"`
	Email              *string                        `json:"email"`
	FirstName          *string                        `json:"firstName"`
	LastName           *string                        `json:"lastName"`
	Mobile             *string                        `json:"mobile"`
	OfficeAddressId    *openapi_types.UUID            `json:"officeAddressId"`
	OwnerUserId        *int32                         `json:"ownerUserId"`
	Phone              *string                        `json:"phone"`
	Position           *string                        `json:"position"`
	RecruiterUserId    *[]int32                       `json:"recruiterUserId"`
	ReportsToContactId *int32                         `json:"reportsToContactId"`

	// Salutation Salutation/honorific/title
	Salutation *string            `json:"salutation"`
	Social     *map[string]string `json:"social"`

	// StatusId Contact status
	StatusId     *int32  `json:"statusId"`
	Summary      *string `json:"summary"`
	Unsubscribed *bool   `json:"unsubscribed,omitempty"`
}

// AddContactNoteCommand defines model for AddContactNoteCommand.
type AddContactNoteCommand struct {
	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// CreatedByIntegration When set to true, it indicates that the note is created by integration as a part of some automation workflows, not by a specific user
	CreatedByIntegration *bool `json:"createdByIntegration,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddContactUserTaskCommand defines model for AddContactUserTaskCommand.
type AddContactUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddJobAdDraftCommand defines model for AddJobAdDraftCommand.
type AddJobAdDraftCommand struct {
	BulletPoints *[]string `json:"bulletPoints"`
	Description  *string   `json:"description"`

	// JobId Associated job
	JobId       *int32  `json:"jobId,omitempty"`
	OwnerUserId int32   `json:"ownerUserId"`
	Reference   *string `json:"reference"`
	Summary     *string `json:"summary"`
	Title       string  `json:"title"`
}

// AddJobApplicationActivityCommand defines model for AddJobApplicationActivityCommand.
type AddJobApplicationActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddJobApplicationExternalInterviewCommand defines model for AddJobApplicationExternalInterviewCommand.
type AddJobApplicationExternalInterviewCommand struct {
	// EndAt Interview end time. The allowed minutes for the time are 0, 15, 30 and 45.
	EndAt *time.Time `json:"endAt,omitempty"`

	// InterviewersContactIds Contact IDs of the interviewers
	InterviewersContactIds *[]int32 `json:"interviewersContactIds"`

	// Location Interview location
	Location *string `json:"location"`

	// StartAt Interview start time. The allowed minutes for the time are 0, 15, 30 and 45.
	StartAt *time.Time `json:"startAt,omitempty"`
}

// AddJobApplicationInternalInterviewCommand defines model for AddJobApplicationInternalInterviewCommand.
type AddJobApplicationInternalInterviewCommand struct {
	// EndAt Interview end time. The allowed minutes for the time are 0, 15, 30 and 45.
	EndAt *time.Time `json:"endAt,omitempty"`

	// InterviewersUserIds User IDs of the interviewers
	InterviewersUserIds *[]int32 `json:"interviewersUserIds"`

	// Location Interview location
	Location *string `json:"location"`

	// StartAt Interview start time. The allowed minutes for the time are 0, 15, 30 and 45.
	StartAt *time.Time `json:"startAt,omitempty"`
}

// AddJobApplicationNoteCommand defines model for AddJobApplicationNoteCommand.
type AddJobApplicationNoteCommand struct {
	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddJobApplicationUserTaskCommand defines model for AddJobApplicationUserTaskCommand.
type AddJobApplicationUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddJobApplicationVideoCommand defines model for AddJobApplicationVideoCommand.
type AddJobApplicationVideoCommand struct {
	// Reference Optional unique reference for this video type, if specified then an existing video
	// with the same type and reference will be updated if found.
	Reference *string `json:"reference"`

	// Url Video URL
	Url string `json:"url"`
}

// AddJobOrderActivityCommand defines model for AddJobOrderActivityCommand.
type AddJobOrderActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddJobOrderCandidateCommand defines model for AddJobOrderCandidateCommand.
type AddJobOrderCandidateCommand struct {
	CandidateId []int32 `json:"candidateId"`
	Source      *string `json:"source"`
}

// AddJobOrderCommand defines model for AddJobOrderCommand.
type AddJobOrderCommand struct {
	Category       *SubmitCategoryModel           `json:"category,omitempty"`
	CompanyId      *int32                         `json:"companyId"`
	ContactId      *int32                         `json:"contactId"`
	Custom         *[]SubmitCustomFieldValueModel `json:"custom"`
	Duration       *SubmitDurationModel           `json:"duration,omitempty"`
	Fee            *SubmitJobOrderFeeModel        `json:"fee,omitempty"`
	JobDescription *string                        `json:"jobDescription"`
	JobTitle       *string                        `json:"jobTitle"`
	Location       *SubmitLocationModel           `json:"location,omitempty"`
	NumberOfJobs   *int32                         `json:"numberOfJobs,omitempty"`

	// OwnerUserId User Id - Owner of this job
	OwnerUserId *int32 `json:"ownerUserId,omitempty"`

	// RecruiterUserId User Id - Optional list of recruiters assigned to the job
	RecruiterUserId *[]int32                        `json:"recruiterUserId"`
	Salary          *SubmitJobOrderSalaryRangeModel `json:"salary,omitempty"`
	SkillTags       *SubmitJobOrderSkillTagsModel   `json:"skillTags,omitempty"`
	Source          *string                         `json:"source"`
	Start           *SubmitJobOrderStartModel       `json:"start,omitempty"`

	// StatusId Job status
	StatusId *int32 `json:"statusId"`

	// UserFavourite Job is a favourite for the current user
	UserFavourite *bool  `json:"userFavourite"`
	WorkTypeId    *int32 `json:"workTypeId"`

	// WorkplaceAddressId Workplace Address Id
	WorkplaceAddressId *openapi_types.UUID `json:"workplaceAddressId"`
}

// AddJobOrderNoteCommand defines model for AddJobOrderNoteCommand.
type AddJobOrderNoteCommand struct {
	ApplicationId *[]int64 `json:"applicationId"`

	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddJobOrderUserTaskCommand defines model for AddJobOrderUserTaskCommand.
type AddJobOrderUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddNoteCommand defines model for AddNoteCommand.
type AddNoteCommand struct {
	ApplicationId *[]int64 `json:"applicationId"`
	CandidateId   *[]int32 `json:"candidateId"`
	CompanyId     *[]int32 `json:"companyId"`
	ContactId     *[]int32 `json:"contactId"`

	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy            *SubmitUserModel `json:"createdBy,omitempty"`
	CreatedByIntegration *bool            `json:"createdByIntegration,omitempty"`
	JobId                *[]int32         `json:"jobId"`
	PlacementId          *[]int32         `json:"placementId"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference     *string  `json:"reference"`
	RequisitionId *[]int32 `json:"requisitionId"`

	// Text Note content
	Text string `json:"text"`
	Type string `json:"type"`
}

// AddOpportunityCommand defines model for AddOpportunityCommand.
type AddOpportunityCommand struct {
	AdditionalInformation *string            `json:"additionalInformation"`
	CompanyId             int32              `json:"companyId"`
	EstimatedClose        *time.Time         `json:"estimatedClose"`
	OpportunityTitle      string             `json:"opportunityTitle"`
	OwnerUserIds          []int32            `json:"ownerUserIds"`
	StageId               openapi_types.UUID `json:"stageId"`
	Value                 *float64           `json:"value"`
	WorkTypeId            *int32             `json:"workTypeId"`
}

// AddPartnerActionCommand defines model for AddPartnerActionCommand.
type AddPartnerActionCommand struct {
	ActionFilter *PartnerActionFilterModel `json:"actionFilter,omitempty"`

	// ActionName Menu item label that will appear to the end-user
	ActionName *string `json:"actionName"`

	// AllowResubmit Allow resources to be resubmitted to an action.
	AllowResubmit *bool `json:"allowResubmit,omitempty"`

	// Reference Unique partner defined reference/identifier for the action
	Reference *string `json:"reference"`

	// Url URL to open after the action is selected and assigned the `"Submitted"` stage.\
	// Templates parameters can be used in the URL to identify the resource submitted to the action
	// <table><tr><td>`{userId}`</td><td>Replaced with the User Id of the user performing the action</td></tr><tr><td>`{jobId}`</td><td>Replaced with the Job Id</td></tr><tr><td>`{adId}`</td><td>Replaced with the Job Ad Id</td></tr><tr><td>`{candidateId}`</td><td>Replaced with the Candidate Id</td></tr><tr><td>`{applicationId}`</td><td>Replaced with the Job Application Id</td></tr><tr><td>`{placementId}`</td><td>Replaced with the Placement Id</td></tr><tr><td>`{companyId}`</td><td>Replaced with the Company Id</td></tr><tr><td>`{contactId}`</td><td>Replaced with the Contact Id</td></tr></table>
	Url     *string               `json:"url"`
	UrlType *PartnerActionUrlType `json:"urlType,omitempty"`

	// WebhookData Additional data to include with the webhook notification
	WebhookData *interface{} `json:"webhookData"`
}

// AddPlacementActivityCommand defines model for AddPlacementActivityCommand.
type AddPlacementActivityCommand struct {
	ActivitySettingId *int32                   `json:"activitySettingId,omitempty"`
	Answers           *ActivityAnswerListModel `json:"answers,omitempty"`
	StatusId          *int32                   `json:"statusId"`
}

// AddPlacementCommand defines model for AddPlacementCommand.
type AddPlacementCommand struct {
	Award          *string                           `json:"award"`
	Billing        *SubmitPlacementBillingModel      `json:"billing,omitempty"`
	ChargeCurrency *string                           `json:"chargeCurrency"`
	ContactId      *int32                            `json:"contactId"`
	ContractRate   *SubmitPlacementContractRateModel `json:"contractRate,omitempty"`
	Custom         *[]SubmitCustomFieldValueModel    `json:"custom"`

	// EndDate Date a contract or temporary employment ends
	EndDate                *openapi_types.Date              `json:"endDate"`
	FeeSplit               *RatePortion                     `json:"feeSplit,omitempty"`
	IndustryCode           *string                          `json:"industryCode"`
	JobApplicationId       int64                            `json:"jobApplicationId"`
	JobApplicationStatusId *int32                           `json:"jobApplicationStatusId"`
	JobOrderStatusId       *int32                           `json:"jobOrderStatusId"`
	JobTitle               *string                          `json:"jobTitle"`
	PaymentType            *string                          `json:"paymentType"`
	Recruiters             *[]SubmitPlacementRecruiterModel `json:"recruiters"`
	Salary                 *SubmitPlacementSalaryModel      `json:"salary,omitempty"`

	// StartDate Date employment begins
	StartDate *openapi_types.Date `json:"startDate,omitempty"`

	// StatusId Placement status
	StatusId           *int32                      `json:"statusId"`
	Summary            *string                     `json:"summary"`
	Type               PlacementType               `json:"type"`
	WorkShift          *AddPlacementWorkShiftModel `json:"workShift,omitempty"`
	WorkplaceAddressId *openapi_types.UUID         `json:"workplaceAddressId"`
}

// AddPlacementNoteCommand defines model for AddPlacementNoteCommand.
type AddPlacementNoteCommand struct {
	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddPlacementUserTaskCommand defines model for AddPlacementUserTaskCommand.
type AddPlacementUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// AddPlacementWorkShiftModel defines model for AddPlacementWorkShiftModel.
type AddPlacementWorkShiftModel struct {
	EndTime   *string   `json:"endTime"`
	StartTime *string   `json:"startTime"`
	WorkDays  *[]string `json:"workDays"`
}

// AddRequisitionCommand defines model for AddRequisitionCommand.
type AddRequisitionCommand struct {
	Category *SubmitCategoryModel `json:"category,omitempty"`

	// ContactId Hiring manager (contact) submitting the requisition.
	ContactId      int32                          `json:"contactId"`
	Custom         *[]SubmitCustomFieldValueModel `json:"custom"`
	Duration       *SubmitDurationModel           `json:"duration,omitempty"`
	FormID         *int32                         `json:"formID"`
	JobDescription *string                        `json:"jobDescription"`
	JobTitle       *string                        `json:"jobTitle"`
	Location       *SubmitLocationModel           `json:"location,omitempty"`
	NumberOfJobs   *int32                         `json:"numberOfJobs,omitempty"`

	// RecruiterUserId User Id - Optional list of recruiters assigned to the requisition.
	RecruiterUserId *[]int32                        `json:"recruiterUserId"`
	Salary          *SubmitJobOrderSalaryRangeModel `json:"salary,omitempty"`
	Source          *string                         `json:"source"`
	Start           *SubmitJobOrderStartModel       `json:"start,omitempty"`
	WorkTypeId      *int32                          `json:"workTypeId"`
	WorkflowId      *int32                          `json:"workflowId"`

	// WorkplaceAddressId Workplace address Id
	WorkplaceAddressId *openapi_types.UUID `json:"workplaceAddressId"`
}

// AddRequisitionNoteCommand defines model for AddRequisitionNoteCommand.
type AddRequisitionNoteCommand struct {
	// CreatedBy The user creating the note if not the authenticated user.<br />
	// Specify either userId or email.
	CreatedBy *SubmitUserModel `json:"createdBy,omitempty"`

	// Reference Optional reference string used to identify a note or group of notes
	Reference *string `json:"reference"`

	// Text Note content
	Text string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// AddUserTaskCommand defines model for AddUserTaskCommand.
type AddUserTaskCommand struct {
	AllDay    *bool      `json:"allDay,omitempty"`
	Assignees *[]int32   `json:"assignees"`
	EndAt     *time.Time `json:"endAt"`
	Priority  *int32     `json:"priority,omitempty"`
	StartAt   *time.Time `json:"startAt"`
	Title     *string    `json:"title"`
}

// AddWebhookCommand defines model for AddWebhookCommand.
type AddWebhookCommand struct {
	// Authorization Optional authorization header to include with the HTTP POST notification.
	Authorization *string                        `json:"authorization"`
	EventFilters  *SubmitWebhookEventFilterModel `json:"eventFilters,omitempty"`
	Events        *[]EventName                   `json:"events"`
	Name          *string                        `json:"name"`
	Status        *SubmitWebhookStatus           `json:"status,omitempty"`

	// Url Target URL that will listen for incoming HTTP POST notification messages.
	Url *string `json:"url"`
}

// AddressModel defines model for AddressModel.
type AddressModel struct {
	City        *string   `json:"city"`
	Country     *string   `json:"country"`
	CountryCode *string   `json:"countryCode"`
	PostalCode  *string   `json:"postalCode"`
	State       *string   `json:"state"`
	Street      *[]string `json:"street"`
}

// ApproveRequisitionCommand defines model for ApproveRequisitionCommand.
type ApproveRequisitionCommand struct {
	ApproverId int32   `json:"approverId"`
	Message    *string `json:"message"`
}

// CandidateActivityListRepresentation defines model for CandidateActivityListRepresentation.
type CandidateActivityListRepresentation struct {
	Items      *[]CandidateActivityModel `json:"items"`
	Links      *PageLinks                `json:"links,omitempty"`
	TotalCount int32                     `json:"totalCount"`
}

// CandidateActivityModel defines model for CandidateActivityModel.
type CandidateActivityModel struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CandidateId  *int32                   `json:"candidateId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// CandidateActivityRepresentation defines model for CandidateActivityRepresentation.
type CandidateActivityRepresentation struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CandidateId  *int32                   `json:"candidateId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Links        *ModelLinks              `json:"links,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// CandidateActivitySettingModel defines model for CandidateActivitySettingModel.
type CandidateActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// CandidateActivitySettingSummaryModel defines model for CandidateActivitySettingSummaryModel.
type CandidateActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// CandidateActivitySettingsListModel defines model for CandidateActivitySettingsListModel.
type CandidateActivitySettingsListModel struct {
	Items *[]CandidateActivitySettingSummaryModel `json:"items"`
}

// CandidateActivitySummaryListModel defines model for CandidateActivitySummaryListModel.
type CandidateActivitySummaryListModel struct {
	Items *[]CandidateActivitySummaryModel `json:"items"`
}

// CandidateActivitySummaryModel defines model for CandidateActivitySummaryModel.
type CandidateActivitySummaryModel struct {
	ActivityId   *int64         `json:"activityId,omitempty"`
	ActivityName *string        `json:"activityName"`
	ActivityType *string        `json:"activityType"`
	CandidateId  *int32         `json:"candidateId,omitempty"`
	CreatedAt    *time.Time     `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`
	Status       *string        `json:"status"`
	UpdatedAt    *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// CandidateAttachmentCategoryListRepresentation defines model for CandidateAttachmentCategoryListRepresentation.
type CandidateAttachmentCategoryListRepresentation struct {
	Items *[]CandidateAttachmentCategoryModel `json:"items"`
	Links *ModelLinks                         `json:"links,omitempty"`
}

// CandidateAttachmentCategoryModel defines model for CandidateAttachmentCategoryModel.
type CandidateAttachmentCategoryModel struct {
	Category *string                  `json:"category"`
	Type     *CandidateAttachmentType `json:"type,omitempty"`
}

// CandidateAttachmentLinks defines model for CandidateAttachmentLinks.
type CandidateAttachmentLinks struct {
	Self *string `json:"self"`
}

// CandidateAttachmentListRepresentation defines model for CandidateAttachmentListRepresentation.
type CandidateAttachmentListRepresentation struct {
	Items      *[]CandidateAttachmentModel `json:"items"`
	Links      *PageLinks                  `json:"links,omitempty"`
	TotalCount int32                       `json:"totalCount"`
}

// CandidateAttachmentModel defines model for CandidateAttachmentModel.
type CandidateAttachmentModel struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	CandidateId  *int32         `json:"candidateId"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date      `json:"expiry"`
	FileName  *string                  `json:"fileName"`
	FileType  *string                  `json:"fileType"`
	Type      *CandidateAttachmentType `json:"type,omitempty"`
	UpdatedAt *time.Time               `json:"updatedAt"`
}

// CandidateAttachmentRepresentation defines model for CandidateAttachmentRepresentation.
type CandidateAttachmentRepresentation struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	CandidateId  *int32         `json:"candidateId"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date       `json:"expiry"`
	FileName  *string                   `json:"fileName"`
	FileType  *string                   `json:"fileType"`
	Links     *CandidateAttachmentLinks `json:"links,omitempty"`
	Type      *CandidateAttachmentType  `json:"type,omitempty"`
	UpdatedAt *time.Time                `json:"updatedAt"`
}

// CandidateAttachmentType defines model for CandidateAttachmentType.
type CandidateAttachmentType string

// CandidateAvailabilityListRepresentation defines model for CandidateAvailabilityListRepresentation.
type CandidateAvailabilityListRepresentation struct {
	Items *[]CandidateAvailabilityModel `json:"items"`
	Links *ModelLinks                   `json:"links,omitempty"`
}

// CandidateAvailabilityModel defines model for CandidateAvailabilityModel.
type CandidateAvailabilityModel struct {
	// Date Date available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	Date *openapi_types.Date `json:"date,omitempty"`
	Day  *DayOfWeek          `json:"day,omitempty"`

	// Recurring Availability is repeated in following weeks
	Recurring *bool `json:"recurring,omitempty"`

	// Shifts Time available, at least one and at most two shifts
	Shifts *[]TimeRangeModel `json:"shifts"`

	// Until Optional end date of repeating availability
	Until *openapi_types.Date `json:"until"`
}

// CandidateEducationModel defines model for CandidateEducationModel.
type CandidateEducationModel struct {
	Course *string `json:"course"`

	// Date Year, month or date completed.<br />
	// Year must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />
	// Month must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) "-" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />
	// Date must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31
	Date        *string `json:"date"`
	Institution *string `json:"institution"`
}

// CandidateEmploymentHistoryModel defines model for CandidateEmploymentHistoryModel.
type CandidateEmploymentHistoryModel struct {
	// Description Description of responsibilities and achievements.
	Description *string `json:"description"`

	// Employer Name of the employer
	Employer *string `json:"employer"`

	// End Year, month or date employment finished, or "Present" for a current role.<br />
	// Year must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />
	// Month must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) "-" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />
	// Date must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31
	End      *string `json:"end"`
	Position *string `json:"position"`

	// Start Year, month or date employment started.<br />
	// Year must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />
	// Month must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) "-" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />
	// Date must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31
	Start *string `json:"start"`
}

// CandidateEmploymentModel defines model for CandidateEmploymentModel.
type CandidateEmploymentModel struct {
	Current *CurrentEmploymentModel            `json:"current,omitempty"`
	History *[]CandidateEmploymentHistoryModel `json:"history"`
	Ideal   *CandidateIdealEmploymentModel     `json:"ideal,omitempty"`
}

// CandidateIdealEmploymentModel defines model for CandidateIdealEmploymentModel.
type CandidateIdealEmploymentModel struct {
	Other    *[]CandidateIdealSalaryModel `json:"other"`
	Position *string                      `json:"position"`
	Salary   *SalaryRangeModel            `json:"salary,omitempty"`
	WorkType *WorkTypeModel               `json:"workType,omitempty"`
}

// CandidateIdealSalaryModel defines model for CandidateIdealSalaryModel.
type CandidateIdealSalaryModel struct {
	Salary   *SalaryRangeModel `json:"salary,omitempty"`
	WorkType *WorkTypeModel    `json:"workType,omitempty"`
}

// CandidateJobApplicationStatisticsSummaryModel defines model for CandidateJobApplicationStatisticsSummaryModel.
type CandidateJobApplicationStatisticsSummaryModel struct {
	Active *int32 `json:"active,omitempty"`
	New    *int32 `json:"new,omitempty"`
	Total  *int32 `json:"total,omitempty"`
}

// CandidateLinks defines model for CandidateLinks.
type CandidateLinks struct {
	// Applications Job Applications
	Applications *string `json:"applications"`

	// Attachments Attachments
	Attachments *string `json:"attachments"`

	// Contact Optional contact if candidate is also a contact
	Contact *string `json:"contact"`

	// Floats Floats
	Floats *string `json:"floats"`

	// Notes Notes
	Notes *string `json:"notes"`

	// Photo Candidate photo
	Photo *string `json:"photo"`

	// Placements Placements
	Placements *string `json:"placements"`
	Self       *string `json:"self"`

	// Skills Skills
	Skills *string `json:"skills"`

	// Submissions Submissions
	Submissions *string `json:"submissions"`

	// Videos Videos
	Videos *string `json:"videos"`
}

// CandidateListRepresentation defines model for CandidateListRepresentation.
type CandidateListRepresentation struct {
	Items      *[]CandidateSummaryModel `json:"items"`
	Links      *PageLinks               `json:"links,omitempty"`
	TotalCount int32                    `json:"totalCount"`
}

// CandidateMatchedByEmailModel defines model for CandidateMatchedByEmailModel.
type CandidateMatchedByEmailModel struct {
	CandidateId *int32                    `json:"candidateId,omitempty"`
	Email       *string                   `json:"email"`
	FirstName   *string                   `json:"firstName"`
	LastName    *string                   `json:"lastName"`
	LastNoteAt  *time.Time                `json:"lastNoteAt"`
	Match       *MatchedEmailAddressModel `json:"match,omitempty"`
	Mobile      *string                   `json:"mobile"`
	Phone       *string                   `json:"phone"`
	UpdatedAt   *time.Time                `json:"updatedAt"`
}

// CandidateMatchedByPhoneModel defines model for CandidateMatchedByPhoneModel.
type CandidateMatchedByPhoneModel struct {
	CandidateId *int32                   `json:"candidateId,omitempty"`
	Email       *string                  `json:"email"`
	FirstName   *string                  `json:"firstName"`
	LastName    *string                  `json:"lastName"`
	LastNoteAt  *time.Time               `json:"lastNoteAt"`
	Match       *MatchedPhoneNumberModel `json:"match,omitempty"`
	Mobile      *string                  `json:"mobile"`
	Phone       *string                  `json:"phone"`
	UpdatedAt   *time.Time               `json:"updatedAt"`
}

// CandidateNameModel defines model for CandidateNameModel.
type CandidateNameModel struct {
	Address *AddressModel `json:"address,omitempty"`

	// CandidateId Candidate Id
	CandidateId int32 `json:"candidateId"`

	// ContactMethod Preferred contact method
	ContactMethod *string `json:"contactMethod"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string `json:"mobileNormalized"`

	// Phone Contact phone number
	Phone *string `json:"phone"`

	// Rating Internal rating of the candidate
	Rating *string `json:"rating"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`

	// Source The source of the candidate
	Source       *string      `json:"source"`
	Status       *StatusModel `json:"status,omitempty"`
	Unsubscribed *bool        `json:"unsubscribed,omitempty"`
}

// CandidatePayrollBillingListModel defines model for CandidatePayrollBillingListModel.
type CandidatePayrollBillingListModel struct {
	Items *[]CandidatePayrollBillingModel `json:"items"`
}

// CandidatePayrollBillingModel defines model for CandidatePayrollBillingModel.
type CandidatePayrollBillingModel struct {
	// CandidateId Candidate Id
	CandidateId *int32 `json:"candidateId,omitempty"`

	// ExternalCandidateId Candidate ExternalID
	ExternalCandidateId *string `json:"externalCandidateId"`

	// Office Office Code
	Office *string `json:"office"`

	// Position Position
	Position *string `json:"position"`

	// SkillGroup Skill Group
	SkillGroup *string `json:"skillGroup"`
}

// CandidatePlacementModel defines model for CandidatePlacementModel.
type CandidatePlacementModel struct {
	Address *AddressModel `json:"address,omitempty"`

	// CandidateId Candidate Id
	CandidateId int32 `json:"candidateId"`

	// ContactMethod Preferred contact method
	ContactMethod *string `json:"contactMethod"`

	// DateOfBirth Candidate date of birth available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	DateOfBirth *openapi_types.Date `json:"dateOfBirth"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string `json:"mobileNormalized"`

	// Phone Contact phone number
	Phone *string `json:"phone"`

	// Rating Internal rating of the candidate
	Rating *string `json:"rating"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`

	// Source The source of the candidate
	Source       *string      `json:"source"`
	Status       *StatusModel `json:"status,omitempty"`
	Unsubscribed *bool        `json:"unsubscribed,omitempty"`
}

// CandidatePlacementStatisticsSummaryModel defines model for CandidatePlacementStatisticsSummaryModel.
type CandidatePlacementStatisticsSummaryModel struct {
	Total *int32 `json:"total,omitempty"`
}

// CandidateRepresentation defines model for CandidateRepresentation.
type CandidateRepresentation struct {
	Address *AddressModel `json:"address,omitempty"`

	// Availability The date the candidate is available to start. Specify ONE OF immediate, relative or date.
	Availability *CandidateStartModel `json:"availability,omitempty"`

	// CandidateId Candidate Id
	CandidateId int32 `json:"candidateId"`

	// ContactMethod Preferred contact method
	ContactMethod *string                  `json:"contactMethod"`
	CreatedAt     *time.Time               `json:"createdAt"`
	CreatedBy     *UserNameModel           `json:"createdBy,omitempty"`
	Custom        *[]CustomFieldValueModel `json:"custom"`

	// DateOfBirth Candidate date of birth available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	DateOfBirth *openapi_types.Date        `json:"dateOfBirth"`
	Education   *[]CandidateEducationModel `json:"education"`

	// Email Primary email address
	Email *string `json:"email"`

	// EmergencyContact The emergency contact of the candidate
	EmergencyContact *string `json:"emergencyContact"`

	// EmergencyPhone The emergency phone of the candidate
	EmergencyPhone *string                   `json:"emergencyPhone"`
	Employment     *CandidateEmploymentModel `json:"employment,omitempty"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// LastName Last name
	LastName *string         `json:"lastName"`
	Links    *CandidateLinks `json:"links,omitempty"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string `json:"mobileNormalized"`

	// OtherEmail Other email addresses used by the candidate
	OtherEmail     *[]string                  `json:"otherEmail"`
	PartnerActions *[]PartnerActionStageModel `json:"partnerActions"`

	// Phone Contact phone number
	Phone *string `json:"phone"`

	// Rating Internal rating of the candidate
	Rating     *string          `json:"rating"`
	Recruiters *[]UserNameModel `json:"recruiters"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`
	SkillTags  *[]string               `json:"skillTags"`

	// Social Candidate social profiles
	Social *map[string]string `json:"social"`

	// Source The source of the candidate
	Source       *string                   `json:"source"`
	Statistics   *CandidateStatisticsModel `json:"statistics,omitempty"`
	Status       *StatusModel              `json:"status,omitempty"`
	Summary      *string                   `json:"summary"`
	Unsubscribed *bool                     `json:"unsubscribed,omitempty"`
	UpdatedAt    *time.Time                `json:"updatedAt"`
	UpdatedBy    *UserNameModel            `json:"updatedBy,omitempty"`
}

// CandidateSeekingStatus defines model for CandidateSeekingStatus.
type CandidateSeekingStatus string

// CandidateStartModel The date the candidate is available to start. Specify ONE OF immediate, relative or date.
type CandidateStartModel struct {
	// Date The specific date that a job starts or a candidate is available
	Date      *openapi_types.Date `json:"date"`
	Immediate *bool               `json:"immediate,omitempty"`
	Relative  *RelativeStartModel `json:"relative,omitempty"`
}

// CandidateStatisticsModel defines model for CandidateStatisticsModel.
type CandidateStatisticsModel struct {
	Applications *CandidateJobApplicationStatisticsSummaryModel `json:"applications,omitempty"`
	Placements   *CandidatePlacementStatisticsSummaryModel      `json:"placements,omitempty"`
}

// CandidateSummaryModel defines model for CandidateSummaryModel.
type CandidateSummaryModel struct {
	Address *AddressModel `json:"address,omitempty"`

	// CandidateId Candidate Id
	CandidateId int32 `json:"candidateId"`

	// ContactMethod Preferred contact method
	ContactMethod *string        `json:"contactMethod"`
	CreatedAt     *time.Time     `json:"createdAt"`
	CreatedBy     *UserNameModel `json:"createdBy,omitempty"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string `json:"mobileNormalized"`

	// Phone Contact phone number
	Phone *string `json:"phone"`

	// Rating Internal rating of the candidate
	Rating *string `json:"rating"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`

	// Source The source of the candidate
	Source       *string        `json:"source"`
	Status       *StatusModel   `json:"status,omitempty"`
	Unsubscribed *bool          `json:"unsubscribed,omitempty"`
	UpdatedAt    *time.Time     `json:"updatedAt"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// CandidateUserTaskModel defines model for CandidateUserTaskModel.
type CandidateUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	CandidateId     *int32                        `json:"candidateId,omitempty"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// CandidateUserTaskRepresentation defines model for CandidateUserTaskRepresentation.
type CandidateUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	CandidateId     *int32                        `json:"candidateId,omitempty"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// CandidateVideoListRepresentation defines model for CandidateVideoListRepresentation.
type CandidateVideoListRepresentation struct {
	Items *[]CandidateVideoModel `json:"items"`
	Links *PageLinks             `json:"links,omitempty"`
}

// CandidateVideoModel defines model for CandidateVideoModel.
type CandidateVideoModel struct {
	// CreatedAt Date this video was added to the candidate
	CreatedAt *time.Time `json:"createdAt"`

	// Reference Optional unique reference for this video type.
	Reference *string            `json:"reference"`
	Type      CandidateVideoType `json:"type"`

	// UpdatedAt Date this video was last updated (updates are possible when a video is added with a Reference)
	UpdatedAt *time.Time `json:"updatedAt"`

	// Url Video URL
	Url *string `json:"url"`
}

// CandidateVideoRepresentation defines model for CandidateVideoRepresentation.
type CandidateVideoRepresentation struct {
	// CreatedAt Date this video was added to the candidate
	CreatedAt *time.Time `json:"createdAt"`

	// Reference Optional unique reference for this video type.
	Reference *string            `json:"reference"`
	Type      CandidateVideoType `json:"type"`

	// UpdatedAt Date this video was last updated (updates are possible when a video is added with a Reference)
	UpdatedAt *time.Time `json:"updatedAt"`

	// Url Video URL
	Url *string `json:"url"`
}

// CandidateVideoType defines model for CandidateVideoType.
type CandidateVideoType string

// CategoryListRepresentation defines model for CategoryListRepresentation.
type CategoryListRepresentation struct {
	Items *[]CategoryModel `json:"items"`
	Links *ModelLinks      `json:"links,omitempty"`
}

// CategoryModel defines model for CategoryModel.
type CategoryModel struct {
	CategoryId    int32               `json:"categoryId"`
	Name          string              `json:"name"`
	SubCategories *[]SubCategoryModel `json:"subCategories"`
}

// CompanyActivityListRepresentation defines model for CompanyActivityListRepresentation.
type CompanyActivityListRepresentation struct {
	Items      *[]CompanyActivityModel `json:"items"`
	Links      *PageLinks              `json:"links,omitempty"`
	TotalCount int32                   `json:"totalCount"`
}

// CompanyActivityModel defines model for CompanyActivityModel.
type CompanyActivityModel struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CompanyId    *int32                   `json:"companyId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// CompanyActivityRepresentation defines model for CompanyActivityRepresentation.
type CompanyActivityRepresentation struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CompanyId    *int32                   `json:"companyId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Links        *ModelLinks              `json:"links,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// CompanyActivitySettingModel defines model for CompanyActivitySettingModel.
type CompanyActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// CompanyActivitySettingSummaryModel defines model for CompanyActivitySettingSummaryModel.
type CompanyActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// CompanyActivitySettingsListModel defines model for CompanyActivitySettingsListModel.
type CompanyActivitySettingsListModel struct {
	Items *[]CompanyActivitySettingSummaryModel `json:"items"`
}

// CompanyActivitySummaryListModel defines model for CompanyActivitySummaryListModel.
type CompanyActivitySummaryListModel struct {
	Items *[]CompanyActivitySummaryModel `json:"items"`
}

// CompanyActivitySummaryModel defines model for CompanyActivitySummaryModel.
type CompanyActivitySummaryModel struct {
	ActivityId   *int64         `json:"activityId,omitempty"`
	ActivityName *string        `json:"activityName"`
	ActivityType *string        `json:"activityType"`
	CompanyId    *int32         `json:"companyId,omitempty"`
	CreatedAt    *time.Time     `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`
	Status       *string        `json:"status"`
	UpdatedAt    *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// CompanyAddressListRepresentation defines model for CompanyAddressListRepresentation.
type CompanyAddressListRepresentation struct {
	Items *[]CompanyAddressModel `json:"items"`
	Links *ModelLinks            `json:"links,omitempty"`
}

// CompanyAddressModel defines model for CompanyAddressModel.
type CompanyAddressModel struct {
	AddressId   openapi_types.UUID `json:"addressId"`
	City        *string            `json:"city"`
	Country     *string            `json:"country"`
	CountryCode *string            `json:"countryCode"`
	Fax         *string            `json:"fax"`
	Name        *string            `json:"name"`
	Phone       *string            `json:"phone"`
	PostalCode  *string            `json:"postalCode"`
	State       *string            `json:"state"`
	Street      *[]string          `json:"street"`
	Url         *string            `json:"url"`
}

// CompanyAddressRepresentation defines model for CompanyAddressRepresentation.
type CompanyAddressRepresentation struct {
	AddressId   openapi_types.UUID `json:"addressId"`
	City        *string            `json:"city"`
	Country     *string            `json:"country"`
	CountryCode *string            `json:"countryCode"`
	Fax         *string            `json:"fax"`
	Links       *ModelLinks        `json:"links,omitempty"`
	Name        *string            `json:"name"`
	Phone       *string            `json:"phone"`
	PostalCode  *string            `json:"postalCode"`
	State       *string            `json:"state"`
	Street      *[]string          `json:"street"`
	Url         *string            `json:"url"`
}

// CompanyAttachmentCategoryListRepresentation defines model for CompanyAttachmentCategoryListRepresentation.
type CompanyAttachmentCategoryListRepresentation struct {
	Items *[]CompanyAttachmentCategoryModel `json:"items"`
	Links *ModelLinks                       `json:"links,omitempty"`
}

// CompanyAttachmentCategoryModel defines model for CompanyAttachmentCategoryModel.
type CompanyAttachmentCategoryModel struct {
	Category *string                `json:"category"`
	Type     *CompanyAttachmentType `json:"type,omitempty"`
}

// CompanyAttachmentLinks defines model for CompanyAttachmentLinks.
type CompanyAttachmentLinks struct {
	Self *string `json:"self"`
}

// CompanyAttachmentListRepresentation defines model for CompanyAttachmentListRepresentation.
type CompanyAttachmentListRepresentation struct {
	Items      *[]CompanyAttachmentModel `json:"items"`
	Links      *PageLinks                `json:"links,omitempty"`
	TotalCount int32                     `json:"totalCount"`
}

// CompanyAttachmentModel defines model for CompanyAttachmentModel.
type CompanyAttachmentModel struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date    `json:"expiry"`
	FileName  *string                `json:"fileName"`
	FileType  *string                `json:"fileType"`
	Type      *CompanyAttachmentType `json:"type,omitempty"`
	UpdatedAt *time.Time             `json:"updatedAt"`
}

// CompanyAttachmentRepresentation defines model for CompanyAttachmentRepresentation.
type CompanyAttachmentRepresentation struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date     `json:"expiry"`
	FileName  *string                 `json:"fileName"`
	FileType  *string                 `json:"fileType"`
	Links     *CompanyAttachmentLinks `json:"links,omitempty"`
	Type      *CompanyAttachmentType  `json:"type,omitempty"`
	UpdatedAt *time.Time              `json:"updatedAt"`
}

// CompanyAttachmentType defines model for CompanyAttachmentType.
type CompanyAttachmentType string

// CompanyLinks defines model for CompanyLinks.
type CompanyLinks struct {
	// Addresses Company addresses
	Addresses *string `json:"addresses"`

	// Attachments Attachments
	Attachments *string `json:"attachments"`

	// Contacts Company contacts
	Contacts *string `json:"contacts"`

	// Floats Company floats
	Floats *string `json:"floats"`

	// Jobs Company jobs
	Jobs *string `json:"jobs"`

	// Logo Company logo
	Logo *string `json:"logo"`

	// Notes Company notes
	Notes *string `json:"notes"`

	// Placements Company placements
	Placements *string `json:"placements"`

	// Requisitions Company requisitions
	Requisitions *string `json:"requisitions"`
	Self         *string `json:"self"`

	// Skills Skills
	Skills *string `json:"skills"`

	// Submissions Company submissions
	Submissions *string `json:"submissions"`

	// Subsidiaries Company subsidiaries
	Subsidiaries *string               `json:"subsidiaries"`
	Workflows    *CompanyWorkflowLinks `json:"workflows,omitempty"`
}

// CompanyListRepresentation defines model for CompanyListRepresentation.
type CompanyListRepresentation struct {
	Items      *[]CompanySummaryModel `json:"items"`
	Links      *PageLinks             `json:"links,omitempty"`
	TotalCount int32                  `json:"totalCount"`
}

// CompanyMatchedByPhoneModel defines model for CompanyMatchedByPhoneModel.
type CompanyMatchedByPhoneModel struct {
	CompanyId  *int32                   `json:"companyId,omitempty"`
	LastNoteAt *time.Time               `json:"lastNoteAt"`
	Match      *MatchedPhoneNumberModel `json:"match,omitempty"`
	Name       *string                  `json:"name"`
	UpdatedAt  *time.Time               `json:"updatedAt"`
}

// CompanyNameModel defines model for CompanyNameModel.
type CompanyNameModel struct {
	// CompanyId Unique identifier for the company
	CompanyId int32 `json:"companyId"`

	// Name Company name
	Name   *string        `json:"name"`
	Owner  *UserNameModel `json:"owner,omitempty"`
	Status *StatusModel   `json:"status,omitempty"`
}

// CompanyRepresentation defines model for CompanyRepresentation.
type CompanyRepresentation struct {
	// CompanyId Unique identifier for the company
	CompanyId   int32                    `json:"companyId"`
	CreatedAt   *time.Time               `json:"createdAt"`
	CreatedBy   *UserNameModel           `json:"createdBy,omitempty"`
	Custom      *[]CustomFieldValueModel `json:"custom"`
	LegalName   *string                  `json:"legalName"`
	Links       *CompanyLinks            `json:"links,omitempty"`
	MainContact *ContactNameModel        `json:"mainContact,omitempty"`

	// Name Company name
	Name           *string                    `json:"name"`
	Owner          *UserNameModel             `json:"owner,omitempty"`
	Parent         *CompanyNameModel          `json:"parent,omitempty"`
	PartnerActions *[]PartnerActionStageModel `json:"partnerActions"`
	PrimaryAddress *CompanyAddressModel       `json:"primaryAddress,omitempty"`
	Recruiters     *[]UserNameModel           `json:"recruiters"`

	// Social Company social profiles
	Social    *map[string]string `json:"social"`
	Status    *StatusModel       `json:"status,omitempty"`
	Summary   *string            `json:"summary"`
	UpdatedAt *time.Time         `json:"updatedAt"`
	UpdatedBy *UserNameModel     `json:"updatedBy,omitempty"`
}

// CompanySummaryModel defines model for CompanySummaryModel.
type CompanySummaryModel struct {
	// CompanyId Unique identifier for the company
	CompanyId   int32             `json:"companyId"`
	CreatedAt   *time.Time        `json:"createdAt"`
	CreatedBy   *UserNameModel    `json:"createdBy,omitempty"`
	MainContact *ContactNameModel `json:"mainContact,omitempty"`

	// Name Company name
	Name           *string              `json:"name"`
	Owner          *UserNameModel       `json:"owner,omitempty"`
	PrimaryAddress *CompanyAddressModel `json:"primaryAddress,omitempty"`
	Status         *StatusModel         `json:"status,omitempty"`
	UpdatedAt      *time.Time           `json:"updatedAt"`
	UpdatedBy      *UserNameModel       `json:"updatedBy,omitempty"`
}

// CompanyUserTaskModel defines model for CompanyUserTaskModel.
type CompanyUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	CompanyId       *int32                        `json:"companyId,omitempty"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// CompanyUserTaskRepresentation defines model for CompanyUserTaskRepresentation.
type CompanyUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	CompanyId       *int32                        `json:"companyId,omitempty"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// CompanyWorkflowApproverModel defines model for CompanyWorkflowApproverModel.
type CompanyWorkflowApproverModel struct {
	// ContactId Unique identifier for the contact
	ContactId int32 `json:"contactId"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// Inactive Contact is no longer with the company
	Inactive *bool `json:"inactive,omitempty"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string        `json:"mobileNormalized"`
	Owner            *UserNameModel `json:"owner,omitempty"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`

	// Salutation Salutation/honorific/title
	Salutation   *string      `json:"salutation"`
	StageIndex   int32        `json:"stageIndex"`
	Status       *StatusModel `json:"status,omitempty"`
	Unsubscribed *bool        `json:"unsubscribed,omitempty"`
}

// CompanyWorkflowLinks defines model for CompanyWorkflowLinks.
type CompanyWorkflowLinks struct {
	Requisition *string `json:"requisition"`
}

// CompanyWorkflowListRepresentation defines model for CompanyWorkflowListRepresentation.
type CompanyWorkflowListRepresentation struct {
	Items *[]CompanyWorkflowNameModel `json:"items"`
	Links *ModelLinks                 `json:"links,omitempty"`
}

// CompanyWorkflowModel defines model for CompanyWorkflowModel.
type CompanyWorkflowModel struct {
	Approvers  *[]CompanyWorkflowApproverModel `json:"approvers"`
	Archived   *bool                           `json:"archived,omitempty"`
	Name       string                          `json:"name"`
	WorkflowId int32                           `json:"workflowId"`
}

// CompanyWorkflowNameModel defines model for CompanyWorkflowNameModel.
type CompanyWorkflowNameModel struct {
	Archived   *bool  `json:"archived,omitempty"`
	Name       string `json:"name"`
	WorkflowId int32  `json:"workflowId"`
}

// CompanyWorkflowRepresentation defines model for CompanyWorkflowRepresentation.
type CompanyWorkflowRepresentation struct {
	Approvers  *[]CompanyWorkflowApproverModel `json:"approvers"`
	Archived   *bool                           `json:"archived,omitempty"`
	Links      *ModelLinks                     `json:"links,omitempty"`
	Name       string                          `json:"name"`
	WorkflowId int32                           `json:"workflowId"`
}

// CompanyWorkflowType defines model for CompanyWorkflowType.
type CompanyWorkflowType string

// ContactActivityListRepresentation defines model for ContactActivityListRepresentation.
type ContactActivityListRepresentation struct {
	Items      *[]ContactActivityModel `json:"items"`
	Links      *PageLinks              `json:"links,omitempty"`
	TotalCount int32                   `json:"totalCount"`
}

// ContactActivityModel defines model for ContactActivityModel.
type ContactActivityModel struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	ContactId    *int32                   `json:"contactId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// ContactActivityRepresentation defines model for ContactActivityRepresentation.
type ContactActivityRepresentation struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	ContactId    *int32                   `json:"contactId,omitempty"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Links        *ModelLinks              `json:"links,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// ContactActivitySettingModel defines model for ContactActivitySettingModel.
type ContactActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// ContactActivitySettingSummaryModel defines model for ContactActivitySettingSummaryModel.
type ContactActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// ContactActivitySettingsListModel defines model for ContactActivitySettingsListModel.
type ContactActivitySettingsListModel struct {
	Items *[]ContactActivitySettingSummaryModel `json:"items"`
}

// ContactActivitySummaryListModel defines model for ContactActivitySummaryListModel.
type ContactActivitySummaryListModel struct {
	Items *[]ContactActivitySummaryModel `json:"items"`
}

// ContactActivitySummaryModel defines model for ContactActivitySummaryModel.
type ContactActivitySummaryModel struct {
	ActivityId   *int64         `json:"activityId,omitempty"`
	ActivityName *string        `json:"activityName"`
	ActivityType *string        `json:"activityType"`
	ContactId    *int32         `json:"contactId,omitempty"`
	CreatedAt    *time.Time     `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`
	Status       *string        `json:"status"`
	UpdatedAt    *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// ContactAttachmentCategoryListRepresentation defines model for ContactAttachmentCategoryListRepresentation.
type ContactAttachmentCategoryListRepresentation struct {
	Items *[]ContactAttachmentCategoryModel `json:"items"`
	Links *ModelLinks                       `json:"links,omitempty"`
}

// ContactAttachmentCategoryModel defines model for ContactAttachmentCategoryModel.
type ContactAttachmentCategoryModel struct {
	Category *string                `json:"category"`
	Type     *ContactAttachmentType `json:"type,omitempty"`
}

// ContactAttachmentLinks defines model for ContactAttachmentLinks.
type ContactAttachmentLinks struct {
	Self *string `json:"self"`
}

// ContactAttachmentListRepresentation defines model for ContactAttachmentListRepresentation.
type ContactAttachmentListRepresentation struct {
	Items      *[]ContactAttachmentModel `json:"items"`
	Links      *PageLinks                `json:"links,omitempty"`
	TotalCount int32                     `json:"totalCount"`
}

// ContactAttachmentModel defines model for ContactAttachmentModel.
type ContactAttachmentModel struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date    `json:"expiry"`
	FileName  *string                `json:"fileName"`
	FileType  *string                `json:"fileType"`
	Type      *ContactAttachmentType `json:"type,omitempty"`
	UpdatedAt *time.Time             `json:"updatedAt"`
}

// ContactAttachmentRepresentation defines model for ContactAttachmentRepresentation.
type ContactAttachmentRepresentation struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date     `json:"expiry"`
	FileName  *string                 `json:"fileName"`
	FileType  *string                 `json:"fileType"`
	Links     *ContactAttachmentLinks `json:"links,omitempty"`
	Type      *ContactAttachmentType  `json:"type,omitempty"`
	UpdatedAt *time.Time              `json:"updatedAt"`
}

// ContactAttachmentType defines model for ContactAttachmentType.
type ContactAttachmentType string

// ContactLinks defines model for ContactLinks.
type ContactLinks struct {
	// Attachments Attachments
	Attachments *string `json:"attachments"`

	// Candidate Optional candidate if contact is also a candidate
	Candidate *string `json:"candidate"`

	// Company Company
	Company *string `json:"company"`

	// Floats Floats
	Floats *string `json:"floats"`

	// Jobs Jobs
	Jobs *string `json:"jobs"`

	// Notes Notes
	Notes *string `json:"notes"`

	// OfficeAddress Office address
	OfficeAddress *string `json:"officeAddress"`

	// Photo Photo
	Photo *string `json:"photo"`
	Self  *string `json:"self"`

	// Skills Skills
	Skills *string `json:"skills"`

	// Submissions Submissions
	Submissions *string `json:"submissions"`
}

// ContactListRepresentation defines model for ContactListRepresentation.
type ContactListRepresentation struct {
	Items      *[]ContactSummaryModel `json:"items"`
	Links      *PageLinks             `json:"links,omitempty"`
	TotalCount int32                  `json:"totalCount"`
}

// ContactMatchedByEmailModel defines model for ContactMatchedByEmailModel.
type ContactMatchedByEmailModel struct {
	Company    *MatchedEmailAddressModelCompanyName `json:"company,omitempty"`
	ContactId  *int32                               `json:"contactId,omitempty"`
	Email      *string                              `json:"email"`
	FirstName  *string                              `json:"firstName"`
	LastName   *string                              `json:"lastName"`
	LastNoteAt *time.Time                           `json:"lastNoteAt"`
	Match      *MatchedEmailAddressModel            `json:"match,omitempty"`
	Mobile     *string                              `json:"mobile"`
	Phone      *string                              `json:"phone"`
	Position   *string                              `json:"position"`
	UpdatedAt  *time.Time                           `json:"updatedAt"`
}

// ContactMatchedByPhoneModel defines model for ContactMatchedByPhoneModel.
type ContactMatchedByPhoneModel struct {
	Company    *MatchedPhoneNumberModelCompanyName `json:"company,omitempty"`
	ContactId  *int32                              `json:"contactId,omitempty"`
	Email      *string                             `json:"email"`
	FirstName  *string                             `json:"firstName"`
	LastName   *string                             `json:"lastName"`
	LastNoteAt *time.Time                          `json:"lastNoteAt"`
	Match      *MatchedPhoneNumberModel            `json:"match,omitempty"`
	Mobile     *string                             `json:"mobile"`
	Phone      *string                             `json:"phone"`
	Position   *string                             `json:"position"`
	UpdatedAt  *time.Time                          `json:"updatedAt"`
}

// ContactNameModel defines model for ContactNameModel.
type ContactNameModel struct {
	// ContactId Unique identifier for the contact
	ContactId int32 `json:"contactId"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// Inactive Contact is no longer with the company
	Inactive *bool `json:"inactive,omitempty"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string        `json:"mobileNormalized"`
	Owner            *UserNameModel `json:"owner,omitempty"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`

	// Salutation Salutation/honorific/title
	Salutation   *string      `json:"salutation"`
	Status       *StatusModel `json:"status,omitempty"`
	Unsubscribed *bool        `json:"unsubscribed,omitempty"`
}

// ContactRepresentation defines model for ContactRepresentation.
type ContactRepresentation struct {
	Company *CompanyNameModel `json:"company,omitempty"`

	// ContactId Unique identifier for the contact
	ContactId int32                    `json:"contactId"`
	CreatedAt *time.Time               `json:"createdAt"`
	CreatedBy *UserNameModel           `json:"createdBy,omitempty"`
	Custom    *[]CustomFieldValueModel `json:"custom"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName     *string `json:"firstName"`
	HiringManager *bool   `json:"hiringManager,omitempty"`

	// Inactive Contact is no longer with the company
	Inactive *bool `json:"inactive,omitempty"`

	// LastName Last name
	LastName *string       `json:"lastName"`
	Links    *ContactLinks `json:"links,omitempty"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string              `json:"mobileNormalized"`
	OfficeAddress    *CompanyAddressModel `json:"officeAddress,omitempty"`

	// OriginalContactId contactId from the original/first company when a contact moves between companies
	OriginalContactId *int32 `json:"originalContactId"`

	// OtherEmail Other email addresses used by the contact
	OtherEmail     *[]string                  `json:"otherEmail"`
	Owner          *UserNameModel             `json:"owner,omitempty"`
	PartnerActions *[]PartnerActionStageModel `json:"partnerActions"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`

	// PreviousContactId contactId from the previous company when a contact moves between companies
	PreviousContactId *int32            `json:"previousContactId"`
	Recruiters        *[]UserNameModel  `json:"recruiters"`
	ReportsTo         *ContactNameModel `json:"reportsTo,omitempty"`

	// Salutation Salutation/honorific/title
	Salutation *string `json:"salutation"`

	// Social Contact social profiles
	Social       *map[string]string `json:"social"`
	Status       *StatusModel       `json:"status,omitempty"`
	Summary      *string            `json:"summary"`
	Unsubscribed *bool              `json:"unsubscribed,omitempty"`
	UpdatedAt    *time.Time         `json:"updatedAt"`
	UpdatedBy    *UserNameModel     `json:"updatedBy,omitempty"`
}

// ContactSummaryModel defines model for ContactSummaryModel.
type ContactSummaryModel struct {
	Company *CompanyNameModel `json:"company,omitempty"`

	// ContactId Unique identifier for the contact
	ContactId int32          `json:"contactId"`
	CreatedAt *time.Time     `json:"createdAt"`
	CreatedBy *UserNameModel `json:"createdBy,omitempty"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// Inactive Contact is no longer with the company
	Inactive *bool `json:"inactive,omitempty"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string              `json:"mobileNormalized"`
	OfficeAddress    *CompanyAddressModel `json:"officeAddress,omitempty"`

	// OriginalContactId contactId from the original/first company when a contact moves between companies
	OriginalContactId *int32         `json:"originalContactId"`
	Owner             *UserNameModel `json:"owner,omitempty"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`

	// PreviousContactId contactId from the previous company when a contact moves between companies
	PreviousContactId *int32 `json:"previousContactId"`

	// Salutation Salutation/honorific/title
	Salutation   *string        `json:"salutation"`
	Status       *StatusModel   `json:"status,omitempty"`
	Unsubscribed *bool          `json:"unsubscribed,omitempty"`
	UpdatedAt    *time.Time     `json:"updatedAt"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// ContactUserTaskModel defines model for ContactUserTaskModel.
type ContactUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	ContactId       *int32                        `json:"contactId,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// ContactUserTaskRepresentation defines model for ContactUserTaskRepresentation.
type ContactUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	ContactId       *int32                        `json:"contactId,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// CountryListRepresentation defines model for CountryListRepresentation.
type CountryListRepresentation struct {
	Items *[]CountryModel `json:"items"`
	Links *ModelLinks     `json:"links,omitempty"`
}

// CountryModel defines model for CountryModel.
type CountryModel struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

// CreatedOpportunityModel defines model for CreatedOpportunityModel.
type CreatedOpportunityModel struct {
	OpportunityId *openapi_types.UUID `json:"opportunityId,omitempty"`
}

// CreatedPlacementModel defines model for CreatedPlacementModel.
type CreatedPlacementModel struct {
	PlacementId *int32 `json:"placementId,omitempty"`
}

// CurrentEmploymentModel defines model for CurrentEmploymentModel.
type CurrentEmploymentModel struct {
	Employer *string        `json:"employer"`
	Position *string        `json:"position"`
	Salary   *SalaryModel   `json:"salary,omitempty"`
	WorkType *WorkTypeModel `json:"workType,omitempty"`
}

// CustomFieldListRepresentation defines model for CustomFieldListRepresentation.
type CustomFieldListRepresentation struct {
	Items *[]CustomFieldModel `json:"items"`
	Links *ModelLinks         `json:"links,omitempty"`
}

// CustomFieldModel defines model for CustomFieldModel.
type CustomFieldModel struct {
	FieldId int32 `json:"fieldId"`

	// Mandatory Field is mandatory and a value must be provided
	Mandatory *bool `json:"mandatory"`

	// MaxLength Maximum length of a text field
	MaxLength *int32 `json:"maxLength"`

	// MultiLine Text field can contain a multi-line value
	MultiLine *bool `json:"multiLine"`

	// MultiSelect List field allows multiple selections
	MultiSelect *bool  `json:"multiSelect"`
	Name        string `json:"name"`

	// Type The type of value a custom field expects
	Type CustomFieldType `json:"type"`

	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// CustomFieldRepresentation defines model for CustomFieldRepresentation.
type CustomFieldRepresentation struct {
	FieldId int32       `json:"fieldId"`
	Links   *ModelLinks `json:"links,omitempty"`

	// Mandatory Field is mandatory and a value must be provided
	Mandatory *bool `json:"mandatory"`

	// MaxLength Maximum length of a text field
	MaxLength *int32 `json:"maxLength"`

	// MultiLine Text field can contain a multi-line value
	MultiLine *bool `json:"multiLine"`

	// MultiSelect List field allows multiple selections
	MultiSelect *bool  `json:"multiSelect"`
	Name        string `json:"name"`

	// Type The type of value a custom field expects
	Type CustomFieldType `json:"type"`

	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// CustomFieldType The type of value a custom field expects
type CustomFieldType string

// CustomFieldValueModel Custom field value
type CustomFieldValueModel struct {
	FieldId int32  `json:"fieldId"`
	Name    string `json:"name"`

	// Type The type of value a custom field expects
	Type CustomFieldType `json:"type"`

	// Value Text, List or Date value for this custom field (depending on the field "type")
	Value *interface{} `json:"value"`
}

// DateRangeModel defines model for DateRangeModel.
type DateRangeModel struct {
	End   openapi_types.Date `json:"end"`
	Start openapi_types.Date `json:"start"`
}

// DayOfWeek defines model for DayOfWeek.
type DayOfWeek string

// DeletedCandidateListModel defines model for DeletedCandidateListModel.
type DeletedCandidateListModel struct {
	Items *[]DeletedCandidateModel `json:"items"`
}

// DeletedCandidateModel defines model for DeletedCandidateModel.
type DeletedCandidateModel struct {
	CandidateId *int32     `json:"candidateId,omitempty"`
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
}

// DeletedCompanyListModel defines model for DeletedCompanyListModel.
type DeletedCompanyListModel struct {
	Items *[]DeletedCompanyModel `json:"items"`
}

// DeletedCompanyModel defines model for DeletedCompanyModel.
type DeletedCompanyModel struct {
	CompanyId *int32     `json:"companyId,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

// DeletedContactListModel defines model for DeletedContactListModel.
type DeletedContactListModel struct {
	Items *[]DeletedContactModel `json:"items"`
}

// DeletedContactModel defines model for DeletedContactModel.
type DeletedContactModel struct {
	ContactId *int32     `json:"contactId,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

// DeletedJobApplicationListModel defines model for DeletedJobApplicationListModel.
type DeletedJobApplicationListModel struct {
	Items *[]DeletedJobApplicationModel `json:"items"`
}

// DeletedJobApplicationModel defines model for DeletedJobApplicationModel.
type DeletedJobApplicationModel struct {
	ApplicationId *int64     `json:"applicationId,omitempty"`
	DeletedAt     *time.Time `json:"deletedAt,omitempty"`
}

// DeletedJobOrderListModel defines model for DeletedJobOrderListModel.
type DeletedJobOrderListModel struct {
	Items *[]DeletedJobOrderModel `json:"items"`
}

// DeletedJobOrderModel defines model for DeletedJobOrderModel.
type DeletedJobOrderModel struct {
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	JobId     *int32     `json:"jobId,omitempty"`
}

// DeletedPlacementListModel defines model for DeletedPlacementListModel.
type DeletedPlacementListModel struct {
	Items *[]DeletedPlacementModel `json:"items"`
}

// DeletedPlacementModel defines model for DeletedPlacementModel.
type DeletedPlacementModel struct {
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
	PlacementId *int32     `json:"placementId,omitempty"`
}

// DurationModel defines model for DurationModel.
type DurationModel struct {
	Period *int32        `json:"period,omitempty"`
	Unit   *DurationUnit `json:"unit,omitempty"`
}

// DurationUnit defines model for DurationUnit.
type DurationUnit string

// EmailAddressMatchType defines model for EmailAddressMatchType.
type EmailAddressMatchType string

// ErrorCode defines model for ErrorCode.
type ErrorCode string

// ErrorItemModel defines model for ErrorItemModel.
type ErrorItemModel struct {
	Code    *ErrorCode `json:"code,omitempty"`
	Fields  *[]string  `json:"fields"`
	Message *string    `json:"message"`
}

// ErrorModel defines model for ErrorModel.
type ErrorModel struct {
	Errors  *[]ErrorItemModel `json:"errors"`
	Message string            `json:"message"`
}

// EventName defines model for EventName.
type EventName string

// FindCandidateActivitySettingsQuery defines model for FindCandidateActivitySettingsQuery.
type FindCandidateActivitySettingsQuery = map[string]interface{}

// FindCategoriesEmbed defines model for FindCategoriesEmbed.
type FindCategoriesEmbed string

// FindCompanyActivitySettingsQuery defines model for FindCompanyActivitySettingsQuery.
type FindCompanyActivitySettingsQuery = map[string]interface{}

// FindCompanyWorkflowsInclude defines model for FindCompanyWorkflowsInclude.
type FindCompanyWorkflowsInclude string

// FindContactActivitySettingsQuery defines model for FindContactActivitySettingsQuery.
type FindContactActivitySettingsQuery = map[string]interface{}

// FindJobApplicationActivitySettingsQuery defines model for FindJobApplicationActivitySettingsQuery.
type FindJobApplicationActivitySettingsQuery = map[string]interface{}

// FindJobOrderActivitySettingsQuery defines model for FindJobOrderActivitySettingsQuery.
type FindJobOrderActivitySettingsQuery = map[string]interface{}

// FindLocationsEmbed defines model for FindLocationsEmbed.
type FindLocationsEmbed string

// FindPlacementActivitySettingsQuery defines model for FindPlacementActivitySettingsQuery.
type FindPlacementActivitySettingsQuery = map[string]interface{}

// FindPlacementByExport Search for placements that should be exported to payroll, timesheets or onboarding
type FindPlacementByExport string

// FindUserTasksInclude defines model for FindUserTasksInclude.
type FindUserTasksInclude string

// FindUsersInclude defines model for FindUsersInclude.
type FindUsersInclude string

// FloatLinks defines model for FloatLinks.
type FloatLinks struct {
	// Notes Notes
	Notes *string `json:"notes"`
	Self  *string `json:"self"`
}

// FloatListRepresentation defines model for FloatListRepresentation.
type FloatListRepresentation struct {
	Items      *[]FloatSummaryModel `json:"items"`
	Links      *PageLinks           `json:"links,omitempty"`
	TotalCount int32                `json:"totalCount"`
}

// FloatRepresentation defines model for FloatRepresentation.
type FloatRepresentation struct {
	Candidate        *CandidateSummaryModel `json:"candidate,omitempty"`
	CandidateSummary *string                `json:"candidateSummary"`
	Company          *CompanyNameModel      `json:"company,omitempty"`
	Contacts         *[]ContactNameModel    `json:"contacts"`
	CreatedAt        *time.Time             `json:"createdAt"`
	CreatedBy        *UserNameModel         `json:"createdBy,omitempty"`
	FloatId          int64                  `json:"floatId"`
	JobTitle         *string                `json:"jobTitle"`
	Links            *FloatLinks            `json:"links,omitempty"`
	Owner            *UserNameModel         `json:"owner,omitempty"`
	UpdatedAt        *time.Time             `json:"updatedAt"`
	UpdatedBy        *UserNameModel         `json:"updatedBy,omitempty"`
}

// FloatSummaryModel defines model for FloatSummaryModel.
type FloatSummaryModel struct {
	Candidate *CandidateSummaryModel `json:"candidate,omitempty"`
	Company   *CompanyNameModel      `json:"company,omitempty"`
	CreatedAt *time.Time             `json:"createdAt"`
	CreatedBy *UserNameModel         `json:"createdBy,omitempty"`
	FloatId   int64                  `json:"floatId"`
	JobTitle  *string                `json:"jobTitle"`
	UpdatedAt *time.Time             `json:"updatedAt"`
	UpdatedBy *UserNameModel         `json:"updatedBy,omitempty"`
}

// FolderLinks defines model for FolderLinks.
type FolderLinks struct {
	Self *string `json:"self"`
}

// FolderListRepresentation defines model for FolderListRepresentation.
type FolderListRepresentation struct {
	Items      *[]FolderNameModel `json:"items"`
	Links      *PageLinks         `json:"links,omitempty"`
	TotalCount int32              `json:"totalCount"`
}

// FolderNameModel defines model for FolderNameModel.
type FolderNameModel struct {
	CreatedAt *time.Time     `json:"createdAt,omitempty"`
	FolderId  int64          `json:"folderId"`
	Name      *string        `json:"name"`
	Owner     *UserNameModel `json:"owner,omitempty"`
	UpdatedAt *time.Time     `json:"updatedAt,omitempty"`
}

// FolderOwnerStatus defines model for FolderOwnerStatus.
type FolderOwnerStatus string

// FolderRepresentation defines model for FolderRepresentation.
type FolderRepresentation struct {
	Applications *[]JobApplicationSummaryModel `json:"applications"`
	Candidates   *[]CandidateNameModel         `json:"candidates"`
	Companies    *[]CompanyNameModel           `json:"companies"`
	Contacts     *[]ContactNameModel           `json:"contacts"`
	CreatedAt    *time.Time                    `json:"createdAt,omitempty"`
	EntityIDs    *map[string][]int64           `json:"entityIDs"`
	FolderId     int64                         `json:"folderId"`
	Jobs         *[]JobOrderTitleModel         `json:"jobs"`
	Links        *FolderLinks                  `json:"links,omitempty"`
	Name         *string                       `json:"name"`
	Owner        *UserNameModel                `json:"owner,omitempty"`
	Placements   *[]PlacementSummaryModel      `json:"placements"`
	SharedWith   *[]UserNameModel              `json:"sharedWith"`
	UpdatedAt    *time.Time                    `json:"updatedAt,omitempty"`
}

// GetJobApplicationStatusByWorkflowListQuery defines model for GetJobApplicationStatusByWorkflowListQuery.
type GetJobApplicationStatusByWorkflowListQuery = map[string]interface{}

// InterviewEvaluationListRepresentation defines model for InterviewEvaluationListRepresentation.
type InterviewEvaluationListRepresentation struct {
	Items *[]InterviewEvaluationModel `json:"items"`
	Links *ModelLinks                 `json:"links,omitempty"`
}

// InterviewEvaluationModel defines model for InterviewEvaluationModel.
type InterviewEvaluationModel struct {
	Comments   *string                           `json:"comments"`
	Contact    *ContactNameModel                 `json:"contact,omitempty"`
	ExpiresAt  *time.Time                        `json:"expiresAt,omitempty"`
	HasReplied *bool                             `json:"hasReplied,omitempty"`
	Rating     *[]InterviewEvaluationRatingModel `json:"rating"`
	User       *UserNameModel                    `json:"user,omitempty"`
}

// InterviewEvaluationRatingModel defines model for InterviewEvaluationRatingModel.
type InterviewEvaluationRatingModel struct {
	// Criteria Criteria being rated
	Criteria *string `json:"criteria"`

	// Rating Criteria rating, from 0 to 100
	Rating *int32 `json:"rating"`
}

// InterviewEvaluationRepresentation defines model for InterviewEvaluationRepresentation.
type InterviewEvaluationRepresentation struct {
	Comments   *string                           `json:"comments"`
	Contact    *ContactNameModel                 `json:"contact,omitempty"`
	ExpiresAt  *time.Time                        `json:"expiresAt,omitempty"`
	HasReplied *bool                             `json:"hasReplied,omitempty"`
	Links      *ModelLinks                       `json:"links,omitempty"`
	Rating     *[]InterviewEvaluationRatingModel `json:"rating"`
	User       *UserNameModel                    `json:"user,omitempty"`
}

// InterviewInterviewersModel Internal/user and External/contact interviewers
type InterviewInterviewersModel struct {
	// Contacts External/contact interviewers
	Contacts *[]ContactNameModel `json:"contacts"`

	// Users Internal/user interviewers
	Users *[]UserNameModel `json:"users"`
}

// InterviewLinks defines model for InterviewLinks.
type InterviewLinks struct {
	// Evaluations Evaluations and ratings
	Evaluations *string `json:"evaluations"`
	Self        *string `json:"self"`
}

// InterviewListRepresentation defines model for InterviewListRepresentation.
type InterviewListRepresentation struct {
	Items      *[]InterviewSummaryModel `json:"items"`
	Links      *PageLinks               `json:"links,omitempty"`
	TotalCount int32                    `json:"totalCount"`
}

// InterviewModel defines model for InterviewModel.
type InterviewModel struct {
	CreatedAt   *time.Time                 `json:"createdAt,omitempty"`
	CreatedBy   *UserNameModel             `json:"createdBy,omitempty"`
	EndAt       *time.Time                 `json:"endAt,omitempty"`
	InterviewId int32                      `json:"interviewId"`
	Interviewee JobApplicationSummaryModel `json:"interviewee"`

	// Interviewers Internal/user and External/contact interviewers
	Interviewers *InterviewInterviewersModel `json:"interviewers,omitempty"`
	Location     *string                     `json:"location"`
	StartAt      *time.Time                  `json:"startAt,omitempty"`
	Type         InterviewType               `json:"type"`
	UpdatedAt    *time.Time                  `json:"updatedAt,omitempty"`
}

// InterviewRepresentation defines model for InterviewRepresentation.
type InterviewRepresentation struct {
	CreatedAt   *time.Time                 `json:"createdAt,omitempty"`
	CreatedBy   *UserNameModel             `json:"createdBy,omitempty"`
	EndAt       *time.Time                 `json:"endAt,omitempty"`
	InterviewId int32                      `json:"interviewId"`
	Interviewee JobApplicationSummaryModel `json:"interviewee"`

	// Interviewers Internal/user and External/contact interviewers
	Interviewers *InterviewInterviewersModel `json:"interviewers,omitempty"`
	Links        *InterviewLinks             `json:"links,omitempty"`
	Location     *string                     `json:"location"`
	StartAt      *time.Time                  `json:"startAt,omitempty"`
	Type         InterviewType               `json:"type"`
	UpdatedAt    *time.Time                  `json:"updatedAt,omitempty"`
}

// InterviewSummaryModel defines model for InterviewSummaryModel.
type InterviewSummaryModel struct {
	CreatedAt   *time.Time                 `json:"createdAt,omitempty"`
	CreatedBy   *UserNameModel             `json:"createdBy,omitempty"`
	EndAt       *time.Time                 `json:"endAt,omitempty"`
	InterviewId int32                      `json:"interviewId"`
	Interviewee JobApplicationSummaryModel `json:"interviewee"`

	// Interviewers Internal/user and External/contact interviewers
	Interviewers *InterviewInterviewersModel `json:"interviewers,omitempty"`
	Location     *string                     `json:"location"`
	StartAt      *time.Time                  `json:"startAt,omitempty"`
	Type         InterviewType               `json:"type"`
	UpdatedAt    *time.Time                  `json:"updatedAt,omitempty"`
}

// InterviewType defines model for InterviewType.
type InterviewType string

// JobAdLinks defines model for JobAdLinks.
type JobAdLinks struct {
	// Applications Job applications
	Applications *string `json:"applications"`

	// Company Company
	Company *string `json:"company"`

	// Contact Contact
	Contact *string `json:"contact"`

	// Job Job
	Job  *string `json:"job"`
	Self *string `json:"self"`
}

// JobAdListRepresentation defines model for JobAdListRepresentation.
type JobAdListRepresentation struct {
	Items      *[]JobAdSummaryModel `json:"items"`
	Links      *PageLinks           `json:"links,omitempty"`
	TotalCount int32                `json:"totalCount"`
}

// JobAdOtherApplyUrlModel defines model for JobAdOtherApplyUrlModel.
type JobAdOtherApplyUrlModel struct {
	Name *string `json:"name"`
	Url  *string `json:"url"`
}

// JobAdPortalChildFieldModel defines model for JobAdPortalChildFieldModel.
type JobAdPortalChildFieldModel struct {
	ExternalValue *string `json:"externalValue"`
	FieldId       *int32  `json:"fieldId,omitempty"`
	FieldName     *string `json:"fieldName"`
	Value         *string `json:"value"`
	ValueId       *int32  `json:"valueId"`
}

// JobAdPortalFieldModel defines model for JobAdPortalFieldModel.
type JobAdPortalFieldModel struct {
	ExternalValue *string                       `json:"externalValue"`
	FieldId       *int32                        `json:"fieldId,omitempty"`
	FieldName     *string                       `json:"fieldName"`
	Fields        *[]JobAdPortalChildFieldModel `json:"fields"`
	Value         *string                       `json:"value"`
	ValueId       *int32                        `json:"valueId"`
}

// JobAdPortalModel defines model for JobAdPortalModel.
type JobAdPortalModel struct {
	Fields *[]JobAdPortalFieldModel `json:"fields"`

	// HotJob Classed as a hot job
	HotJob   *bool                   `json:"hotJob,omitempty"`
	Salary   *JobAdPortalSalaryModel `json:"salary,omitempty"`
	Template *string                 `json:"template"`
}

// JobAdPortalSalaryModel defines model for JobAdPortalSalaryModel.
type JobAdPortalSalaryModel struct {
	Details  *string        `json:"details"`
	RateHigh *float64       `json:"rateHigh"`
	RateLow  *float64       `json:"rateLow"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`
}

// JobAdPortalSummaryModel defines model for JobAdPortalSummaryModel.
type JobAdPortalSummaryModel struct {
	// HotJob Classed as a hot job
	HotJob   *bool                   `json:"hotJob,omitempty"`
	Salary   *JobAdPortalSalaryModel `json:"salary,omitempty"`
	Template *string                 `json:"template"`
}

// JobAdRepresentation defines model for JobAdRepresentation.
type JobAdRepresentation struct {
	AdId           int32                          `json:"adId"`
	BulletPoints   *[]string                      `json:"bulletPoints"`
	Company        *CompanyNameModel              `json:"company,omitempty"`
	Contact        *ContactNameModel              `json:"contact,omitempty"`
	CreatedAt      *time.Time                     `json:"createdAt"`
	CreatedBy      *UserNameModel                 `json:"createdBy,omitempty"`
	Description    *string                        `json:"description"`
	ExpireAt       *time.Time                     `json:"expireAt"`
	Job            *JobOrderTitleModel            `json:"job,omitempty"`
	JobBoards      *[]JobBoardSummaryModel        `json:"jobBoards"`
	Links          *JobAdLinks                    `json:"links,omitempty"`
	OtherApplyUrls *[]JobAdOtherApplyUrlModel     `json:"otherApplyUrls"`
	Owner          *UserNameModel                 `json:"owner,omitempty"`
	PartnerActions *[]PartnerActionStageModel     `json:"partnerActions"`
	PostAt         *time.Time                     `json:"postAt"`
	Reference      *string                        `json:"reference"`
	Screening      *[]JobAdScreeningQuestionModel `json:"screening"`
	State          *string                        `json:"state"`
	Summary        *string                        `json:"summary"`
	Title          *string                        `json:"title"`
}

// JobAdScreeningAnswerType defines model for JobAdScreeningAnswerType.
type JobAdScreeningAnswerType string

// JobAdScreeningQuestionModel defines model for JobAdScreeningQuestionModel.
type JobAdScreeningQuestionModel struct {
	AnswerType *JobAdScreeningAnswerType `json:"answerType,omitempty"`

	// Mandatory Field is mandatory and a value must be provided
	Mandatory *bool `json:"mandatory"`

	// MaxLength Maximum length of a text field
	MaxLength *int32 `json:"maxLength"`

	// MultiSelect List selection allows multiple values
	MultiSelect *bool   `json:"multiSelect"`
	Question    *string `json:"question"`

	// Values List of predefined values to select from
	Values *[]string `json:"values"`
}

// JobAdSummaryModel defines model for JobAdSummaryModel.
type JobAdSummaryModel struct {
	AdId         int32          `json:"adId"`
	BulletPoints *[]string      `json:"bulletPoints"`
	ExpireAt     *time.Time     `json:"expireAt"`
	Owner        *UserNameModel `json:"owner,omitempty"`
	PostAt       *time.Time     `json:"postAt"`
	Reference    *string        `json:"reference"`
	State        *string        `json:"state"`
	Summary      *string        `json:"summary"`
	Title        *string        `json:"title"`
}

// JobApplicationActivityListRepresentation defines model for JobApplicationActivityListRepresentation.
type JobApplicationActivityListRepresentation struct {
	Items      *[]JobApplicationActivityModel `json:"items"`
	Links      *PageLinks                     `json:"links,omitempty"`
	TotalCount int32                          `json:"totalCount"`
}

// JobApplicationActivityModel defines model for JobApplicationActivityModel.
type JobApplicationActivityModel struct {
	ActivityId    *int64                   `json:"activityId,omitempty"`
	ActivityName  *string                  `json:"activityName"`
	ActivityType  *string                  `json:"activityType"`
	ApplicationId *int64                   `json:"applicationId,omitempty"`
	CreatedAt     *time.Time               `json:"createdAt,omitempty"`
	CreatedBy     *UserNameModel           `json:"createdBy,omitempty"`
	Details       *ActivityDetailListModel `json:"details,omitempty"`
	Status        *string                  `json:"status"`
	UpdatedAt     *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy     *UserNameModel           `json:"updatedBy,omitempty"`
}

// JobApplicationActivityRepresentation defines model for JobApplicationActivityRepresentation.
type JobApplicationActivityRepresentation struct {
	ActivityId    *int64                   `json:"activityId,omitempty"`
	ActivityName  *string                  `json:"activityName"`
	ActivityType  *string                  `json:"activityType"`
	ApplicationId *int64                   `json:"applicationId,omitempty"`
	CreatedAt     *time.Time               `json:"createdAt,omitempty"`
	CreatedBy     *UserNameModel           `json:"createdBy,omitempty"`
	Details       *ActivityDetailListModel `json:"details,omitempty"`
	Links         *ModelLinks              `json:"links,omitempty"`
	Status        *string                  `json:"status"`
	UpdatedAt     *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy     *UserNameModel           `json:"updatedBy,omitempty"`
}

// JobApplicationActivitySettingModel defines model for JobApplicationActivitySettingModel.
type JobApplicationActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// JobApplicationActivitySettingSummaryModel defines model for JobApplicationActivitySettingSummaryModel.
type JobApplicationActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// JobApplicationActivitySettingsListModel defines model for JobApplicationActivitySettingsListModel.
type JobApplicationActivitySettingsListModel struct {
	Items *[]JobApplicationActivitySettingSummaryModel `json:"items"`
}

// JobApplicationActivitySummaryListModel defines model for JobApplicationActivitySummaryListModel.
type JobApplicationActivitySummaryListModel struct {
	Items *[]JobApplicationActivitySummaryModel `json:"items"`
}

// JobApplicationActivitySummaryModel defines model for JobApplicationActivitySummaryModel.
type JobApplicationActivitySummaryModel struct {
	ActivityId    *int64         `json:"activityId,omitempty"`
	ActivityName  *string        `json:"activityName"`
	ActivityType  *string        `json:"activityType"`
	ApplicationId *int64         `json:"applicationId,omitempty"`
	CreatedAt     *time.Time     `json:"createdAt,omitempty"`
	CreatedBy     *UserNameModel `json:"createdBy,omitempty"`
	Status        *string        `json:"status"`
	UpdatedAt     *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy     *UserNameModel `json:"updatedBy,omitempty"`
}

// JobApplicationLinks defines model for JobApplicationLinks.
type JobApplicationLinks struct {
	// Attachments Attachments
	Attachments *string `json:"attachments"`
	CoverLetter *string `json:"coverLetter"`
	Resume      *string `json:"resume"`
	Self        *string `json:"self"`
}

// JobApplicationListRepresentation defines model for JobApplicationListRepresentation.
type JobApplicationListRepresentation struct {
	Items      *[]JobApplicationSummaryModel `json:"items"`
	Links      *PageLinks                    `json:"links,omitempty"`
	TotalCount int32                         `json:"totalCount"`
}

// JobApplicationRepresentation defines model for JobApplicationRepresentation.
type JobApplicationRepresentation struct {
	ApplicationId    int64                                `json:"applicationId"`
	Candidate        *CandidateNameModel                  `json:"candidate,omitempty"`
	CreatedAt        *time.Time                           `json:"createdAt"`
	CreatedBy        *UserNameModel                       `json:"createdBy,omitempty"`
	Custom           *[]CustomFieldValueModel             `json:"custom"`
	Job              *JobOrderTitleModel                  `json:"job,omitempty"`
	JobAd            *JobAdSummaryModel                   `json:"jobAd,omitempty"`
	JobReference     *string                              `json:"jobReference"`
	JobTitle         *string                              `json:"jobTitle"`
	Links            *JobApplicationLinks                 `json:"links,omitempty"`
	Manual           *bool                                `json:"manual,omitempty"`
	Owner            *UserNameModel                       `json:"owner,omitempty"`
	PartnerActions   *[]PartnerActionStageModel           `json:"partnerActions"`
	Rating           *int32                               `json:"rating"`
	Review           *JobApplicationReviewModel           `json:"review,omitempty"`
	Screening        *JobApplicationScreeningModel        `json:"screening,omitempty"`
	Source           *string                              `json:"source"`
	Status           *JobApplicationStatusModel           `json:"status,omitempty"`
	SubmittedDetails *JobApplicationSubmittedDetailsModel `json:"submittedDetails,omitempty"`
	UpdatedAt        *time.Time                           `json:"updatedAt"`
	UpdatedBy        *UserNameModel                       `json:"updatedBy,omitempty"`
}

// JobApplicationReviewModel defines model for JobApplicationReviewModel.
type JobApplicationReviewModel struct {
	ReviewedAt  *time.Time                `json:"reviewedAt"`
	ReviewedBy  *ContactNameModel         `json:"reviewedBy,omitempty"`
	Stage       JobApplicationReviewStage `json:"stage"`
	SubmittedAt *time.Time                `json:"submittedAt"`
	SubmittedBy *UserNameModel            `json:"submittedBy,omitempty"`
}

// JobApplicationReviewStage defines model for JobApplicationReviewStage.
type JobApplicationReviewStage string

// JobApplicationScreeningModel defines model for JobApplicationScreeningModel.
type JobApplicationScreeningModel struct {
	Questions *[]JobApplicationScreeningQuestionModel `json:"questions"`
	Score     *float64                                `json:"score"`
}

// JobApplicationScreeningQuestionModel defines model for JobApplicationScreeningQuestionModel.
type JobApplicationScreeningQuestionModel struct {
	Answers  *[]string `json:"answers"`
	Question *string   `json:"question"`
	Score    *float64  `json:"score"`
}

// JobApplicationStatusByWorkflowListRepresentation defines model for JobApplicationStatusByWorkflowListRepresentation.
type JobApplicationStatusByWorkflowListRepresentation struct {
	Items *[]JobApplicationStatusByWorkflowModel `json:"items"`
	Links *ModelLinks                            `json:"links,omitempty"`
}

// JobApplicationStatusByWorkflowModel defines model for JobApplicationStatusByWorkflowModel.
type JobApplicationStatusByWorkflowModel struct {
	Progress *SimpleWorkflow `json:"progress,omitempty"`

	// Stage Name of the workflow stage
	Stage string `json:"stage"`

	// StageIndex Position in the workflow
	StageIndex *int32 `json:"stageIndex"`

	// Status Ordered status list for this workflow stage
	Status *[]JobApplicationStatusNameModel `json:"status"`

	// Step [Obsolete] Please reference stageIndex instead
	Step *int32 `json:"step"`
}

// JobApplicationStatusLinks defines model for JobApplicationStatusLinks.
type JobApplicationStatusLinks struct {
	Self *string `json:"self"`
}

// JobApplicationStatusListRepresentation defines model for JobApplicationStatusListRepresentation.
type JobApplicationStatusListRepresentation struct {
	Items *[]JobApplicationStatusModel `json:"items"`
	Links *ModelLinks                  `json:"links,omitempty"`
}

// JobApplicationStatusModel defines model for JobApplicationStatusModel.
type JobApplicationStatusModel struct {
	Active          *bool                        `json:"active,omitempty"`
	Default         *bool                        `json:"default,omitempty"`
	DefaultRejected *bool                        `json:"defaultRejected,omitempty"`
	Name            string                       `json:"name"`
	Rejected        *bool                        `json:"rejected,omitempty"`
	StatusId        int32                        `json:"statusId"`
	Workflow        *JobApplicationWorkflowModel `json:"workflow,omitempty"`
}

// JobApplicationStatusNameModel defines model for JobApplicationStatusNameModel.
type JobApplicationStatusNameModel struct {
	Active          *bool  `json:"active,omitempty"`
	Default         *bool  `json:"default,omitempty"`
	DefaultRejected *bool  `json:"defaultRejected,omitempty"`
	Name            string `json:"name"`
	Rejected        *bool  `json:"rejected,omitempty"`
	StatusId        int32  `json:"statusId"`
}

// JobApplicationStatusRepresentation defines model for JobApplicationStatusRepresentation.
type JobApplicationStatusRepresentation struct {
	Active          *bool                        `json:"active,omitempty"`
	Default         *bool                        `json:"default,omitempty"`
	DefaultRejected *bool                        `json:"defaultRejected,omitempty"`
	Links           *JobApplicationStatusLinks   `json:"links,omitempty"`
	Name            string                       `json:"name"`
	Rejected        *bool                        `json:"rejected,omitempty"`
	StatusId        int32                        `json:"statusId"`
	Workflow        *JobApplicationWorkflowModel `json:"workflow,omitempty"`
}

// JobApplicationSubmittedDetailsModel defines model for JobApplicationSubmittedDetailsModel.
type JobApplicationSubmittedDetailsModel struct {
	Email     *string `json:"email"`
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
	Mobile    *string `json:"mobile"`
	Phone     *string `json:"phone"`
}

// JobApplicationSummaryModel defines model for JobApplicationSummaryModel.
type JobApplicationSummaryModel struct {
	ApplicationId int64                      `json:"applicationId"`
	Candidate     *CandidateNameModel        `json:"candidate,omitempty"`
	CreatedAt     *time.Time                 `json:"createdAt"`
	CreatedBy     *UserNameModel             `json:"createdBy,omitempty"`
	Job           *JobOrderTitleModel        `json:"job,omitempty"`
	JobAd         *JobAdSummaryModel         `json:"jobAd,omitempty"`
	JobReference  *string                    `json:"jobReference"`
	JobTitle      *string                    `json:"jobTitle"`
	Manual        *bool                      `json:"manual,omitempty"`
	Owner         *UserNameModel             `json:"owner,omitempty"`
	Rating        *int32                     `json:"rating"`
	Review        *JobApplicationReviewModel `json:"review,omitempty"`
	Source        *string                    `json:"source"`
	Status        *JobApplicationStatusModel `json:"status,omitempty"`
	UpdatedAt     *time.Time                 `json:"updatedAt"`
	UpdatedBy     *UserNameModel             `json:"updatedBy,omitempty"`
}

// JobApplicationUserTaskModel defines model for JobApplicationUserTaskModel.
type JobApplicationUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	ApplicationId   *int64                        `json:"applicationId,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// JobApplicationUserTaskRepresentation defines model for JobApplicationUserTaskRepresentation.
type JobApplicationUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	ApplicationId   *int64                        `json:"applicationId,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// JobApplicationWorkflowModel defines model for JobApplicationWorkflowModel.
type JobApplicationWorkflowModel struct {
	Progress *SimpleWorkflow `json:"progress,omitempty"`

	// Stage Name of the workflow stage
	Stage string `json:"stage"`

	// StageIndex Position in the workflow
	StageIndex *int32 `json:"stageIndex"`

	// Step [Obsolete] Please reference stageIndex instead
	Step *int32 `json:"step"`
}

// JobBoardJobAdLinks defines model for JobBoardJobAdLinks.
type JobBoardJobAdLinks struct {
	Applications *string               `json:"applications"`
	Self         *string               `json:"self"`
	Ui           *JobBoardJobAdUILinks `json:"ui,omitempty"`
}

// JobBoardJobAdListRepresentation defines model for JobBoardJobAdListRepresentation.
type JobBoardJobAdListRepresentation struct {
	Items      *[]JobBoardJobAdSummaryModel `json:"items"`
	Links      *ModelLinks                  `json:"links,omitempty"`
	TotalCount int32                        `json:"totalCount"`
}

// JobBoardJobAdRepresentation defines model for JobBoardJobAdRepresentation.
type JobBoardJobAdRepresentation struct {
	AdId         *int32                         `json:"adId,omitempty"`
	BulletPoints *[]string                      `json:"bulletPoints"`
	Description  *string                        `json:"description"`
	ExpiresAt    *time.Time                     `json:"expiresAt"`
	Links        *JobBoardJobAdLinks            `json:"links,omitempty"`
	Portal       *JobAdPortalModel              `json:"portal,omitempty"`
	PostedAt     *time.Time                     `json:"postedAt"`
	Reference    *string                        `json:"reference"`
	Screening    *[]JobAdScreeningQuestionModel `json:"screening"`
	Summary      *string                        `json:"summary"`
	Title        *string                        `json:"title"`
	UpdatedAt    *time.Time                     `json:"updatedAt"`
}

// JobBoardJobAdSummaryModel defines model for JobBoardJobAdSummaryModel.
type JobBoardJobAdSummaryModel struct {
	AdId         *int32                   `json:"adId,omitempty"`
	BulletPoints *[]string                `json:"bulletPoints"`
	ExpiresAt    *time.Time               `json:"expiresAt"`
	Portal       *JobAdPortalSummaryModel `json:"portal,omitempty"`
	PostedAt     *time.Time               `json:"postedAt"`
	Reference    *string                  `json:"reference"`
	Summary      *string                  `json:"summary"`
	Title        *string                  `json:"title"`
	UpdatedAt    *time.Time               `json:"updatedAt"`
}

// JobBoardJobAdUILinks defines model for JobBoardJobAdUILinks.
type JobBoardJobAdUILinks struct {
	Applications *string `json:"applications"`
	Self         *string `json:"self"`
}

// JobBoardListModel defines model for JobBoardListModel.
type JobBoardListModel struct {
	Items *[]JobBoardSummaryModel `json:"items"`
}

// JobBoardModel defines model for JobBoardModel.
type JobBoardModel struct {
	BoardId   *int32               `json:"boardId,omitempty"`
	Name      *string              `json:"name"`
	Portal    *JobBoardPortalModel `json:"portal,omitempty"`
	Reference *string              `json:"reference"`
}

// JobBoardPortalChildFieldModel defines model for JobBoardPortalChildFieldModel.
type JobBoardPortalChildFieldModel struct {
	FieldId    *int32                           `json:"fieldId,omitempty"`
	ListValues *[]JobBoardPortalFieldValueModel `json:"listValues"`
	Name       *string                          `json:"name"`
	Type       *JobBoardPortalFieldType         `json:"type,omitempty"`
}

// JobBoardPortalFieldModel defines model for JobBoardPortalFieldModel.
type JobBoardPortalFieldModel struct {
	FieldId    *int32                           `json:"fieldId,omitempty"`
	Fields     *[]JobBoardPortalChildFieldModel `json:"fields"`
	ListValues *[]JobBoardPortalFieldValueModel `json:"listValues"`
	Name       *string                          `json:"name"`
	Type       *JobBoardPortalFieldType         `json:"type,omitempty"`
}

// JobBoardPortalFieldType defines model for JobBoardPortalFieldType.
type JobBoardPortalFieldType string

// JobBoardPortalFieldValueModel defines model for JobBoardPortalFieldValueModel.
type JobBoardPortalFieldValueModel struct {
	// ExternalValue Job board partner defined field value
	ExternalValue *string `json:"externalValue"`
	FieldId       *int32  `json:"fieldId,omitempty"`
	ParentValueId *int32  `json:"parentValueId"`
	Value         *string `json:"value"`
	ValueId       *int32  `json:"valueId,omitempty"`
}

// JobBoardPortalModel defines model for JobBoardPortalModel.
type JobBoardPortalModel struct {
	Fields *[]JobBoardPortalFieldModel `json:"fields"`
}

// JobBoardSummaryModel defines model for JobBoardSummaryModel.
type JobBoardSummaryModel struct {
	BoardId   *int32  `json:"boardId,omitempty"`
	Name      *string `json:"name"`
	Reference *string `json:"reference"`
}

// JobOrderActivityListRepresentation defines model for JobOrderActivityListRepresentation.
type JobOrderActivityListRepresentation struct {
	Items      *[]JobOrderActivityModel `json:"items"`
	Links      *PageLinks               `json:"links,omitempty"`
	TotalCount int32                    `json:"totalCount"`
}

// JobOrderActivityModel defines model for JobOrderActivityModel.
type JobOrderActivityModel struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	InvoiceId    *int32                   `json:"invoiceId"`
	JobId        *int32                   `json:"jobId,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// JobOrderActivityRepresentation defines model for JobOrderActivityRepresentation.
type JobOrderActivityRepresentation struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	InvoiceId    *int32                   `json:"invoiceId"`
	JobId        *int32                   `json:"jobId,omitempty"`
	Links        *ModelLinks              `json:"links,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// JobOrderActivitySettingModel defines model for JobOrderActivitySettingModel.
type JobOrderActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// JobOrderActivitySettingSummaryModel defines model for JobOrderActivitySettingSummaryModel.
type JobOrderActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// JobOrderActivitySettingsListModel defines model for JobOrderActivitySettingsListModel.
type JobOrderActivitySettingsListModel struct {
	Items *[]JobOrderActivitySettingSummaryModel `json:"items"`
}

// JobOrderActivitySummaryListModel defines model for JobOrderActivitySummaryListModel.
type JobOrderActivitySummaryListModel struct {
	Items *[]JobOrderActivitySummaryModel `json:"items"`
}

// JobOrderActivitySummaryModel defines model for JobOrderActivitySummaryModel.
type JobOrderActivitySummaryModel struct {
	ActivityId   *int64         `json:"activityId,omitempty"`
	ActivityName *string        `json:"activityName"`
	ActivityType *string        `json:"activityType"`
	CreatedAt    *time.Time     `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`
	JobId        *int32         `json:"jobId,omitempty"`
	Status       *string        `json:"status"`
	UpdatedAt    *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// JobOrderAttachmentCategoryListRepresentation defines model for JobOrderAttachmentCategoryListRepresentation.
type JobOrderAttachmentCategoryListRepresentation struct {
	Items *[]JobOrderAttachmentCategoryModel `json:"items"`
	Links *ModelLinks                        `json:"links,omitempty"`
}

// JobOrderAttachmentCategoryModel defines model for JobOrderAttachmentCategoryModel.
type JobOrderAttachmentCategoryModel struct {
	Category *string                 `json:"category"`
	Type     *JobOrderAttachmentType `json:"type,omitempty"`
}

// JobOrderAttachmentLinks defines model for JobOrderAttachmentLinks.
type JobOrderAttachmentLinks struct {
	Self *string `json:"self"`
}

// JobOrderAttachmentListRepresentation defines model for JobOrderAttachmentListRepresentation.
type JobOrderAttachmentListRepresentation struct {
	Items      *[]JobOrderAttachmentModel `json:"items"`
	Links      *PageLinks                 `json:"links,omitempty"`
	TotalCount int32                      `json:"totalCount"`
}

// JobOrderAttachmentModel defines model for JobOrderAttachmentModel.
type JobOrderAttachmentModel struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date     `json:"expiry"`
	FileName  *string                 `json:"fileName"`
	FileType  *string                 `json:"fileType"`
	Type      *JobOrderAttachmentType `json:"type,omitempty"`
	UpdatedAt *time.Time              `json:"updatedAt"`
}

// JobOrderAttachmentRepresentation defines model for JobOrderAttachmentRepresentation.
type JobOrderAttachmentRepresentation struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date      `json:"expiry"`
	FileName  *string                  `json:"fileName"`
	FileType  *string                  `json:"fileType"`
	Links     *JobOrderAttachmentLinks `json:"links,omitempty"`
	Type      *JobOrderAttachmentType  `json:"type,omitempty"`
	UpdatedAt *time.Time               `json:"updatedAt"`
}

// JobOrderAttachmentType defines model for JobOrderAttachmentType.
type JobOrderAttachmentType string

// JobOrderCategoryModel defines model for JobOrderCategoryModel.
type JobOrderCategoryModel struct {
	CategoryId  int32                     `json:"categoryId"`
	Name        string                    `json:"name"`
	SubCategory *JobOrderSubCategoryModel `json:"subCategory,omitempty"`
}

// JobOrderFeeModel defines model for JobOrderFeeModel.
type JobOrderFeeModel struct {
	Currency       *string              `json:"currency"`
	EstimatedTotal *float64             `json:"estimatedTotal"`
	Rate           *float64             `json:"rate"`
	RateType       *JobOrderFeeRateType `json:"rateType,omitempty"`
}

// JobOrderFeeRateType defines model for JobOrderFeeRateType.
type JobOrderFeeRateType string

// JobOrderInvoiceExpenseListModel defines model for JobOrderInvoiceExpenseListModel.
type JobOrderInvoiceExpenseListModel struct {
	Items *[]JobOrderInvoiceExpenseModel `json:"items"`
	Total *float64                       `json:"total"`
}

// JobOrderInvoiceExpenseModel defines model for JobOrderInvoiceExpenseModel.
type JobOrderInvoiceExpenseModel struct {
	Cost        *float64 `json:"cost,omitempty"`
	Description *string  `json:"description"`
}

// JobOrderInvoiceListModel defines model for JobOrderInvoiceListModel.
type JobOrderInvoiceListModel struct {
	Invoices *[]JobOrderInvoiceSummaryModel `json:"invoices"`
	Job      *JobOrderRetainedModel         `json:"job,omitempty"`
}

// JobOrderInvoiceModel defines model for JobOrderInvoiceModel.
type JobOrderInvoiceModel struct {
	Amount                *float64                           `json:"amount,omitempty"`
	CreatedAt             *time.Time                         `json:"createdAt"`
	CreatedBy             *UserNameModel                     `json:"createdBy,omitempty"`
	Expenses              *JobOrderInvoiceExpenseListModel   `json:"expenses,omitempty"`
	ForecastedDate        *openapi_types.Date                `json:"forecastedDate"`
	InvoiceId             *int32                             `json:"invoiceId,omitempty"`
	InvoiceNumber         *string                            `json:"invoiceNumber"`
	JobId                 *int32                             `json:"jobId,omitempty"`
	Placements            *JobOrderInvoicePlacementListModel `json:"placements,omitempty"`
	SentDetails           *JobOrderSentInvoiceModel          `json:"sentDetails,omitempty"`
	Stage                 *JobOrderInvoiceStageModel         `json:"stage,omitempty"`
	Status                *string                            `json:"status"`
	TriggerAt             *openapi_types.Date                `json:"triggerAt"`
	TriggerJobOrderStatus *StatusModel                       `json:"triggerJobOrderStatus,omitempty"`
	TriggerType           *string                            `json:"triggerType"`
	UpdatedAt             *time.Time                         `json:"updatedAt"`
	UpdatedBy             *UserNameModel                     `json:"updatedBy,omitempty"`
}

// JobOrderInvoicePlacementListModel defines model for JobOrderInvoicePlacementListModel.
type JobOrderInvoicePlacementListModel struct {
	Placements      *[]JobOrderInvoicePlacementModel `json:"placements"`
	TotalPlacements *int32                           `json:"totalPlacements,omitempty"`
}

// JobOrderInvoicePlacementModel defines model for JobOrderInvoicePlacementModel.
type JobOrderInvoicePlacementModel struct {
	CandidateId *int32              `json:"candidateId,omitempty"`
	PlacementId *int32              `json:"placementId,omitempty"`
	StartDate   *openapi_types.Date `json:"startDate"`
}

// JobOrderInvoiceStageModel defines model for JobOrderInvoiceStageModel.
type JobOrderInvoiceStageModel struct {
	Name    string `json:"name"`
	StageId int32  `json:"stageId"`
}

// JobOrderInvoiceSummaryModel defines model for JobOrderInvoiceSummaryModel.
type JobOrderInvoiceSummaryModel struct {
	Amount        *float64                   `json:"amount,omitempty"`
	InvoiceId     *int32                     `json:"invoiceId,omitempty"`
	InvoiceNumber *string                    `json:"invoiceNumber"`
	JobId         *int32                     `json:"jobId,omitempty"`
	Stage         *JobOrderInvoiceStageModel `json:"stage,omitempty"`
}

// JobOrderJobApplicationStatisticsSummaryModel defines model for JobOrderJobApplicationStatisticsSummaryModel.
type JobOrderJobApplicationStatisticsSummaryModel struct {
	Active *int32 `json:"active,omitempty"`
	New    *int32 `json:"new,omitempty"`
	Total  *int32 `json:"total,omitempty"`
}

// JobOrderLinks defines model for JobOrderLinks.
type JobOrderLinks struct {
	// Applications Job applications
	Applications *string `json:"applications"`

	// Attachments Attachments
	Attachments *string `json:"attachments"`

	// Notes Notes
	Notes *string `json:"notes"`
	Self  *string `json:"self"`
}

// JobOrderListRepresentation defines model for JobOrderListRepresentation.
type JobOrderListRepresentation struct {
	Items      *[]JobOrderSummaryModel `json:"items"`
	Links      *PageLinks              `json:"links,omitempty"`
	TotalCount int32                   `json:"totalCount"`
}

// JobOrderLocationAreaModel defines model for JobOrderLocationAreaModel.
type JobOrderLocationAreaModel struct {
	AreaId int32  `json:"areaId"`
	Name   string `json:"name"`
}

// JobOrderLocationModel defines model for JobOrderLocationModel.
type JobOrderLocationModel struct {
	Area       *JobOrderLocationAreaModel `json:"area,omitempty"`
	LocationId int32                      `json:"locationId"`
	Name       string                     `json:"name"`
}

// JobOrderRateCardModel defines model for JobOrderRateCardModel.
type JobOrderRateCardModel struct {
	JobOrderId *int32  `json:"jobOrderId,omitempty"`
	RateCard   *string `json:"rateCard"`
}

// JobOrderRepresentation defines model for JobOrderRepresentation.
type JobOrderRepresentation struct {
	Category         *JobOrderCategoryModel          `json:"category,omitempty"`
	ClosedAt         *time.Time                      `json:"closedAt"`
	ClosedBy         *UserNameModel                  `json:"closedBy,omitempty"`
	Company          *CompanyNameModel               `json:"company,omitempty"`
	Contact          *ContactNameModel               `json:"contact,omitempty"`
	CreatedAt        *time.Time                      `json:"createdAt"`
	CreatedBy        *UserNameModel                  `json:"createdBy,omitempty"`
	Custom           *[]CustomFieldValueModel        `json:"custom"`
	Duration         *DurationModel                  `json:"duration,omitempty"`
	EndDate          *openapi_types.Date             `json:"endDate"`
	Fee              *JobOrderFeeModel               `json:"fee,omitempty"`
	JobDescription   *string                         `json:"jobDescription"`
	JobId            int32                           `json:"jobId"`
	JobTitle         *string                         `json:"jobTitle"`
	JobType          *string                         `json:"jobType"`
	Links            *JobOrderLinks                  `json:"links,omitempty"`
	Location         *JobOrderLocationModel          `json:"location,omitempty"`
	NumberOfJobs     *int32                          `json:"numberOfJobs,omitempty"`
	OtherContacts    *[]ContactNameModel             `json:"otherContacts"`
	Owner            *UserNameModel                  `json:"owner,omitempty"`
	PartnerActions   *[]PartnerActionStageModel      `json:"partnerActions"`
	Recruiters       *[]UserNameModel                `json:"recruiters"`
	Salary           *JobOrderSalaryRangeModel       `json:"salary,omitempty"`
	SkillTags        *JobOrderSkillTags              `json:"skillTags,omitempty"`
	Source           *string                         `json:"source"`
	Start            *JobOrderStartModel             `json:"start,omitempty"`
	Statistics       *JobOrderStatisticsSummaryModel `json:"statistics,omitempty"`
	Status           *StatusModel                    `json:"status,omitempty"`
	UpdatedAt        *time.Time                      `json:"updatedAt"`
	UpdatedBy        *UserNameModel                  `json:"updatedBy,omitempty"`
	UserFavourite    *bool                           `json:"userFavourite"`
	WorkShift        *JobOrderWorkShiftModel         `json:"workShift,omitempty"`
	WorkType         *WorkTypeModel                  `json:"workType,omitempty"`
	WorkplaceAddress *CompanyAddressModel            `json:"workplaceAddress,omitempty"`
}

// JobOrderRetainedInvoiceRepresentation defines model for JobOrderRetainedInvoiceRepresentation.
type JobOrderRetainedInvoiceRepresentation struct {
	Invoice *JobOrderInvoiceModel  `json:"invoice,omitempty"`
	Job     *JobOrderRetainedModel `json:"job,omitempty"`
	Links   *ModelLinks            `json:"links,omitempty"`
}

// JobOrderRetainedModel defines model for JobOrderRetainedModel.
type JobOrderRetainedModel struct {
	Company         *CompanyNameModel `json:"company,omitempty"`
	Contact         *ContactNameModel `json:"contact,omitempty"`
	FeeCurrencyCode *string           `json:"feeCurrencyCode"`
	JobId           int32             `json:"jobId"`
	JobTitle        *string           `json:"jobTitle"`
	JobType         *string           `json:"jobType"`
	Owner           *UserNameModel    `json:"owner,omitempty"`
}

// JobOrderSalaryRangeModel defines model for JobOrderSalaryRangeModel.
type JobOrderSalaryRangeModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	RateHigh *float64       `json:"rateHigh"`
	RateLow  *float64       `json:"rateLow"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`

	// TimePerWeek Number of days per week for a daily rate or hours per week for an hourly rate.
	TimePerWeek *float64 `json:"timePerWeek"`
}

// JobOrderSentInvoiceModel defines model for JobOrderSentInvoiceModel.
type JobOrderSentInvoiceModel struct {
	BillingContactEmails *string        `json:"billingContactEmails"`
	BillingContactNames  *string        `json:"billingContactNames"`
	DueDate              *time.Time     `json:"dueDate"`
	PaymentTermsDays     *int32         `json:"paymentTermsDays"`
	PoNumber             *string        `json:"poNumber"`
	SentAt               *time.Time     `json:"sentAt"`
	SentBy               *UserNameModel `json:"sentBy,omitempty"`
}

// JobOrderSkillTags defines model for JobOrderSkillTags.
type JobOrderSkillTags struct {
	MatchAll *bool     `json:"matchAll,omitempty"`
	Tags     *[]string `json:"tags"`
}

// JobOrderStartModel defines model for JobOrderStartModel.
type JobOrderStartModel struct {
	// Date The specific date that a job starts or a candidate is available
	Date      *openapi_types.Date `json:"date"`
	Immediate *bool               `json:"immediate,omitempty"`
	Relative  *RelativeStartModel `json:"relative,omitempty"`
}

// JobOrderStatisticsSummaryModel defines model for JobOrderStatisticsSummaryModel.
type JobOrderStatisticsSummaryModel struct {
	Applications *JobOrderJobApplicationStatisticsSummaryModel `json:"applications,omitempty"`
}

// JobOrderSubCategoryModel defines model for JobOrderSubCategoryModel.
type JobOrderSubCategoryModel struct {
	Name          string `json:"name"`
	SubCategoryId int32  `json:"subCategoryId"`
}

// JobOrderSummaryModel defines model for JobOrderSummaryModel.
type JobOrderSummaryModel struct {
	ClosedAt      *time.Time             `json:"closedAt"`
	ClosedBy      *UserNameModel         `json:"closedBy,omitempty"`
	Company       *CompanyNameModel      `json:"company,omitempty"`
	Contact       *ContactNameModel      `json:"contact,omitempty"`
	CreatedAt     *time.Time             `json:"createdAt"`
	CreatedBy     *UserNameModel         `json:"createdBy,omitempty"`
	JobId         int32                  `json:"jobId"`
	JobTitle      *string                `json:"jobTitle"`
	Location      *JobOrderLocationModel `json:"location,omitempty"`
	Owner         *UserNameModel         `json:"owner,omitempty"`
	Source        *string                `json:"source"`
	Status        *StatusModel           `json:"status,omitempty"`
	UpdatedAt     *time.Time             `json:"updatedAt"`
	UpdatedBy     *UserNameModel         `json:"updatedBy,omitempty"`
	UserFavourite *bool                  `json:"userFavourite"`
}

// JobOrderTitleModel defines model for JobOrderTitleModel.
type JobOrderTitleModel struct {
	Company  *CompanyNameModel      `json:"company,omitempty"`
	Contact  *ContactNameModel      `json:"contact,omitempty"`
	JobId    int32                  `json:"jobId"`
	JobTitle *string                `json:"jobTitle"`
	Location *JobOrderLocationModel `json:"location,omitempty"`
	Owner    *UserNameModel         `json:"owner,omitempty"`
	Source   *string                `json:"source"`
	Status   *StatusModel           `json:"status,omitempty"`
}

// JobOrderUserTaskModel defines model for JobOrderUserTaskModel.
type JobOrderUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	JobId           *int32                        `json:"jobId,omitempty"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// JobOrderUserTaskRepresentation defines model for JobOrderUserTaskRepresentation.
type JobOrderUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	JobId           *int32                        `json:"jobId,omitempty"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// JobOrderWorkShiftModel defines model for JobOrderWorkShiftModel.
type JobOrderWorkShiftModel struct {
	EndTime   *string   `json:"endTime"`
	StartTime *string   `json:"startTime"`
	WorkDays  *[]string `json:"workDays"`
}

// LocationAreaModel defines model for LocationAreaModel.
type LocationAreaModel struct {
	AreaId int32  `json:"areaId"`
	Name   string `json:"name"`
}

// LocationListRepresentation defines model for LocationListRepresentation.
type LocationListRepresentation struct {
	Items *[]LocationModel `json:"items"`
	Links *ModelLinks      `json:"links,omitempty"`
}

// LocationModel defines model for LocationModel.
type LocationModel struct {
	Areas      *[]LocationAreaModel `json:"areas"`
	LocationId int32                `json:"locationId"`
	Name       string               `json:"name"`
}

// MatchedByEmailAddressModel defines model for MatchedByEmailAddressModel.
type MatchedByEmailAddressModel struct {
	// Candidates Top 5 most recently updated matching candidates
	Candidates *[]CandidateMatchedByEmailModel `json:"candidates"`

	// Contacts Top 5 most recently updated matching contacts
	Contacts *[]ContactMatchedByEmailModel `json:"contacts"`

	// Users Top 5 most recently updated matching users
	Users *[]UserMatchedByEmailModel `json:"users"`
}

// MatchedByPhoneNumberModel defines model for MatchedByPhoneNumberModel.
type MatchedByPhoneNumberModel struct {
	// Candidates Top 5 most recently updated matching candidates
	Candidates *[]CandidateMatchedByPhoneModel `json:"candidates"`

	// Companies Top 5 most recently updated matching companies
	Companies *[]CompanyMatchedByPhoneModel `json:"companies"`

	// Contacts Top 5 most recently updated matching contacts
	Contacts *[]ContactMatchedByPhoneModel `json:"contacts"`
	Quality  *PhoneNumberMatchQuality      `json:"quality,omitempty"`

	// Users Top 5 most recently updated matching users
	Users *[]UserMatchedByPhoneModel `json:"users"`
}

// MatchedEmailAddressModel defines model for MatchedEmailAddressModel.
type MatchedEmailAddressModel struct {
	Email *string                `json:"email"`
	Type  *EmailAddressMatchType `json:"type,omitempty"`
}

// MatchedEmailAddressModelCompanyName defines model for MatchedEmailAddressModelCompanyName.
type MatchedEmailAddressModelCompanyName struct {
	CompanyId *int32  `json:"companyId,omitempty"`
	Name      *string `json:"name"`
}

// MatchedPhoneNumberModel defines model for MatchedPhoneNumberModel.
type MatchedPhoneNumberModel struct {
	Normalized *string               `json:"normalized"`
	Number     *string               `json:"number"`
	Type       *PhoneNumberMatchType `json:"type,omitempty"`
}

// MatchedPhoneNumberModelCompanyName defines model for MatchedPhoneNumberModelCompanyName.
type MatchedPhoneNumberModelCompanyName struct {
	CompanyId *int32  `json:"companyId,omitempty"`
	Name      *string `json:"name"`
}

// ModelLinks defines model for ModelLinks.
type ModelLinks struct {
	Self *string `json:"self"`
}

// NameModel defines model for NameModel.
type NameModel struct {
	// Name Resource name
	Name string `json:"name"`
}

// NameModelListOf defines model for NameModelListOf.
type NameModelListOf struct {
	Items *[]NameModel `json:"items"`
}

// NoteAttachmentListRepresentation defines model for NoteAttachmentListRepresentation.
type NoteAttachmentListRepresentation struct {
	Items      *[]NoteAttachmentModel `json:"items"`
	Links      *PageLinks             `json:"links,omitempty"`
	TotalCount int32                  `json:"totalCount"`
}

// NoteAttachmentModel defines model for NoteAttachmentModel.
type NoteAttachmentModel struct {
	AttachmentId openapi_types.UUID `json:"attachmentId"`
	CreatedAt    *time.Time         `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel     `json:"createdBy,omitempty"`
	FileName     *string            `json:"fileName"`
	FileType     *string            `json:"fileType"`
}

// NoteLinks defines model for NoteLinks.
type NoteLinks struct {
	Self *string `json:"self"`
}

// NoteListRepresentation defines model for NoteListRepresentation.
type NoteListRepresentation struct {
	Items      *[]NoteSummaryModel `json:"items"`
	Links      *PageLinks          `json:"links,omitempty"`
	TotalCount int32               `json:"totalCount"`
}

// NoteModel defines model for NoteModel.
type NoteModel struct {
	Applications *[]JobApplicationSummaryModel `json:"applications"`
	Attachments  *[]NoteAttachmentModel        `json:"attachments"`
	Candidates   *[]CandidateNameModel         `json:"candidates"`
	Companies    *[]CompanyNameModel           `json:"companies"`
	Contacts     *[]ContactNameModel           `json:"contacts"`
	CreatedAt    *time.Time                    `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel                `json:"createdBy,omitempty"`
	Jobs         *[]JobOrderTitleModel         `json:"jobs"`
	NoteId       openapi_types.UUID            `json:"noteId"`
	Placements   *[]PlacementSummaryModel      `json:"placements"`

	// Readonly This note cannot be updated
	Readonly     *bool                      `json:"readonly,omitempty"`
	Reference    *string                    `json:"reference"`
	Requisitions *[]RequisitionSummaryModel `json:"requisitions"`
	Source       *string                    `json:"source"`
	Subject      *string                    `json:"subject"`
	Text         *string                    `json:"text"`
	Type         *string                    `json:"type"`
	UpdatedAt    *time.Time                 `json:"updatedAt"`
	UpdatedBy    *UserNameModel             `json:"updatedBy,omitempty"`
}

// NoteRepresentation defines model for NoteRepresentation.
type NoteRepresentation struct {
	Applications *[]JobApplicationSummaryModel `json:"applications"`
	Attachments  *[]NoteAttachmentModel        `json:"attachments"`
	Candidates   *[]CandidateNameModel         `json:"candidates"`
	Companies    *[]CompanyNameModel           `json:"companies"`
	Contacts     *[]ContactNameModel           `json:"contacts"`
	CreatedAt    *time.Time                    `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel                `json:"createdBy,omitempty"`
	Jobs         *[]JobOrderTitleModel         `json:"jobs"`
	Links        *NoteLinks                    `json:"links,omitempty"`
	NoteId       openapi_types.UUID            `json:"noteId"`
	Placements   *[]PlacementSummaryModel      `json:"placements"`

	// Readonly This note cannot be updated
	Readonly     *bool                      `json:"readonly,omitempty"`
	Reference    *string                    `json:"reference"`
	Requisitions *[]RequisitionSummaryModel `json:"requisitions"`
	Source       *string                    `json:"source"`
	Subject      *string                    `json:"subject"`
	Text         *string                    `json:"text"`
	Type         *string                    `json:"type"`
	UpdatedAt    *time.Time                 `json:"updatedAt"`
	UpdatedBy    *UserNameModel             `json:"updatedBy,omitempty"`
}

// NoteSummaryModel defines model for NoteSummaryModel.
type NoteSummaryModel struct {
	CreatedAt *time.Time         `json:"createdAt,omitempty"`
	CreatedBy *UserNameModel     `json:"createdBy,omitempty"`
	NoteId    openapi_types.UUID `json:"noteId"`

	// Readonly This note cannot be updated
	Readonly    *bool          `json:"readonly,omitempty"`
	Reference   *string        `json:"reference"`
	TextPartial *string        `json:"textPartial"`
	Type        *string        `json:"type"`
	UpdatedAt   *time.Time     `json:"updatedAt"`
	UpdatedBy   *UserNameModel `json:"updatedBy,omitempty"`
}

// NoteTypeDefaultModel defines model for NoteTypeDefaultModel.
type NoteTypeDefaultModel struct {
	Email *bool `json:"email,omitempty"`
	Note  *bool `json:"note,omitempty"`
	Sms   *bool `json:"sms,omitempty"`
}

// NoteTypeListRepresentation defines model for NoteTypeListRepresentation.
type NoteTypeListRepresentation struct {
	Items *[]NoteTypeModel `json:"items"`
}

// NoteTypeModel defines model for NoteTypeModel.
type NoteTypeModel struct {
	Default *NoteTypeDefaultModel `json:"default,omitempty"`
	Name    string                `json:"name"`
}

// Operation defines model for Operation.
type Operation struct {
	Op *OperationType `json:"op,omitempty"`

	// Path Single entity path to address, e.g. /jobs, /candidates, /applications, /placements, /companies or /contacts
	Path *string `json:"path"`

	// Value Comma separated entitiy ids, e.g. 1000, 1001, 1002
	Value *[]int64 `json:"value"`
}

// OperationType defines model for OperationType.
type OperationType string

// OpportunityListModel defines model for OpportunityListModel.
type OpportunityListModel struct {
	Items      *[]OpportunitySummaryModel `json:"items"`
	TotalCount int32                      `json:"totalCount"`
}

// OpportunityStageModel defines model for OpportunityStageModel.
type OpportunityStageModel struct {
	Active  *bool               `json:"active,omitempty"`
	Name    *string             `json:"name"`
	StageId *openapi_types.UUID `json:"stageId"`
}

// OpportunitySummaryModel defines model for OpportunitySummaryModel.
type OpportunitySummaryModel struct {
	AdditionalInformation *string                `json:"additionalInformation"`
	Company               *int32                 `json:"company,omitempty"`
	CreatedAt             *time.Time             `json:"createdAt"`
	CreatedBy             *int32                 `json:"createdBy,omitempty"`
	CurrentStage          *OpportunityStageModel `json:"currentStage,omitempty"`
	EstimatedClose        *time.Time             `json:"estimatedClose"`
	OpportunityId         *openapi_types.UUID    `json:"opportunityId,omitempty"`
	OpportunityTitle      *string                `json:"opportunityTitle"`
	Owners                *[]int32               `json:"owners"`
	UpdatedAt             *time.Time             `json:"updatedAt"`
	UpdatedBy             *int32                 `json:"updatedBy,omitempty"`
	Value                 *OpportunityValueModel `json:"value,omitempty"`
	WorkType              *int32                 `json:"workType"`
}

// OpportunityValueModel defines model for OpportunityValueModel.
type OpportunityValueModel struct {
	Value *float64 `json:"value"`
}

// PageLinks defines model for PageLinks.
type PageLinks struct {
	First *string `json:"first"`
	Last  *string `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
}

// PartnerActionFilterModel defines model for PartnerActionFilterModel.
type PartnerActionFilterModel struct {
	// AdminOnly Action is available to admin users only
	AdminOnly *bool `json:"adminOnly,omitempty"`

	// ApprovedOnly Action is only available on approved entities (currently only supported for placements)
	ApprovedOnly *bool                           `json:"approvedOnly,omitempty"`
	Status       *PartnerActionStatusFilterModel `json:"status,omitempty"`
}

// PartnerActionListRepresentation defines model for PartnerActionListRepresentation.
type PartnerActionListRepresentation struct {
	// Items Partner actions
	Items *[]PartnerActionModel `json:"items"`
	Links *ModelLinks           `json:"links,omitempty"`
}

// PartnerActionModel defines model for PartnerActionModel.
type PartnerActionModel struct {
	ActionFilter *PartnerActionFilterModel `json:"actionFilter,omitempty"`

	// ActionId Unique identifier for the partner action
	ActionId *openapi_types.UUID `json:"actionId,omitempty"`

	// ActionName Menu item label that will appear to the end-user
	ActionName *string            `json:"actionName"`
	ActionType *PartnerActionType `json:"actionType,omitempty"`

	// AllowResubmit Allow resources to be resubmitted to an action.
	AllowResubmit *bool `json:"allowResubmit,omitempty"`

	// CreatedAt Date the partner action was added
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Reference Unique partner defined reference/identifier for the action
	Reference *string `json:"reference"`

	// UpdatedAt Date the partner action was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Url URL to open after the action is selected and assigned the `"Submitted"` stage.
	Url     *string               `json:"url"`
	UrlType *PartnerActionUrlType `json:"urlType,omitempty"`

	// WebhookData Additional data that will be included with the webhook notification
	WebhookData *interface{} `json:"webhookData"`
}

// PartnerActionRepresentation defines model for PartnerActionRepresentation.
type PartnerActionRepresentation struct {
	ActionFilter *PartnerActionFilterModel `json:"actionFilter,omitempty"`

	// ActionId Unique identifier for the partner action
	ActionId *openapi_types.UUID `json:"actionId,omitempty"`

	// ActionName Menu item label that will appear to the end-user
	ActionName *string            `json:"actionName"`
	ActionType *PartnerActionType `json:"actionType,omitempty"`

	// AllowResubmit Allow resources to be resubmitted to an action.
	AllowResubmit *bool `json:"allowResubmit,omitempty"`

	// CreatedAt Date the partner action was added
	CreatedAt *time.Time  `json:"createdAt,omitempty"`
	Links     *ModelLinks `json:"links,omitempty"`

	// Reference Unique partner defined reference/identifier for the action
	Reference *string `json:"reference"`

	// UpdatedAt Date the partner action was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Url URL to open after the action is selected and assigned the `"Submitted"` stage.
	Url     *string               `json:"url"`
	UrlType *PartnerActionUrlType `json:"urlType,omitempty"`

	// WebhookData Additional data that will be included with the webhook notification
	WebhookData *interface{} `json:"webhookData"`
}

// PartnerActionResultCommandModel Optional complete or partial results for a partner action
type PartnerActionResultCommandModel struct {
	// Score Optional partner score for the action result
	Score *int32 `json:"score"`

	// Url Optional partner defined URL for the action result
	Url     *string                     `json:"url"`
	UrlType *PartnerActionResultUrlType `json:"urlType,omitempty"`
}

// PartnerActionResultModel defines model for PartnerActionResultModel.
type PartnerActionResultModel struct {
	// Score Optional partner score for the action result
	Score *int32 `json:"score"`

	// Url Optional partner defined URL for the action result
	Url     *string                     `json:"url"`
	UrlType *PartnerActionResultUrlType `json:"urlType,omitempty"`
}

// PartnerActionResultUrlType defines model for PartnerActionResultUrlType.
type PartnerActionResultUrlType string

// PartnerActionStage defines model for PartnerActionStage.
type PartnerActionStage string

// PartnerActionStageModel defines model for PartnerActionStageModel.
type PartnerActionStageModel struct {
	ActionId   *openapi_types.UUID `json:"actionId,omitempty"`
	ActionName *string             `json:"actionName"`

	// Reference Unique partner defined reference/identifier for the action
	Reference *string                   `json:"reference"`
	Result    *PartnerActionResultModel `json:"result,omitempty"`
	Stage     *PartnerActionStage       `json:"stage,omitempty"`

	// Status Partner defined progress status message for the action
	Status      *string        `json:"status"`
	SubmittedAt *time.Time     `json:"submittedAt,omitempty"`
	SubmittedBy *UserNameModel `json:"submittedBy,omitempty"`
	UpdatedAt   *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy   *UserNameModel `json:"updatedBy,omitempty"`
}

// PartnerActionStatusFilterModel defines model for PartnerActionStatusFilterModel.
type PartnerActionStatusFilterModel struct {
	// ActiveOnly Action is available to entities with an active status
	ActiveOnly *bool `json:"activeOnly,omitempty"`

	// StatusId Action is available to entities with a specific status
	StatusId *[]int32 `json:"statusId"`
}

// PartnerActionType defines model for PartnerActionType.
type PartnerActionType string

// PartnerActionUrlType defines model for PartnerActionUrlType.
type PartnerActionUrlType string

// PhoneNumberMatchQuality defines model for PhoneNumberMatchQuality.
type PhoneNumberMatchQuality string

// PhoneNumberMatchType defines model for PhoneNumberMatchType.
type PhoneNumberMatchType string

// PlacementActivityListRepresentation defines model for PlacementActivityListRepresentation.
type PlacementActivityListRepresentation struct {
	Items      *[]PlacementActivityModel `json:"items"`
	Links      *PageLinks                `json:"links,omitempty"`
	TotalCount int32                     `json:"totalCount"`
}

// PlacementActivityModel defines model for PlacementActivityModel.
type PlacementActivityModel struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	PlacementId  *int32                   `json:"placementId,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// PlacementActivityRepresentation defines model for PlacementActivityRepresentation.
type PlacementActivityRepresentation struct {
	ActivityId   *int64                   `json:"activityId,omitempty"`
	ActivityName *string                  `json:"activityName"`
	ActivityType *string                  `json:"activityType"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel           `json:"createdBy,omitempty"`
	Details      *ActivityDetailListModel `json:"details,omitempty"`
	Links        *ModelLinks              `json:"links,omitempty"`
	PlacementId  *int32                   `json:"placementId,omitempty"`
	Status       *string                  `json:"status"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel           `json:"updatedBy,omitempty"`
}

// PlacementActivitySettingModel defines model for PlacementActivitySettingModel.
type PlacementActivitySettingModel struct {
	ActivityType    *string                  `json:"activityType"`
	Name            *string                  `json:"name"`
	Questions       *[]ActivityQuestionModel `json:"questions"`
	SettingId       *int32                   `json:"settingId,omitempty"`
	StatusMandatory *bool                    `json:"statusMandatory"`
	ValidStatuses   *[]StatusModel           `json:"validStatuses"`
}

// PlacementActivitySettingSummaryModel defines model for PlacementActivitySettingSummaryModel.
type PlacementActivitySettingSummaryModel struct {
	ActivityType *string `json:"activityType"`
	Name         *string `json:"name"`
	SettingId    *int32  `json:"settingId,omitempty"`
}

// PlacementActivitySettingsListModel defines model for PlacementActivitySettingsListModel.
type PlacementActivitySettingsListModel struct {
	Items *[]PlacementActivitySettingSummaryModel `json:"items"`
}

// PlacementActivitySummaryListModel defines model for PlacementActivitySummaryListModel.
type PlacementActivitySummaryListModel struct {
	Items *[]PlacementActivitySummaryModel `json:"items"`
}

// PlacementActivitySummaryModel defines model for PlacementActivitySummaryModel.
type PlacementActivitySummaryModel struct {
	ActivityId   *int64         `json:"activityId,omitempty"`
	ActivityName *string        `json:"activityName"`
	ActivityType *string        `json:"activityType"`
	CreatedAt    *time.Time     `json:"createdAt,omitempty"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`
	PlacementId  *int32         `json:"placementId,omitempty"`
	Status       *string        `json:"status"`
	UpdatedAt    *time.Time     `json:"updatedAt,omitempty"`
	UpdatedBy    *UserNameModel `json:"updatedBy,omitempty"`
}

// PlacementApproverModel defines model for PlacementApproverModel.
type PlacementApproverModel struct {
	// ContactId Unique identifier for the contact
	ContactId int32 `json:"contactId"`

	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// Inactive Contact is no longer with the company
	Inactive *bool `json:"inactive,omitempty"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// MobileNormalized Mobile/cell normalized number
	MobileNormalized *string        `json:"mobileNormalized"`
	Owner            *UserNameModel `json:"owner,omitempty"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`
	Primary  *bool   `json:"primary,omitempty"`

	// Salutation Salutation/honorific/title
	Salutation   *string      `json:"salutation"`
	Status       *StatusModel `json:"status,omitempty"`
	Unsubscribed *bool        `json:"unsubscribed,omitempty"`
}

// PlacementAttachmentCategoryListRepresentation defines model for PlacementAttachmentCategoryListRepresentation.
type PlacementAttachmentCategoryListRepresentation struct {
	Items *[]PlacementAttachmentCategoryModel `json:"items"`
	Links *ModelLinks                         `json:"links,omitempty"`
}

// PlacementAttachmentCategoryModel defines model for PlacementAttachmentCategoryModel.
type PlacementAttachmentCategoryModel struct {
	Category *string                  `json:"category"`
	Type     *PlacementAttachmentType `json:"type,omitempty"`
}

// PlacementAttachmentLinks defines model for PlacementAttachmentLinks.
type PlacementAttachmentLinks struct {
	Self *string `json:"self"`
}

// PlacementAttachmentListRepresentation defines model for PlacementAttachmentListRepresentation.
type PlacementAttachmentListRepresentation struct {
	Items      *[]PlacementAttachmentModel `json:"items"`
	Links      *PageLinks                  `json:"links,omitempty"`
	TotalCount int32                       `json:"totalCount"`
}

// PlacementAttachmentModel defines model for PlacementAttachmentModel.
type PlacementAttachmentModel struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date      `json:"expiry"`
	FileName  *string                  `json:"fileName"`
	FileType  *string                  `json:"fileType"`
	Type      *PlacementAttachmentType `json:"type,omitempty"`
	UpdatedAt *time.Time               `json:"updatedAt"`
}

// PlacementAttachmentRepresentation defines model for PlacementAttachmentRepresentation.
type PlacementAttachmentRepresentation struct {
	AttachmentId *int64         `json:"attachmentId,omitempty"`
	Category     *string        `json:"category"`
	CreatedAt    *time.Time     `json:"createdAt"`
	CreatedBy    *UserNameModel `json:"createdBy,omitempty"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry    *openapi_types.Date       `json:"expiry"`
	FileName  *string                   `json:"fileName"`
	FileType  *string                   `json:"fileType"`
	Links     *PlacementAttachmentLinks `json:"links,omitempty"`
	Type      *PlacementAttachmentType  `json:"type,omitempty"`
	UpdatedAt *time.Time                `json:"updatedAt"`
}

// PlacementAttachmentType defines model for PlacementAttachmentType.
type PlacementAttachmentType string

// PlacementBillingModel defines model for PlacementBillingModel.
type PlacementBillingModel struct {
	Address *CompanyAddressModel `json:"address,omitempty"`
	Contact *ContactNameModel    `json:"contact,omitempty"`

	// DueDate Payment due date
	DueDate *openapi_types.Date `json:"dueDate"`
	Email   *string             `json:"email"`

	// InvoiceRef Invoice Number/Reference
	InvoiceRef *string `json:"invoiceRef"`

	// OrderRef PO Number/Reference
	OrderRef *string `json:"orderRef"`

	// Terms Billing payment terms
	Terms *string `json:"terms"`
}

// PlacementContractRateModel defines model for PlacementContractRateModel.
type PlacementContractRateModel struct {
	CandidateRate *float64                  `json:"candidateRate"`
	ClientRate    *float64                  `json:"clientRate"`
	DaysPerWeek   *float64                  `json:"daysPerWeek"`
	HoursPerWeek  *float64                  `json:"hoursPerWeek"`
	NetMargin     *float64                  `json:"netMargin"`
	OnCosts       *float64                  `json:"onCosts"`
	OnCostsType   *RatePortion              `json:"onCostsType,omitempty"`
	RatePer       *PlacementContractRatePer `json:"ratePer,omitempty"`
}

// PlacementContractRatePer defines model for PlacementContractRatePer.
type PlacementContractRatePer string

// PlacementExportModel defines model for PlacementExportModel.
type PlacementExportModel struct {
	// Approvers Timesheet/payroll approver contacts
	Approvers *[]PlacementApproverModel `json:"approvers"`

	// Onboarding Placement has been selected for export to an onboarding service
	Onboarding *bool `json:"onboarding"`

	// OnboardingManagers Onboarding manager contacts
	OnboardingManagers *[]PlacementApproverModel `json:"onboardingManagers"`

	// Payroll Placement has been selected for export to a payroll service
	Payroll *bool `json:"payroll"`

	// Timesheets Placement has been selected for export to a timesheet service
	Timesheets *bool `json:"timesheets"`
}

// PlacementLinks defines model for PlacementLinks.
type PlacementLinks struct {
	// Application Job application
	Application *string `json:"application"`

	// Attachments Attachments
	Attachments *string `json:"attachments"`

	// CreditedByPlacement Credited by placement
	CreditedByPlacement *string `json:"creditedByPlacement"`

	// CreditsPlacement Credits placement
	CreditsPlacement *string `json:"creditsPlacement"`

	// ExtendedByPlacement Extended by placement
	ExtendedByPlacement *string `json:"extendedByPlacement"`

	// ExtendsPlacement Extends placement
	ExtendsPlacement *string `json:"extendsPlacement"`

	// Notes Notes
	Notes *string `json:"notes"`
	Self  *string `json:"self"`
}

// PlacementListRepresentation defines model for PlacementListRepresentation.
type PlacementListRepresentation struct {
	Items      *[]PlacementSummaryModel `json:"items"`
	Links      *PageLinks               `json:"links,omitempty"`
	TotalCount int32                    `json:"totalCount"`
}

// PlacementRateModel defines model for PlacementRateModel.
type PlacementRateModel struct {
	ChargeCurrency *string  `json:"chargeCurrency"`
	ChargeRate     *float64 `json:"chargeRate,omitempty"`
	Default        *bool    `json:"default,omitempty"`
	DisplayIndex   *int32   `json:"displayIndex,omitempty"`
	Name           *string  `json:"name"`
	PayRate        *float64 `json:"payRate,omitempty"`
	Type           *string  `json:"type"`
}

// PlacementRecruiterModel defines model for PlacementRecruiterModel.
type PlacementRecruiterModel struct {
	Deleted   *bool    `json:"deleted,omitempty"`
	Email     *string  `json:"email"`
	FeeSplit  *float64 `json:"feeSplit"`
	FirstName *string  `json:"firstName"`
	Inactive  *bool    `json:"inactive,omitempty"`
	LastName  *string  `json:"lastName"`
	Mobile    *string  `json:"mobile"`
	Phone     *string  `json:"phone"`
	Position  *string  `json:"position"`
	UserId    int32    `json:"userId"`
}

// PlacementRepresentation defines model for PlacementRepresentation.
type PlacementRepresentation struct {
	Approved       *bool                       `json:"approved,omitempty"`
	ApprovedAt     *time.Time                  `json:"approvedAt"`
	Award          *string                     `json:"award"`
	Billing        *PlacementBillingModel      `json:"billing,omitempty"`
	Candidate      *CandidatePlacementModel    `json:"candidate,omitempty"`
	ChargeCurrency *string                     `json:"chargeCurrency"`
	Company        *CompanyNameModel           `json:"company,omitempty"`
	Contact        *ContactNameModel           `json:"contact,omitempty"`
	ContractRate   *PlacementContractRateModel `json:"contractRate,omitempty"`
	CreatedAt      *time.Time                  `json:"createdAt"`
	CreatedBy      *UserNameModel              `json:"createdBy,omitempty"`
	Custom         *[]CustomFieldValueModel    `json:"custom"`

	// EndDate Date a contract or temporary employment ends
	EndDate        *openapi_types.Date        `json:"endDate"`
	Export         *PlacementExportModel      `json:"export,omitempty"`
	FeeSplit       *RatePortion               `json:"feeSplit,omitempty"`
	IndustryCode   *string                    `json:"industryCode"`
	Job            *JobOrderTitleModel        `json:"job,omitempty"`
	JobTitle       *string                    `json:"jobTitle"`
	Links          *PlacementLinks            `json:"links,omitempty"`
	Owner          *UserNameModel             `json:"owner,omitempty"`
	PartnerActions *[]PartnerActionStageModel `json:"partnerActions"`
	PaymentType    *string                    `json:"paymentType"`
	PlacementId    int32                      `json:"placementId"`
	Rates          *[]PlacementRateModel      `json:"rates"`
	Recruiters     *[]PlacementRecruiterModel `json:"recruiters"`
	Salary         *PlacementSalaryModel      `json:"salary,omitempty"`
	Source         *PlacementSourceModel      `json:"source,omitempty"`

	// StartDate Date employment begins
	StartDate        *openapi_types.Date      `json:"startDate"`
	Status           *StatusModel             `json:"status,omitempty"`
	Summary          *string                  `json:"summary"`
	Type             PlacementType            `json:"type"`
	UpdatedAt        *time.Time               `json:"updatedAt"`
	UpdatedBy        *UserNameModel           `json:"updatedBy,omitempty"`
	WorkShift        *PlacementWorkShiftModel `json:"workShift,omitempty"`
	WorkplaceAddress *CompanyAddressModel     `json:"workplaceAddress,omitempty"`
}

// PlacementSalaryModel defines model for PlacementSalaryModel.
type PlacementSalaryModel struct {
	Base           *float64 `json:"base"`
	Benefits       *float64 `json:"benefits"`
	Fee            *float64 `json:"fee"`
	Superannuation *float64 `json:"superannuation"`
	Total          *float64 `json:"total"`
}

// PlacementSourceModel defines model for PlacementSourceModel.
type PlacementSourceModel struct {
	// Candidate The original source of the candidate
	Candidate *string `json:"candidate"`

	// Placement The source of candidate that lead to this placement
	Placement *string `json:"placement"`
}

// PlacementSummaryModel defines model for PlacementSummaryModel.
type PlacementSummaryModel struct {
	Approved   *bool                    `json:"approved,omitempty"`
	ApprovedAt *time.Time               `json:"approvedAt"`
	Candidate  *CandidatePlacementModel `json:"candidate,omitempty"`
	CreatedAt  *time.Time               `json:"createdAt"`
	CreatedBy  *UserNameModel           `json:"createdBy,omitempty"`

	// EndDate Date a contract or temporary employment ends
	EndDate     *openapi_types.Date `json:"endDate"`
	Job         *JobOrderTitleModel `json:"job,omitempty"`
	JobTitle    *string             `json:"jobTitle"`
	PlacementId int32               `json:"placementId"`

	// StartDate Date employment begins
	StartDate *openapi_types.Date `json:"startDate"`
	Status    *StatusModel        `json:"status,omitempty"`
	Type      PlacementType       `json:"type"`
	UpdatedAt *time.Time          `json:"updatedAt"`
	UpdatedBy *UserNameModel      `json:"updatedBy,omitempty"`
}

// PlacementTimesheetApproverModel defines model for PlacementTimesheetApproverModel.
type PlacementTimesheetApproverModel struct {
	// Email Primary email address
	Email *string `json:"email"`

	// FirstName First name
	FirstName *string `json:"firstName"`

	// LastName Last name
	LastName *string `json:"lastName"`

	// Mobile Mobile/cell number
	Mobile *string `json:"mobile"`

	// Phone Phone number
	Phone *string `json:"phone"`

	// Position Position or job title
	Position *string `json:"position"`
}

// PlacementTimesheetEntryModel defines model for PlacementTimesheetEntryModel.
type PlacementTimesheetEntryModel struct {
	Date *openapi_types.Date    `json:"date,omitempty"`
	Type PlacementTimesheetType `json:"type"`
}

// PlacementTimesheetListRepresentation defines model for PlacementTimesheetListRepresentation.
type PlacementTimesheetListRepresentation struct {
	Items *[]PlacementTimesheetModel `json:"items"`
}

// PlacementTimesheetModel defines model for PlacementTimesheetModel.
type PlacementTimesheetModel struct {
	ApprovedAt  *time.Time                       `json:"approvedAt"`
	ApprovedBy  *PlacementTimesheetApproverModel `json:"approvedBy,omitempty"`
	CreatedAt   *time.Time                       `json:"createdAt"`
	Entries     *[]PlacementTimesheetEntryModel  `json:"entries"`
	Period      *DateRangeModel                  `json:"period,omitempty"`
	SubmittedAt *time.Time                       `json:"submittedAt"`
}

// PlacementTimesheetType defines model for PlacementTimesheetType.
type PlacementTimesheetType string

// PlacementType defines model for PlacementType.
type PlacementType string

// PlacementUserTaskModel defines model for PlacementUserTaskModel.
type PlacementUserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	PlacementId     *int32                        `json:"placementId,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// PlacementUserTaskRepresentation defines model for PlacementUserTaskRepresentation.
type PlacementUserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	PlacementId     *int32                        `json:"placementId,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// PlacementWorkShiftModel defines model for PlacementWorkShiftModel.
type PlacementWorkShiftModel struct {
	EndTime   *string   `json:"endTime"`
	StartTime *string   `json:"startTime"`
	WorkDays  *[]string `json:"workDays"`
}

// RatePortion defines model for RatePortion.
type RatePortion string

// RecipientEntityType defines model for RecipientEntityType.
type RecipientEntityType string

// RejectRequisitionCommand defines model for RejectRequisitionCommand.
type RejectRequisitionCommand struct {
	ApproverId int32   `json:"approverId"`
	Reason     *string `json:"reason"`
}

// RelativeStartModel defines model for RelativeStartModel.
type RelativeStartModel struct {
	Period *int32             `json:"period,omitempty"`
	Unit   *RelativeStartUnit `json:"unit,omitempty"`
}

// RelativeStartUnit defines model for RelativeStartUnit.
type RelativeStartUnit string

// RemoveCandidateSkillsCommand defines model for RemoveCandidateSkillsCommand.
type RemoveCandidateSkillsCommand struct {
	// Categories Skill categories to remove from this candidate.
	Categories *[]RemoveCategoriesModel `json:"categories"`
}

// RemoveCategoriesModel defines model for RemoveCategoriesModel.
type RemoveCategoriesModel struct {
	// CategoryId Category to remove.<br />
	// Specify a categoryId without subCategories to remove the category and all previously
	// linked sub-categories associated with the category.
	CategoryId int32 `json:"categoryId"`

	// SubCategories Optional list of sub-categories and skills to remove.
	SubCategories *[]RemoveSubCategoriesModel `json:"subCategories"`
}

// RemoveContactSkillsCommand defines model for RemoveContactSkillsCommand.
type RemoveContactSkillsCommand struct {
	// Categories Skill categories to remove from this contact.
	Categories *[]RemoveCategoriesModel `json:"categories"`
}

// RemoveSubCategoriesModel defines model for RemoveSubCategoriesModel.
type RemoveSubCategoriesModel struct {
	// Skills Optional list of skills to remove.
	Skills *[]SubmitSkillsModel `json:"skills"`

	// SubCategoryId Sub-category to remove.<br />
	// Specify a subCategoryId without skills to remove the sub-category and all previously
	// linked skills associated with the sub-category.
	SubCategoryId int32 `json:"subCategoryId"`
}

// RequisitionAttachmentType defines model for RequisitionAttachmentType.
type RequisitionAttachmentType string

// RequisitionFormFieldModel defines model for RequisitionFormFieldModel.
type RequisitionFormFieldModel struct {
	FieldID   *int32  `json:"fieldID,omitempty"`
	FieldName *string `json:"fieldName"`
	FormID    *int32  `json:"formID,omitempty"`
	Required  *bool   `json:"required,omitempty"`
	Visible   *bool   `json:"visible,omitempty"`
}

// RequisitionFormListRepresentation defines model for RequisitionFormListRepresentation.
type RequisitionFormListRepresentation struct {
	Items *[]RequisitionFormModel `json:"items"`
	Links *ModelLinks             `json:"links,omitempty"`
}

// RequisitionFormModel defines model for RequisitionFormModel.
type RequisitionFormModel struct {
	Default    *bool                        `json:"default,omitempty"`
	Deleted    *bool                        `json:"deleted,omitempty"`
	FormFields *[]RequisitionFormFieldModel `json:"formFields"`
	FormID     *int32                       `json:"formID,omitempty"`
	FormName   *string                      `json:"formName"`
}

// RequisitionHistoryModel defines model for RequisitionHistoryModel.
type RequisitionHistoryModel struct {
	Items      *[]RequisitionLogModel `json:"items"`
	TotalCount int32                  `json:"totalCount"`
}

// RequisitionLinks defines model for RequisitionLinks.
type RequisitionLinks struct {
	// History Link to requisition approval history
	History *string `json:"history"`

	// Job Link to job created for an approved requisition
	Job *string `json:"job"`

	// Notes Notes
	Notes    *string `json:"notes"`
	Self     *string `json:"self"`
	Workflow *string `json:"workflow"`
}

// RequisitionListRepresentation defines model for RequisitionListRepresentation.
type RequisitionListRepresentation struct {
	Items      *[]RequisitionSummaryModel `json:"items"`
	Links      *PageLinks                 `json:"links,omitempty"`
	TotalCount int32                      `json:"totalCount"`
}

// RequisitionLogModel defines model for RequisitionLogModel.
type RequisitionLogModel struct {
	Contact   *ContactNameModel  `json:"contact,omitempty"`
	Message   *string            `json:"message"`
	NewStatus *RequisitionStatus `json:"newStatus,omitempty"`
	OldStatus *RequisitionStatus `json:"oldStatus,omitempty"`
	UpdatedAt *time.Time         `json:"updatedAt,omitempty"`
}

// RequisitionRepresentation defines model for RequisitionRepresentation.
type RequisitionRepresentation struct {
	Category       *JobOrderCategoryModel    `json:"category,omitempty"`
	Company        *CompanyNameModel         `json:"company,omitempty"`
	CreatedAt      *time.Time                `json:"createdAt"`
	Custom         *[]CustomFieldValueModel  `json:"custom"`
	Duration       *DurationModel            `json:"duration,omitempty"`
	FormID         *int32                    `json:"formID"`
	HiringManager  *ContactNameModel         `json:"hiringManager,omitempty"`
	JobDescription *string                   `json:"jobDescription"`
	JobTitle       string                    `json:"jobTitle"`
	Links          *RequisitionLinks         `json:"links,omitempty"`
	Location       *JobOrderLocationModel    `json:"location,omitempty"`
	NumberOfJobs   *int32                    `json:"numberOfJobs,omitempty"`
	Owner          *UserNameModel            `json:"owner,omitempty"`
	Recruiters     *[]UserNameModel          `json:"recruiters"`
	RequisitionId  int32                     `json:"requisitionId"`
	Salary         *JobOrderSalaryRangeModel `json:"salary,omitempty"`

	// Source Source of the requisition, or reason the requisition is being raised.
	Source             *string               `json:"source"`
	Start              *JobOrderStartModel   `json:"start,omitempty"`
	Status             *RequisitionStatus    `json:"status,omitempty"`
	UpdatedAt          *time.Time            `json:"updatedAt"`
	WorkType           *WorkTypeModel        `json:"workType,omitempty"`
	Workflow           *CompanyWorkflowModel `json:"workflow,omitempty"`
	WorkflowStageIndex *int32                `json:"workflowStageIndex"`
	WorkplaceAddress   *CompanyAddressModel  `json:"workplaceAddress,omitempty"`
}

// RequisitionStatus defines model for RequisitionStatus.
type RequisitionStatus string

// RequisitionSummaryModel defines model for RequisitionSummaryModel.
type RequisitionSummaryModel struct {
	Company            *CompanyNameModel  `json:"company,omitempty"`
	CreatedAt          *time.Time         `json:"createdAt"`
	HiringManager      *ContactNameModel  `json:"hiringManager,omitempty"`
	JobTitle           string             `json:"jobTitle"`
	RequisitionId      int32              `json:"requisitionId"`
	Status             *RequisitionStatus `json:"status,omitempty"`
	UpdatedAt          *time.Time         `json:"updatedAt"`
	WorkflowStageIndex *int32             `json:"workflowStageIndex"`
}

// ReviewAcceptJobApplicationCommand defines model for ReviewAcceptJobApplicationCommand.
type ReviewAcceptJobApplicationCommand struct {
	// ContactId Hiring manager contact accepting the applicant
	ContactId int32 `json:"contactId"`

	// Message Optional feedback
	Message *string `json:"message"`
}

// ReviewRejectJobApplicationCommand defines model for ReviewRejectJobApplicationCommand.
type ReviewRejectJobApplicationCommand struct {
	// ContactId Hiring manager contact rejecting the applicant
	ContactId int32 `json:"contactId"`

	// Reason Optional feedback
	Reason *string `json:"reason"`
}

// ReviewSubmitJobApplicationCommand defines model for ReviewSubmitJobApplicationCommand.
type ReviewSubmitJobApplicationCommand struct {
	// SubmittedByUserId Optionally specify the user submitting the job application for review (if not the authenticated user)
	SubmittedByUserId *int32 `json:"submittedByUserId"`
}

// ReviewViewJobApplicationCommand defines model for ReviewViewJobApplicationCommand.
type ReviewViewJobApplicationCommand struct {
	// ContactId Hiring manager contact viewing the applicant
	ContactId int32 `json:"contactId"`
}

// SalaryModel defines model for SalaryModel.
type SalaryModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	Rate     *float64       `json:"rate"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`
}

// SalaryRangeModel defines model for SalaryRangeModel.
type SalaryRangeModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	RateHigh *float64       `json:"rateHigh"`
	RateLow  *float64       `json:"rateLow"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`
}

// SalaryRatePer defines model for SalaryRatePer.
type SalaryRatePer string

// SendCandidateSmsCommand defines model for SendCandidateSmsCommand.
type SendCandidateSmsCommand struct {
	EntityID []int32    `json:"entityID"`
	NoteType *string    `json:"noteType"`
	SendAt   *time.Time `json:"sendAt"`
	SenderID *int32     `json:"senderID"`
	Text     string     `json:"text"`
}

// SendCompanySmsCommand defines model for SendCompanySmsCommand.
type SendCompanySmsCommand struct {
	CompanyID int32      `json:"companyID"`
	EntityID  []int32    `json:"entityID"`
	NoteType  *string    `json:"noteType"`
	SendAt    *time.Time `json:"sendAt"`
	SenderID  *int32     `json:"senderID"`
	Text      string     `json:"text"`
}

// SendContactSmsCommand defines model for SendContactSmsCommand.
type SendContactSmsCommand struct {
	EntityID []int32    `json:"entityID"`
	NoteType *string    `json:"noteType"`
	SendAt   *time.Time `json:"sendAt"`
	SenderID *int32     `json:"senderID"`
	Text     string     `json:"text"`
}

// SendJobApplicationContactSmsCommand defines model for SendJobApplicationContactSmsCommand.
type SendJobApplicationContactSmsCommand struct {
	EntityID   []int64    `json:"entityID"`
	JobOrderID int32      `json:"jobOrderID"`
	NoteType   *string    `json:"noteType"`
	SendAt     *time.Time `json:"sendAt"`
	SenderID   *int32     `json:"senderID"`
	Text       string     `json:"text"`
}

// SendJobApplicationSmsCommand defines model for SendJobApplicationSmsCommand.
type SendJobApplicationSmsCommand struct {
	EntityID []int64    `json:"entityID"`
	NoteType *string    `json:"noteType"`
	SendAt   *time.Time `json:"sendAt"`
	SenderID *int32     `json:"senderID"`
	StatusID *int32     `json:"statusID"`
	Text     string     `json:"text"`
}

// SendJobOrderSmsCommand defines model for SendJobOrderSmsCommand.
type SendJobOrderSmsCommand struct {
	EntityID []int32    `json:"entityID"`
	NoteType *string    `json:"noteType"`
	SendAt   *time.Time `json:"sendAt"`
	SenderID *int32     `json:"senderID"`
	Text     string     `json:"text"`
}

// SendPlacementSmsCommand defines model for SendPlacementSmsCommand.
type SendPlacementSmsCommand struct {
	EntityID []int32    `json:"entityID"`
	NoteType *string    `json:"noteType"`
	SendAt   *time.Time `json:"sendAt"`
	SenderID *int32     `json:"senderID"`
	Text     string     `json:"text"`
}

// SetCandidateAvailabilityByWeekCommand defines model for SetCandidateAvailabilityByWeekCommand.
type SetCandidateAvailabilityByWeekCommand struct {
	// Availability Weekly availability, at most two shifts per day
	Availability struct {
		// Friday Availability, specify at most two shifts
		Friday *[]TimeRangeModel `json:"Friday,omitempty"`

		// Monday Availability, specify at most two shifts
		Monday *[]TimeRangeModel `json:"Monday,omitempty"`

		// Saturday Availability, specify at most two shifts
		Saturday *[]TimeRangeModel `json:"Saturday,omitempty"`

		// Sunday Availability, specify at most two shifts
		Sunday *[]TimeRangeModel `json:"Sunday,omitempty"`

		// Thursday Availability, specify at most two shifts
		Thursday *[]TimeRangeModel `json:"Thursday,omitempty"`

		// Tuesday Availability, specify at most two shifts
		Tuesday *[]TimeRangeModel `json:"Tuesday,omitempty"`

		// Wednesday Availability, specify at most two shifts
		Wednesday *[]TimeRangeModel `json:"Wednesday,omitempty"`
	} `json:"availability"`

	// Recurring Availability repeats in following weeks. Previous/past recurring schedules will be terminated prior to this schedule, existing future overlapping schedules will be cancelled.
	Recurring *bool `json:"recurring,omitempty"`

	// Until Optional end date of repeating availability
	Until *openapi_types.Date `json:"until"`

	// WeekOf Update availability for the week (beginning Sunday) containing the specified date
	WeekOf openapi_types.Date `json:"weekOf"`
}

// SetCandidateCustomFieldListValuesCommand defines model for SetCandidateCustomFieldListValuesCommand.
type SetCandidateCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetCandidateStatusCommand defines model for SetCandidateStatusCommand.
type SetCandidateStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SetCompanyCustomFieldListValuesCommand defines model for SetCompanyCustomFieldListValuesCommand.
type SetCompanyCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetCompanyStatusCommand defines model for SetCompanyStatusCommand.
type SetCompanyStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SetContactCustomFieldListValuesCommand defines model for SetContactCustomFieldListValuesCommand.
type SetContactCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetContactStatusCommand defines model for SetContactStatusCommand.
type SetContactStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SetJobApplicationCustomFieldListValuesCommand defines model for SetJobApplicationCustomFieldListValuesCommand.
type SetJobApplicationCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetJobApplicationStatusCommand defines model for SetJobApplicationStatusCommand.
type SetJobApplicationStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SetJobOrderCustomFieldListValuesCommand defines model for SetJobOrderCustomFieldListValuesCommand.
type SetJobOrderCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetJobOrderStatusCommand defines model for SetJobOrderStatusCommand.
type SetJobOrderStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SetPlacementCustomFieldListValuesCommand defines model for SetPlacementCustomFieldListValuesCommand.
type SetPlacementCustomFieldListValuesCommand struct {
	// Values Available values for a list custom field
	Values *[]string `json:"values"`
}

// SetPlacementStatusCommand defines model for SetPlacementStatusCommand.
type SetPlacementStatusCommand struct {
	// Note Optional note
	Note *SubmitStatusNoteModel `json:"note,omitempty"`

	// StatusId Status Id
	StatusId int32 `json:"statusId"`
}

// SimpleWorkflow defines model for SimpleWorkflow.
type SimpleWorkflow string

// SkillCategoryModel defines model for SkillCategoryModel.
type SkillCategoryModel struct {
	Name    string `json:"name"`
	SkillId int32  `json:"skillId"`
}

// SmsRepresentation defines model for SmsRepresentation.
type SmsRepresentation struct {
	BatchID *openapi_types.UUID `json:"batchID,omitempty"`
}

// StatusListRepresentation defines model for StatusListRepresentation.
type StatusListRepresentation struct {
	Items *[]StatusModel `json:"items"`
	Links *ModelLinks    `json:"links,omitempty"`
}

// StatusModel defines model for StatusModel.
type StatusModel struct {
	Active   *bool  `json:"active,omitempty"`
	Default  *bool  `json:"default,omitempty"`
	Name     string `json:"name"`
	StatusId int32  `json:"statusId"`
}

// StatusRepresentation defines model for StatusRepresentation.
type StatusRepresentation struct {
	Active   *bool       `json:"active,omitempty"`
	Default  *bool       `json:"default,omitempty"`
	Links    *ModelLinks `json:"links,omitempty"`
	Name     string      `json:"name"`
	StatusId int32       `json:"statusId"`
}

// SubCategoryModel defines model for SubCategoryModel.
type SubCategoryModel struct {
	Name          string                `json:"name"`
	Skills        *[]SkillCategoryModel `json:"skills"`
	SubCategoryId int32                 `json:"subCategoryId"`
}

// SubmissionLinks defines model for SubmissionLinks.
type SubmissionLinks struct {
	// Notes Notes
	Notes *string `json:"notes"`
	Self  *string `json:"self"`
}

// SubmissionListRepresentation defines model for SubmissionListRepresentation.
type SubmissionListRepresentation struct {
	Items      *[]SubmissionSummaryModel `json:"items"`
	Links      *PageLinks                `json:"links,omitempty"`
	TotalCount int32                     `json:"totalCount"`
}

// SubmissionRepresentation defines model for SubmissionRepresentation.
type SubmissionRepresentation struct {
	Application      *JobApplicationSummaryModel `json:"application,omitempty"`
	Candidate        *CandidateSummaryModel      `json:"candidate,omitempty"`
	CandidateSummary *string                     `json:"candidateSummary"`
	Company          *CompanyNameModel           `json:"company,omitempty"`
	Contacts         *[]ContactNameModel         `json:"contacts"`
	CreatedAt        *time.Time                  `json:"createdAt"`
	CreatedBy        *UserNameModel              `json:"createdBy,omitempty"`
	Job              *JobOrderSummaryModel       `json:"job,omitempty"`
	JobTitle         *string                     `json:"jobTitle"`
	Links            *SubmissionLinks            `json:"links,omitempty"`
	Owner            *UserNameModel              `json:"owner,omitempty"`
	SubmissionId     int64                       `json:"submissionId"`
	UpdatedAt        *time.Time                  `json:"updatedAt"`
	UpdatedBy        *UserNameModel              `json:"updatedBy,omitempty"`
}

// SubmissionSummaryModel defines model for SubmissionSummaryModel.
type SubmissionSummaryModel struct {
	Candidate    *CandidateSummaryModel `json:"candidate,omitempty"`
	Company      *CompanyNameModel      `json:"company,omitempty"`
	CreatedAt    *time.Time             `json:"createdAt"`
	CreatedBy    *UserNameModel         `json:"createdBy,omitempty"`
	Job          *JobOrderSummaryModel  `json:"job,omitempty"`
	JobTitle     *string                `json:"jobTitle"`
	SubmissionId int64                  `json:"submissionId"`
	UpdatedAt    *time.Time             `json:"updatedAt"`
	UpdatedBy    *UserNameModel         `json:"updatedBy,omitempty"`
}

// SubmitAddressModel defines model for SubmitAddressModel.
type SubmitAddressModel struct {
	City        *string   `json:"city"`
	CountryCode *string   `json:"countryCode"`
	PostalCode  *string   `json:"postalCode"`
	State       *string   `json:"state"`
	Street      *[]string `json:"street"`
}

// SubmitCandidateAttachmentType defines model for SubmitCandidateAttachmentType.
type SubmitCandidateAttachmentType string

// SubmitCandidateAvailabilityModel The date the candidate is available to start. Specify ONE OF immediate, relative or date.
type SubmitCandidateAvailabilityModel struct {
	// Date The specific date that a job starts or a candidate is available
	Date *openapi_types.Date `json:"date"`

	// Immediate The candidate is available for an immediate start
	Immediate *bool                     `json:"immediate,omitempty"`
	Relative  *SubmitRelativeStartModel `json:"relative,omitempty"`
}

// SubmitCandidateEducationModel defines model for SubmitCandidateEducationModel.
type SubmitCandidateEducationModel struct {
	Course *string `json:"course"`

	// Date Year, month or date completed.<br />
	// Year must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />
	// Month must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) "-" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />
	// Date must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31
	Date        *string `json:"date"`
	Institution *string `json:"institution"`
}

// SubmitCategoriesModel defines model for SubmitCategoriesModel.
type SubmitCategoriesModel struct {
	// CategoryId Category to add or update in the skill coding.<br />
	// Specify a categoryId without subCategories for a broad classification.
	// This will remove all previously linked sub-categories associated with the category.
	CategoryId int32 `json:"categoryId"`

	// SubCategories Optional list of sub-categories and skills for detailed skill classification
	SubCategories *[]SubmitSubCategoriesModel `json:"subCategories"`
}

// SubmitCategoryModel defines model for SubmitCategoryModel.
type SubmitCategoryModel struct {
	CategoryId    int32  `json:"categoryId"`
	SubCategoryId *int32 `json:"subCategoryId"`
}

// SubmitCompanyWorkflowApproverModel defines model for SubmitCompanyWorkflowApproverModel.
type SubmitCompanyWorkflowApproverModel struct {
	ContactId  []int32 `json:"contactId"`
	StageIndex int32   `json:"stageIndex"`
}

// SubmitCurrentEmploymentModel defines model for SubmitCurrentEmploymentModel.
type SubmitCurrentEmploymentModel struct {
	Employer   *string            `json:"employer"`
	Position   *string            `json:"position"`
	Salary     *SubmitSalaryModel `json:"salary,omitempty"`
	WorkTypeId *int32             `json:"workTypeId"`
}

// SubmitCustomFieldValueModel defines model for SubmitCustomFieldValueModel.
type SubmitCustomFieldValueModel struct {
	FieldId int32 `json:"fieldId"`

	// Value Text, List or Date ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)) value for this custom field (depending on the field `type`)
	Value *interface{} `json:"value"`
}

// SubmitDurationModel defines model for SubmitDurationModel.
type SubmitDurationModel struct {
	Period *int32        `json:"period,omitempty"`
	Unit   *DurationUnit `json:"unit,omitempty"`
}

// SubmitEmploymentModel defines model for SubmitEmploymentModel.
type SubmitEmploymentModel struct {
	Current *SubmitCurrentEmploymentModel      `json:"current,omitempty"`
	History *[]CandidateEmploymentHistoryModel `json:"history"`
	Ideal   *SubmitIdealEmploymentModel        `json:"ideal,omitempty"`
}

// SubmitIdealEmploymentModel defines model for SubmitIdealEmploymentModel.
type SubmitIdealEmploymentModel struct {
	Other      *[]SubmitIdealSalaryModel `json:"other"`
	Position   *string                   `json:"position"`
	Salary     *SubmitSalaryRangeModel   `json:"salary,omitempty"`
	WorkTypeId *int32                    `json:"workTypeId"`
}

// SubmitIdealSalaryModel defines model for SubmitIdealSalaryModel.
type SubmitIdealSalaryModel struct {
	Salary     *SubmitSalaryRangeModel `json:"salary,omitempty"`
	WorkTypeId *int32                  `json:"workTypeId"`
}

// SubmitInterviewEvaluationCommand defines model for SubmitInterviewEvaluationCommand.
type SubmitInterviewEvaluationCommand struct {
	Comments *string                                 `json:"comments"`
	Rating   *[]SubmitInterviewEvaluationRatingModel `json:"rating"`
}

// SubmitInterviewEvaluationRatingModel defines model for SubmitInterviewEvaluationRatingModel.
type SubmitInterviewEvaluationRatingModel struct {
	Criteria *string `json:"criteria"`
	Rating   *int32  `json:"rating,omitempty"`
}

// SubmitJobApplicationCommand defines model for SubmitJobApplicationCommand.
type SubmitJobApplicationCommand struct {
	Address *SubmitAddressModel `json:"address,omitempty"`

	// Availability The date the candidate is available to start. Specify ONE OF immediate, relative or date.
	Availability *SubmitCandidateAvailabilityModel `json:"availability,omitempty"`

	// Custom Candidate and job application custom field values
	Custom     *SubmitJobApplicationCustomFieldsModel `json:"custom,omitempty"`
	Education  *[]SubmitCandidateEducationModel       `json:"education"`
	Email      string                                 `json:"email"`
	Employment *SubmitEmploymentModel                 `json:"employment,omitempty"`
	FirstName  string                                 `json:"firstName"`
	LastName   string                                 `json:"lastName"`
	Mobile     *string                                `json:"mobile"`
	Phone      *string                                `json:"phone"`
	Salutation *string                                `json:"salutation"`
	Screening  *SubmitScreeningQuesionResultsModel    `json:"screening,omitempty"`
	SkillTags  *[]string                              `json:"skillTags"`
	Social     *map[string]string                     `json:"social"`
}

// SubmitJobApplicationCustomFieldsModel Candidate and job application custom field values
type SubmitJobApplicationCustomFieldsModel struct {
	// Application Job application custom field values
	Application *[]SubmitCustomFieldValueModel `json:"application"`

	// Candidate Candidate custom field values
	Candidate *[]SubmitCustomFieldValueModel `json:"candidate"`
}

// SubmitJobOrderCandidateCommand defines model for SubmitJobOrderCandidateCommand.
type SubmitJobOrderCandidateCommand struct {
	Address *SubmitAddressModel `json:"address,omitempty"`

	// Availability The date the candidate is available to start. Specify ONE OF immediate, relative or date.
	Availability *SubmitCandidateAvailabilityModel `json:"availability,omitempty"`

	// Custom Candidate and job application custom field values
	Custom     *SubmitJobApplicationCustomFieldsModel `json:"custom,omitempty"`
	Education  *[]SubmitCandidateEducationModel       `json:"education"`
	Email      string                                 `json:"email"`
	Employment *SubmitEmploymentModel                 `json:"employment,omitempty"`
	FirstName  string                                 `json:"firstName"`
	LastName   string                                 `json:"lastName"`
	Mobile     *string                                `json:"mobile"`
	Phone      *string                                `json:"phone"`
	Salutation *string                                `json:"salutation"`
	Screening  *SubmitScreeningQuesionResultsModel    `json:"screening,omitempty"`
	SkillTags  *[]string                              `json:"skillTags"`
	Social     *map[string]string                     `json:"social"`
	Source     *string                                `json:"source"`
}

// SubmitJobOrderFeeModel defines model for SubmitJobOrderFeeModel.
type SubmitJobOrderFeeModel struct {
	Currency *string `json:"currency"`

	// EstimatedTotal Optional estimated total fee. If not specified it will be calculated from the duration, salary and fee rate.
	EstimatedTotal *float64             `json:"estimatedTotal,omitempty"`
	Rate           *float64             `json:"rate,omitempty"`
	RateType       *JobOrderFeeRateType `json:"rateType,omitempty"`
}

// SubmitJobOrderSalaryRangeModel defines model for SubmitJobOrderSalaryRangeModel.
type SubmitJobOrderSalaryRangeModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	RateHigh *float64       `json:"rateHigh"`
	RateLow  *float64       `json:"rateLow,omitempty"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`

	// TimePerWeek Number of days per week for a daily rate,
	// hours per day for an hourly rate with a 'Day' duration unit or
	// hours per day for an hourly rate with a 'Week' duration unit.
	TimePerWeek *float64 `json:"timePerWeek"`
}

// SubmitJobOrderSkillTagsModel defines model for SubmitJobOrderSkillTagsModel.
type SubmitJobOrderSkillTagsModel struct {
	MatchAll *bool     `json:"matchAll,omitempty"`
	Tags     *[]string `json:"tags"`
}

// SubmitJobOrderStartModel defines model for SubmitJobOrderStartModel.
type SubmitJobOrderStartModel struct {
	// Date The specific date that the job starts
	Date      *openapi_types.Date       `json:"date"`
	Immediate *bool                     `json:"immediate,omitempty"`
	Relative  *SubmitRelativeStartModel `json:"relative,omitempty"`
}

// SubmitLocationModel defines model for SubmitLocationModel.
type SubmitLocationModel struct {
	AreaId     *int32 `json:"areaId"`
	LocationId int32  `json:"locationId"`
}

// SubmitPlacementBillingModel defines model for SubmitPlacementBillingModel.
type SubmitPlacementBillingModel struct {
	AddressId *openapi_types.UUID `json:"addressId"`
	ContactId *int32              `json:"contactId"`

	// DueDate Payment due date
	DueDate *openapi_types.Date `json:"dueDate"`
	Email   *string             `json:"email"`

	// InvoiceRef Invoice Number/Reference
	InvoiceRef *string `json:"invoiceRef"`

	// OrderRef PO Number/Reference
	OrderRef *string `json:"orderRef"`

	// Terms Billing payment terms
	Terms *string `json:"terms"`
}

// SubmitPlacementContractRateModel defines model for SubmitPlacementContractRateModel.
type SubmitPlacementContractRateModel struct {
	CandidateRate *float64                        `json:"candidateRate,omitempty"`
	ClientRate    *float64                        `json:"clientRate,omitempty"`
	DaysPerWeek   *float64                        `json:"daysPerWeek,omitempty"`
	HoursPerWeek  *float64                        `json:"hoursPerWeek,omitempty"`
	NetMargin     *float64                        `json:"netMargin,omitempty"`
	OnCosts       *float64                        `json:"onCosts,omitempty"`
	OnCostsType   *RatePortion                    `json:"onCostsType,omitempty"`
	RatePer       *SubmitPlacementContractRatePer `json:"ratePer,omitempty"`
}

// SubmitPlacementContractRatePer defines model for SubmitPlacementContractRatePer.
type SubmitPlacementContractRatePer string

// SubmitPlacementRecruiterModel defines model for SubmitPlacementRecruiterModel.
type SubmitPlacementRecruiterModel struct {
	// FeeSplit Optional fee portion, 0.0-1.0 (representing 0%-100%) if placement feeSplit='Percent', a currency amount if placement feeSplit='Fixed'
	FeeSplit *float64 `json:"feeSplit"`

	// UserId Recruiter to be associated with the placement, must also be associated with the related job.
	UserId *int32 `json:"userId,omitempty"`
}

// SubmitPlacementSalaryModel defines model for SubmitPlacementSalaryModel.
type SubmitPlacementSalaryModel struct {
	Base           *float64 `json:"base,omitempty"`
	Fee            *float64 `json:"fee,omitempty"`
	Superannuation *float64 `json:"superannuation,omitempty"`
	Total          *float64 `json:"total,omitempty"`
}

// SubmitRelativeStartModel defines model for SubmitRelativeStartModel.
type SubmitRelativeStartModel struct {
	Period *int32             `json:"period,omitempty"`
	Unit   *RelativeStartUnit `json:"unit,omitempty"`
}

// SubmitRequisitionCommand defines model for SubmitRequisitionCommand.
type SubmitRequisitionCommand = map[string]interface{}

// SubmitSalaryModel defines model for SubmitSalaryModel.
type SubmitSalaryModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	Rate     *float64       `json:"rate,omitempty"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`
}

// SubmitSalaryRangeModel defines model for SubmitSalaryRangeModel.
type SubmitSalaryRangeModel struct {
	// Currency Optional ISO 4217 3-letter alphabetic currency code
	Currency *string        `json:"currency"`
	RateHigh *float64       `json:"rateHigh"`
	RateLow  *float64       `json:"rateLow,omitempty"`
	RatePer  *SalaryRatePer `json:"ratePer,omitempty"`
}

// SubmitScreeningQuesionAnswerModel defines model for SubmitScreeningQuesionAnswerModel.
type SubmitScreeningQuesionAnswerModel struct {
	// Answer Text or List value answer for this screening question (depending on the question `answerType`)
	Answer   *interface{} `json:"answer"`
	Question *string      `json:"question"`

	// Score Optional score for this answer
	Score *int32 `json:"score"`
}

// SubmitScreeningQuesionResultsModel defines model for SubmitScreeningQuesionResultsModel.
type SubmitScreeningQuesionResultsModel struct {
	Answers *[]SubmitScreeningQuesionAnswerModel `json:"answers"`

	// Score Optional overall score for these screening results
	Score *int32 `json:"score"`
}

// SubmitSkillsModel defines model for SubmitSkillsModel.
type SubmitSkillsModel struct {
	// SkillId Skill for detailed skill classification.
	SkillId int32 `json:"skillId"`
}

// SubmitStatusNoteModel Optional note
type SubmitStatusNoteModel struct {
	// Text Note content
	Text *string `json:"text"`

	// Type Optional note type
	Type *string `json:"type"`
}

// SubmitSubCategoriesModel defines model for SubmitSubCategoriesModel.
type SubmitSubCategoriesModel struct {
	// Skills Optional list of skills associated with the sub-category for detailed classification
	Skills *[]SubmitSkillsModel `json:"skills"`

	// SubCategoryId Sub-category for detailed skill classification.<br />
	// Specify a subCategoryId without skills for a broad classification.
	// This will remove all previously linked skills associated with the sub-category.
	SubCategoryId int32 `json:"subCategoryId"`
}

// SubmitUserModel The user creating the note if not the authenticated user.<br />
// Specify either userId or email.
type SubmitUserModel struct {
	Email  *string `json:"email"`
	UserId *int32  `json:"userId"`
}

// SubmitWebhookEventFilterModel defines model for SubmitWebhookEventFilterModel.
type SubmitWebhookEventFilterModel struct {
	JobapplicationStatusChanged *SubmitWebhookEventStatusChangeFilterModel `json:"jobapplication_status_changed,omitempty"`
}

// SubmitWebhookEventStatusChangeFilterModel defines model for SubmitWebhookEventStatusChangeFilterModel.
type SubmitWebhookEventStatusChangeFilterModel struct {
	// StatusActive Limit events to an active/open status
	StatusActive *bool `json:"statusActive,omitempty"`

	// StatusId Limit events to a specific status
	StatusId *[]int32 `json:"statusId"`
}

// SubmitWebhookStatus defines model for SubmitWebhookStatus.
type SubmitWebhookStatus string

// SubmittedJobApplicationLinks defines model for SubmittedJobApplicationLinks.
type SubmittedJobApplicationLinks struct {
	CoverLetter *string `json:"coverLetter"`
	Other       *string `json:"other"`
	Resume      *string `json:"resume"`
}

// SubmittedJobApplicationModel defines model for SubmittedJobApplicationModel.
type SubmittedJobApplicationModel struct {
	ApplicationId *int64                        `json:"applicationId,omitempty"`
	Links         *SubmittedJobApplicationLinks `json:"links,omitempty"`
}

// TimeRangeModel Time of day interval
type TimeRangeModel struct {
	// End End time of day interval ([ISO partial-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	End *string `json:"end,omitempty"`

	// Start Start time of day interval ([ISO partial-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	Start *string `json:"start,omitempty"`
}

// UpdateCandidateAttachmentCommand defines model for UpdateCandidateAttachmentCommand.
type UpdateCandidateAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date      `json:"expiry"`
	Type   *CandidateAttachmentType `json:"type,omitempty"`
}

// UpdateCandidateCommand defines model for UpdateCandidateCommand.
type UpdateCandidateCommand struct {
	Address *SubmitAddressModel `json:"address,omitempty"`

	// Availability The date the candidate is available to start. Specify ONE OF immediate, relative or date.
	Availability     *SubmitCandidateAvailabilityModel `json:"availability,omitempty"`
	Custom           *[]SubmitCustomFieldValueModel    `json:"custom"`
	DateOfBirth      *openapi_types.Date               `json:"dateOfBirth"`
	Education        *[]SubmitCandidateEducationModel  `json:"education"`
	Email            *string                           `json:"email"`
	EmergencyContact *string                           `json:"emergencyContact"`
	EmergencyPhone   *string                           `json:"emergencyPhone"`
	Employment       *SubmitEmploymentModel            `json:"employment,omitempty"`
	FirstName        *string                           `json:"firstName"`
	LastName         *string                           `json:"lastName"`
	Mobile           *string                           `json:"mobile"`
	Phone            *string                           `json:"phone"`
	Rating           *string                           `json:"rating"`
	RecruiterUserId  *[]int32                          `json:"recruiterUserId"`

	// Salutation Salutation/honorific/title
	Salutation *string                 `json:"salutation"`
	Seeking    *CandidateSeekingStatus `json:"seeking,omitempty"`
	SkillTags  *[]string               `json:"skillTags"`
	Social     *map[string]string      `json:"social"`

	// StatusId Candidate status
	StatusId     *int32  `json:"statusId"`
	Summary      *string `json:"summary"`
	Unsubscribed *bool   `json:"unsubscribed,omitempty"`
}

// UpdateCandidatePartnerActionCommand defines model for UpdateCandidatePartnerActionCommand.
type UpdateCandidatePartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateCandidateSkillsCommand defines model for UpdateCandidateSkillsCommand.
type UpdateCandidateSkillsCommand struct {
	// Categories Skill categories to update for this candidate.<br />
	// Only skills and sub-categories for the submitted categories will be modified.
	Categories *[]SubmitCategoriesModel `json:"categories"`
}

// UpdateCandidateUserTaskCommand defines model for UpdateCandidateUserTaskCommand.
type UpdateCandidateUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateCompanyAddressCommand defines model for UpdateCompanyAddressCommand.
type UpdateCompanyAddressCommand struct {
	City             *string   `json:"city"`
	CountryCode      *string   `json:"countryCode"`
	Fax              *string   `json:"fax"`
	IsPrimaryAddress *bool     `json:"isPrimaryAddress,omitempty"`
	Name             *string   `json:"name"`
	Phone            *string   `json:"phone"`
	PostalCode       *string   `json:"postalCode"`
	State            *string   `json:"state"`
	Street           *[]string `json:"street"`
	Url              *string   `json:"url"`
}

// UpdateCompanyAttachmentCommand defines model for UpdateCompanyAttachmentCommand.
type UpdateCompanyAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date    `json:"expiry"`
	Type   *CompanyAttachmentType `json:"type,omitempty"`
}

// UpdateCompanyCommand defines model for UpdateCompanyCommand.
type UpdateCompanyCommand struct {
	// Custom Custom field values. Only the specified fields will be updated, each fieldId can specified once.
	Custom *[]SubmitCustomFieldValueModel `json:"custom"`

	// LegalName Company LegalName
	LegalName        *string             `json:"legalName"`
	MainContactId    *int32              `json:"mainContactId"`
	Name             *string             `json:"name"`
	OwnerUserId      *int32              `json:"ownerUserId"`
	ParentCompanyId  *int32              `json:"parentCompanyId"`
	PrimaryAddressId *openapi_types.UUID `json:"primaryAddressId"`
	RecruiterUserId  *[]int32            `json:"recruiterUserId"`
	Social           *map[string]string  `json:"social"`

	// StatusId Company status
	StatusId *int32  `json:"statusId"`
	Summary  *string `json:"summary"`
}

// UpdateCompanyPartnerActionCommand defines model for UpdateCompanyPartnerActionCommand.
type UpdateCompanyPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateCompanyUserTaskCommand defines model for UpdateCompanyUserTaskCommand.
type UpdateCompanyUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateCompanyWorkflowCommand defines model for UpdateCompanyWorkflowCommand.
type UpdateCompanyWorkflowCommand struct {
	// Approvers Approvers for this workflow. Only the specified workflow stages will be updated, each stageIndex can be specified once.
	Approvers *[]SubmitCompanyWorkflowApproverModel `json:"approvers"`
	Name      *string                               `json:"name"`
}

// UpdateContactAttachmentCommand defines model for UpdateContactAttachmentCommand.
type UpdateContactAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date    `json:"expiry"`
	Type   *ContactAttachmentType `json:"type,omitempty"`
}

// UpdateContactCommand defines model for UpdateContactCommand.
type UpdateContactCommand struct {
	CompanyId          *int32                         `json:"companyId"`
	Custom             *[]SubmitCustomFieldValueModel `json:"custom"`
	Email              *string                        `json:"email"`
	FirstName          *string                        `json:"firstName"`
	LastName           *string                        `json:"lastName"`
	Mobile             *string                        `json:"mobile"`
	OfficeAddressId    *openapi_types.UUID            `json:"officeAddressId"`
	OwnerUserId        *int32                         `json:"ownerUserId"`
	Phone              *string                        `json:"phone"`
	Position           *string                        `json:"position"`
	RecruiterUserId    *[]int32                       `json:"recruiterUserId"`
	ReportsToContactId *int32                         `json:"reportsToContactId"`

	// Salutation Salutation/honorific/title
	Salutation *string            `json:"salutation"`
	Social     *map[string]string `json:"social"`

	// StatusId Contact status
	StatusId     *int32  `json:"statusId"`
	Summary      *string `json:"summary"`
	Unsubscribed *bool   `json:"unsubscribed,omitempty"`
}

// UpdateContactPartnerActionCommand defines model for UpdateContactPartnerActionCommand.
type UpdateContactPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateContactSkillsCommand defines model for UpdateContactSkillsCommand.
type UpdateContactSkillsCommand struct {
	// Categories Skill categories to update for this contact.<br />
	// Only skills and sub-categories for the submitted categories will be modified.
	Categories *[]SubmitCategoriesModel `json:"categories"`
}

// UpdateContactUserTaskCommand defines model for UpdateContactUserTaskCommand.
type UpdateContactUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateJobAdDraftCommand defines model for UpdateJobAdDraftCommand.
type UpdateJobAdDraftCommand struct {
	BulletPoints *[]string `json:"bulletPoints"`
	Description  *string   `json:"description"`

	// JobId Associated job
	JobId       *int32  `json:"jobId,omitempty"`
	OwnerUserId *int32  `json:"ownerUserId"`
	Reference   *string `json:"reference"`
	Summary     *string `json:"summary"`
	Title       *string `json:"title"`
}

// UpdateJobAdPartnerActionCommand defines model for UpdateJobAdPartnerActionCommand.
type UpdateJobAdPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateJobApplicationAttachmentCommand defines model for UpdateJobApplicationAttachmentCommand.
type UpdateJobApplicationAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date      `json:"expiry"`
	Type   *CandidateAttachmentType `json:"type,omitempty"`
}

// UpdateJobApplicationCommand defines model for UpdateJobApplicationCommand.
type UpdateJobApplicationCommand struct {
	Custom *[]SubmitCustomFieldValueModel `json:"custom"`

	// Rating Job application rating
	Rating *int32 `json:"rating,omitempty"`

	// StatusId Job application status
	StatusId *int32 `json:"statusId,omitempty"`
}

// UpdateJobApplicationInterviewCommand defines model for UpdateJobApplicationInterviewCommand.
type UpdateJobApplicationInterviewCommand struct {
	// EndAt Interview end time. The allowed minutes for the time are 0, 15, 30 and 45.
	EndAt *time.Time `json:"endAt,omitempty"`

	// StartAt Interview start time. The allowed minutes for the time are 0, 15, 30 and 45.
	StartAt *time.Time `json:"startAt,omitempty"`
}

// UpdateJobApplicationPartnerActionCommand defines model for UpdateJobApplicationPartnerActionCommand.
type UpdateJobApplicationPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateJobApplicationUserTaskCommand defines model for UpdateJobApplicationUserTaskCommand.
type UpdateJobApplicationUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateJobOrderAttachmentCommand defines model for UpdateJobOrderAttachmentCommand.
type UpdateJobOrderAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date     `json:"expiry"`
	Type   *JobOrderAttachmentType `json:"type,omitempty"`
}

// UpdateJobOrderCommand defines model for UpdateJobOrderCommand.
type UpdateJobOrderCommand struct {
	Category       *SubmitCategoryModel           `json:"category,omitempty"`
	CompanyId      *int32                         `json:"companyId"`
	ContactId      *int32                         `json:"contactId"`
	Custom         *[]SubmitCustomFieldValueModel `json:"custom"`
	Duration       *SubmitDurationModel           `json:"duration,omitempty"`
	Fee            *SubmitJobOrderFeeModel        `json:"fee,omitempty"`
	JobDescription *string                        `json:"jobDescription"`
	JobTitle       *string                        `json:"jobTitle"`
	Location       *SubmitLocationModel           `json:"location,omitempty"`
	NumberOfJobs   *int32                         `json:"numberOfJobs,omitempty"`

	// OwnerUserId User Id - Owner of this job
	OwnerUserId *int32 `json:"ownerUserId,omitempty"`

	// RecruiterUserId User Id - Optional list of recruiters assigned to the job
	RecruiterUserId *[]int32                        `json:"recruiterUserId"`
	Salary          *SubmitJobOrderSalaryRangeModel `json:"salary,omitempty"`
	SkillTags       *SubmitJobOrderSkillTagsModel   `json:"skillTags,omitempty"`
	Source          *string                         `json:"source"`
	Start           *SubmitJobOrderStartModel       `json:"start,omitempty"`

	// StatusId Job status
	StatusId *int32 `json:"statusId"`

	// UserFavourite Job is a favourite for the current user
	UserFavourite *bool  `json:"userFavourite"`
	WorkTypeId    *int32 `json:"workTypeId"`

	// WorkplaceAddressId Workplace Address Id
	WorkplaceAddressId *openapi_types.UUID `json:"workplaceAddressId"`
}

// UpdateJobOrderPartnerActionCommand defines model for UpdateJobOrderPartnerActionCommand.
type UpdateJobOrderPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdateJobOrderUserTaskCommand defines model for UpdateJobOrderUserTaskCommand.
type UpdateJobOrderUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateNoteCommand defines model for UpdateNoteCommand.
type UpdateNoteCommand struct {
	// Text Note content
	Text *string `json:"text"`

	// Type Note type
	Type *string `json:"type"`
}

// UpdateOpportunityCommand defines model for UpdateOpportunityCommand.
type UpdateOpportunityCommand struct {
	AdditionalInformation *string            `json:"additionalInformation"`
	CompanyId             int32              `json:"companyId"`
	EstimatedClose        *time.Time         `json:"estimatedClose"`
	OpportunityTitle      string             `json:"opportunityTitle"`
	OwnerUserIds          []int32            `json:"ownerUserIds"`
	StageId               openapi_types.UUID `json:"stageId"`
	Value                 *float64           `json:"value"`
	WorkTypeId            *int32             `json:"workTypeId"`
}

// UpdatePartnerActionCommand defines model for UpdatePartnerActionCommand.
type UpdatePartnerActionCommand struct {
	ActionFilter *PartnerActionFilterModel `json:"actionFilter,omitempty"`

	// ActionName Menu item label that will appear to the end-user
	ActionName *string `json:"actionName"`

	// AllowResubmit Allow resources to be resubmitted to an action.
	AllowResubmit *bool `json:"allowResubmit,omitempty"`

	// Reference Unique partner defined reference/identifier for the action
	Reference *string `json:"reference"`

	// Url URL to open after the action is selected and assigned the `"Submitted"` stage.\
	// Templates parameters can be used in the URL to identify the resource submitted to the action
	// <table><tr><td>`{userId}`</td><td>Replaced with the User Id of the user performing the action</td></tr><tr><td>`{jobId}`</td><td>Replaced with the Job Id</td></tr><tr><td>`{adId}`</td><td>Replaced with the Job Ad Id</td></tr><tr><td>`{candidateId}`</td><td>Replaced with the Candidate Id</td></tr><tr><td>`{applicationId}`</td><td>Replaced with the Job Application Id</td></tr><tr><td>`{placementId}`</td><td>Replaced with the Placement Id</td></tr><tr><td>`{companyId}`</td><td>Replaced with the Company Id</td></tr><tr><td>`{contactId}`</td><td>Replaced with the Contact Id</td></tr></table>
	Url     *string               `json:"url"`
	UrlType *PartnerActionUrlType `json:"urlType,omitempty"`

	// WebhookData Additional data to include with the webhook notification
	WebhookData *interface{} `json:"webhookData"`
}

// UpdatePlacementAttachmentCommand defines model for UpdatePlacementAttachmentCommand.
type UpdatePlacementAttachmentCommand struct {
	// Category Optional additional categorization for the attachment type
	Category *string `json:"category"`

	// Expiry Optional expiry date as listed on the document, e.g. a license expiry date
	Expiry *openapi_types.Date      `json:"expiry"`
	Type   *PlacementAttachmentType `json:"type,omitempty"`
}

// UpdatePlacementCommand defines model for UpdatePlacementCommand.
type UpdatePlacementCommand struct {
	Award        *string                           `json:"award"`
	Billing      *SubmitPlacementBillingModel      `json:"billing,omitempty"`
	ContactId    *int32                            `json:"contactId"`
	ContractRate *SubmitPlacementContractRateModel `json:"contractRate,omitempty"`
	Custom       *[]SubmitCustomFieldValueModel    `json:"custom"`

	// EndDate Date a contract or temporary employment ends
	EndDate      *openapi_types.Date              `json:"endDate"`
	FeeSplit     *RatePortion                     `json:"feeSplit,omitempty"`
	IndustryCode *string                          `json:"industryCode"`
	JobTitle     *string                          `json:"jobTitle"`
	PaymentType  *string                          `json:"paymentType"`
	Recruiters   *[]SubmitPlacementRecruiterModel `json:"recruiters"`
	Salary       *SubmitPlacementSalaryModel      `json:"salary,omitempty"`

	// StartDate Date employment begins
	StartDate *openapi_types.Date `json:"startDate,omitempty"`

	// StatusId Placement status
	StatusId *int32  `json:"statusId"`
	Summary  *string `json:"summary"`
}

// UpdatePlacementPartnerActionCommand defines model for UpdatePlacementPartnerActionCommand.
type UpdatePlacementPartnerActionCommand struct {
	// Result Optional complete or partial results for a partner action
	Result *PartnerActionResultCommandModel `json:"result,omitempty"`

	// Status Optional partner defined action status/progress
	Status *string `json:"status"`
}

// UpdatePlacementUserTaskCommand defines model for UpdatePlacementUserTaskCommand.
type UpdatePlacementUserTaskCommand struct {
	AllDay       *bool      `json:"allDay,omitempty"`
	Applications *[]int64   `json:"applications"`
	Assignees    *[]int32   `json:"assignees"`
	Candidates   *[]int32   `json:"candidates"`
	Companies    *[]int32   `json:"companies"`
	Contacts     *[]int32   `json:"contacts"`
	EndAt        *time.Time `json:"endAt"`
	Jobs         *[]int32   `json:"jobs"`
	Placements   *[]int32   `json:"placements"`
	Priority     *int32     `json:"priority,omitempty"`
	StartAt      *time.Time `json:"startAt"`
	Title        *string    `json:"title"`
}

// UpdateRequisitionCommand defines model for UpdateRequisitionCommand.
type UpdateRequisitionCommand struct {
	Category *SubmitCategoryModel `json:"category,omitempty"`

	// ContactId Optional contact associated with the change, must be associated with the same company as the requisition.
	ContactId      *int32                         `json:"contactId"`
	Custom         *[]SubmitCustomFieldValueModel `json:"custom"`
	Duration       *SubmitDurationModel           `json:"duration,omitempty"`
	FormID         *int32                         `json:"formID"`
	JobDescription *string                        `json:"jobDescription"`
	JobTitle       *string                        `json:"jobTitle"`
	Location       *SubmitLocationModel           `json:"location,omitempty"`
	NumberOfJobs   *int32                         `json:"numberOfJobs,omitempty"`

	// RecruiterUserId User Id - Optional list of recruiters assigned to the requisition.
	RecruiterUserId *[]int32                        `json:"recruiterUserId"`
	Salary          *SubmitJobOrderSalaryRangeModel `json:"salary,omitempty"`
	Source          *string                         `json:"source"`
	Start           *SubmitJobOrderStartModel       `json:"start,omitempty"`
	WorkTypeId      *int32                          `json:"workTypeId"`
	WorkflowId      *int32                          `json:"workflowId"`

	// WorkplaceAddressId Workplace address Id
	WorkplaceAddressId *openapi_types.UUID `json:"workplaceAddressId"`
}

// UpdateUserTaskCommand defines model for UpdateUserTaskCommand.
type UpdateUserTaskCommand struct {
	AllDay    *bool      `json:"allDay,omitempty"`
	Assignees *[]int32   `json:"assignees"`
	EndAt     *time.Time `json:"endAt"`
	Priority  *int32     `json:"priority,omitempty"`
	StartAt   *time.Time `json:"startAt"`
	Title     *string    `json:"title"`
}

// UpdateWebhookCommand defines model for UpdateWebhookCommand.
type UpdateWebhookCommand struct {
	// Authorization Optional authorization header to include with the HTTP POST notification.
	Authorization *string                        `json:"authorization"`
	EventFilters  *SubmitWebhookEventFilterModel `json:"eventFilters,omitempty"`
	Events        *[]EventName                   `json:"events"`
	Name          *string                        `json:"name"`
	Status        *SubmitWebhookStatus           `json:"status,omitempty"`

	// Url Target URL that will listen for incoming HTTP POST notification messages.
	Url *string `json:"url"`
}

// UserGroupLinks defines model for UserGroupLinks.
type UserGroupLinks struct {
	Self *string `json:"self"`

	// Users Users belonging to the group
	Users *string `json:"users"`
}

// UserGroupListRepresentation defines model for UserGroupListRepresentation.
type UserGroupListRepresentation struct {
	Items      *[]UserGroupSummaryModel `json:"items"`
	Links      *PageLinks               `json:"links,omitempty"`
	TotalCount int32                    `json:"totalCount"`
}

// UserGroupRepresentation defines model for UserGroupRepresentation.
type UserGroupRepresentation struct {
	GroupId int32           `json:"groupId"`
	Links   *UserGroupLinks `json:"links,omitempty"`
	Name    string          `json:"name"`

	// Users Users belonging to the group
	Users *[]UserSummaryModel `json:"users"`
}

// UserGroupSummaryModel defines model for UserGroupSummaryModel.
type UserGroupSummaryModel struct {
	GroupId int32  `json:"groupId"`
	Name    string `json:"name"`
}

// UserLinks defines model for UserLinks.
type UserLinks struct {
	// Office Office the user belongs to
	Office *string `json:"office"`
	Photo  *string `json:"photo"`
	Self   *string `json:"self"`

	// UserGroups User groups the user belongs to
	UserGroups *string `json:"userGroups"`
}

// UserListRepresentation defines model for UserListRepresentation.
type UserListRepresentation struct {
	Items      *[]UserSummaryModel `json:"items"`
	Links      *PageLinks          `json:"links,omitempty"`
	TotalCount int32               `json:"totalCount"`
}

// UserMatchedByEmailModel defines model for UserMatchedByEmailModel.
type UserMatchedByEmailModel struct {
	Email     *string                   `json:"email"`
	FirstName *string                   `json:"firstName"`
	Inactive  *bool                     `json:"inactive,omitempty"`
	LastName  *string                   `json:"lastName"`
	Match     *MatchedEmailAddressModel `json:"match,omitempty"`
	Mobile    *string                   `json:"mobile"`
	Phone     *string                   `json:"phone"`
	Position  *string                   `json:"position"`
	UpdatedAt *time.Time                `json:"updatedAt"`
	UserId    *int32                    `json:"userId,omitempty"`
}

// UserMatchedByPhoneModel defines model for UserMatchedByPhoneModel.
type UserMatchedByPhoneModel struct {
	Email     *string                  `json:"email"`
	FirstName *string                  `json:"firstName"`
	Inactive  *bool                    `json:"inactive,omitempty"`
	LastName  *string                  `json:"lastName"`
	Match     *MatchedPhoneNumberModel `json:"match,omitempty"`
	Mobile    *string                  `json:"mobile"`
	Phone     *string                  `json:"phone"`
	Position  *string                  `json:"position"`
	UpdatedAt *time.Time               `json:"updatedAt"`
	UserId    *int32                   `json:"userId,omitempty"`
}

// UserNameModel defines model for UserNameModel.
type UserNameModel struct {
	Deleted   *bool   `json:"deleted,omitempty"`
	Email     *string `json:"email"`
	FirstName *string `json:"firstName"`
	Inactive  *bool   `json:"inactive,omitempty"`
	LastName  *string `json:"lastName"`
	Mobile    *string `json:"mobile"`
	Phone     *string `json:"phone"`
	Position  *string `json:"position"`
	UserId    int32   `json:"userId"`
}

// UserOfficeLinks defines model for UserOfficeLinks.
type UserOfficeLinks struct {
	Self *string `json:"self"`

	// Users Users belonging to the office
	Users *string `json:"users"`
}

// UserOfficeListRepresentation defines model for UserOfficeListRepresentation.
type UserOfficeListRepresentation struct {
	Items      *[]UserOfficeNameModel `json:"items"`
	Links      *PageLinks             `json:"links,omitempty"`
	TotalCount int32                  `json:"totalCount"`
}

// UserOfficeNameModel defines model for UserOfficeNameModel.
type UserOfficeNameModel struct {
	Name     string `json:"name"`
	OfficeId int32  `json:"officeId"`
}

// UserOfficeRepresentation defines model for UserOfficeRepresentation.
type UserOfficeRepresentation struct {
	City        *string          `json:"city"`
	Country     *string          `json:"country"`
	CountryCode *string          `json:"countryCode"`
	Fax         *string          `json:"fax"`
	Links       *UserOfficeLinks `json:"links,omitempty"`
	Name        string           `json:"name"`
	OfficeId    int32            `json:"officeId"`
	Phone       *string          `json:"phone"`
	PostalCode  *string          `json:"postalCode"`
	State       *string          `json:"state"`
	Street      *[]string        `json:"street"`
	Url         *string          `json:"url"`

	// Users Users belonging to the office
	Users *[]UserNameModel `json:"users"`
}

// UserOfficeSummaryModel defines model for UserOfficeSummaryModel.
type UserOfficeSummaryModel struct {
	City        *string   `json:"city"`
	Country     *string   `json:"country"`
	CountryCode *string   `json:"countryCode"`
	Fax         *string   `json:"fax"`
	Name        string    `json:"name"`
	OfficeId    int32     `json:"officeId"`
	Phone       *string   `json:"phone"`
	PostalCode  *string   `json:"postalCode"`
	State       *string   `json:"state"`
	Street      *[]string `json:"street"`
	Url         *string   `json:"url"`
}

// UserRepresentation defines model for UserRepresentation.
type UserRepresentation struct {
	AccountName *string                  `json:"accountName"`
	Admin       *bool                    `json:"admin,omitempty"`
	CreatedAt   *time.Time               `json:"createdAt,omitempty"`
	Culture     *string                  `json:"culture"`
	Deleted     *bool                    `json:"deleted,omitempty"`
	Email       *string                  `json:"email"`
	FirstName   *string                  `json:"firstName"`
	Inactive    *bool                    `json:"inactive,omitempty"`
	LastName    *string                  `json:"lastName"`
	Links       *UserLinks               `json:"links,omitempty"`
	MentionName *string                  `json:"mentionName"`
	Mobile      *string                  `json:"mobile"`
	Office      *UserOfficeSummaryModel  `json:"office,omitempty"`
	Phone       *string                  `json:"phone"`
	Position    *string                  `json:"position"`
	TimeZone    *string                  `json:"timeZone"`
	UpdatedAt   *time.Time               `json:"updatedAt,omitempty"`
	UserGroups  *[]UserGroupSummaryModel `json:"userGroups"`
	UserId      int32                    `json:"userId"`
}

// UserSummaryModel defines model for UserSummaryModel.
type UserSummaryModel struct {
	CreatedAt   *time.Time              `json:"createdAt,omitempty"`
	Deleted     *bool                   `json:"deleted,omitempty"`
	Email       *string                 `json:"email"`
	FirstName   *string                 `json:"firstName"`
	Inactive    *bool                   `json:"inactive,omitempty"`
	LastName    *string                 `json:"lastName"`
	MentionName *string                 `json:"mentionName"`
	Mobile      *string                 `json:"mobile"`
	Office      *UserOfficeSummaryModel `json:"office,omitempty"`
	Phone       *string                 `json:"phone"`
	Position    *string                 `json:"position"`
	UpdatedAt   *time.Time              `json:"updatedAt,omitempty"`
	UserId      int32                   `json:"userId"`
}

// UserTaskLinks defines model for UserTaskLinks.
type UserTaskLinks struct {
	Note *string `json:"note"`
	Self *string `json:"self"`
}

// UserTaskListRepresentation defines model for UserTaskListRepresentation.
type UserTaskListRepresentation struct {
	Items      *[]UserTaskSummaryModel `json:"items"`
	Links      *PageLinks              `json:"links,omitempty"`
	TotalCount int32                   `json:"totalCount"`
}

// UserTaskModel defines model for UserTaskModel.
type UserTaskModel struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// UserTaskRepresentation defines model for UserTaskRepresentation.
type UserTaskRepresentation struct {
	AllDay          *bool                         `json:"allDay,omitempty"`
	Applications    *[]JobApplicationSummaryModel `json:"applications"`
	AssignedTo      *UserNameModel                `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel              `json:"assignees"`
	Candidates      *[]CandidateNameModel         `json:"candidates"`
	Companies       *[]CompanyNameModel           `json:"companies"`
	Complete        *bool                         `json:"complete,omitempty"`
	Contacts        *[]ContactNameModel           `json:"contacts"`
	CreatedAt       *time.Time                    `json:"createdAt"`
	CreatedBy       *UserNameModel                `json:"createdBy,omitempty"`
	EndAt           *time.Time                    `json:"endAt"`
	Jobs            *[]JobOrderTitleModel         `json:"jobs"`
	Links           *UserTaskLinks                `json:"links,omitempty"`
	Owner           *UserNameModel                `json:"owner,omitempty"`
	Placements      *[]PlacementSummaryModel      `json:"placements"`
	ReminderMinutes *int32                        `json:"reminderMinutes"`
	Requisitions    *[]RequisitionSummaryModel    `json:"requisitions"`
	StartAt         *time.Time                    `json:"startAt"`
	TaskId          *int64                        `json:"taskId,omitempty"`
	Text            *string                       `json:"text"`
	UpdatedAt       *time.Time                    `json:"updatedAt"`
	UpdatedBy       *UserNameModel                `json:"updatedBy,omitempty"`
}

// UserTaskSummaryModel defines model for UserTaskSummaryModel.
type UserTaskSummaryModel struct {
	AllDay          *bool            `json:"allDay,omitempty"`
	AssignedTo      *UserNameModel   `json:"assignedTo,omitempty"`
	Assignees       *[]UserNameModel `json:"assignees"`
	Complete        *bool            `json:"complete,omitempty"`
	CreatedAt       *time.Time       `json:"createdAt"`
	CreatedBy       *UserNameModel   `json:"createdBy,omitempty"`
	EndAt           *time.Time       `json:"endAt"`
	Owner           *UserNameModel   `json:"owner,omitempty"`
	ReminderMinutes *int32           `json:"reminderMinutes"`
	StartAt         *time.Time       `json:"startAt"`
	TaskId          *int64           `json:"taskId,omitempty"`
	Text            *string          `json:"text"`
	UpdatedAt       *time.Time       `json:"updatedAt"`
	UpdatedBy       *UserNameModel   `json:"updatedBy,omitempty"`
}

// WebhookEventFilterModel defines model for WebhookEventFilterModel.
type WebhookEventFilterModel struct {
	JobapplicationStatusChanged *WebhookEventStatusChangeFilterModel `json:"jobapplication_status_changed,omitempty"`
}

// WebhookEventStatusChangeFilterModel defines model for WebhookEventStatusChangeFilterModel.
type WebhookEventStatusChangeFilterModel struct {
	// StatusActive Limit events to an active/open status
	StatusActive *bool `json:"statusActive,omitempty"`

	// StatusId Limit events to a specific status
	StatusId *[]int32 `json:"statusId"`
}

// WebhookListRepresentation defines model for WebhookListRepresentation.
type WebhookListRepresentation struct {
	Items *[]WebhookModel `json:"items"`
	Links *ModelLinks     `json:"links,omitempty"`
}

// WebhookModel defines model for WebhookModel.
type WebhookModel struct {
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	DisabledAt   *time.Time               `json:"disabledAt"`
	EnabledAt    *time.Time               `json:"enabledAt"`
	EventFilters *WebhookEventFilterModel `json:"eventFilters,omitempty"`
	Events       *[]EventName             `json:"events"`
	FailedAt     *time.Time               `json:"failedAt"`
	Name         *string                  `json:"name"`
	Status       *WebhookStatus           `json:"status,omitempty"`
	SuspendedAt  *time.Time               `json:"suspendedAt"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	Url          *string                  `json:"url"`
	WebhookId    *openapi_types.UUID      `json:"webhookId,omitempty"`
}

// WebhookRepresentation defines model for WebhookRepresentation.
type WebhookRepresentation struct {
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	DisabledAt   *time.Time               `json:"disabledAt"`
	EnabledAt    *time.Time               `json:"enabledAt"`
	EventFilters *WebhookEventFilterModel `json:"eventFilters,omitempty"`
	Events       *[]EventName             `json:"events"`
	FailedAt     *time.Time               `json:"failedAt"`
	Links        *ModelLinks              `json:"links,omitempty"`
	Name         *string                  `json:"name"`
	Status       *WebhookStatus           `json:"status,omitempty"`
	SuspendedAt  *time.Time               `json:"suspendedAt"`
	UpdatedAt    *time.Time               `json:"updatedAt,omitempty"`
	Url          *string                  `json:"url"`
	WebhookId    *openapi_types.UUID      `json:"webhookId,omitempty"`
}

// WebhookStatus defines model for WebhookStatus.
type WebhookStatus string

// WorkTypeListRepresentation defines model for WorkTypeListRepresentation.
type WorkTypeListRepresentation struct {
	Items *[]WorkTypeModel `json:"items"`
	Links *ModelLinks      `json:"links,omitempty"`
}

// WorkTypeModel defines model for WorkTypeModel.
type WorkTypeModel struct {
	Name       string         `json:"name"`
	RatePer    *SalaryRatePer `json:"ratePer,omitempty"`
	WorkTypeId int32          `json:"workTypeId"`
}

// FindJobApplicationsParams defines parameters for FindJobApplications.
type FindJobApplicationsParams struct {
	// ApplicationId Application Id
	ApplicationId *[]int64 `form:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`

	// CandidateId Candidate Id
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// JobId Job Id
	JobId *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// AdId Job Ad Id
	AdId *[]int32 `form:"AdId,omitempty" json:"AdId,omitempty"`

	// StatusId Job application status
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	JobTitle *string  `form:"JobTitle,omitempty" json:"JobTitle,omitempty"`

	// Active Search for active job applications
	Active *bool `form:"Active,omitempty" json:"Active,omitempty"`

	// Rejected Search for rejected job applications
	Rejected *bool `form:"Rejected,omitempty" json:"Rejected,omitempty"`

	// ReviewStage Search for job applications at the specified review stage.
	ReviewStage *[]JobApplicationReviewStage `form:"Review.Stage,omitempty" json:"Review.Stage,omitempty"`

	// ReviewUserId Search for job applications submitted for review by the specified users.
	ReviewUserId *[]int32 `form:"Review.UserId,omitempty" json:"Review.UserId,omitempty"`

	// ReviewContactId Search for job applications submitted for review to the specified hiring manager contacts
	ReviewContactId *[]int32 `form:"Review.ContactId,omitempty" json:"Review.ContactId,omitempty"`

	// ReviewSubmittedAt Search for job applications submitted for review at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	ReviewSubmittedAt *[]string `form:"Review.SubmittedAt,omitempty" json:"Review.SubmittedAt,omitempty"`

	// ReviewReviewedAt Search for job applications reviewed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	ReviewReviewedAt *[]string `form:"Review.ReviewedAt,omitempty" json:"Review.ReviewedAt,omitempty"`

	// Keywords Search for key words within the applicant's resume
	Keywords *string `form:"Keywords,omitempty" json:"Keywords,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// CreatedAt Search for job applications created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for job applications last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for job applications updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: createdAt, status.name, review.stage, review.submittedAt, review.reviewedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindJobApplicationActivityParams defines parameters for FindJobApplicationActivity.
type FindJobApplicationActivityParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindJobApplicationActivitySettingsParams defines parameters for FindJobApplicationActivitySettings.
type FindJobApplicationActivitySettingsParams struct {
	Query *FindJobApplicationActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// GetJobApplicationStatusListParams defines parameters for GetJobApplicationStatusList.
type GetJobApplicationStatusListParams struct {
	Rejected *bool    `form:"Rejected,omitempty" json:"Rejected,omitempty"`
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// GetJobApplicationWorkflowListParams defines parameters for GetJobApplicationWorkflowList.
type GetJobApplicationWorkflowListParams struct {
	Query *GetJobApplicationStatusByWorkflowListQuery `form:"query,omitempty" json:"query,omitempty"`
}

// FindJobApplicationAttachmentsParams defines parameters for FindJobApplicationAttachments.
type FindJobApplicationAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]CandidateAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Category Search by attachment label
	Category *[]string `form:"Category,omitempty" json:"Category,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddJobApplicationAttachmentMultipartBody defines parameters for AddJobApplicationAttachment.
type AddJobApplicationAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetJobApplicationInterviewsParams defines parameters for GetJobApplicationInterviews.
type GetJobApplicationInterviewsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetJobApplicationNotesParams defines parameters for GetJobApplicationNotes.
type GetJobApplicationNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindCandidatesParams defines parameters for FindCandidates.
type FindCandidatesParams struct {
	// CandidateId Candidate Id
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// Name Candidate name
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`

	// Email Candidate email
	Email *string `form:"Email,omitempty" json:"Email,omitempty"`

	// Phone Candidate phone or mobile number
	Phone *string `form:"Phone,omitempty" json:"Phone,omitempty"`

	// CurrentPosition Current Position
	CurrentPosition *string `form:"CurrentPosition,omitempty" json:"CurrentPosition,omitempty"`

	// City City
	City *string `form:"City,omitempty" json:"City,omitempty"`

	// State State
	State *string `form:"State,omitempty" json:"State,omitempty"`

	// Location Location (city and/or state)
	Location *string `form:"Location,omitempty" json:"Location,omitempty"`

	// DateOfBirth Candidate date of birth available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))
	DateOfBirth *time.Time `form:"DateOfBirth,omitempty" json:"DateOfBirth,omitempty"`

	// Keywords Search for key-words within the latest candidate resume
	Keywords *string `form:"Keywords,omitempty" json:"Keywords,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// StatusId Candidate status
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`

	// RecruiterUserId User Id - search candidates by associated recruiters
	RecruiterUserId *[]int32 `form:"RecruiterUserId,omitempty" json:"RecruiterUserId,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// CreatedAt Search for candidates created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for candidates updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Default sort order is by candidateID in ascending order
	// Fields available for sorting are: firstName, lastName, status.name, candidateId, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: recruiters, statistics
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, applications, placements, skills, notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddCandidateParams defines parameters for AddCandidate.
type AddCandidateParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// FindCandidateActivitiesParams defines parameters for FindCandidateActivities.
type FindCandidateActivitiesParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindCandidateActivitySettingsParams defines parameters for FindCandidateActivitySettings.
type FindCandidateActivitySettingsParams struct {
	Query *FindCandidateActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// FindAllCandidateAttachmentsParams defines parameters for FindAllCandidateAttachments.
type FindAllCandidateAttachmentsParams struct {
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// Type Attachment types to include
	Type *[]CandidateAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Category Search by attachment category
	Category *[]string `form:"Category,omitempty" json:"Category,omitempty"`

	// CreatedAt Search for candidate attachment created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for candidate attachment updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// ExpiryDate Search for candidate attachment expiring in the specified date range
	// ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.
	// Specify multiple parameters to search for a range.
	ExpiryDate *[]string `form:"ExpiryDate,omitempty" json:"ExpiryDate,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: candidate
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetCandidateAttachmentCategoryListParams defines parameters for GetCandidateAttachmentCategoryList.
type GetCandidateAttachmentCategoryListParams struct {
	// Type Optionally filter to specific attachment types
	Type *[]CandidateAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`
}

// GetCandidateNoteTypeListParams defines parameters for GetCandidateNoteTypeList.
type GetCandidateNoteTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetCandidateRatingListParams defines parameters for GetCandidateRatingList.
type GetCandidateRatingListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetCandidateSalutationListParams defines parameters for GetCandidateSalutationList.
type GetCandidateSalutationListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetCandidateSourceListParams defines parameters for GetCandidateSourceList.
type GetCandidateSourceListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetCandidateStatusListParams defines parameters for GetCandidateStatusList.
type GetCandidateStatusListParams struct {
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// FindCandidatesPayrollBillingsParams defines parameters for FindCandidatesPayrollBillings.
type FindCandidatesPayrollBillingsParams struct {
	// CandidateId Candidate Ids
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`
}

// GetCandidateParams defines parameters for GetCandidate.
type GetCandidateParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: skills, notes, applications, placements
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// UpdateCandidateParams defines parameters for UpdateCandidate.
type UpdateCandidateParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// GetCandidateJobApplicationsParams defines parameters for GetCandidateJobApplications.
type GetCandidateJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetActiveCandidateJobApplicationsParams defines parameters for GetActiveCandidateJobApplications.
type GetActiveCandidateJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// FindCandidateAttachmentsParams defines parameters for FindCandidateAttachments.
type FindCandidateAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]CandidateAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Category Search by attachment category
	Category *[]string `form:"Category,omitempty" json:"Category,omitempty"`

	// Latest Find the latest version of each attachment type
	Latest *bool `form:"Latest,omitempty" json:"Latest,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddCandidateAttachmentMultipartBody defines parameters for AddCandidateAttachment.
type AddCandidateAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// DeleteCandidateAvailabilityWeekParams defines parameters for DeleteCandidateAvailabilityWeek.
type DeleteCandidateAvailabilityWeekParams struct {
	// WeekOf Remove availability for the week (beginning Sunday) containing the specified date
	WeekOf time.Time `form:"WeekOf" json:"WeekOf"`

	// Recurring Remove availability in following weeks. Previous/past recurring schedules will be terminated prior to this schedule, all existing future overlapping schedules will be cancelled.
	Recurring *bool `form:"Recurring,omitempty" json:"Recurring,omitempty"`

	// Until Optional end date of repeating availability removal
	Until *time.Time `form:"Until,omitempty" json:"Until,omitempty"`
}

// GetCandidateInterviewsParams defines parameters for GetCandidateInterviews.
type GetCandidateInterviewsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetCandidateNotesParams defines parameters for GetCandidateNotes.
type GetCandidateNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetCandidatePhotoParams defines parameters for GetCandidatePhoto.
type GetCandidatePhotoParams struct {
	// W Reduce the size of the photo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the photo to fit the height specified by h
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// HeadCandidatePhotoParams defines parameters for HeadCandidatePhoto.
type HeadCandidatePhotoParams struct {
	// W Reduce the size of the photo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the photo to fit the height specified by h
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// UpdateCandidatePhotoMultipartBody defines parameters for UpdateCandidatePhoto.
type UpdateCandidatePhotoMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// FindCategoriesParams defines parameters for FindCategories.
type FindCategoriesParams struct {
	CategoryId *[]int32               `form:"CategoryId,omitempty" json:"CategoryId,omitempty"`
	Embed      *[]FindCategoriesEmbed `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindCompaniesParams defines parameters for FindCompanies.
type FindCompaniesParams struct {
	// Name Company name
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`

	// CompanyId Companies by Id
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// ParentId Find subsidiaries of specified parent companies
	ParentId *[]int32 `form:"ParentId,omitempty" json:"ParentId,omitempty"`

	// SubsidiaryId Find parents of specified subsidiaries
	SubsidiaryId *[]int32 `form:"SubsidiaryId,omitempty" json:"SubsidiaryId,omitempty"`

	// StatusId Company status
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// CreatedBy User Id - search for companies created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for companies created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for companies last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for companies updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, addresses, contacts, subsidiaries, skills, notes, jobs, placements, workflows
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddCompanyParams defines parameters for AddCompany.
type AddCompanyParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// FindCompanyActivityParams defines parameters for FindCompanyActivity.
type FindCompanyActivityParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindCompanyActivitySettingsParams defines parameters for FindCompanyActivitySettings.
type FindCompanyActivitySettingsParams struct {
	Query *FindCompanyActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// GetCompanyAttachmentCategoryListParams defines parameters for GetCompanyAttachmentCategoryList.
type GetCompanyAttachmentCategoryListParams struct {
	// Type Optionally filter to specific attachment types
	Type *[]CompanyAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`
}

// GetCompanyNoteTypeListParams defines parameters for GetCompanyNoteTypeList.
type GetCompanyNoteTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetCompanyStatusListParams defines parameters for GetCompanyStatusList.
type GetCompanyStatusListParams struct {
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// GetCompanyParams defines parameters for GetCompany.
type GetCompanyParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: addresses, contacts, subsidiaries, skills, notes, jobs, placements, workflows
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// UpdateCompanyParams defines parameters for UpdateCompany.
type UpdateCompanyParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// FindCompanyAttachmentsParams defines parameters for FindCompanyAttachments.
type FindCompanyAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]CompanyAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Latest Find the latest version of each attachment type
	Latest *bool `form:"Latest,omitempty" json:"Latest,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddCompanyAttachmentMultipartBody defines parameters for AddCompanyAttachment.
type AddCompanyAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetCompanyLogoParams defines parameters for GetCompanyLogo.
type GetCompanyLogoParams struct {
	// W Reduce the size of the logo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the logo to fit the height specified by h
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// HeadCompanyLogoParams defines parameters for HeadCompanyLogo.
type HeadCompanyLogoParams struct {
	// W Reduce the size of the logo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the logo to fit the height specified by h
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// UpdateCompanyLogoMultipartBody defines parameters for UpdateCompanyLogo.
type UpdateCompanyLogoMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetCompanyNotesParams defines parameters for GetCompanyNotes.
type GetCompanyNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// ListCompanyWorkflowsParams defines parameters for ListCompanyWorkflows.
type ListCompanyWorkflowsParams struct {
	WorkflowId *[]int32                       `form:"WorkflowId,omitempty" json:"WorkflowId,omitempty"`
	Include    *[]FindCompanyWorkflowsInclude `form:"Include,omitempty" json:"Include,omitempty"`

	// Embed Embed related resources within the results.
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// FindContactsParams defines parameters for FindContacts.
type FindContactsParams struct {
	// ContactId Contact Id
	ContactId *[]int32 `form:"ContactId,omitempty" json:"ContactId,omitempty"`

	// Name Contact name
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`

	// Email Contact email
	Email *string `form:"Email,omitempty" json:"Email,omitempty"`

	// Phone Contact phone or mobile number
	Phone *string `form:"Phone,omitempty" json:"Phone,omitempty"`

	// CompanyId Company Id
	CompanyId     *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`
	HiringManager *bool    `form:"HiringManager,omitempty" json:"HiringManager,omitempty"`
	StatusId      *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// CreatedBy User Id - search for contacts created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for contacts created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for contacts last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for contacts updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, skills, notes, jobs
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddContactParams defines parameters for AddContact.
type AddContactParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// FindContactActivityParams defines parameters for FindContactActivity.
type FindContactActivityParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindContactActivitySettingsParams defines parameters for FindContactActivitySettings.
type FindContactActivitySettingsParams struct {
	Query *FindContactActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// GetContactAttachmentCategoryListParams defines parameters for GetContactAttachmentCategoryList.
type GetContactAttachmentCategoryListParams struct {
	// Type Optionally filter to specific attachment types
	Type *[]ContactAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`
}

// GetContactNoteTypeListParams defines parameters for GetContactNoteTypeList.
type GetContactNoteTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetContactSalutationListParams defines parameters for GetContactSalutationList.
type GetContactSalutationListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetContactStatusListParams defines parameters for GetContactStatusList.
type GetContactStatusListParams struct {
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// GetContactParams defines parameters for GetContact.
type GetContactParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: skills, notes, jobs
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// UpdateContactParams defines parameters for UpdateContact.
type UpdateContactParams struct {
	// XAllowDuplicates Duplicate override code from the header of an earlier 409 response
	XAllowDuplicates *string `json:"X-Allow-Duplicates,omitempty"`
}

// FindContactAttachmentsParams defines parameters for FindContactAttachments.
type FindContactAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]ContactAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Latest Find the latest version of each attachment type
	Latest *bool `form:"Latest,omitempty" json:"Latest,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddContactAttachmentMultipartBody defines parameters for AddContactAttachment.
type AddContactAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetContactInterviewsParams defines parameters for GetContactInterviews.
type GetContactInterviewsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetContactNotesParams defines parameters for GetContactNotes.
type GetContactNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetContactPhotoParams defines parameters for GetContactPhoto.
type GetContactPhotoParams struct {
	// W Reduce the size of the photo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the photo to fit the height specified by g
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// HeadContactPhotoParams defines parameters for HeadContactPhoto.
type HeadContactPhotoParams struct {
	// W Reduce the size of the photo to fit the width specified by w
	W *int32 `form:"w,omitempty" json:"w,omitempty"`

	// H Reduce the size of the photo to fit the height specified by g
	H *int32 `form:"h,omitempty" json:"h,omitempty"`
}

// UpdateContactPhotoMultipartBody defines parameters for UpdateContactPhoto.
type UpdateContactPhotoMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// FindCountriesParams defines parameters for FindCountries.
type FindCountriesParams struct {
	Code *[]string `form:"Code,omitempty" json:"Code,omitempty"`
}

// GetFloatsParams defines parameters for GetFloats.
type GetFloatsParams struct {
	// FloatId Float Id
	FloatId *[]int64 `form:"FloatId,omitempty" json:"FloatId,omitempty"`

	// CandidateId Candidate Id
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// CompanyId Company Id
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// CreatedAt Search for floats created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for floats updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindFoldersParams defines parameters for FindFolders.
type FindFoldersParams struct {
	// FolderId Folder Id
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// JobId Job Id
	JobId *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// CandidateId Candidate Id
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// ApplicationId Job Application Id
	ApplicationId *[]int64 `form:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`

	// PlacementId Placement Id
	PlacementId *[]int32 `form:"PlacementId,omitempty" json:"PlacementId,omitempty"`

	// CompanyId Company Id
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// ContactId Contact Id
	ContactId *[]int32 `form:"ContactId,omitempty" json:"ContactId,omitempty"`

	// UserId User Id - search for folders by owner or shared with the specified users
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// OwnerUserId User Id - search for folders by owner
	OwnerUserId *[]int32 `form:"OwnerUserId,omitempty" json:"OwnerUserId,omitempty"`

	// SharedWithUserId User Id - search folders shared with the specified users
	SharedWithUserId *[]int32 `form:"SharedWithUserId,omitempty" json:"SharedWithUserId,omitempty"`

	// OwnerStatus Owner status
	OwnerStatus *FolderOwnerStatus `form:"OwnerStatus,omitempty" json:"OwnerStatus,omitempty"`

	// CreatedAt Search for folders created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for folders updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: sharedWith
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, jobs, candidates, applications, contacts, companies, placements
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// EmbedMode Determines what gets returned when embed option is one of self or candidates/contacts/etc.<br />
	// Resources available to embedMode are: id
	EmbedMode *string `form:"EmbedMode,omitempty" json:"EmbedMode,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetFolderParams defines parameters for GetFolder.
type GetFolderParams struct {
	// EmbedMode Determines what gets returned when embed option is one of self or canddiates/contacts/etc.<br />
	// Resources available to embedMode are: id
	EmbedMode *string `form:"EmbedMode,omitempty" json:"EmbedMode,omitempty"`
}

// PatchFolderJSONBody defines parameters for PatchFolder.
type PatchFolderJSONBody = []Operation

// FindInterviewsParams defines parameters for FindInterviews.
type FindInterviewsParams struct {
	InterviewId *[]int32 `form:"InterviewId,omitempty" json:"InterviewId,omitempty"`
	JobId       *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// UserId User Id - search for internal/user interviewers
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// ContactId Contact Id - search for external/contact interviewers
	ContactId *[]int32 `form:"ContactId,omitempty" json:"ContactId,omitempty"`

	// CandidateId Candidate Id - search for interviewees by candidateId
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// ApplicationId Application Id - search for interviewees by applicationId
	ApplicationId *[]int64         `form:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`
	Type          *[]InterviewType `form:"Type,omitempty" json:"Type,omitempty"`

	// StartAt Search for interviews starting at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	StartAt *[]string `form:"StartAt,omitempty" json:"StartAt,omitempty"`

	// EndAt Search for interviews ending at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	EndAt    *[]string `form:"EndAt,omitempty" json:"EndAt,omitempty"`
	Location *string   `form:"Location,omitempty" json:"Location,omitempty"`

	// CreatedBy User Id - search for interviews created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for interviews created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for interviews updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, evaluations
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetInterviewParams defines parameters for GetInterview.
type GetInterviewParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: evaluations
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// GetJobAdsParams defines parameters for GetJobAds.
type GetJobAdsParams struct {
	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: self,applications,partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, applications
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetJobAdParams defines parameters for GetJobAd.
type GetJobAdParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: applications
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// GetJobAdJobApplicationsParams defines parameters for GetJobAdJobApplications.
type GetJobAdJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetJobAdActiveJobApplicationsParams defines parameters for GetJobAdActiveJobApplications.
type GetJobAdActiveJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindJobBoardsParams defines parameters for FindJobBoards.
type FindJobBoardsParams struct {
	// BoardId Job Board Id
	BoardId *[]int32 `form:"BoardId,omitempty" json:"BoardId,omitempty"`
}

// FindJobBoardJobAdsParams defines parameters for FindJobBoardJobAds.
type FindJobBoardJobAdsParams struct {
	AdId           *[]int32  `form:"AdId,omitempty" json:"AdId,omitempty"`
	Reference      *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`
	PortalHotJob   *bool     `form:"Portal.HotJob,omitempty" json:"Portal.HotJob,omitempty"`
	PortalValue    *[]string `form:"Portal.Value,omitempty" json:"Portal.Value,omitempty"`
	PortalValueId  *[]int32  `form:"Portal.ValueId,omitempty" json:"Portal.ValueId,omitempty"`
	PortalTemplate *[]string `form:"Portal.Template,omitempty" json:"Portal.Template,omitempty"`

	// PostedAt Search for job ads posted at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PostedAt *[]string `form:"PostedAt,omitempty" json:"PostedAt,omitempty"`

	// UpdatedAt Search for job ads updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// ExpiresAt Search for job ads expiring at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	ExpiresAt *[]string `form:"ExpiresAt,omitempty" json:"ExpiresAt,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: ```description```, ```portal.fields```
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AttachJobBoardJobApplicationDocumentMultipartBody defines parameters for AttachJobBoardJobApplicationDocument.
type AttachJobBoardJobApplicationDocumentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// FindJobOrdersParams defines parameters for FindJobOrders.
type FindJobOrdersParams struct {
	// JobId Job Id
	JobId *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// JobTitle Job title
	JobTitle *string `form:"JobTitle,omitempty" json:"JobTitle,omitempty"`

	// CompanyCompanyId Companies by Id
	CompanyCompanyId *[]int32 `form:"Company.CompanyId,omitempty" json:"Company.CompanyId,omitempty"`

	// CompanyName Company name
	CompanyName *string `form:"Company.Name,omitempty" json:"Company.Name,omitempty"`

	// CompanyId Alias for company.companyId
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// ContactId Contact Id
	ContactId *[]int32 `form:"ContactId,omitempty" json:"ContactId,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// StatusId Job status
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`

	// Active Search for active/open jobs
	Active *bool `form:"Active,omitempty" json:"Active,omitempty"`

	// UserFavourite Search for the user's favourite jobs
	UserFavourite *bool `form:"UserFavourite,omitempty" json:"UserFavourite,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// UserId User Id - search for jobs by owner or associated recruiter
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// OwnerUserId User Id - search for jobs by owner
	OwnerUserId *[]int32 `form:"OwnerUserId,omitempty" json:"OwnerUserId,omitempty"`

	// RecruiterUserId User Id - search jobs by associated recruiters
	RecruiterUserId *[]int32 `form:"RecruiterUserId,omitempty" json:"RecruiterUserId,omitempty"`

	// CreatedBy User Id - search for jobs created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for jobs created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for jobs last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for jobs updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// ClosedBy User Id - search for jobs last closed by the specified user(s)
	ClosedBy *[]int32 `form:"ClosedBy,omitempty" json:"ClosedBy,omitempty"`

	// ClosedAt Search for jobs closed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	ClosedAt *[]string `form:"ClosedAt,omitempty" json:"ClosedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: jobTitle, status.name, createdAt, updatedAt, closedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: recruiters, statistics, partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, notes, applications
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindJobOrderActivityParams defines parameters for FindJobOrderActivity.
type FindJobOrderActivityParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindJobOrderActivitySettingsParams defines parameters for FindJobOrderActivitySettings.
type FindJobOrderActivitySettingsParams struct {
	Query *FindJobOrderActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// GetJobOrderAttachmentCategoryListParams defines parameters for GetJobOrderAttachmentCategoryList.
type GetJobOrderAttachmentCategoryListParams struct {
	// Type Optionally filter to specific attachment types
	Type *[]JobOrderAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`
}

// GetJobOrderNoteTypeListParams defines parameters for GetJobOrderNoteTypeList.
type GetJobOrderNoteTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetJobOrderSourceListParams defines parameters for GetJobOrderSourceList.
type GetJobOrderSourceListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetJobOrderStatusListParams defines parameters for GetJobOrderStatusList.
type GetJobOrderStatusListParams struct {
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// GetJobOrderParams defines parameters for GetJobOrder.
type GetJobOrderParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: applications, notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// GetJobOrderJobApplicationsParams defines parameters for GetJobOrderJobApplications.
type GetJobOrderJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetJobOrderActiveJobApplicationsParams defines parameters for GetJobOrderActiveJobApplications.
type GetJobOrderActiveJobApplicationsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// FindJobOrderAttachmentsParams defines parameters for FindJobOrderAttachments.
type FindJobOrderAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]JobOrderAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Latest Find the latest version of each attachment type
	Latest *bool `form:"Latest,omitempty" json:"Latest,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddJobOrderAttachmentMultipartBody defines parameters for AddJobOrderAttachment.
type AddJobOrderAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetJobOrderNotesParams defines parameters for GetJobOrderNotes.
type GetJobOrderNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindLocationsParams defines parameters for FindLocations.
type FindLocationsParams struct {
	LocationId *[]int32              `form:"LocationId,omitempty" json:"LocationId,omitempty"`
	Embed      *[]FindLocationsEmbed `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// FindNotesParams defines parameters for FindNotes.
type FindNotesParams struct {
	// CandidateId Candidate Id
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// CompanyId Company Id
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// ContactId Contact Id
	ContactId *[]int32 `form:"ContactId,omitempty" json:"ContactId,omitempty"`

	// JobId Job Id
	JobId *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// RequisitionId Requisition Id
	RequisitionId *[]int32 `form:"RequisitionId,omitempty" json:"RequisitionId,omitempty"`

	// ApplicationId Job Application Id
	ApplicationId *[]int64 `form:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`

	// PlacementId Placement Id
	PlacementId *[]int32 `form:"PlacementId,omitempty" json:"PlacementId,omitempty"`

	// EntityType Filter notes by Entity Type.<br />
	// Entity Type must be any of: candidate, contact, company, job, placement, requisition
	EntityType *string `form:"EntityType,omitempty" json:"EntityType,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, candidates, contacts, placements, jobs, jobapplications, companies, requisitions
	// Note: embed=self everything is embeded by default
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddNoteAttachmentMultipartBody defines parameters for AddNoteAttachment.
type AddNoteAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// FindPartnerActionsParams defines parameters for FindPartnerActions.
type FindPartnerActionsParams struct {
	// ActionType Type of action
	ActionType *[]PartnerActionType `form:"ActionType,omitempty" json:"ActionType,omitempty"`

	// ActionId Unique identifier for partner actions
	ActionId *[]openapi_types.UUID `form:"ActionId,omitempty" json:"ActionId,omitempty"`

	// Reference Partner supplied unique reference for the action
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`
}

// GetPartnerActionJobApplicationsParams defines parameters for GetPartnerActionJobApplications.
type GetPartnerActionJobApplicationsParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionCandidatesParams defines parameters for GetPartnerActionCandidates.
type GetPartnerActionCandidatesParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionCompaniesParams defines parameters for GetPartnerActionCompanies.
type GetPartnerActionCompaniesParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionContactsParams defines parameters for GetPartnerActionContacts.
type GetPartnerActionContactsParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionJobAdsParams defines parameters for GetPartnerActionJobAds.
type GetPartnerActionJobAdsParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionJobOrdersParams defines parameters for GetPartnerActionJobOrders.
type GetPartnerActionJobOrdersParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPartnerActionPlacementsParams defines parameters for GetPartnerActionPlacements.
type GetPartnerActionPlacementsParams struct {
	// Stage Include partner actions at a specific stage
	Stage *[]PartnerActionStage `form:"Stage,omitempty" json:"Stage,omitempty"`

	// SubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	SubmittedAt *[]string `form:"SubmittedAt,omitempty" json:"SubmittedAt,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindPlacementsParams defines parameters for FindPlacements.
type FindPlacementsParams struct {
	// PlacementId Placement Id
	PlacementId *[]int32 `form:"PlacementId,omitempty" json:"PlacementId,omitempty"`

	// Type Placement Type
	Type *[]PlacementType `form:"Type,omitempty" json:"Type,omitempty"`

	// PartnerActionActionId Unique identifier for partner actions
	PartnerActionActionId *[]openapi_types.UUID `form:"PartnerAction.ActionId,omitempty" json:"PartnerAction.ActionId,omitempty"`

	// PartnerActionReference Partner supplied unique reference for the action
	PartnerActionReference *[]string `form:"PartnerAction.Reference,omitempty" json:"PartnerAction.Reference,omitempty"`

	// PartnerActionStage Include partner actions at a specific stage
	PartnerActionStage *[]PartnerActionStage `form:"PartnerAction.Stage,omitempty" json:"PartnerAction.Stage,omitempty"`

	// PartnerActionSubmittedAt Search for entities submitted to an action at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	PartnerActionSubmittedAt *[]string `form:"PartnerAction.SubmittedAt,omitempty" json:"PartnerAction.SubmittedAt,omitempty"`

	// StatusId Placement status
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`

	// CandidateCandidateId Candidate Id
	CandidateCandidateId *[]int32 `form:"Candidate.CandidateId,omitempty" json:"Candidate.CandidateId,omitempty"`

	// CandidateName Candidate name
	CandidateName *string `form:"Candidate.Name,omitempty" json:"Candidate.Name,omitempty"`

	// CandidateId Alias for candidate.candidateId
	CandidateId *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`

	// CompanyCompanyId Companies by Id
	CompanyCompanyId *[]int32 `form:"Company.CompanyId,omitempty" json:"Company.CompanyId,omitempty"`

	// CompanyName Company name
	CompanyName *string `form:"Company.Name,omitempty" json:"Company.Name,omitempty"`

	// CompanyId Alias for company.companyId
	CompanyId *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`

	// JobId Job Id
	JobId *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// ApplicationId Job Application Id
	ApplicationId *[]int64 `form:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`

	// StartDate Search for placements starting in the specified date range
	// ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.
	// Specify multiple parameters to search for a range.
	StartDate *[]string `form:"StartDate,omitempty" json:"StartDate,omitempty"`

	// EndDate Search for placements ending in the specified date range
	// ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.
	// Specify multiple parameters to search for a range.
	EndDate *[]string `form:"EndDate,omitempty" json:"EndDate,omitempty"`

	// FolderId Search in specific folders
	FolderId *[]int64 `form:"FolderId,omitempty" json:"FolderId,omitempty"`

	// UserId User Id - search for placements by owner or associated recruiter
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// OwnerUserId User Id - search for placements by owner
	OwnerUserId *[]int32 `form:"OwnerUserId,omitempty" json:"OwnerUserId,omitempty"`

	// RecruiterUserId User Id - search placements by associated recruiters
	RecruiterUserId *[]int32 `form:"RecruiterUserId,omitempty" json:"RecruiterUserId,omitempty"`

	// CreatedBy User Id - search for placements created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for placements created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for placements last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for placements updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Approved Search for approved placements
	Approved *bool `form:"Approved,omitempty" json:"Approved,omitempty"`

	// ApprovedBy User Id - search for placements approved by the specified user(s)
	ApprovedBy *[]int32 `form:"ApprovedBy,omitempty" json:"ApprovedBy,omitempty"`

	// ApprovedAt Search for placements approved at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	ApprovedAt *[]string `form:"ApprovedAt,omitempty" json:"ApprovedAt,omitempty"`

	// Export Search for placements that have been flagged by the user for export to integration partners.
	Export *[]FindPlacementByExport `form:"Export,omitempty" json:"Export,omitempty"`

	// TimesheetPeriod Find placements with timesheets in the specified date range
	// ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date.
	// Specify multiple parameters to search for a range.
	TimesheetPeriod *[]string `form:"Timesheet.Period,omitempty" json:"Timesheet.Period,omitempty"`

	// Fields Additional fields to include with the results.
	// Fields available to include are: partnerActions
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self, notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindPlacementActivityParams defines parameters for FindPlacementActivity.
type FindPlacementActivityParams struct {
	// CreatedAt Search for activities performed at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for activities updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt      *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	IncludeDetails *bool     `form:"IncludeDetails,omitempty" json:"IncludeDetails,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindPlacementActivitySettingsParams defines parameters for FindPlacementActivitySettings.
type FindPlacementActivitySettingsParams struct {
	Query *FindPlacementActivitySettingsQuery `form:"query,omitempty" json:"query,omitempty"`
}

// GetPlacementAttachmentCategoryListParams defines parameters for GetPlacementAttachmentCategoryList.
type GetPlacementAttachmentCategoryListParams struct {
	// Type Optionally filter to specific attachment types
	Type *[]PlacementAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`
}

// GetPlacementAwardListParams defines parameters for GetPlacementAwardList.
type GetPlacementAwardListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetPlacementBillingTermsListParams defines parameters for GetPlacementBillingTermsList.
type GetPlacementBillingTermsListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetPlacementIndustryCodeListParams defines parameters for GetPlacementIndustryCodeList.
type GetPlacementIndustryCodeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetPlacementNoteTypeListParams defines parameters for GetPlacementNoteTypeList.
type GetPlacementNoteTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetPlacementPaymentTypeListParams defines parameters for GetPlacementPaymentTypeList.
type GetPlacementPaymentTypeListParams struct {
	Name *string `form:"Name,omitempty" json:"Name,omitempty"`
}

// GetPlacementStatusListParams defines parameters for GetPlacementStatusList.
type GetPlacementStatusListParams struct {
	StatusId *[]int32 `form:"StatusId,omitempty" json:"StatusId,omitempty"`
	Name     *string  `form:"Name,omitempty" json:"Name,omitempty"`
	Active   *bool    `form:"Active,omitempty" json:"Active,omitempty"`
	Default  *bool    `form:"Default,omitempty" json:"Default,omitempty"`
}

// GetPlacementParams defines parameters for GetPlacement.
type GetPlacementParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// FindPlacementAttachmentsParams defines parameters for FindPlacementAttachments.
type FindPlacementAttachmentsParams struct {
	// Type Attachment types to include
	Type *[]PlacementAttachmentType `form:"Type,omitempty" json:"Type,omitempty"`

	// Latest Find the latest version of each attachment type
	Latest *bool `form:"Latest,omitempty" json:"Latest,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// AddPlacementAttachmentMultipartBody defines parameters for AddPlacementAttachment.
type AddPlacementAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetPlacementNotesParams defines parameters for GetPlacementNotes.
type GetPlacementNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetPlacementTimesheetsParams defines parameters for GetPlacementTimesheets.
type GetPlacementTimesheetsParams struct {
	// Period Get timesheets for a specific date range
	// ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with < or > to search dates before or after (inclusive) the specified date.
	// Specify multiple parameters to search for a range.
	Period *[]string `form:"period,omitempty" json:"period,omitempty"`
}

// FindRequisitionsParams defines parameters for FindRequisitions.
type FindRequisitionsParams struct {
	// RequisitionId Requisition Id
	RequisitionId *[]int32 `form:"RequisitionId,omitempty" json:"RequisitionId,omitempty"`

	// CompanyId Company Id
	CompanyId              *[]int32             `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`
	Status                 *[]RequisitionStatus `form:"Status,omitempty" json:"Status,omitempty"`
	HiringManagerContactId *[]int32             `form:"HiringManager.ContactId,omitempty" json:"HiringManager.ContactId,omitempty"`
	HiringManagerName      *string              `form:"HiringManager.Name,omitempty" json:"HiringManager.Name,omitempty"`

	// ApproverContactId Find requisitions by approver contact id
	ApproverContactId *[]int32 `form:"Approver.ContactId,omitempty" json:"Approver.ContactId,omitempty"`
	ApproverName      *string  `form:"Approver.Name,omitempty" json:"Approver.Name,omitempty"`

	// ApproverPending Find requisitions pending approval by contacts specified in approver.contactId
	ApproverPending *bool `form:"Approver.Pending,omitempty" json:"Approver.Pending,omitempty"`

	// UserId User Id - search for requisitions by owner or associated recruiter
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// OwnerUserId User Id - search for requisitions by owner
	OwnerUserId *[]int32 `form:"OwnerUserId,omitempty" json:"OwnerUserId,omitempty"`

	// RecruiterUserId User Id - search for requisitions by associated recruiters
	RecruiterUserId *[]int32 `form:"RecruiterUserId,omitempty" json:"RecruiterUserId,omitempty"`

	// CreatedAt Search for jobs created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for jobs updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: jobTitle, status, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: workflow
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Embed Linked resources to embed in the results<br />
	// Resources available are: self, notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetRequisitionParams defines parameters for GetRequisition.
type GetRequisitionParams struct {
	// Embed Embed related resources.<br />
	// Resources available to embed are: notes
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`
}

// AddRequisitionAttachmentMultipartBody defines parameters for AddRequisitionAttachment.
type AddRequisitionAttachmentMultipartBody struct {
	FileData openapi_types.File `json:"fileData"`
}

// GetRequisitionApprovalHistoryParams defines parameters for GetRequisitionApprovalHistory.
type GetRequisitionApprovalHistoryParams struct {
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetRequisitionNotesParams defines parameters for GetRequisitionNotes.
type GetRequisitionNotesParams struct {
	// NoteId Note Id
	NoteId *[]openapi_types.UUID `form:"NoteId,omitempty" json:"NoteId,omitempty"`

	// Type Note type
	Type *[]string `form:"Type,omitempty" json:"Type,omitempty"`

	// Reference Reference value used to identify a note or group of notes
	Reference *[]string `form:"Reference,omitempty" json:"Reference,omitempty"`

	// CreatedAt Search for notes created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for notes updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Sort Sort the results by one or multiple fields, prefix with "-" to sort descending.<br />
	// Fields available for sorting are: type, createdAt, updatedAt
	Sort *[]string `form:"Sort,omitempty" json:"Sort,omitempty"`

	// Fields Additional fields to include with the results.<br />
	// Fields available to include are: text
	Fields *[]string `form:"Fields,omitempty" json:"Fields,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindEmailAddressParams defines parameters for FindEmailAddress.
type FindEmailAddressParams struct {
	// Email Email address to search for.
	Email *string `form:"Email,omitempty" json:"Email,omitempty"`
}

// FindPhoneNumberParams defines parameters for FindPhoneNumber.
type FindPhoneNumberParams struct {
	// E164 [E.164 format phone number](https://en.wikipedia.org/wiki/E.164) to search for.
	E164 *string `form:"E164,omitempty" json:"E164,omitempty"`
}

// FindSubmissionsParams defines parameters for FindSubmissions.
type FindSubmissionsParams struct {
	SubmissionId *[]int64 `form:"SubmissionId,omitempty" json:"SubmissionId,omitempty"`
	CandidateId  *[]int32 `form:"CandidateId,omitempty" json:"CandidateId,omitempty"`
	CompanyId    *[]int32 `form:"CompanyId,omitempty" json:"CompanyId,omitempty"`
	JobId        *[]int32 `form:"JobId,omitempty" json:"JobId,omitempty"`

	// CreatedAt Search for submissions created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedAt Search for submissions updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`

	// Embed Embed related resources.<br />
	// Resources available to embed are: self
	Embed *[]string `form:"Embed,omitempty" json:"Embed,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindUserGroupsParams defines parameters for FindUserGroups.
type FindUserGroupsParams struct {
	GroupId *[]int32 `form:"GroupId,omitempty" json:"GroupId,omitempty"`
	UserId  *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindUserOfficesParams defines parameters for FindUserOffices.
type FindUserOfficesParams struct {
	OfficeId *[]int32 `form:"OfficeId,omitempty" json:"OfficeId,omitempty"`
	UserId   *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindUsersParams defines parameters for FindUsers.
type FindUsersParams struct {
	UserId   *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`
	OfficeId *[]int32 `form:"OfficeId,omitempty" json:"OfficeId,omitempty"`
	GroupId  *[]int32 `form:"GroupId,omitempty" json:"GroupId,omitempty"`

	// CreatedAt Search for users created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for jobs last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for users updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string           `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	Include   *[]FindUsersInclude `form:"Include,omitempty" json:"Include,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// GetUserInterviewsParams defines parameters for GetUserInterviews.
type GetUserInterviewsParams struct {
	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindUserUserTasksParams defines parameters for FindUserUserTasks.
type FindUserUserTasksParams struct {
	// StartAt Search for tasks starting at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	StartAt *[]string               `form:"StartAt,omitempty" json:"StartAt,omitempty"`
	Include *[]FindUserTasksInclude `form:"Include,omitempty" json:"Include,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindUserTasksParams defines parameters for FindUserTasks.
type FindUserTasksParams struct {
	// UserId Search for tasks assigned to or owned by the specified users
	UserId *[]int32 `form:"UserId,omitempty" json:"UserId,omitempty"`

	// StartAt Search for tasks starting at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	StartAt *[]string `form:"StartAt,omitempty" json:"StartAt,omitempty"`

	// CreatedBy User Id - search for companies created by the specified user(s)
	CreatedBy *[]int32 `form:"CreatedBy,omitempty" json:"CreatedBy,omitempty"`

	// CreatedAt Search for tasks created at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	CreatedAt *[]string `form:"CreatedAt,omitempty" json:"CreatedAt,omitempty"`

	// UpdatedBy User Id - search for companies last updated by the specified user(s)
	UpdatedBy *[]int32 `form:"UpdatedBy,omitempty" json:"UpdatedBy,omitempty"`

	// UpdatedAt Search for tasks updated at a specific date and time
	// (UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)).
	// Prefix with ```<``` or ```>``` to search dates before or after (inclusive) the specified date and time.
	// Specify multiple times to search for a range.
	UpdatedAt *[]string               `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty"`
	Include   *[]FindUserTasksInclude `form:"Include,omitempty" json:"Include,omitempty"`

	// Offset The index of the first entry to return from the resource collection
	Offset *int32 `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit The maximum number of entries to return.<br />
	// Setting to 0 will return only the total count of matching resources.
	Limit *int32 `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// FindWebhooksParams defines parameters for FindWebhooks.
type FindWebhooksParams struct {
	Status *[]WebhookStatus `form:"Status,omitempty" json:"Status,omitempty"`
	Events *[]EventName     `form:"Events,omitempty" json:"Events,omitempty"`
}

// FindWorkTypesParams defines parameters for FindWorkTypes.
type FindWorkTypesParams struct {
	WorkTypeId *[]int32 `form:"WorkTypeId,omitempty" json:"WorkTypeId,omitempty"`
}

// PutJobApplicationCustomFieldListJSONRequestBody defines body for PutJobApplicationCustomFieldList for application/json ContentType.
type PutJobApplicationCustomFieldListJSONRequestBody = SetJobApplicationCustomFieldListValuesCommand

// UpdateJobApplicationJSONRequestBody defines body for UpdateJobApplication for application/json ContentType.
type UpdateJobApplicationJSONRequestBody = UpdateJobApplicationCommand

// AddJobApplicationActivityJSONRequestBody defines body for AddJobApplicationActivity for application/json ContentType.
type AddJobApplicationActivityJSONRequestBody = AddJobApplicationActivityCommand

// AddJobApplicationAttachmentMultipartRequestBody defines body for AddJobApplicationAttachment for multipart/form-data ContentType.
type AddJobApplicationAttachmentMultipartRequestBody AddJobApplicationAttachmentMultipartBody

// UpdateJobApplicationAttachmentJSONRequestBody defines body for UpdateJobApplicationAttachment for application/json ContentType.
type UpdateJobApplicationAttachmentJSONRequestBody = UpdateJobApplicationAttachmentCommand

// PostJobApplicationExternalInterviewJSONRequestBody defines body for PostJobApplicationExternalInterview for application/json ContentType.
type PostJobApplicationExternalInterviewJSONRequestBody = AddJobApplicationExternalInterviewCommand

// PutJobApplicationExternalInterviewJSONRequestBody defines body for PutJobApplicationExternalInterview for application/json ContentType.
type PutJobApplicationExternalInterviewJSONRequestBody = UpdateJobApplicationInterviewCommand

// PostJobApplicationInternalInterviewJSONRequestBody defines body for PostJobApplicationInternalInterview for application/json ContentType.
type PostJobApplicationInternalInterviewJSONRequestBody = AddJobApplicationInternalInterviewCommand

// PutJobApplicationInternalInterviewJSONRequestBody defines body for PutJobApplicationInternalInterview for application/json ContentType.
type PutJobApplicationInternalInterviewJSONRequestBody = UpdateJobApplicationInterviewCommand

// AddJobApplicationNoteJSONRequestBody defines body for AddJobApplicationNote for application/json ContentType.
type AddJobApplicationNoteJSONRequestBody = AddJobApplicationNoteCommand

// ReviewSubmitJobApplicationJSONRequestBody defines body for ReviewSubmitJobApplication for application/json ContentType.
type ReviewSubmitJobApplicationJSONRequestBody = ReviewSubmitJobApplicationCommand

// ReviewViewJobApplicationJSONRequestBody defines body for ReviewViewJobApplication for application/json ContentType.
type ReviewViewJobApplicationJSONRequestBody = ReviewViewJobApplicationCommand

// ReviewAcceptJobApplicationJSONRequestBody defines body for ReviewAcceptJobApplication for application/json ContentType.
type ReviewAcceptJobApplicationJSONRequestBody = ReviewAcceptJobApplicationCommand

// ReviewRejectJobApplicationJSONRequestBody defines body for ReviewRejectJobApplication for application/json ContentType.
type ReviewRejectJobApplicationJSONRequestBody = ReviewRejectJobApplicationCommand

// PutJobApplicationStatusJSONRequestBody defines body for PutJobApplicationStatus for application/json ContentType.
type PutJobApplicationStatusJSONRequestBody = SetJobApplicationStatusCommand

// AddJobApplicationUserTaskJSONRequestBody defines body for AddJobApplicationUserTask for application/json ContentType.
type AddJobApplicationUserTaskJSONRequestBody = AddJobApplicationUserTaskCommand

// UpdateJobApplicationUserTaskJSONRequestBody defines body for UpdateJobApplicationUserTask for application/json ContentType.
type UpdateJobApplicationUserTaskJSONRequestBody = UpdateJobApplicationUserTaskCommand

// AddJobApplicationVideoJSONRequestBody defines body for AddJobApplicationVideo for application/json ContentType.
type AddJobApplicationVideoJSONRequestBody = AddJobApplicationVideoCommand

// AddCandidateJSONRequestBody defines body for AddCandidate for application/json ContentType.
type AddCandidateJSONRequestBody = AddCandidateCommand

// PutCandidateCustomFieldListItemJSONRequestBody defines body for PutCandidateCustomFieldListItem for application/json ContentType.
type PutCandidateCustomFieldListItemJSONRequestBody = SetCandidateCustomFieldListValuesCommand

// UpdateCandidateJSONRequestBody defines body for UpdateCandidate for application/json ContentType.
type UpdateCandidateJSONRequestBody = UpdateCandidateCommand

// AddCandidateActivityJSONRequestBody defines body for AddCandidateActivity for application/json ContentType.
type AddCandidateActivityJSONRequestBody = AddCandidateActivityCommand

// AddCandidateJobOrdersJSONRequestBody defines body for AddCandidateJobOrders for application/json ContentType.
type AddCandidateJobOrdersJSONRequestBody = AddCandidateJobOrderCommand

// AddCandidateAttachmentMultipartRequestBody defines body for AddCandidateAttachment for multipart/form-data ContentType.
type AddCandidateAttachmentMultipartRequestBody AddCandidateAttachmentMultipartBody

// UpdateCandidateAttachmentJSONRequestBody defines body for UpdateCandidateAttachment for application/json ContentType.
type UpdateCandidateAttachmentJSONRequestBody = UpdateCandidateAttachmentCommand

// UpdateCandidateAvailabilityWeekJSONRequestBody defines body for UpdateCandidateAvailabilityWeek for application/json ContentType.
type UpdateCandidateAvailabilityWeekJSONRequestBody = SetCandidateAvailabilityByWeekCommand

// AddCandidateNoteJSONRequestBody defines body for AddCandidateNote for application/json ContentType.
type AddCandidateNoteJSONRequestBody = AddCandidateNoteCommand

// UpdateCandidatePhotoMultipartRequestBody defines body for UpdateCandidatePhoto for multipart/form-data ContentType.
type UpdateCandidatePhotoMultipartRequestBody UpdateCandidatePhotoMultipartBody

// DeleteCandidateSkillsJSONRequestBody defines body for DeleteCandidateSkills for application/json ContentType.
type DeleteCandidateSkillsJSONRequestBody = RemoveCandidateSkillsCommand

// PutCandidateSkillsJSONRequestBody defines body for PutCandidateSkills for application/json ContentType.
type PutCandidateSkillsJSONRequestBody = UpdateCandidateSkillsCommand

// PutCandidateStatusJSONRequestBody defines body for PutCandidateStatus for application/json ContentType.
type PutCandidateStatusJSONRequestBody = SetCandidateStatusCommand

// AddCandidateUserTaskJSONRequestBody defines body for AddCandidateUserTask for application/json ContentType.
type AddCandidateUserTaskJSONRequestBody = AddCandidateUserTaskCommand

// UpdateCandidateUserTaskJSONRequestBody defines body for UpdateCandidateUserTask for application/json ContentType.
type UpdateCandidateUserTaskJSONRequestBody = UpdateCandidateUserTaskCommand

// AddCandidateVideoJSONRequestBody defines body for AddCandidateVideo for application/json ContentType.
type AddCandidateVideoJSONRequestBody = AddCandidateVideoCommand

// AddCompanyJSONRequestBody defines body for AddCompany for application/json ContentType.
type AddCompanyJSONRequestBody = AddCompanyCommand

// PutCompanyCustomFieldListJSONRequestBody defines body for PutCompanyCustomFieldList for application/json ContentType.
type PutCompanyCustomFieldListJSONRequestBody = SetCompanyCustomFieldListValuesCommand

// UpdateCompanyJSONRequestBody defines body for UpdateCompany for application/json ContentType.
type UpdateCompanyJSONRequestBody = UpdateCompanyCommand

// AddCompanyActivityJSONRequestBody defines body for AddCompanyActivity for application/json ContentType.
type AddCompanyActivityJSONRequestBody = AddCompanyActivityCommand

// AddCompanyAddressJSONRequestBody defines body for AddCompanyAddress for application/json ContentType.
type AddCompanyAddressJSONRequestBody = AddCompanyAddressCommand

// UpdateCompanyAddressJSONRequestBody defines body for UpdateCompanyAddress for application/json ContentType.
type UpdateCompanyAddressJSONRequestBody = UpdateCompanyAddressCommand

// AddCompanyAttachmentMultipartRequestBody defines body for AddCompanyAttachment for multipart/form-data ContentType.
type AddCompanyAttachmentMultipartRequestBody AddCompanyAttachmentMultipartBody

// UpdateCompanyAttachmentJSONRequestBody defines body for UpdateCompanyAttachment for application/json ContentType.
type UpdateCompanyAttachmentJSONRequestBody = UpdateCompanyAttachmentCommand

// UpdateCompanyLogoMultipartRequestBody defines body for UpdateCompanyLogo for multipart/form-data ContentType.
type UpdateCompanyLogoMultipartRequestBody UpdateCompanyLogoMultipartBody

// AddCompanyNoteJSONRequestBody defines body for AddCompanyNote for application/json ContentType.
type AddCompanyNoteJSONRequestBody = AddCompanyNoteCommand

// PutCompanyStatusJSONRequestBody defines body for PutCompanyStatus for application/json ContentType.
type PutCompanyStatusJSONRequestBody = SetCompanyStatusCommand

// AddCompanyUserTaskJSONRequestBody defines body for AddCompanyUserTask for application/json ContentType.
type AddCompanyUserTaskJSONRequestBody = AddCompanyUserTaskCommand

// UpdateCompanyUserTaskJSONRequestBody defines body for UpdateCompanyUserTask for application/json ContentType.
type UpdateCompanyUserTaskJSONRequestBody = UpdateCompanyUserTaskCommand

// AddCompanyWorkflowJSONRequestBody defines body for AddCompanyWorkflow for application/json ContentType.
type AddCompanyWorkflowJSONRequestBody = AddCompanyWorkflowCommand

// UpdateCompanyWorkflowJSONRequestBody defines body for UpdateCompanyWorkflow for application/json ContentType.
type UpdateCompanyWorkflowJSONRequestBody = UpdateCompanyWorkflowCommand

// AddContactJSONRequestBody defines body for AddContact for application/json ContentType.
type AddContactJSONRequestBody = AddContactCommand

// PutContactCustomFieldListJSONRequestBody defines body for PutContactCustomFieldList for application/json ContentType.
type PutContactCustomFieldListJSONRequestBody = SetContactCustomFieldListValuesCommand

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody = UpdateContactCommand

// AddContactActivityJSONRequestBody defines body for AddContactActivity for application/json ContentType.
type AddContactActivityJSONRequestBody = AddContactActivityCommand

// AddContactAttachmentMultipartRequestBody defines body for AddContactAttachment for multipart/form-data ContentType.
type AddContactAttachmentMultipartRequestBody AddContactAttachmentMultipartBody

// UpdateContactAttachmentJSONRequestBody defines body for UpdateContactAttachment for application/json ContentType.
type UpdateContactAttachmentJSONRequestBody = UpdateContactAttachmentCommand

// AddContactNoteJSONRequestBody defines body for AddContactNote for application/json ContentType.
type AddContactNoteJSONRequestBody = AddContactNoteCommand

// UpdateContactPhotoMultipartRequestBody defines body for UpdateContactPhoto for multipart/form-data ContentType.
type UpdateContactPhotoMultipartRequestBody UpdateContactPhotoMultipartBody

// DeleteContactSkillsJSONRequestBody defines body for DeleteContactSkills for application/json ContentType.
type DeleteContactSkillsJSONRequestBody = RemoveContactSkillsCommand

// PutContactSkillsJSONRequestBody defines body for PutContactSkills for application/json ContentType.
type PutContactSkillsJSONRequestBody = UpdateContactSkillsCommand

// PutContactStatusJSONRequestBody defines body for PutContactStatus for application/json ContentType.
type PutContactStatusJSONRequestBody = SetContactStatusCommand

// AddContactUserTaskJSONRequestBody defines body for AddContactUserTask for application/json ContentType.
type AddContactUserTaskJSONRequestBody = AddContactUserTaskCommand

// UpdateContactUserTaskJSONRequestBody defines body for UpdateContactUserTask for application/json ContentType.
type UpdateContactUserTaskJSONRequestBody = UpdateContactUserTaskCommand

// PatchFolderJSONRequestBody defines body for PatchFolder for application/json ContentType.
type PatchFolderJSONRequestBody = PatchFolderJSONBody

// PutExternalInterviewEvaluationJSONRequestBody defines body for PutExternalInterviewEvaluation for application/json ContentType.
type PutExternalInterviewEvaluationJSONRequestBody = SubmitInterviewEvaluationCommand

// PutInternalInterviewEvaluationJSONRequestBody defines body for PutInternalInterviewEvaluation for application/json ContentType.
type PutInternalInterviewEvaluationJSONRequestBody = SubmitInterviewEvaluationCommand

// AddJobAdDraftJSONRequestBody defines body for AddJobAdDraft for application/json ContentType.
type AddJobAdDraftJSONRequestBody = AddJobAdDraftCommand

// UpdateJobAdDraftJSONRequestBody defines body for UpdateJobAdDraft for application/json ContentType.
type UpdateJobAdDraftJSONRequestBody = UpdateJobAdDraftCommand

// SubmitJobBoardJobApplicationJSONRequestBody defines body for SubmitJobBoardJobApplication for application/json ContentType.
type SubmitJobBoardJobApplicationJSONRequestBody = SubmitJobApplicationCommand

// AttachJobBoardJobApplicationDocumentMultipartRequestBody defines body for AttachJobBoardJobApplicationDocument for multipart/form-data ContentType.
type AttachJobBoardJobApplicationDocumentMultipartRequestBody AttachJobBoardJobApplicationDocumentMultipartBody

// AddJobOrderJSONRequestBody defines body for AddJobOrder for application/json ContentType.
type AddJobOrderJSONRequestBody = AddJobOrderCommand

// PutJobOrderCustomFieldListJSONRequestBody defines body for PutJobOrderCustomFieldList for application/json ContentType.
type PutJobOrderCustomFieldListJSONRequestBody = SetJobOrderCustomFieldListValuesCommand

// UpdateJobOrderJSONRequestBody defines body for UpdateJobOrder for application/json ContentType.
type UpdateJobOrderJSONRequestBody = UpdateJobOrderCommand

// AddJobOrderActivityJSONRequestBody defines body for AddJobOrderActivity for application/json ContentType.
type AddJobOrderActivityJSONRequestBody = AddJobOrderActivityCommand

// AddJobOrderCandidatesJSONRequestBody defines body for AddJobOrderCandidates for application/json ContentType.
type AddJobOrderCandidatesJSONRequestBody = AddJobOrderCandidateCommand

// SubmitJobOrderCandidateJSONRequestBody defines body for SubmitJobOrderCandidate for application/json ContentType.
type SubmitJobOrderCandidateJSONRequestBody = SubmitJobOrderCandidateCommand

// AddJobOrderAttachmentMultipartRequestBody defines body for AddJobOrderAttachment for multipart/form-data ContentType.
type AddJobOrderAttachmentMultipartRequestBody AddJobOrderAttachmentMultipartBody

// UpdateJobOrderAttachmentJSONRequestBody defines body for UpdateJobOrderAttachment for application/json ContentType.
type UpdateJobOrderAttachmentJSONRequestBody = UpdateJobOrderAttachmentCommand

// AddJobOrderNoteJSONRequestBody defines body for AddJobOrderNote for application/json ContentType.
type AddJobOrderNoteJSONRequestBody = AddJobOrderNoteCommand

// PutJobOrderStatusJSONRequestBody defines body for PutJobOrderStatus for application/json ContentType.
type PutJobOrderStatusJSONRequestBody = SetJobOrderStatusCommand

// AddJobOrderUserTaskJSONRequestBody defines body for AddJobOrderUserTask for application/json ContentType.
type AddJobOrderUserTaskJSONRequestBody = AddJobOrderUserTaskCommand

// UpdateJobOrderUserTaskJSONRequestBody defines body for UpdateJobOrderUserTask for application/json ContentType.
type UpdateJobOrderUserTaskJSONRequestBody = UpdateJobOrderUserTaskCommand

// AddNoteJSONRequestBody defines body for AddNote for application/json ContentType.
type AddNoteJSONRequestBody = AddNoteCommand

// UpdateNoteJSONRequestBody defines body for UpdateNote for application/json ContentType.
type UpdateNoteJSONRequestBody = UpdateNoteCommand

// AddNoteAttachmentMultipartRequestBody defines body for AddNoteAttachment for multipart/form-data ContentType.
type AddNoteAttachmentMultipartRequestBody AddNoteAttachmentMultipartBody

// AddOpportunityJSONRequestBody defines body for AddOpportunity for application/json ContentType.
type AddOpportunityJSONRequestBody = AddOpportunityCommand

// UpdateOpportunityJSONRequestBody defines body for UpdateOpportunity for application/json ContentType.
type UpdateOpportunityJSONRequestBody = UpdateOpportunityCommand

// CompleteJobApplicationPartnerActionJSONRequestBody defines body for CompleteJobApplicationPartnerAction for application/json ContentType.
type CompleteJobApplicationPartnerActionJSONRequestBody = UpdateJobApplicationPartnerActionCommand

// ProgressJobApplicationPartnerActionJSONRequestBody defines body for ProgressJobApplicationPartnerAction for application/json ContentType.
type ProgressJobApplicationPartnerActionJSONRequestBody = UpdateJobApplicationPartnerActionCommand

// RejectJobApplicationPartnerActionJSONRequestBody defines body for RejectJobApplicationPartnerAction for application/json ContentType.
type RejectJobApplicationPartnerActionJSONRequestBody = UpdateJobApplicationPartnerActionCommand

// CompleteCandidatePartnerActionJSONRequestBody defines body for CompleteCandidatePartnerAction for application/json ContentType.
type CompleteCandidatePartnerActionJSONRequestBody = UpdateCandidatePartnerActionCommand

// ProgressCandidatePartnerActionJSONRequestBody defines body for ProgressCandidatePartnerAction for application/json ContentType.
type ProgressCandidatePartnerActionJSONRequestBody = UpdateCandidatePartnerActionCommand

// RejectCandidatePartnerActionJSONRequestBody defines body for RejectCandidatePartnerAction for application/json ContentType.
type RejectCandidatePartnerActionJSONRequestBody = UpdateCandidatePartnerActionCommand

// CompleteCompanyPartnerActionJSONRequestBody defines body for CompleteCompanyPartnerAction for application/json ContentType.
type CompleteCompanyPartnerActionJSONRequestBody = UpdateCompanyPartnerActionCommand

// ProgressCompanyPartnerActionJSONRequestBody defines body for ProgressCompanyPartnerAction for application/json ContentType.
type ProgressCompanyPartnerActionJSONRequestBody = UpdateCompanyPartnerActionCommand

// RejectCompanyPartnerActionJSONRequestBody defines body for RejectCompanyPartnerAction for application/json ContentType.
type RejectCompanyPartnerActionJSONRequestBody = UpdateCompanyPartnerActionCommand

// CompleteContactPartnerActionJSONRequestBody defines body for CompleteContactPartnerAction for application/json ContentType.
type CompleteContactPartnerActionJSONRequestBody = UpdateContactPartnerActionCommand

// ProgressContactPartnerActionJSONRequestBody defines body for ProgressContactPartnerAction for application/json ContentType.
type ProgressContactPartnerActionJSONRequestBody = UpdateContactPartnerActionCommand

// RejectContactPartnerActionJSONRequestBody defines body for RejectContactPartnerAction for application/json ContentType.
type RejectContactPartnerActionJSONRequestBody = UpdateContactPartnerActionCommand

// CompleteJobAdPartnerActionJSONRequestBody defines body for CompleteJobAdPartnerAction for application/json ContentType.
type CompleteJobAdPartnerActionJSONRequestBody = UpdateJobAdPartnerActionCommand

// ProgressJobAdPartnerActionJSONRequestBody defines body for ProgressJobAdPartnerAction for application/json ContentType.
type ProgressJobAdPartnerActionJSONRequestBody = UpdateJobAdPartnerActionCommand

// RejectJobAdPartnerActionJSONRequestBody defines body for RejectJobAdPartnerAction for application/json ContentType.
type RejectJobAdPartnerActionJSONRequestBody = UpdateJobAdPartnerActionCommand

// CompleteJobOrderPartnerActionJSONRequestBody defines body for CompleteJobOrderPartnerAction for application/json ContentType.
type CompleteJobOrderPartnerActionJSONRequestBody = UpdateJobOrderPartnerActionCommand

// ProgressJobOrderPartnerActionJSONRequestBody defines body for ProgressJobOrderPartnerAction for application/json ContentType.
type ProgressJobOrderPartnerActionJSONRequestBody = UpdateJobOrderPartnerActionCommand

// RejectJobOrderPartnerActionJSONRequestBody defines body for RejectJobOrderPartnerAction for application/json ContentType.
type RejectJobOrderPartnerActionJSONRequestBody = UpdateJobOrderPartnerActionCommand

// CompletePlacementPartnerActionJSONRequestBody defines body for CompletePlacementPartnerAction for application/json ContentType.
type CompletePlacementPartnerActionJSONRequestBody = UpdatePlacementPartnerActionCommand

// ProgressPlacementPartnerActionJSONRequestBody defines body for ProgressPlacementPartnerAction for application/json ContentType.
type ProgressPlacementPartnerActionJSONRequestBody = UpdatePlacementPartnerActionCommand

// RejectPlacementPartnerActionJSONRequestBody defines body for RejectPlacementPartnerAction for application/json ContentType.
type RejectPlacementPartnerActionJSONRequestBody = UpdatePlacementPartnerActionCommand

// AddPartnerActionJSONRequestBody defines body for AddPartnerAction for application/json ContentType.
type AddPartnerActionJSONRequestBody = AddPartnerActionCommand

// UpdatePartnerActionJSONRequestBody defines body for UpdatePartnerAction for application/json ContentType.
type UpdatePartnerActionJSONRequestBody = UpdatePartnerActionCommand

// AddPlacementJSONRequestBody defines body for AddPlacement for application/json ContentType.
type AddPlacementJSONRequestBody = AddPlacementCommand

// PutPlacementCustomFieldListJSONRequestBody defines body for PutPlacementCustomFieldList for application/json ContentType.
type PutPlacementCustomFieldListJSONRequestBody = SetPlacementCustomFieldListValuesCommand

// UpdatePlacementJSONRequestBody defines body for UpdatePlacement for application/json ContentType.
type UpdatePlacementJSONRequestBody = UpdatePlacementCommand

// AddPlacementActivityJSONRequestBody defines body for AddPlacementActivity for application/json ContentType.
type AddPlacementActivityJSONRequestBody = AddPlacementActivityCommand

// AddPlacementAttachmentMultipartRequestBody defines body for AddPlacementAttachment for multipart/form-data ContentType.
type AddPlacementAttachmentMultipartRequestBody AddPlacementAttachmentMultipartBody

// UpdatePlacementAttachmentJSONRequestBody defines body for UpdatePlacementAttachment for application/json ContentType.
type UpdatePlacementAttachmentJSONRequestBody = UpdatePlacementAttachmentCommand

// AddPlacementNoteJSONRequestBody defines body for AddPlacementNote for application/json ContentType.
type AddPlacementNoteJSONRequestBody = AddPlacementNoteCommand

// PutPlacementStatusJSONRequestBody defines body for PutPlacementStatus for application/json ContentType.
type PutPlacementStatusJSONRequestBody = SetPlacementStatusCommand

// AddPlacementUserTaskJSONRequestBody defines body for AddPlacementUserTask for application/json ContentType.
type AddPlacementUserTaskJSONRequestBody = AddPlacementUserTaskCommand

// UpdatePlacementUserTaskJSONRequestBody defines body for UpdatePlacementUserTask for application/json ContentType.
type UpdatePlacementUserTaskJSONRequestBody = UpdatePlacementUserTaskCommand

// AddRequisitionJSONRequestBody defines body for AddRequisition for application/json ContentType.
type AddRequisitionJSONRequestBody = AddRequisitionCommand

// UpdateRequisitionJSONRequestBody defines body for UpdateRequisition for application/json ContentType.
type UpdateRequisitionJSONRequestBody = UpdateRequisitionCommand

// ApproveRequisitionJSONRequestBody defines body for ApproveRequisition for application/json ContentType.
type ApproveRequisitionJSONRequestBody = ApproveRequisitionCommand

// AddRequisitionAttachmentMultipartRequestBody defines body for AddRequisitionAttachment for multipart/form-data ContentType.
type AddRequisitionAttachmentMultipartRequestBody AddRequisitionAttachmentMultipartBody

// AddRequisitionNoteJSONRequestBody defines body for AddRequisitionNote for application/json ContentType.
type AddRequisitionNoteJSONRequestBody = AddRequisitionNoteCommand

// RejectRequisitionJSONRequestBody defines body for RejectRequisition for application/json ContentType.
type RejectRequisitionJSONRequestBody = RejectRequisitionCommand

// SubmitRequisitionJSONRequestBody defines body for SubmitRequisition for application/json ContentType.
type SubmitRequisitionJSONRequestBody = SubmitRequisitionCommand

// SendJobApplcationSmsJSONRequestBody defines body for SendJobApplcationSms for application/json ContentType.
type SendJobApplcationSmsJSONRequestBody = SendJobApplicationSmsCommand

// SendJobApplicationContactSmsJSONRequestBody defines body for SendJobApplicationContactSms for application/json ContentType.
type SendJobApplicationContactSmsJSONRequestBody = SendJobApplicationContactSmsCommand

// SendCandidateSmsJSONRequestBody defines body for SendCandidateSms for application/json ContentType.
type SendCandidateSmsJSONRequestBody = SendCandidateSmsCommand

// SendCompanySmsJSONRequestBody defines body for SendCompanySms for application/json ContentType.
type SendCompanySmsJSONRequestBody = SendCompanySmsCommand

// SendContactSmsJSONRequestBody defines body for SendContactSms for application/json ContentType.
type SendContactSmsJSONRequestBody = SendContactSmsCommand

// SendJobOrderSmsJSONRequestBody defines body for SendJobOrderSms for application/json ContentType.
type SendJobOrderSmsJSONRequestBody = SendJobOrderSmsCommand

// SendPlacementSmsJSONRequestBody defines body for SendPlacementSms for application/json ContentType.
type SendPlacementSmsJSONRequestBody = SendPlacementSmsCommand

// AddUserTaskJSONRequestBody defines body for AddUserTask for application/json ContentType.
type AddUserTaskJSONRequestBody = AddUserTaskCommand

// UpdateUserTaskJSONRequestBody defines body for UpdateUserTask for application/json ContentType.
type UpdateUserTaskJSONRequestBody = UpdateUserTaskCommand

// AddWebhookJSONRequestBody defines body for AddWebhook for application/json ContentType.
type AddWebhookJSONRequestBody = AddWebhookCommand

// UpdateWebhookJSONRequestBody defines body for UpdateWebhook for application/json ContentType.
type UpdateWebhookJSONRequestBody = UpdateWebhookCommand

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// FindJobApplications request
	FindJobApplications(ctx context.Context, params *FindJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindJobApplicationActivity request
	FindJobApplicationActivity(ctx context.Context, params *FindJobApplicationActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindJobApplicationActivitySettings request
	FindJobApplicationActivitySettings(ctx context.Context, params *FindJobApplicationActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationActivitySetting request
	GetJobApplicationActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletedJobApplications request
	DeletedJobApplications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationCustomFieldList request
	GetJobApplicationCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJobApplicationCustomFieldListWithBody request with any body
	PutJobApplicationCustomFieldListWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJobApplicationCustomFieldList(ctx context.Context, fieldId int32, body PutJobApplicationCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationCustomFieldListItem request
	GetJobApplicationCustomFieldListItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationStatusList request
	GetJobApplicationStatusList(ctx context.Context, params *GetJobApplicationStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationStatusListItem request
	GetJobApplicationStatusListItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationWorkflowList request
	GetJobApplicationWorkflowList(ctx context.Context, params *GetJobApplicationWorkflowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplication request
	GetJobApplication(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJobApplicationWithBody request with any body
	UpdateJobApplicationWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJobApplication(ctx context.Context, applicationId int64, body UpdateJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationActivityByApplicationId request
	GetJobApplicationActivityByApplicationId(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobApplicationActivityWithBody request with any body
	AddJobApplicationActivityWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddJobApplicationActivity(ctx context.Context, applicationId int64, body AddJobApplicationActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationActivity request
	GetJobApplicationActivity(ctx context.Context, applicationId int64, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindJobApplicationAttachments request
	FindJobApplicationAttachments(ctx context.Context, applicationId int64, params *FindJobApplicationAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationAttachment request
	GetJobApplicationAttachment(ctx context.Context, applicationId int64, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobApplicationAttachmentWithBody request with any body
	AddJobApplicationAttachmentWithBody(ctx context.Context, applicationId int64, attach SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJobApplicationAttachmentWithBody request with any body
	UpdateJobApplicationAttachmentWithBody(ctx context.Context, applicationId int64, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJobApplicationAttachment(ctx context.Context, applicationId int64, attach int64, body UpdateJobApplicationAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationInterviews request
	GetJobApplicationInterviews(ctx context.Context, applicationId int64, params *GetJobApplicationInterviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobApplicationExternalInterviewWithBody request with any body
	PostJobApplicationExternalInterviewWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJobApplicationExternalInterview(ctx context.Context, applicationId int64, body PostJobApplicationExternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJobApplicationExternalInterviewWithBody request with any body
	PutJobApplicationExternalInterviewWithBody(ctx context.Context, applicationId int64, interviewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJobApplicationExternalInterview(ctx context.Context, applicationId int64, interviewId int32, body PutJobApplicationExternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobApplicationInternalInterviewWithBody request with any body
	PostJobApplicationInternalInterviewWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJobApplicationInternalInterview(ctx context.Context, applicationId int64, body PostJobApplicationInternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJobApplicationInternalInterviewWithBody request with any body
	PutJobApplicationInternalInterviewWithBody(ctx context.Context, applicationId int64, interviewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJobApplicationInternalInterview(ctx context.Context, applicationId int64, interviewId int32, body PutJobApplicationInternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationNotes request
	GetJobApplicationNotes(ctx context.Context, applicationId int64, params *GetJobApplicationNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobApplicationNoteWithBody request with any body
	AddJobApplicationNoteWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddJobApplicationNote(ctx context.Context, applicationId int64, body AddJobApplicationNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReviewSubmitJobApplicationWithBody request with any body
	ReviewSubmitJobApplicationWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReviewSubmitJobApplication(ctx context.Context, applicationId int64, body ReviewSubmitJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReviewViewJobApplicationWithBody request with any body
	ReviewViewJobApplicationWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReviewViewJobApplication(ctx context.Context, applicationId int64, body ReviewViewJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReviewAcceptJobApplicationWithBody request with any body
	ReviewAcceptJobApplicationWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReviewAcceptJobApplication(ctx context.Context, applicationId int64, body ReviewAcceptJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReviewRejectJobApplicationWithBody request with any body
	ReviewRejectJobApplicationWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReviewRejectJobApplication(ctx context.Context, applicationId int64, body ReviewRejectJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJobApplicationStatusWithBody request with any body
	PutJobApplicationStatusWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJobApplicationStatus(ctx context.Context, applicationId int64, body PutJobApplicationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobApplicationUserTaskWithBody request with any body
	AddJobApplicationUserTaskWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddJobApplicationUserTask(ctx context.Context, applicationId int64, body AddJobApplicationUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationUserTask request
	GetJobApplicationUserTask(ctx context.Context, applicationId int64, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJobApplicationUserTaskWithBody request with any body
	UpdateJobApplicationUserTaskWithBody(ctx context.Context, applicationId int64, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJobApplicationUserTask(ctx context.Context, applicationId int64, taskId int64, body UpdateJobApplicationUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobApplicationVideos request
	GetJobApplicationVideos(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestJobApplicationVideo request
	GetLatestJobApplicationVideo(ctx context.Context, applicationId int64, videoType CandidateVideoType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobApplicationVideoWithBody request with any body
	AddJobApplicationVideoWithBody(ctx context.Context, applicationId int64, videoType CandidateVideoType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddJobApplicationVideo(ctx context.Context, applicationId int64, videoType CandidateVideoType, body AddJobApplicationVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCandidates request
	FindCandidates(ctx context.Context, params *FindCandidatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCandidateWithBody request with any body
	AddCandidateWithBody(ctx context.Context, params *AddCandidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCandidate(ctx context.Context, params *AddCandidateParams, body AddCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCandidateActivities request
	FindCandidateActivities(ctx context.Context, params *FindCandidateActivitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCandidateActivitySettings request
	FindCandidateActivitySettings(ctx context.Context, params *FindCandidateActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateActivitySetting request
	GetCandidateActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindAllCandidateAttachments request
	FindAllCandidateAttachments(ctx context.Context, params *FindAllCandidateAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletedCandidates request
	DeletedCandidates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateCustomFieldList request
	GetCandidateCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateCustomFieldListItem request
	GetCandidateCustomFieldListItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCandidateCustomFieldListItemWithBody request with any body
	PutCandidateCustomFieldListItemWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCandidateCustomFieldListItem(ctx context.Context, fieldId int32, body PutCandidateCustomFieldListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateAttachmentCategoryList request
	GetCandidateAttachmentCategoryList(ctx context.Context, params *GetCandidateAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateNoteTypeList request
	GetCandidateNoteTypeList(ctx context.Context, params *GetCandidateNoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateRatingList request
	GetCandidateRatingList(ctx context.Context, params *GetCandidateRatingListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateSalutationList request
	GetCandidateSalutationList(ctx context.Context, params *GetCandidateSalutationListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateSourceList request
	GetCandidateSourceList(ctx context.Context, params *GetCandidateSourceListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateStatusList request
	GetCandidateStatusList(ctx context.Context, params *GetCandidateStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateStatusListItem request
	GetCandidateStatusListItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCandidatesPayrollBillings request
	FindCandidatesPayrollBillings(ctx context.Context, params *FindCandidatesPayrollBillingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidate request
	GetCandidate(ctx context.Context, candidateId int32, params *GetCandidateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCandidateWithBody request with any body
	UpdateCandidateWithBody(ctx context.Context, candidateId int32, params *UpdateCandidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCandidate(ctx context.Context, candidateId int32, params *UpdateCandidateParams, body UpdateCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateActivityByCandidateId request
	GetCandidateActivityByCandidateId(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCandidateActivityWithBody request with any body
	AddCandidateActivityWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCandidateActivity(ctx context.Context, candidateId int32, body AddCandidateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateActivity request
	GetCandidateActivity(ctx context.Context, candidateId int32, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateJobApplications request
	GetCandidateJobApplications(ctx context.Context, candidateId int32, params *GetCandidateJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCandidateJobOrdersWithBody request with any body
	AddCandidateJobOrdersWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCandidateJobOrders(ctx context.Context, candidateId int32, body AddCandidateJobOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActiveCandidateJobApplications request
	GetActiveCandidateJobApplications(ctx context.Context, candidateId int32, params *GetActiveCandidateJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCandidateAttachments request
	FindCandidateAttachments(ctx context.Context, candidateId int32, params *FindCandidateAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateAttachment request
	GetCandidateAttachment(ctx context.Context, candidateId int32, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCandidateAttachmentWithBody request with any body
	AddCandidateAttachmentWithBody(ctx context.Context, candidateId int32, attach SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCandidateAttachmentWithBody request with any body
	UpdateCandidateAttachmentWithBody(ctx context.Context, candidateId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCandidateAttachment(ctx context.Context, candidateId int32, attach int64, body UpdateCandidateAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateAvailability request
	GetCandidateAvailability(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCandidateAvailabilityWeek request
	DeleteCandidateAvailabilityWeek(ctx context.Context, candidateId int32, params *DeleteCandidateAvailabilityWeekParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCandidateAvailabilityWeekWithBody request with any body
	UpdateCandidateAvailabilityWeekWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCandidateAvailabilityWeek(ctx context.Context, candidateId int32, body UpdateCandidateAvailabilityWeekJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateFloats request
	GetCandidateFloats(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateInterviews request
	GetCandidateInterviews(ctx context.Context, candidateId int32, params *GetCandidateInterviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateNotes request
	GetCandidateNotes(ctx context.Context, candidateId int32, params *GetCandidateNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCandidateNoteWithBody request with any body
	AddCandidateNoteWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCandidateNote(ctx context.Context, candidateId int32, body AddCandidateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidatePayrollBilling request
	GetCandidatePayrollBilling(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCandidatePhoto request
	DeleteCandidatePhoto(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidatePhoto request
	GetCandidatePhoto(ctx context.Context, candidateId int32, params *GetCandidatePhotoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadCandidatePhoto request
	HeadCandidatePhoto(ctx context.Context, candidateId int32, params *HeadCandidatePhotoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCandidatePhotoWithBody request with any body
	UpdateCandidatePhotoWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidatePlacements request
	GetCandidatePlacements(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateApprovedPlacements request
	GetCandidateApprovedPlacements(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PrivacyDeleteCandidate request
	PrivacyDeleteCandidate(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateSkills request
	GetCandidateSkills(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCandidateSkillsWithBody request with any body
	DeleteCandidateSkillsWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCandidateSkills(ctx context.Context, candidateId int32, body DeleteCandidateSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCandidateSkillsWithBody request with any body
	PutCandidateSkillsWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCandidateSkills(ctx context.Context, candidateId int32, body PutCandidateSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCandidateCategory request
	DeleteCandidateCategory(ctx context.Context, candidateId int32, categoryId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCandidateStatusWithBody request with any body
	PutCandidateStatusWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCandidateStatus(ctx context.Context, candidateId int32, body PutCandidateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateSubmissions request
	GetCandidateSubmissions(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCandidateUserTaskWithBody request with any body
	AddCandidateUserTaskWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCandidateUserTask(ctx context.Context, candidateId int32, body AddCandidateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateUserTask request
	GetCandidateUserTask(ctx context.Context, candidateId int32, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCandidateUserTaskWithBody request with any body
	UpdateCandidateUserTaskWithBody(ctx context.Context, candidateId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCandidateUserTask(ctx context.Context, candidateId int32, taskId int64, body UpdateCandidateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateVideos request
	GetCandidateVideos(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestCandidateVideo request
	GetLatestCandidateVideo(ctx context.Context, candidateId int32, videoType CandidateVideoType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCandidateVideoWithBody request with any body
	AddCandidateVideoWithBody(ctx context.Context, candidateId int32, videoType CandidateVideoType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCandidateVideo(ctx context.Context, candidateId int32, videoType CandidateVideoType, body AddCandidateVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCategories request
	FindCategories(ctx context.Context, params *FindCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCompanies request
	FindCompanies(ctx context.Context, params *FindCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCompanyWithBody request with any body
	AddCompanyWithBody(ctx context.Context, params *AddCompanyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCompany(ctx context.Context, params *AddCompanyParams, body AddCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCompanyActivity request
	FindCompanyActivity(ctx context.Context, params *FindCompanyActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCompanyActivitySettings request
	FindCompanyActivitySettings(ctx context.Context, params *FindCompanyActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyActivitySetting request
	GetCompanyActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletedCompanies request
	DeletedCompanies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyCustomFieldList request
	GetCompanyCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyCustomFieldListItem request
	GetCompanyCustomFieldListItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCompanyCustomFieldListWithBody request with any body
	PutCompanyCustomFieldListWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCompanyCustomFieldList(ctx context.Context, fieldId int32, body PutCompanyCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyAttachmentCategoryList request
	GetCompanyAttachmentCategoryList(ctx context.Context, params *GetCompanyAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyNoteTypeList request
	GetCompanyNoteTypeList(ctx context.Context, params *GetCompanyNoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyStatusList request
	GetCompanyStatusList(ctx context.Context, params *GetCompanyStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyStatusListItem request
	GetCompanyStatusListItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompany request
	GetCompany(ctx context.Context, companyId int32, params *GetCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCompanyWithBody request with any body
	UpdateCompanyWithBody(ctx context.Context, companyId int32, params *UpdateCompanyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCompany(ctx context.Context, companyId int32, params *UpdateCompanyParams, body UpdateCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyActivityByCompanyId request
	GetCompanyActivityByCompanyId(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCompanyActivityWithBody request with any body
	AddCompanyActivityWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCompanyActivity(ctx context.Context, companyId int32, body AddCompanyActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyActivity request
	GetCompanyActivity(ctx context.Context, companyId int32, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyAddresses request
	GetCompanyAddresses(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCompanyAddressWithBody request with any body
	AddCompanyAddressWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCompanyAddress(ctx context.Context, companyId int32, body AddCompanyAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveCompanyAddress request
	RemoveCompanyAddress(ctx context.Context, companyId int32, addressId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyAddress request
	GetCompanyAddress(ctx context.Context, companyId int32, addressId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCompanyAddressWithBody request with any body
	UpdateCompanyAddressWithBody(ctx context.Context, companyId int32, addressId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCompanyAddress(ctx context.Context, companyId int32, addressId openapi_types.UUID, body UpdateCompanyAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCompanyAttachments request
	FindCompanyAttachments(ctx context.Context, companyId int32, params *FindCompanyAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyAttachment request
	GetCompanyAttachment(ctx context.Context, companyId int32, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCompanyAttachmentWithBody request with any body
	AddCompanyAttachmentWithBody(ctx context.Context, companyId int32, attach CompanyAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCompanyAttachmentWithBody request with any body
	UpdateCompanyAttachmentWithBody(ctx context.Context, companyId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCompanyAttachment(ctx context.Context, companyId int32, attach int64, body UpdateCompanyAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyContacts request
	GetCompanyContacts(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyFloats request
	GetCompanyFloats(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyJobOrders request
	GetCompanyJobOrders(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyActiveJobOrders request
	GetCompanyActiveJobOrders(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCompanyLogo request
	DeleteCompanyLogo(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyLogo request
	GetCompanyLogo(ctx context.Context, companyId int32, params *GetCompanyLogoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadCompanyLogo request
	HeadCompanyLogo(ctx context.Context, companyId int32, params *HeadCompanyLogoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCompanyLogoWithBody request with any body
	UpdateCompanyLogoWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyNotes request
	GetCompanyNotes(ctx context.Context, companyId int32, params *GetCompanyNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCompanyNoteWithBody request with any body
	AddCompanyNoteWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCompanyNote(ctx context.Context, companyId int32, body AddCompanyNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyPlacements request
	GetCompanyPlacements(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyApprovedPlacements request
	GetCompanyApprovedPlacements(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyRequisitions request
	GetCompanyRequisitions(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanySkills request
	GetCompanySkills(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCompanyStatusWithBody request with any body
	PutCompanyStatusWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCompanyStatus(ctx context.Context, companyId int32, body PutCompanyStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanySubmissions request
	GetCompanySubmissions(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanySubsidiaries request
	GetCompanySubsidiaries(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCompanyUserTaskWithBody request with any body
	AddCompanyUserTaskWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCompanyUserTask(ctx context.Context, companyId int32, body AddCompanyUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyUserTask request
	GetCompanyUserTask(ctx context.Context, companyId int32, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCompanyUserTaskWithBody request with any body
	UpdateCompanyUserTaskWithBody(ctx context.Context, companyId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCompanyUserTask(ctx context.Context, companyId int32, taskId int64, body UpdateCompanyUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCompanyWorkflows request
	ListCompanyWorkflows(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, params *ListCompanyWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCompanyWorkflowWithBody request with any body
	AddCompanyWorkflowWithBody(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCompanyWorkflow(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, body AddCompanyWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyWorkflow request
	GetCompanyWorkflow(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCompanyWorkflowWithBody request with any body
	UpdateCompanyWorkflowWithBody(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCompanyWorkflow(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, body UpdateCompanyWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindContacts request
	FindContacts(ctx context.Context, params *FindContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddContactWithBody request with any body
	AddContactWithBody(ctx context.Context, params *AddContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddContact(ctx context.Context, params *AddContactParams, body AddContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindContactActivity request
	FindContactActivity(ctx context.Context, params *FindContactActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindContactActivitySettings request
	FindContactActivitySettings(ctx context.Context, params *FindContactActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactActivitySetting request
	GetContactActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletedContacts request
	DeletedContacts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactCustomFieldList request
	GetContactCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutContactCustomFieldListWithBody request with any body
	PutContactCustomFieldListWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutContactCustomFieldList(ctx context.Context, fieldId int32, body PutContactCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactCustomFieldListItem request
	GetContactCustomFieldListItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactAttachmentCategoryList request
	GetContactAttachmentCategoryList(ctx context.Context, params *GetContactAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactNoteTypeList request
	GetContactNoteTypeList(ctx context.Context, params *GetContactNoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactSalutationList request
	GetContactSalutationList(ctx context.Context, params *GetContactSalutationListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactStatusList request
	GetContactStatusList(ctx context.Context, params *GetContactStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactStatusListItem request
	GetContactStatusListItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContact request
	GetContact(ctx context.Context, contactId int32, params *GetContactParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContactWithBody request with any body
	UpdateContactWithBody(ctx context.Context, contactId int32, params *UpdateContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContact(ctx context.Context, contactId int32, params *UpdateContactParams, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactActivityByContactId request
	GetContactActivityByContactId(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddContactActivityWithBody request with any body
	AddContactActivityWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddContactActivity(ctx context.Context, contactId int32, body AddContactActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactActivity request
	GetContactActivity(ctx context.Context, contactId int32, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindContactAttachments request
	FindContactAttachments(ctx context.Context, contactId int32, params *FindContactAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactAttachment request
	GetContactAttachment(ctx context.Context, contactId int32, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddContactAttachmentWithBody request with any body
	AddContactAttachmentWithBody(ctx context.Context, contactId int32, attach ContactAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContactAttachmentWithBody request with any body
	UpdateContactAttachmentWithBody(ctx context.Context, contactId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContactAttachment(ctx context.Context, contactId int32, attach int64, body UpdateContactAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactInterviews request
	GetContactInterviews(ctx context.Context, contactId int32, params *GetContactInterviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactJobOrders request
	GetContactJobOrders(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactActiveJobOrders request
	GetContactActiveJobOrders(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactNotes request
	GetContactNotes(ctx context.Context, contactId int32, params *GetContactNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddContactNoteWithBody request with any body
	AddContactNoteWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddContactNote(ctx context.Context, contactId int32, body AddContactNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletteContactPhoto request
	DeletteContactPhoto(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactPhoto request
	GetContactPhoto(ctx context.Context, contactId int32, params *GetContactPhotoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadContactPhoto request
	HeadContactPhoto(ctx context.Context, contactId int32, params *HeadContactPhotoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContactPhotoWithBody request with any body
	UpdateContactPhotoWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactSkills request
	GetContactSkills(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContactSkillsWithBody request with any body
	DeleteContactSkillsWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteContactSkills(ctx context.Context, contactId int32, body DeleteContactSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutContactSkillsWithBody request with any body
	PutContactSkillsWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutContactSkills(ctx context.Context, contactId int32, body PutContactSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContactCategory request
	DeleteContactCategory(ctx context.Context, contactId int32, categoryId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutContactStatusWithBody request with any body
	PutContactStatusWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutContactStatus(ctx context.Context, contactId int32, body PutContactStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddContactUserTaskWithBody request with any body
	AddContactUserTaskWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddContactUserTask(ctx context.Context, contactId int32, body AddContactUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactUserTask request
	GetContactUserTask(ctx context.Context, contactId int32, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContactUserTaskWithBody request with any body
	UpdateContactUserTaskWithBody(ctx context.Context, contactId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContactUserTask(ctx context.Context, contactId int32, taskId int64, body UpdateContactUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCountries request
	FindCountries(ctx context.Context, params *FindCountriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFloats request
	GetFloats(ctx context.Context, params *GetFloatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFloat request
	GetFloat(ctx context.Context, floatId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindFolders request
	FindFolders(ctx context.Context, params *FindFoldersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFolder request
	GetFolder(ctx context.Context, folderId int64, params *GetFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchFolderWithBody request with any body
	PatchFolderWithBody(ctx context.Context, folderId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchFolder(ctx context.Context, folderId int64, body PatchFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindInterviews request
	FindInterviews(ctx context.Context, params *FindInterviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInterview request
	DeleteInterview(ctx context.Context, interviewId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterview request
	GetInterview(ctx context.Context, interviewId int32, applicationId int64, params *GetInterviewParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterviewEvaluations request
	GetInterviewEvaluations(ctx context.Context, interviewId int32, applicationId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExternalInterviewEvaluation request
	GetExternalInterviewEvaluation(ctx context.Context, interviewId int32, applicationId int64, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutExternalInterviewEvaluationWithBody request with any body
	PutExternalInterviewEvaluationWithBody(ctx context.Context, interviewId int32, applicationId int64, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutExternalInterviewEvaluation(ctx context.Context, interviewId int32, applicationId int64, contactId int32, body PutExternalInterviewEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInternalInterviewEvaluation request
	GetInternalInterviewEvaluation(ctx context.Context, interviewId int32, applicationId int64, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInternalInterviewEvaluationWithBody request with any body
	PutInternalInterviewEvaluationWithBody(ctx context.Context, interviewId int32, applicationId int64, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInternalInterviewEvaluation(ctx context.Context, interviewId int32, applicationId int64, userId int32, body PutInternalInterviewEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobAds request
	GetJobAds(ctx context.Context, params *GetJobAdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobAdDraftWithBody request with any body
	AddJobAdDraftWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddJobAdDraft(ctx context.Context, body AddJobAdDraftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobAd request
	GetJobAd(ctx context.Context, adId int32, params *GetJobAdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJobAdDraftWithBody request with any body
	UpdateJobAdDraftWithBody(ctx context.Context, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJobAdDraft(ctx context.Context, adId int32, body UpdateJobAdDraftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobAdJobApplications request
	GetJobAdJobApplications(ctx context.Context, adId int32, params *GetJobAdJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobAdActiveJobApplications request
	GetJobAdActiveJobApplications(ctx context.Context, adId int32, params *GetJobAdActiveJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindJobBoards request
	FindJobBoards(ctx context.Context, params *FindJobBoardsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobBoard request
	GetJobBoard(ctx context.Context, boardId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindJobBoardJobAds request
	FindJobBoardJobAds(ctx context.Context, boardId int32, params *FindJobBoardJobAdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobBoardJobAd request
	GetJobBoardJobAd(ctx context.Context, boardId int32, adId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitJobBoardJobApplicationWithBody request with any body
	SubmitJobBoardJobApplicationWithBody(ctx context.Context, boardId int32, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitJobBoardJobApplication(ctx context.Context, boardId int32, adId int32, body SubmitJobBoardJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachJobBoardJobApplicationDocumentWithBody request with any body
	AttachJobBoardJobApplicationDocumentWithBody(ctx context.Context, boardId int32, adId int32, applicationId int64, attachmentType SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindJobOrders request
	FindJobOrders(ctx context.Context, params *FindJobOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobOrderWithBody request with any body
	AddJobOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddJobOrder(ctx context.Context, body AddJobOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindJobOrderActivity request
	FindJobOrderActivity(ctx context.Context, params *FindJobOrderActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindJobOrderActivitySettings request
	FindJobOrderActivitySettings(ctx context.Context, params *FindJobOrderActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderActivitySetting request
	GetJobOrderActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletedJobOrders request
	DeletedJobOrders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderCustomFieldList request
	GetJobOrderCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJobOrderCustomFieldListWithBody request with any body
	PutJobOrderCustomFieldListWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJobOrderCustomFieldList(ctx context.Context, fieldId int32, body PutJobOrderCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderCustomFieldItem request
	GetJobOrderCustomFieldItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderAttachmentCategoryList request
	GetJobOrderAttachmentCategoryList(ctx context.Context, params *GetJobOrderAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderNoteTypeList request
	GetJobOrderNoteTypeList(ctx context.Context, params *GetJobOrderNoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderSourceList request
	GetJobOrderSourceList(ctx context.Context, params *GetJobOrderSourceListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderStatusList request
	GetJobOrderStatusList(ctx context.Context, params *GetJobOrderStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderStatusItem request
	GetJobOrderStatusItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrder request
	GetJobOrder(ctx context.Context, jobId int32, params *GetJobOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJobOrderWithBody request with any body
	UpdateJobOrderWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJobOrder(ctx context.Context, jobId int32, body UpdateJobOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderActivityByJobId request
	GetJobOrderActivityByJobId(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobOrderActivityWithBody request with any body
	AddJobOrderActivityWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddJobOrderActivity(ctx context.Context, jobId int32, body AddJobOrderActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderActivity request
	GetJobOrderActivity(ctx context.Context, jobId int32, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderJobApplications request
	GetJobOrderJobApplications(ctx context.Context, jobId int32, params *GetJobOrderJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobOrderCandidatesWithBody request with any body
	AddJobOrderCandidatesWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddJobOrderCandidates(ctx context.Context, jobId int32, body AddJobOrderCandidatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderActiveJobApplications request
	GetJobOrderActiveJobApplications(ctx context.Context, jobId int32, params *GetJobOrderActiveJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitJobOrderCandidateWithBody request with any body
	SubmitJobOrderCandidateWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitJobOrderCandidate(ctx context.Context, jobId int32, body SubmitJobOrderCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindJobOrderAttachments request
	FindJobOrderAttachments(ctx context.Context, jobId int32, params *FindJobOrderAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderAttachment request
	GetJobOrderAttachment(ctx context.Context, jobId int32, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobOrderAttachmentWithBody request with any body
	AddJobOrderAttachmentWithBody(ctx context.Context, jobId int32, attach JobOrderAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJobOrderAttachmentWithBody request with any body
	UpdateJobOrderAttachmentWithBody(ctx context.Context, jobId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJobOrderAttachment(ctx context.Context, jobId int32, attach int64, body UpdateJobOrderAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Invoices request
	Invoices(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderInvoice request
	GetJobOrderInvoice(ctx context.Context, jobId int32, invoiceId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderNotes request
	GetJobOrderNotes(ctx context.Context, jobId int32, params *GetJobOrderNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobOrderNoteWithBody request with any body
	AddJobOrderNoteWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddJobOrderNote(ctx context.Context, jobId int32, body AddJobOrderNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderPlacements request
	GetJobOrderPlacements(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderApprovedPlacements request
	GetJobOrderApprovedPlacements(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJobOrderStatusWithBody request with any body
	PutJobOrderStatusWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJobOrderStatus(ctx context.Context, jobId int32, body PutJobOrderStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderSubmissions request
	GetJobOrderSubmissions(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobOrderUserTaskWithBody request with any body
	AddJobOrderUserTaskWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddJobOrderUserTask(ctx context.Context, jobId int32, body AddJobOrderUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderUserTask request
	GetJobOrderUserTask(ctx context.Context, jobId int32, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJobOrderUserTaskWithBody request with any body
	UpdateJobOrderUserTaskWithBody(ctx context.Context, jobId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJobOrderUserTask(ctx context.Context, jobId int32, taskId int64, body UpdateJobOrderUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJobOrderPayrollBilling request
	DeleteJobOrderPayrollBilling(ctx context.Context, jobOrderId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobOrderPayrollBilling request
	GetJobOrderPayrollBilling(ctx context.Context, jobOrderId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddJobOrderPayrollBilling request
	AddJobOrderPayrollBilling(ctx context.Context, jobOrderId int32, rateCardId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJobOrderPayrollBilling request
	UpdateJobOrderPayrollBilling(ctx context.Context, jobOrderId int32, rateCardId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindLocations request
	FindLocations(ctx context.Context, params *FindLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindNotes request
	FindNotes(ctx context.Context, params *FindNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddNoteWithBody request with any body
	AddNoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddNote(ctx context.Context, body AddNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNote request
	GetNote(ctx context.Context, noteId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNoteWithBody request with any body
	UpdateNoteWithBody(ctx context.Context, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNote(ctx context.Context, noteId openapi_types.UUID, body UpdateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddNoteAttachmentWithBody request with any body
	AddNoteAttachmentWithBody(ctx context.Context, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNoteAttachment request
	GetNoteAttachment(ctx context.Context, noteId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindOpportunities request
	FindOpportunities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddOpportunityWithBody request with any body
	AddOpportunityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddOpportunity(ctx context.Context, body AddOpportunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpportunity request
	GetOpportunity(ctx context.Context, opportunityId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOpportunityWithBody request with any body
	UpdateOpportunityWithBody(ctx context.Context, opportunityId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOpportunity(ctx context.Context, opportunityId openapi_types.UUID, body UpdateOpportunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindPartnerActions request
	FindPartnerActions(ctx context.Context, params *FindPartnerActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartnerActionJobApplications request
	GetPartnerActionJobApplications(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteJobApplicationPartnerActionWithBody request with any body
	CompleteJobApplicationPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteJobApplicationPartnerAction(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body CompleteJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProgressJobApplicationPartnerActionWithBody request with any body
	ProgressJobApplicationPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProgressJobApplicationPartnerAction(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body ProgressJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RejectJobApplicationPartnerActionWithBody request with any body
	RejectJobApplicationPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RejectJobApplicationPartnerAction(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body RejectJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartnerActionCandidates request
	GetPartnerActionCandidates(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionCandidatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteCandidatePartnerActionWithBody request with any body
	CompleteCandidatePartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteCandidatePartnerAction(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body CompleteCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProgressCandidatePartnerActionWithBody request with any body
	ProgressCandidatePartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProgressCandidatePartnerAction(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body ProgressCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RejectCandidatePartnerActionWithBody request with any body
	RejectCandidatePartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RejectCandidatePartnerAction(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body RejectCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartnerActionCompanies request
	GetPartnerActionCompanies(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteCompanyPartnerActionWithBody request with any body
	CompleteCompanyPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteCompanyPartnerAction(ctx context.Context, actionId openapi_types.UUID, companyId int32, body CompleteCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProgressCompanyPartnerActionWithBody request with any body
	ProgressCompanyPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProgressCompanyPartnerAction(ctx context.Context, actionId openapi_types.UUID, companyId int32, body ProgressCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RejectCompanyPartnerActionWithBody request with any body
	RejectCompanyPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RejectCompanyPartnerAction(ctx context.Context, actionId openapi_types.UUID, companyId int32, body RejectCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartnerActionContacts request
	GetPartnerActionContacts(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteContactPartnerActionWithBody request with any body
	CompleteContactPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteContactPartnerAction(ctx context.Context, actionId openapi_types.UUID, contactId int32, body CompleteContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProgressContactPartnerActionWithBody request with any body
	ProgressContactPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProgressContactPartnerAction(ctx context.Context, actionId openapi_types.UUID, contactId int32, body ProgressContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RejectContactPartnerActionWithBody request with any body
	RejectContactPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RejectContactPartnerAction(ctx context.Context, actionId openapi_types.UUID, contactId int32, body RejectContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartnerActionJobAds request
	GetPartnerActionJobAds(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobAdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteJobAdPartnerActionWithBody request with any body
	CompleteJobAdPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteJobAdPartnerAction(ctx context.Context, actionId openapi_types.UUID, adId int32, body CompleteJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProgressJobAdPartnerActionWithBody request with any body
	ProgressJobAdPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProgressJobAdPartnerAction(ctx context.Context, actionId openapi_types.UUID, adId int32, body ProgressJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RejectJobAdPartnerActionWithBody request with any body
	RejectJobAdPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RejectJobAdPartnerAction(ctx context.Context, actionId openapi_types.UUID, adId int32, body RejectJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartnerActionJobOrders request
	GetPartnerActionJobOrders(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteJobOrderPartnerActionWithBody request with any body
	CompleteJobOrderPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteJobOrderPartnerAction(ctx context.Context, actionId openapi_types.UUID, jobId int32, body CompleteJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProgressJobOrderPartnerActionWithBody request with any body
	ProgressJobOrderPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProgressJobOrderPartnerAction(ctx context.Context, actionId openapi_types.UUID, jobId int32, body ProgressJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RejectJobOrderPartnerActionWithBody request with any body
	RejectJobOrderPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RejectJobOrderPartnerAction(ctx context.Context, actionId openapi_types.UUID, jobId int32, body RejectJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartnerActionPlacements request
	GetPartnerActionPlacements(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionPlacementsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompletePlacementPartnerActionWithBody request with any body
	CompletePlacementPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompletePlacementPartnerAction(ctx context.Context, actionId openapi_types.UUID, placementId int32, body CompletePlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProgressPlacementPartnerActionWithBody request with any body
	ProgressPlacementPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProgressPlacementPartnerAction(ctx context.Context, actionId openapi_types.UUID, placementId int32, body ProgressPlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RejectPlacementPartnerActionWithBody request with any body
	RejectPlacementPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RejectPlacementPartnerAction(ctx context.Context, actionId openapi_types.UUID, placementId int32, body RejectPlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePartnerAction request
	DeletePartnerAction(ctx context.Context, act openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartnerAction request
	GetPartnerAction(ctx context.Context, act openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPartnerActionWithBody request with any body
	AddPartnerActionWithBody(ctx context.Context, act PartnerActionType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPartnerAction(ctx context.Context, act PartnerActionType, body AddPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePartnerActionWithBody request with any body
	UpdatePartnerActionWithBody(ctx context.Context, act openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePartnerAction(ctx context.Context, act openapi_types.UUID, body UpdatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindPlacements request
	FindPlacements(ctx context.Context, params *FindPlacementsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPlacementWithBody request with any body
	AddPlacementWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPlacement(ctx context.Context, body AddPlacementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindPlacementActivity request
	FindPlacementActivity(ctx context.Context, params *FindPlacementActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindPlacementActivitySettings request
	FindPlacementActivitySettings(ctx context.Context, params *FindPlacementActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementActivitySetting request
	GetPlacementActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletedPlacements request
	DeletedPlacements(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementCustomFieldList request
	GetPlacementCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPlacementCustomFieldListWithBody request with any body
	PutPlacementCustomFieldListWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPlacementCustomFieldList(ctx context.Context, fieldId int32, body PutPlacementCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementCustomFieldItem request
	GetPlacementCustomFieldItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementAttachmentCategoryList request
	GetPlacementAttachmentCategoryList(ctx context.Context, params *GetPlacementAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementAwardList request
	GetPlacementAwardList(ctx context.Context, params *GetPlacementAwardListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementBillingTermsList request
	GetPlacementBillingTermsList(ctx context.Context, params *GetPlacementBillingTermsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementIndustryCodeList request
	GetPlacementIndustryCodeList(ctx context.Context, params *GetPlacementIndustryCodeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementNoteTypeList request
	GetPlacementNoteTypeList(ctx context.Context, params *GetPlacementNoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementPaymentTypeList request
	GetPlacementPaymentTypeList(ctx context.Context, params *GetPlacementPaymentTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementStatusList request
	GetPlacementStatusList(ctx context.Context, params *GetPlacementStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementStatusItem request
	GetPlacementStatusItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacement request
	GetPlacement(ctx context.Context, placementId int32, params *GetPlacementParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlacementWithBody request with any body
	UpdatePlacementWithBody(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlacement(ctx context.Context, placementId int32, body UpdatePlacementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementActivityByPlacementId request
	GetPlacementActivityByPlacementId(ctx context.Context, placementId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPlacementActivityWithBody request with any body
	AddPlacementActivityWithBody(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPlacementActivity(ctx context.Context, placementId int32, body AddPlacementActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementActivity request
	GetPlacementActivity(ctx context.Context, placementId int32, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindPlacementAttachments request
	FindPlacementAttachments(ctx context.Context, placementId int32, params *FindPlacementAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementAttachment request
	GetPlacementAttachment(ctx context.Context, placementId int32, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPlacementAttachmentWithBody request with any body
	AddPlacementAttachmentWithBody(ctx context.Context, placementId int32, attach PlacementAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlacementAttachmentWithBody request with any body
	UpdatePlacementAttachmentWithBody(ctx context.Context, placementId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlacementAttachment(ctx context.Context, placementId int32, attach int64, body UpdatePlacementAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementNotes request
	GetPlacementNotes(ctx context.Context, placementId int32, params *GetPlacementNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPlacementNoteWithBody request with any body
	AddPlacementNoteWithBody(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPlacementNote(ctx context.Context, placementId int32, body AddPlacementNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPlacementStatusWithBody request with any body
	PutPlacementStatusWithBody(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPlacementStatus(ctx context.Context, placementId int32, body PutPlacementStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementTimesheets request
	GetPlacementTimesheets(ctx context.Context, placementId int32, params *GetPlacementTimesheetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPlacementUserTaskWithBody request with any body
	AddPlacementUserTaskWithBody(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPlacementUserTask(ctx context.Context, placementId int32, body AddPlacementUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementUserTask request
	GetPlacementUserTask(ctx context.Context, placementId int32, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlacementUserTaskWithBody request with any body
	UpdatePlacementUserTaskWithBody(ctx context.Context, placementId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlacementUserTask(ctx context.Context, placementId int32, taskId int64, body UpdatePlacementUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindRequisitions request
	FindRequisitions(ctx context.Context, params *FindRequisitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRequisitionWithBody request with any body
	AddRequisitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRequisition(ctx context.Context, body AddRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequisitionCustomFieldList request
	GetRequisitionCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequisitionCustomFieldItem request
	GetRequisitionCustomFieldItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequisitionForms request
	GetRequisitionForms(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRequisition request
	DeleteRequisition(ctx context.Context, requisitionId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequisition request
	GetRequisition(ctx context.Context, requisitionId int32, params *GetRequisitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRequisitionWithBody request with any body
	UpdateRequisitionWithBody(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRequisition(ctx context.Context, requisitionId int32, body UpdateRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApproveRequisitionWithBody request with any body
	ApproveRequisitionWithBody(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApproveRequisition(ctx context.Context, requisitionId int32, body ApproveRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequisitionAttachmentList request
	GetRequisitionAttachmentList(ctx context.Context, requisitionId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRequisitionAttachment request
	DeleteRequisitionAttachment(ctx context.Context, requisitionId int32, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequisitionAttachment request
	GetRequisitionAttachment(ctx context.Context, requisitionId int32, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRequisitionAttachmentWithBody request with any body
	AddRequisitionAttachmentWithBody(ctx context.Context, requisitionId int32, attachmentType RequisitionAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequisitionApprovalHistory request
	GetRequisitionApprovalHistory(ctx context.Context, requisitionId int32, params *GetRequisitionApprovalHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequisitionNotes request
	GetRequisitionNotes(ctx context.Context, requisitionId int32, params *GetRequisitionNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRequisitionNoteWithBody request with any body
	AddRequisitionNoteWithBody(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRequisitionNote(ctx context.Context, requisitionId int32, body AddRequisitionNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RejectRequisitionWithBody request with any body
	RejectRequisitionWithBody(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RejectRequisition(ctx context.Context, requisitionId int32, body RejectRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitRequisitionWithBody request with any body
	SubmitRequisitionWithBody(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitRequisition(ctx context.Context, requisitionId int32, body SubmitRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindEmailAddress request
	FindEmailAddress(ctx context.Context, params *FindEmailAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindPhoneNumber request
	FindPhoneNumber(ctx context.Context, params *FindPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendJobApplcationSmsWithBody request with any body
	SendJobApplcationSmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendJobApplcationSms(ctx context.Context, body SendJobApplcationSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendJobApplicationContactSmsWithBody request with any body
	SendJobApplicationContactSmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendJobApplicationContactSms(ctx context.Context, body SendJobApplicationContactSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendCandidateSmsWithBody request with any body
	SendCandidateSmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendCandidateSms(ctx context.Context, body SendCandidateSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendCompanySmsWithBody request with any body
	SendCompanySmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendCompanySms(ctx context.Context, body SendCompanySmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendContactSmsWithBody request with any body
	SendContactSmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendContactSms(ctx context.Context, body SendContactSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendJobOrderSmsWithBody request with any body
	SendJobOrderSmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendJobOrderSms(ctx context.Context, body SendJobOrderSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendPlacementSmsWithBody request with any body
	SendPlacementSmsWithBody(ctx context.Context, entityType RecipientEntityType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendPlacementSms(ctx context.Context, entityType RecipientEntityType, body SendPlacementSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindSubmissions request
	FindSubmissions(ctx context.Context, params *FindSubmissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubmission request
	GetSubmission(ctx context.Context, submissionId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindUserGroups request
	FindUserGroups(ctx context.Context, params *FindUserGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGroup request
	GetUserGroup(ctx context.Context, groupId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupUsers request
	GetGroupUsers(ctx context.Context, groupId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindUserOffices request
	FindUserOffices(ctx context.Context, params *FindUserOfficesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserOffice request
	GetUserOffice(ctx context.Context, officeId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOfficeUsers request
	GetOfficeUsers(ctx context.Context, officeId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindUsers request
	FindUsers(ctx context.Context, params *FindUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrentUser request
	GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserInterviews request
	GetUserInterviews(ctx context.Context, userId int32, params *GetUserInterviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPhoto request
	GetUserPhoto(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserUserGroups request
	GetUserUserGroups(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindUserUserTasks request
	FindUserUserTasks(ctx context.Context, userId int32, params *FindUserUserTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindUserTasks request
	FindUserTasks(ctx context.Context, params *FindUserTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserTaskWithBody request with any body
	AddUserTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddUserTask(ctx context.Context, body AddUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserTask request
	DeleteUserTask(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserTask request
	GetUserTask(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserTaskWithBody request with any body
	UpdateUserTaskWithBody(ctx context.Context, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserTask(ctx context.Context, taskId int64, body UpdateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarkCompleteUserTask request
	MarkCompleteUserTask(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarkIncompleteUserTask request
	MarkIncompleteUserTask(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindWebhooks request
	FindWebhooks(ctx context.Context, params *FindWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddWebhookWithBody request with any body
	AddWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddWebhook(ctx context.Context, body AddWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWebhook request
	DeleteWebhook(ctx context.Context, webhookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhook request
	GetWebhook(ctx context.Context, webhookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWebhookWithBody request with any body
	UpdateWebhookWithBody(ctx context.Context, webhookId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWebhook(ctx context.Context, webhookId openapi_types.UUID, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindWorkTypes request
	FindWorkTypes(ctx context.Context, params *FindWorkTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) FindJobApplications(ctx context.Context, params *FindJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindJobApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindJobApplicationActivity(ctx context.Context, params *FindJobApplicationActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindJobApplicationActivityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindJobApplicationActivitySettings(ctx context.Context, params *FindJobApplicationActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindJobApplicationActivitySettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationActivitySettingRequest(c.Server, settingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletedJobApplications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletedJobApplicationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationCustomFieldListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobApplicationCustomFieldListWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobApplicationCustomFieldListRequestWithBody(c.Server, fieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobApplicationCustomFieldList(ctx context.Context, fieldId int32, body PutJobApplicationCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobApplicationCustomFieldListRequest(c.Server, fieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationCustomFieldListItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationCustomFieldListItemRequest(c.Server, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationStatusList(ctx context.Context, params *GetJobApplicationStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationStatusListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationStatusListItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationStatusListItemRequest(c.Server, statusId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationWorkflowList(ctx context.Context, params *GetJobApplicationWorkflowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationWorkflowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplication(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobApplicationWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobApplicationRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobApplication(ctx context.Context, applicationId int64, body UpdateJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobApplicationRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationActivityByApplicationId(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationActivityByApplicationIdRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobApplicationActivityWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobApplicationActivityRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobApplicationActivity(ctx context.Context, applicationId int64, body AddJobApplicationActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobApplicationActivityRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationActivity(ctx context.Context, applicationId int64, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationActivityRequest(c.Server, applicationId, activityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindJobApplicationAttachments(ctx context.Context, applicationId int64, params *FindJobApplicationAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindJobApplicationAttachmentsRequest(c.Server, applicationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationAttachment(ctx context.Context, applicationId int64, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationAttachmentRequest(c.Server, applicationId, attach)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobApplicationAttachmentWithBody(ctx context.Context, applicationId int64, attach SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobApplicationAttachmentRequestWithBody(c.Server, applicationId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobApplicationAttachmentWithBody(ctx context.Context, applicationId int64, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobApplicationAttachmentRequestWithBody(c.Server, applicationId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobApplicationAttachment(ctx context.Context, applicationId int64, attach int64, body UpdateJobApplicationAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobApplicationAttachmentRequest(c.Server, applicationId, attach, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationInterviews(ctx context.Context, applicationId int64, params *GetJobApplicationInterviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationInterviewsRequest(c.Server, applicationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobApplicationExternalInterviewWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobApplicationExternalInterviewRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobApplicationExternalInterview(ctx context.Context, applicationId int64, body PostJobApplicationExternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobApplicationExternalInterviewRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobApplicationExternalInterviewWithBody(ctx context.Context, applicationId int64, interviewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobApplicationExternalInterviewRequestWithBody(c.Server, applicationId, interviewId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobApplicationExternalInterview(ctx context.Context, applicationId int64, interviewId int32, body PutJobApplicationExternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobApplicationExternalInterviewRequest(c.Server, applicationId, interviewId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobApplicationInternalInterviewWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobApplicationInternalInterviewRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobApplicationInternalInterview(ctx context.Context, applicationId int64, body PostJobApplicationInternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobApplicationInternalInterviewRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobApplicationInternalInterviewWithBody(ctx context.Context, applicationId int64, interviewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobApplicationInternalInterviewRequestWithBody(c.Server, applicationId, interviewId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobApplicationInternalInterview(ctx context.Context, applicationId int64, interviewId int32, body PutJobApplicationInternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobApplicationInternalInterviewRequest(c.Server, applicationId, interviewId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationNotes(ctx context.Context, applicationId int64, params *GetJobApplicationNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationNotesRequest(c.Server, applicationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobApplicationNoteWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobApplicationNoteRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobApplicationNote(ctx context.Context, applicationId int64, body AddJobApplicationNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobApplicationNoteRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviewSubmitJobApplicationWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviewSubmitJobApplicationRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviewSubmitJobApplication(ctx context.Context, applicationId int64, body ReviewSubmitJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviewSubmitJobApplicationRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviewViewJobApplicationWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviewViewJobApplicationRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviewViewJobApplication(ctx context.Context, applicationId int64, body ReviewViewJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviewViewJobApplicationRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviewAcceptJobApplicationWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviewAcceptJobApplicationRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviewAcceptJobApplication(ctx context.Context, applicationId int64, body ReviewAcceptJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviewAcceptJobApplicationRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviewRejectJobApplicationWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviewRejectJobApplicationRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviewRejectJobApplication(ctx context.Context, applicationId int64, body ReviewRejectJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviewRejectJobApplicationRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobApplicationStatusWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobApplicationStatusRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobApplicationStatus(ctx context.Context, applicationId int64, body PutJobApplicationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobApplicationStatusRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobApplicationUserTaskWithBody(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobApplicationUserTaskRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobApplicationUserTask(ctx context.Context, applicationId int64, body AddJobApplicationUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobApplicationUserTaskRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationUserTask(ctx context.Context, applicationId int64, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationUserTaskRequest(c.Server, applicationId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobApplicationUserTaskWithBody(ctx context.Context, applicationId int64, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobApplicationUserTaskRequestWithBody(c.Server, applicationId, taskId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobApplicationUserTask(ctx context.Context, applicationId int64, taskId int64, body UpdateJobApplicationUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobApplicationUserTaskRequest(c.Server, applicationId, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobApplicationVideos(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobApplicationVideosRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestJobApplicationVideo(ctx context.Context, applicationId int64, videoType CandidateVideoType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestJobApplicationVideoRequest(c.Server, applicationId, videoType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobApplicationVideoWithBody(ctx context.Context, applicationId int64, videoType CandidateVideoType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobApplicationVideoRequestWithBody(c.Server, applicationId, videoType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobApplicationVideo(ctx context.Context, applicationId int64, videoType CandidateVideoType, body AddJobApplicationVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobApplicationVideoRequest(c.Server, applicationId, videoType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCandidates(ctx context.Context, params *FindCandidatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCandidatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateWithBody(ctx context.Context, params *AddCandidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidate(ctx context.Context, params *AddCandidateParams, body AddCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCandidateActivities(ctx context.Context, params *FindCandidateActivitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCandidateActivitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCandidateActivitySettings(ctx context.Context, params *FindCandidateActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCandidateActivitySettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateActivitySettingRequest(c.Server, settingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindAllCandidateAttachments(ctx context.Context, params *FindAllCandidateAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindAllCandidateAttachmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletedCandidates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletedCandidatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateCustomFieldListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateCustomFieldListItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateCustomFieldListItemRequest(c.Server, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCandidateCustomFieldListItemWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCandidateCustomFieldListItemRequestWithBody(c.Server, fieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCandidateCustomFieldListItem(ctx context.Context, fieldId int32, body PutCandidateCustomFieldListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCandidateCustomFieldListItemRequest(c.Server, fieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateAttachmentCategoryList(ctx context.Context, params *GetCandidateAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateAttachmentCategoryListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateNoteTypeList(ctx context.Context, params *GetCandidateNoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateNoteTypeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateRatingList(ctx context.Context, params *GetCandidateRatingListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateRatingListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateSalutationList(ctx context.Context, params *GetCandidateSalutationListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateSalutationListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateSourceList(ctx context.Context, params *GetCandidateSourceListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateSourceListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateStatusList(ctx context.Context, params *GetCandidateStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateStatusListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateStatusListItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateStatusListItemRequest(c.Server, statusId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCandidatesPayrollBillings(ctx context.Context, params *FindCandidatesPayrollBillingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCandidatesPayrollBillingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidate(ctx context.Context, candidateId int32, params *GetCandidateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateRequest(c.Server, candidateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCandidateWithBody(ctx context.Context, candidateId int32, params *UpdateCandidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCandidateRequestWithBody(c.Server, candidateId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCandidate(ctx context.Context, candidateId int32, params *UpdateCandidateParams, body UpdateCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCandidateRequest(c.Server, candidateId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateActivityByCandidateId(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateActivityByCandidateIdRequest(c.Server, candidateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateActivityWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateActivityRequestWithBody(c.Server, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateActivity(ctx context.Context, candidateId int32, body AddCandidateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateActivityRequest(c.Server, candidateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateActivity(ctx context.Context, candidateId int32, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateActivityRequest(c.Server, candidateId, activityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateJobApplications(ctx context.Context, candidateId int32, params *GetCandidateJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateJobApplicationsRequest(c.Server, candidateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateJobOrdersWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateJobOrdersRequestWithBody(c.Server, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateJobOrders(ctx context.Context, candidateId int32, body AddCandidateJobOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateJobOrdersRequest(c.Server, candidateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActiveCandidateJobApplications(ctx context.Context, candidateId int32, params *GetActiveCandidateJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActiveCandidateJobApplicationsRequest(c.Server, candidateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCandidateAttachments(ctx context.Context, candidateId int32, params *FindCandidateAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCandidateAttachmentsRequest(c.Server, candidateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateAttachment(ctx context.Context, candidateId int32, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateAttachmentRequest(c.Server, candidateId, attach)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateAttachmentWithBody(ctx context.Context, candidateId int32, attach SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateAttachmentRequestWithBody(c.Server, candidateId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCandidateAttachmentWithBody(ctx context.Context, candidateId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCandidateAttachmentRequestWithBody(c.Server, candidateId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCandidateAttachment(ctx context.Context, candidateId int32, attach int64, body UpdateCandidateAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCandidateAttachmentRequest(c.Server, candidateId, attach, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateAvailability(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateAvailabilityRequest(c.Server, candidateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCandidateAvailabilityWeek(ctx context.Context, candidateId int32, params *DeleteCandidateAvailabilityWeekParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCandidateAvailabilityWeekRequest(c.Server, candidateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCandidateAvailabilityWeekWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCandidateAvailabilityWeekRequestWithBody(c.Server, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCandidateAvailabilityWeek(ctx context.Context, candidateId int32, body UpdateCandidateAvailabilityWeekJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCandidateAvailabilityWeekRequest(c.Server, candidateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateFloats(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateFloatsRequest(c.Server, candidateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateInterviews(ctx context.Context, candidateId int32, params *GetCandidateInterviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateInterviewsRequest(c.Server, candidateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateNotes(ctx context.Context, candidateId int32, params *GetCandidateNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateNotesRequest(c.Server, candidateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateNoteWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateNoteRequestWithBody(c.Server, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateNote(ctx context.Context, candidateId int32, body AddCandidateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateNoteRequest(c.Server, candidateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidatePayrollBilling(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidatePayrollBillingRequest(c.Server, candidateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCandidatePhoto(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCandidatePhotoRequest(c.Server, candidateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidatePhoto(ctx context.Context, candidateId int32, params *GetCandidatePhotoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidatePhotoRequest(c.Server, candidateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadCandidatePhoto(ctx context.Context, candidateId int32, params *HeadCandidatePhotoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadCandidatePhotoRequest(c.Server, candidateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCandidatePhotoWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCandidatePhotoRequestWithBody(c.Server, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidatePlacements(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidatePlacementsRequest(c.Server, candidateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateApprovedPlacements(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateApprovedPlacementsRequest(c.Server, candidateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PrivacyDeleteCandidate(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPrivacyDeleteCandidateRequest(c.Server, candidateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateSkills(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateSkillsRequest(c.Server, candidateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCandidateSkillsWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCandidateSkillsRequestWithBody(c.Server, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCandidateSkills(ctx context.Context, candidateId int32, body DeleteCandidateSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCandidateSkillsRequest(c.Server, candidateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCandidateSkillsWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCandidateSkillsRequestWithBody(c.Server, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCandidateSkills(ctx context.Context, candidateId int32, body PutCandidateSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCandidateSkillsRequest(c.Server, candidateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCandidateCategory(ctx context.Context, candidateId int32, categoryId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCandidateCategoryRequest(c.Server, candidateId, categoryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCandidateStatusWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCandidateStatusRequestWithBody(c.Server, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCandidateStatus(ctx context.Context, candidateId int32, body PutCandidateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCandidateStatusRequest(c.Server, candidateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateSubmissions(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateSubmissionsRequest(c.Server, candidateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateUserTaskWithBody(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateUserTaskRequestWithBody(c.Server, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateUserTask(ctx context.Context, candidateId int32, body AddCandidateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateUserTaskRequest(c.Server, candidateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateUserTask(ctx context.Context, candidateId int32, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateUserTaskRequest(c.Server, candidateId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCandidateUserTaskWithBody(ctx context.Context, candidateId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCandidateUserTaskRequestWithBody(c.Server, candidateId, taskId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCandidateUserTask(ctx context.Context, candidateId int32, taskId int64, body UpdateCandidateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCandidateUserTaskRequest(c.Server, candidateId, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateVideos(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateVideosRequest(c.Server, candidateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestCandidateVideo(ctx context.Context, candidateId int32, videoType CandidateVideoType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestCandidateVideoRequest(c.Server, candidateId, videoType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateVideoWithBody(ctx context.Context, candidateId int32, videoType CandidateVideoType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateVideoRequestWithBody(c.Server, candidateId, videoType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCandidateVideo(ctx context.Context, candidateId int32, videoType CandidateVideoType, body AddCandidateVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCandidateVideoRequest(c.Server, candidateId, videoType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCategories(ctx context.Context, params *FindCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCompanies(ctx context.Context, params *FindCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCompaniesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyWithBody(ctx context.Context, params *AddCompanyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompany(ctx context.Context, params *AddCompanyParams, body AddCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCompanyActivity(ctx context.Context, params *FindCompanyActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCompanyActivityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCompanyActivitySettings(ctx context.Context, params *FindCompanyActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCompanyActivitySettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyActivitySettingRequest(c.Server, settingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletedCompanies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletedCompaniesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyCustomFieldListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyCustomFieldListItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyCustomFieldListItemRequest(c.Server, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCompanyCustomFieldListWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCompanyCustomFieldListRequestWithBody(c.Server, fieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCompanyCustomFieldList(ctx context.Context, fieldId int32, body PutCompanyCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCompanyCustomFieldListRequest(c.Server, fieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyAttachmentCategoryList(ctx context.Context, params *GetCompanyAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyAttachmentCategoryListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyNoteTypeList(ctx context.Context, params *GetCompanyNoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyNoteTypeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyStatusList(ctx context.Context, params *GetCompanyStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyStatusListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyStatusListItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyStatusListItemRequest(c.Server, statusId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompany(ctx context.Context, companyId int32, params *GetCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompanyWithBody(ctx context.Context, companyId int32, params *UpdateCompanyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompanyRequestWithBody(c.Server, companyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompany(ctx context.Context, companyId int32, params *UpdateCompanyParams, body UpdateCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompanyRequest(c.Server, companyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyActivityByCompanyId(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyActivityByCompanyIdRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyActivityWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyActivityRequestWithBody(c.Server, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyActivity(ctx context.Context, companyId int32, body AddCompanyActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyActivityRequest(c.Server, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyActivity(ctx context.Context, companyId int32, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyActivityRequest(c.Server, companyId, activityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyAddresses(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyAddressesRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyAddressWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyAddressRequestWithBody(c.Server, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyAddress(ctx context.Context, companyId int32, body AddCompanyAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyAddressRequest(c.Server, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveCompanyAddress(ctx context.Context, companyId int32, addressId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveCompanyAddressRequest(c.Server, companyId, addressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyAddress(ctx context.Context, companyId int32, addressId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyAddressRequest(c.Server, companyId, addressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompanyAddressWithBody(ctx context.Context, companyId int32, addressId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompanyAddressRequestWithBody(c.Server, companyId, addressId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompanyAddress(ctx context.Context, companyId int32, addressId openapi_types.UUID, body UpdateCompanyAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompanyAddressRequest(c.Server, companyId, addressId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCompanyAttachments(ctx context.Context, companyId int32, params *FindCompanyAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCompanyAttachmentsRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyAttachment(ctx context.Context, companyId int32, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyAttachmentRequest(c.Server, companyId, attach)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyAttachmentWithBody(ctx context.Context, companyId int32, attach CompanyAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyAttachmentRequestWithBody(c.Server, companyId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompanyAttachmentWithBody(ctx context.Context, companyId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompanyAttachmentRequestWithBody(c.Server, companyId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompanyAttachment(ctx context.Context, companyId int32, attach int64, body UpdateCompanyAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompanyAttachmentRequest(c.Server, companyId, attach, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyContacts(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyContactsRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyFloats(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyFloatsRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyJobOrders(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyJobOrdersRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyActiveJobOrders(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyActiveJobOrdersRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCompanyLogo(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCompanyLogoRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyLogo(ctx context.Context, companyId int32, params *GetCompanyLogoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyLogoRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadCompanyLogo(ctx context.Context, companyId int32, params *HeadCompanyLogoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadCompanyLogoRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompanyLogoWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompanyLogoRequestWithBody(c.Server, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyNotes(ctx context.Context, companyId int32, params *GetCompanyNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyNotesRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyNoteWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyNoteRequestWithBody(c.Server, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyNote(ctx context.Context, companyId int32, body AddCompanyNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyNoteRequest(c.Server, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyPlacements(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyPlacementsRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyApprovedPlacements(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyApprovedPlacementsRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyRequisitions(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyRequisitionsRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanySkills(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanySkillsRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCompanyStatusWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCompanyStatusRequestWithBody(c.Server, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCompanyStatus(ctx context.Context, companyId int32, body PutCompanyStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCompanyStatusRequest(c.Server, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanySubmissions(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanySubmissionsRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanySubsidiaries(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanySubsidiariesRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyUserTaskWithBody(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyUserTaskRequestWithBody(c.Server, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyUserTask(ctx context.Context, companyId int32, body AddCompanyUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyUserTaskRequest(c.Server, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyUserTask(ctx context.Context, companyId int32, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyUserTaskRequest(c.Server, companyId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompanyUserTaskWithBody(ctx context.Context, companyId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompanyUserTaskRequestWithBody(c.Server, companyId, taskId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompanyUserTask(ctx context.Context, companyId int32, taskId int64, body UpdateCompanyUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompanyUserTaskRequest(c.Server, companyId, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCompanyWorkflows(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, params *ListCompanyWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCompanyWorkflowsRequest(c.Server, companyId, workflowType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyWorkflowWithBody(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyWorkflowRequestWithBody(c.Server, companyId, workflowType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompanyWorkflow(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, body AddCompanyWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompanyWorkflowRequest(c.Server, companyId, workflowType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyWorkflow(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyWorkflowRequest(c.Server, companyId, workflowType, workflowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompanyWorkflowWithBody(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompanyWorkflowRequestWithBody(c.Server, companyId, workflowType, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompanyWorkflow(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, body UpdateCompanyWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompanyWorkflowRequest(c.Server, companyId, workflowType, workflowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindContacts(ctx context.Context, params *FindContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindContactsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddContactWithBody(ctx context.Context, params *AddContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddContactRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddContact(ctx context.Context, params *AddContactParams, body AddContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddContactRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindContactActivity(ctx context.Context, params *FindContactActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindContactActivityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindContactActivitySettings(ctx context.Context, params *FindContactActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindContactActivitySettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactActivitySettingRequest(c.Server, settingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletedContacts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletedContactsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactCustomFieldListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactCustomFieldListWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactCustomFieldListRequestWithBody(c.Server, fieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactCustomFieldList(ctx context.Context, fieldId int32, body PutContactCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactCustomFieldListRequest(c.Server, fieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactCustomFieldListItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactCustomFieldListItemRequest(c.Server, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactAttachmentCategoryList(ctx context.Context, params *GetContactAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactAttachmentCategoryListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactNoteTypeList(ctx context.Context, params *GetContactNoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactNoteTypeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactSalutationList(ctx context.Context, params *GetContactSalutationListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactSalutationListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactStatusList(ctx context.Context, params *GetContactStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactStatusListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactStatusListItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactStatusListItemRequest(c.Server, statusId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContact(ctx context.Context, contactId int32, params *GetContactParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactRequest(c.Server, contactId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactWithBody(ctx context.Context, contactId int32, params *UpdateContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactRequestWithBody(c.Server, contactId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContact(ctx context.Context, contactId int32, params *UpdateContactParams, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactRequest(c.Server, contactId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactActivityByContactId(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactActivityByContactIdRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddContactActivityWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddContactActivityRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddContactActivity(ctx context.Context, contactId int32, body AddContactActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddContactActivityRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactActivity(ctx context.Context, contactId int32, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactActivityRequest(c.Server, contactId, activityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindContactAttachments(ctx context.Context, contactId int32, params *FindContactAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindContactAttachmentsRequest(c.Server, contactId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactAttachment(ctx context.Context, contactId int32, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactAttachmentRequest(c.Server, contactId, attach)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddContactAttachmentWithBody(ctx context.Context, contactId int32, attach ContactAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddContactAttachmentRequestWithBody(c.Server, contactId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactAttachmentWithBody(ctx context.Context, contactId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactAttachmentRequestWithBody(c.Server, contactId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactAttachment(ctx context.Context, contactId int32, attach int64, body UpdateContactAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactAttachmentRequest(c.Server, contactId, attach, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactInterviews(ctx context.Context, contactId int32, params *GetContactInterviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactInterviewsRequest(c.Server, contactId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactJobOrders(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactJobOrdersRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactActiveJobOrders(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactActiveJobOrdersRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactNotes(ctx context.Context, contactId int32, params *GetContactNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactNotesRequest(c.Server, contactId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddContactNoteWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddContactNoteRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddContactNote(ctx context.Context, contactId int32, body AddContactNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddContactNoteRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletteContactPhoto(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletteContactPhotoRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactPhoto(ctx context.Context, contactId int32, params *GetContactPhotoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactPhotoRequest(c.Server, contactId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadContactPhoto(ctx context.Context, contactId int32, params *HeadContactPhotoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadContactPhotoRequest(c.Server, contactId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactPhotoWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactPhotoRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactSkills(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactSkillsRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactSkillsWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactSkillsRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactSkills(ctx context.Context, contactId int32, body DeleteContactSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactSkillsRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactSkillsWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactSkillsRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactSkills(ctx context.Context, contactId int32, body PutContactSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactSkillsRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactCategory(ctx context.Context, contactId int32, categoryId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactCategoryRequest(c.Server, contactId, categoryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactStatusWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactStatusRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactStatus(ctx context.Context, contactId int32, body PutContactStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactStatusRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddContactUserTaskWithBody(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddContactUserTaskRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddContactUserTask(ctx context.Context, contactId int32, body AddContactUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddContactUserTaskRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactUserTask(ctx context.Context, contactId int32, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactUserTaskRequest(c.Server, contactId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactUserTaskWithBody(ctx context.Context, contactId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactUserTaskRequestWithBody(c.Server, contactId, taskId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactUserTask(ctx context.Context, contactId int32, taskId int64, body UpdateContactUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactUserTaskRequest(c.Server, contactId, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCountries(ctx context.Context, params *FindCountriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCountriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFloats(ctx context.Context, params *GetFloatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFloatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFloat(ctx context.Context, floatId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFloatRequest(c.Server, floatId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindFolders(ctx context.Context, params *FindFoldersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindFoldersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFolder(ctx context.Context, folderId int64, params *GetFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFolderRequest(c.Server, folderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFolderWithBody(ctx context.Context, folderId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFolderRequestWithBody(c.Server, folderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFolder(ctx context.Context, folderId int64, body PatchFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFolderRequest(c.Server, folderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindInterviews(ctx context.Context, params *FindInterviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindInterviewsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInterview(ctx context.Context, interviewId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInterviewRequest(c.Server, interviewId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterview(ctx context.Context, interviewId int32, applicationId int64, params *GetInterviewParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterviewRequest(c.Server, interviewId, applicationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterviewEvaluations(ctx context.Context, interviewId int32, applicationId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterviewEvaluationsRequest(c.Server, interviewId, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExternalInterviewEvaluation(ctx context.Context, interviewId int32, applicationId int64, contactId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExternalInterviewEvaluationRequest(c.Server, interviewId, applicationId, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutExternalInterviewEvaluationWithBody(ctx context.Context, interviewId int32, applicationId int64, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutExternalInterviewEvaluationRequestWithBody(c.Server, interviewId, applicationId, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutExternalInterviewEvaluation(ctx context.Context, interviewId int32, applicationId int64, contactId int32, body PutExternalInterviewEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutExternalInterviewEvaluationRequest(c.Server, interviewId, applicationId, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInternalInterviewEvaluation(ctx context.Context, interviewId int32, applicationId int64, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInternalInterviewEvaluationRequest(c.Server, interviewId, applicationId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInternalInterviewEvaluationWithBody(ctx context.Context, interviewId int32, applicationId int64, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInternalInterviewEvaluationRequestWithBody(c.Server, interviewId, applicationId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInternalInterviewEvaluation(ctx context.Context, interviewId int32, applicationId int64, userId int32, body PutInternalInterviewEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInternalInterviewEvaluationRequest(c.Server, interviewId, applicationId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobAds(ctx context.Context, params *GetJobAdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobAdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobAdDraftWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobAdDraftRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobAdDraft(ctx context.Context, body AddJobAdDraftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobAdDraftRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobAd(ctx context.Context, adId int32, params *GetJobAdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobAdRequest(c.Server, adId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobAdDraftWithBody(ctx context.Context, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobAdDraftRequestWithBody(c.Server, adId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobAdDraft(ctx context.Context, adId int32, body UpdateJobAdDraftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobAdDraftRequest(c.Server, adId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobAdJobApplications(ctx context.Context, adId int32, params *GetJobAdJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobAdJobApplicationsRequest(c.Server, adId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobAdActiveJobApplications(ctx context.Context, adId int32, params *GetJobAdActiveJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobAdActiveJobApplicationsRequest(c.Server, adId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindJobBoards(ctx context.Context, params *FindJobBoardsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindJobBoardsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobBoard(ctx context.Context, boardId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobBoardRequest(c.Server, boardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindJobBoardJobAds(ctx context.Context, boardId int32, params *FindJobBoardJobAdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindJobBoardJobAdsRequest(c.Server, boardId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobBoardJobAd(ctx context.Context, boardId int32, adId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobBoardJobAdRequest(c.Server, boardId, adId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitJobBoardJobApplicationWithBody(ctx context.Context, boardId int32, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitJobBoardJobApplicationRequestWithBody(c.Server, boardId, adId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitJobBoardJobApplication(ctx context.Context, boardId int32, adId int32, body SubmitJobBoardJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitJobBoardJobApplicationRequest(c.Server, boardId, adId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachJobBoardJobApplicationDocumentWithBody(ctx context.Context, boardId int32, adId int32, applicationId int64, attachmentType SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachJobBoardJobApplicationDocumentRequestWithBody(c.Server, boardId, adId, applicationId, attachmentType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindJobOrders(ctx context.Context, params *FindJobOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindJobOrdersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrder(ctx context.Context, body AddJobOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindJobOrderActivity(ctx context.Context, params *FindJobOrderActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindJobOrderActivityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindJobOrderActivitySettings(ctx context.Context, params *FindJobOrderActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindJobOrderActivitySettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderActivitySettingRequest(c.Server, settingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletedJobOrders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletedJobOrdersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderCustomFieldListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobOrderCustomFieldListWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobOrderCustomFieldListRequestWithBody(c.Server, fieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobOrderCustomFieldList(ctx context.Context, fieldId int32, body PutJobOrderCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobOrderCustomFieldListRequest(c.Server, fieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderCustomFieldItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderCustomFieldItemRequest(c.Server, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderAttachmentCategoryList(ctx context.Context, params *GetJobOrderAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderAttachmentCategoryListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderNoteTypeList(ctx context.Context, params *GetJobOrderNoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderNoteTypeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderSourceList(ctx context.Context, params *GetJobOrderSourceListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderSourceListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderStatusList(ctx context.Context, params *GetJobOrderStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderStatusListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderStatusItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderStatusItemRequest(c.Server, statusId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrder(ctx context.Context, jobId int32, params *GetJobOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobOrderWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobOrderRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobOrder(ctx context.Context, jobId int32, body UpdateJobOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobOrderRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderActivityByJobId(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderActivityByJobIdRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrderActivityWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderActivityRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrderActivity(ctx context.Context, jobId int32, body AddJobOrderActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderActivityRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderActivity(ctx context.Context, jobId int32, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderActivityRequest(c.Server, jobId, activityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderJobApplications(ctx context.Context, jobId int32, params *GetJobOrderJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderJobApplicationsRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrderCandidatesWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderCandidatesRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrderCandidates(ctx context.Context, jobId int32, body AddJobOrderCandidatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderCandidatesRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderActiveJobApplications(ctx context.Context, jobId int32, params *GetJobOrderActiveJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderActiveJobApplicationsRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitJobOrderCandidateWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitJobOrderCandidateRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitJobOrderCandidate(ctx context.Context, jobId int32, body SubmitJobOrderCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitJobOrderCandidateRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindJobOrderAttachments(ctx context.Context, jobId int32, params *FindJobOrderAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindJobOrderAttachmentsRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderAttachment(ctx context.Context, jobId int32, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderAttachmentRequest(c.Server, jobId, attach)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrderAttachmentWithBody(ctx context.Context, jobId int32, attach JobOrderAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderAttachmentRequestWithBody(c.Server, jobId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobOrderAttachmentWithBody(ctx context.Context, jobId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobOrderAttachmentRequestWithBody(c.Server, jobId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobOrderAttachment(ctx context.Context, jobId int32, attach int64, body UpdateJobOrderAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobOrderAttachmentRequest(c.Server, jobId, attach, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Invoices(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvoicesRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderInvoice(ctx context.Context, jobId int32, invoiceId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderInvoiceRequest(c.Server, jobId, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderNotes(ctx context.Context, jobId int32, params *GetJobOrderNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderNotesRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrderNoteWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderNoteRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrderNote(ctx context.Context, jobId int32, body AddJobOrderNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderNoteRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderPlacements(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderPlacementsRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderApprovedPlacements(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderApprovedPlacementsRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobOrderStatusWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobOrderStatusRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobOrderStatus(ctx context.Context, jobId int32, body PutJobOrderStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobOrderStatusRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderSubmissions(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderSubmissionsRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrderUserTaskWithBody(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderUserTaskRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrderUserTask(ctx context.Context, jobId int32, body AddJobOrderUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderUserTaskRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderUserTask(ctx context.Context, jobId int32, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderUserTaskRequest(c.Server, jobId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobOrderUserTaskWithBody(ctx context.Context, jobId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobOrderUserTaskRequestWithBody(c.Server, jobId, taskId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobOrderUserTask(ctx context.Context, jobId int32, taskId int64, body UpdateJobOrderUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobOrderUserTaskRequest(c.Server, jobId, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJobOrderPayrollBilling(ctx context.Context, jobOrderId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJobOrderPayrollBillingRequest(c.Server, jobOrderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobOrderPayrollBilling(ctx context.Context, jobOrderId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobOrderPayrollBillingRequest(c.Server, jobOrderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddJobOrderPayrollBilling(ctx context.Context, jobOrderId int32, rateCardId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddJobOrderPayrollBillingRequest(c.Server, jobOrderId, rateCardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobOrderPayrollBilling(ctx context.Context, jobOrderId int32, rateCardId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobOrderPayrollBillingRequest(c.Server, jobOrderId, rateCardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindLocations(ctx context.Context, params *FindLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindLocationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindNotes(ctx context.Context, params *FindNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindNotesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNote(ctx context.Context, body AddNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNoteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNote(ctx context.Context, noteId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNoteRequest(c.Server, noteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNoteWithBody(ctx context.Context, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNoteRequestWithBody(c.Server, noteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNote(ctx context.Context, noteId openapi_types.UUID, body UpdateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNoteRequest(c.Server, noteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNoteAttachmentWithBody(ctx context.Context, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNoteAttachmentRequestWithBody(c.Server, noteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNoteAttachment(ctx context.Context, noteId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNoteAttachmentRequest(c.Server, noteId, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindOpportunities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindOpportunitiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOpportunityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOpportunityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOpportunity(ctx context.Context, body AddOpportunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOpportunityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpportunity(ctx context.Context, opportunityId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpportunityRequest(c.Server, opportunityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOpportunityWithBody(ctx context.Context, opportunityId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOpportunityRequestWithBody(c.Server, opportunityId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOpportunity(ctx context.Context, opportunityId openapi_types.UUID, body UpdateOpportunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOpportunityRequest(c.Server, opportunityId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindPartnerActions(ctx context.Context, params *FindPartnerActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindPartnerActionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartnerActionJobApplications(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnerActionJobApplicationsRequest(c.Server, actionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteJobApplicationPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteJobApplicationPartnerActionRequestWithBody(c.Server, actionId, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteJobApplicationPartnerAction(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body CompleteJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteJobApplicationPartnerActionRequest(c.Server, actionId, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressJobApplicationPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressJobApplicationPartnerActionRequestWithBody(c.Server, actionId, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressJobApplicationPartnerAction(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body ProgressJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressJobApplicationPartnerActionRequest(c.Server, actionId, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectJobApplicationPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectJobApplicationPartnerActionRequestWithBody(c.Server, actionId, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectJobApplicationPartnerAction(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body RejectJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectJobApplicationPartnerActionRequest(c.Server, actionId, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartnerActionCandidates(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionCandidatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnerActionCandidatesRequest(c.Server, actionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteCandidatePartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteCandidatePartnerActionRequestWithBody(c.Server, actionId, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteCandidatePartnerAction(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body CompleteCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteCandidatePartnerActionRequest(c.Server, actionId, candidateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressCandidatePartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressCandidatePartnerActionRequestWithBody(c.Server, actionId, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressCandidatePartnerAction(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body ProgressCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressCandidatePartnerActionRequest(c.Server, actionId, candidateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectCandidatePartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectCandidatePartnerActionRequestWithBody(c.Server, actionId, candidateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectCandidatePartnerAction(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body RejectCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectCandidatePartnerActionRequest(c.Server, actionId, candidateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartnerActionCompanies(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnerActionCompaniesRequest(c.Server, actionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteCompanyPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteCompanyPartnerActionRequestWithBody(c.Server, actionId, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteCompanyPartnerAction(ctx context.Context, actionId openapi_types.UUID, companyId int32, body CompleteCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteCompanyPartnerActionRequest(c.Server, actionId, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressCompanyPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressCompanyPartnerActionRequestWithBody(c.Server, actionId, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressCompanyPartnerAction(ctx context.Context, actionId openapi_types.UUID, companyId int32, body ProgressCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressCompanyPartnerActionRequest(c.Server, actionId, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectCompanyPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectCompanyPartnerActionRequestWithBody(c.Server, actionId, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectCompanyPartnerAction(ctx context.Context, actionId openapi_types.UUID, companyId int32, body RejectCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectCompanyPartnerActionRequest(c.Server, actionId, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartnerActionContacts(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnerActionContactsRequest(c.Server, actionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteContactPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteContactPartnerActionRequestWithBody(c.Server, actionId, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteContactPartnerAction(ctx context.Context, actionId openapi_types.UUID, contactId int32, body CompleteContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteContactPartnerActionRequest(c.Server, actionId, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressContactPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressContactPartnerActionRequestWithBody(c.Server, actionId, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressContactPartnerAction(ctx context.Context, actionId openapi_types.UUID, contactId int32, body ProgressContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressContactPartnerActionRequest(c.Server, actionId, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectContactPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectContactPartnerActionRequestWithBody(c.Server, actionId, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectContactPartnerAction(ctx context.Context, actionId openapi_types.UUID, contactId int32, body RejectContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectContactPartnerActionRequest(c.Server, actionId, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartnerActionJobAds(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobAdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnerActionJobAdsRequest(c.Server, actionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteJobAdPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteJobAdPartnerActionRequestWithBody(c.Server, actionId, adId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteJobAdPartnerAction(ctx context.Context, actionId openapi_types.UUID, adId int32, body CompleteJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteJobAdPartnerActionRequest(c.Server, actionId, adId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressJobAdPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressJobAdPartnerActionRequestWithBody(c.Server, actionId, adId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressJobAdPartnerAction(ctx context.Context, actionId openapi_types.UUID, adId int32, body ProgressJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressJobAdPartnerActionRequest(c.Server, actionId, adId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectJobAdPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectJobAdPartnerActionRequestWithBody(c.Server, actionId, adId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectJobAdPartnerAction(ctx context.Context, actionId openapi_types.UUID, adId int32, body RejectJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectJobAdPartnerActionRequest(c.Server, actionId, adId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartnerActionJobOrders(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnerActionJobOrdersRequest(c.Server, actionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteJobOrderPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteJobOrderPartnerActionRequestWithBody(c.Server, actionId, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteJobOrderPartnerAction(ctx context.Context, actionId openapi_types.UUID, jobId int32, body CompleteJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteJobOrderPartnerActionRequest(c.Server, actionId, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressJobOrderPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressJobOrderPartnerActionRequestWithBody(c.Server, actionId, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressJobOrderPartnerAction(ctx context.Context, actionId openapi_types.UUID, jobId int32, body ProgressJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressJobOrderPartnerActionRequest(c.Server, actionId, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectJobOrderPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectJobOrderPartnerActionRequestWithBody(c.Server, actionId, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectJobOrderPartnerAction(ctx context.Context, actionId openapi_types.UUID, jobId int32, body RejectJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectJobOrderPartnerActionRequest(c.Server, actionId, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartnerActionPlacements(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionPlacementsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnerActionPlacementsRequest(c.Server, actionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompletePlacementPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompletePlacementPartnerActionRequestWithBody(c.Server, actionId, placementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompletePlacementPartnerAction(ctx context.Context, actionId openapi_types.UUID, placementId int32, body CompletePlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompletePlacementPartnerActionRequest(c.Server, actionId, placementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressPlacementPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressPlacementPartnerActionRequestWithBody(c.Server, actionId, placementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressPlacementPartnerAction(ctx context.Context, actionId openapi_types.UUID, placementId int32, body ProgressPlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressPlacementPartnerActionRequest(c.Server, actionId, placementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectPlacementPartnerActionWithBody(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectPlacementPartnerActionRequestWithBody(c.Server, actionId, placementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectPlacementPartnerAction(ctx context.Context, actionId openapi_types.UUID, placementId int32, body RejectPlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectPlacementPartnerActionRequest(c.Server, actionId, placementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePartnerAction(ctx context.Context, act openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePartnerActionRequest(c.Server, act)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartnerAction(ctx context.Context, act openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnerActionRequest(c.Server, act)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPartnerActionWithBody(ctx context.Context, act PartnerActionType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPartnerActionRequestWithBody(c.Server, act, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPartnerAction(ctx context.Context, act PartnerActionType, body AddPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPartnerActionRequest(c.Server, act, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePartnerActionWithBody(ctx context.Context, act openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePartnerActionRequestWithBody(c.Server, act, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePartnerAction(ctx context.Context, act openapi_types.UUID, body UpdatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePartnerActionRequest(c.Server, act, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindPlacements(ctx context.Context, params *FindPlacementsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindPlacementsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlacementWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlacementRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlacement(ctx context.Context, body AddPlacementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlacementRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindPlacementActivity(ctx context.Context, params *FindPlacementActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindPlacementActivityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindPlacementActivitySettings(ctx context.Context, params *FindPlacementActivitySettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindPlacementActivitySettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementActivitySetting(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementActivitySettingRequest(c.Server, settingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletedPlacements(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletedPlacementsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementCustomFieldListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPlacementCustomFieldListWithBody(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPlacementCustomFieldListRequestWithBody(c.Server, fieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPlacementCustomFieldList(ctx context.Context, fieldId int32, body PutPlacementCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPlacementCustomFieldListRequest(c.Server, fieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementCustomFieldItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementCustomFieldItemRequest(c.Server, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementAttachmentCategoryList(ctx context.Context, params *GetPlacementAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementAttachmentCategoryListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementAwardList(ctx context.Context, params *GetPlacementAwardListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementAwardListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementBillingTermsList(ctx context.Context, params *GetPlacementBillingTermsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementBillingTermsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementIndustryCodeList(ctx context.Context, params *GetPlacementIndustryCodeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementIndustryCodeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementNoteTypeList(ctx context.Context, params *GetPlacementNoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementNoteTypeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementPaymentTypeList(ctx context.Context, params *GetPlacementPaymentTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementPaymentTypeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementStatusList(ctx context.Context, params *GetPlacementStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementStatusListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementStatusItem(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementStatusItemRequest(c.Server, statusId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacement(ctx context.Context, placementId int32, params *GetPlacementParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementRequest(c.Server, placementId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlacementWithBody(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlacementRequestWithBody(c.Server, placementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlacement(ctx context.Context, placementId int32, body UpdatePlacementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlacementRequest(c.Server, placementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementActivityByPlacementId(ctx context.Context, placementId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementActivityByPlacementIdRequest(c.Server, placementId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlacementActivityWithBody(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlacementActivityRequestWithBody(c.Server, placementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlacementActivity(ctx context.Context, placementId int32, body AddPlacementActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlacementActivityRequest(c.Server, placementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementActivity(ctx context.Context, placementId int32, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementActivityRequest(c.Server, placementId, activityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindPlacementAttachments(ctx context.Context, placementId int32, params *FindPlacementAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindPlacementAttachmentsRequest(c.Server, placementId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementAttachment(ctx context.Context, placementId int32, attach int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementAttachmentRequest(c.Server, placementId, attach)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlacementAttachmentWithBody(ctx context.Context, placementId int32, attach PlacementAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlacementAttachmentRequestWithBody(c.Server, placementId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlacementAttachmentWithBody(ctx context.Context, placementId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlacementAttachmentRequestWithBody(c.Server, placementId, attach, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlacementAttachment(ctx context.Context, placementId int32, attach int64, body UpdatePlacementAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlacementAttachmentRequest(c.Server, placementId, attach, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementNotes(ctx context.Context, placementId int32, params *GetPlacementNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementNotesRequest(c.Server, placementId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlacementNoteWithBody(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlacementNoteRequestWithBody(c.Server, placementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlacementNote(ctx context.Context, placementId int32, body AddPlacementNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlacementNoteRequest(c.Server, placementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPlacementStatusWithBody(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPlacementStatusRequestWithBody(c.Server, placementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPlacementStatus(ctx context.Context, placementId int32, body PutPlacementStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPlacementStatusRequest(c.Server, placementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementTimesheets(ctx context.Context, placementId int32, params *GetPlacementTimesheetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementTimesheetsRequest(c.Server, placementId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlacementUserTaskWithBody(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlacementUserTaskRequestWithBody(c.Server, placementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlacementUserTask(ctx context.Context, placementId int32, body AddPlacementUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlacementUserTaskRequest(c.Server, placementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementUserTask(ctx context.Context, placementId int32, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementUserTaskRequest(c.Server, placementId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlacementUserTaskWithBody(ctx context.Context, placementId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlacementUserTaskRequestWithBody(c.Server, placementId, taskId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlacementUserTask(ctx context.Context, placementId int32, taskId int64, body UpdatePlacementUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlacementUserTaskRequest(c.Server, placementId, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindRequisitions(ctx context.Context, params *FindRequisitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindRequisitionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRequisitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRequisitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRequisition(ctx context.Context, body AddRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRequisitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequisitionCustomFieldList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequisitionCustomFieldListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequisitionCustomFieldItem(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequisitionCustomFieldItemRequest(c.Server, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequisitionForms(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequisitionFormsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRequisition(ctx context.Context, requisitionId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequisitionRequest(c.Server, requisitionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequisition(ctx context.Context, requisitionId int32, params *GetRequisitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequisitionRequest(c.Server, requisitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRequisitionWithBody(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequisitionRequestWithBody(c.Server, requisitionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRequisition(ctx context.Context, requisitionId int32, body UpdateRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequisitionRequest(c.Server, requisitionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApproveRequisitionWithBody(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApproveRequisitionRequestWithBody(c.Server, requisitionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApproveRequisition(ctx context.Context, requisitionId int32, body ApproveRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApproveRequisitionRequest(c.Server, requisitionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequisitionAttachmentList(ctx context.Context, requisitionId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequisitionAttachmentListRequest(c.Server, requisitionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRequisitionAttachment(ctx context.Context, requisitionId int32, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequisitionAttachmentRequest(c.Server, requisitionId, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequisitionAttachment(ctx context.Context, requisitionId int32, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequisitionAttachmentRequest(c.Server, requisitionId, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRequisitionAttachmentWithBody(ctx context.Context, requisitionId int32, attachmentType RequisitionAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRequisitionAttachmentRequestWithBody(c.Server, requisitionId, attachmentType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequisitionApprovalHistory(ctx context.Context, requisitionId int32, params *GetRequisitionApprovalHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequisitionApprovalHistoryRequest(c.Server, requisitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequisitionNotes(ctx context.Context, requisitionId int32, params *GetRequisitionNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequisitionNotesRequest(c.Server, requisitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRequisitionNoteWithBody(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRequisitionNoteRequestWithBody(c.Server, requisitionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRequisitionNote(ctx context.Context, requisitionId int32, body AddRequisitionNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRequisitionNoteRequest(c.Server, requisitionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectRequisitionWithBody(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectRequisitionRequestWithBody(c.Server, requisitionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectRequisition(ctx context.Context, requisitionId int32, body RejectRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectRequisitionRequest(c.Server, requisitionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitRequisitionWithBody(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitRequisitionRequestWithBody(c.Server, requisitionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitRequisition(ctx context.Context, requisitionId int32, body SubmitRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitRequisitionRequest(c.Server, requisitionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindEmailAddress(ctx context.Context, params *FindEmailAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindEmailAddressRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindPhoneNumber(ctx context.Context, params *FindPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindPhoneNumberRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendJobApplcationSmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendJobApplcationSmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendJobApplcationSms(ctx context.Context, body SendJobApplcationSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendJobApplcationSmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendJobApplicationContactSmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendJobApplicationContactSmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendJobApplicationContactSms(ctx context.Context, body SendJobApplicationContactSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendJobApplicationContactSmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendCandidateSmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendCandidateSmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendCandidateSms(ctx context.Context, body SendCandidateSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendCandidateSmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendCompanySmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendCompanySmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendCompanySms(ctx context.Context, body SendCompanySmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendCompanySmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendContactSmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendContactSmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendContactSms(ctx context.Context, body SendContactSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendContactSmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendJobOrderSmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendJobOrderSmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendJobOrderSms(ctx context.Context, body SendJobOrderSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendJobOrderSmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendPlacementSmsWithBody(ctx context.Context, entityType RecipientEntityType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendPlacementSmsRequestWithBody(c.Server, entityType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendPlacementSms(ctx context.Context, entityType RecipientEntityType, body SendPlacementSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendPlacementSmsRequest(c.Server, entityType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindSubmissions(ctx context.Context, params *FindSubmissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindSubmissionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubmission(ctx context.Context, submissionId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubmissionRequest(c.Server, submissionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindUserGroups(ctx context.Context, params *FindUserGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindUserGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroup(ctx context.Context, groupId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupUsers(ctx context.Context, groupId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupUsersRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindUserOffices(ctx context.Context, params *FindUserOfficesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindUserOfficesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserOffice(ctx context.Context, officeId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserOfficeRequest(c.Server, officeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOfficeUsers(ctx context.Context, officeId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOfficeUsersRequest(c.Server, officeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindUsers(ctx context.Context, params *FindUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserInterviews(ctx context.Context, userId int32, params *GetUserInterviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInterviewsRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPhoto(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPhotoRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUserGroups(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserUserGroupsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindUserUserTasks(ctx context.Context, userId int32, params *FindUserUserTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindUserUserTasksRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindUserTasks(ctx context.Context, params *FindUserTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindUserTasksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserTask(ctx context.Context, body AddUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserTask(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserTaskRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserTask(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserTaskRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserTaskWithBody(ctx context.Context, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserTaskRequestWithBody(c.Server, taskId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserTask(ctx context.Context, taskId int64, body UpdateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserTaskRequest(c.Server, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkCompleteUserTask(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkCompleteUserTaskRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkIncompleteUserTask(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkIncompleteUserTaskRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindWebhooks(ctx context.Context, params *FindWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindWebhooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddWebhook(ctx context.Context, body AddWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebhook(ctx context.Context, webhookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWebhookRequest(c.Server, webhookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhook(ctx context.Context, webhookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhookRequest(c.Server, webhookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWebhookWithBody(ctx context.Context, webhookId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWebhookRequestWithBody(c.Server, webhookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWebhook(ctx context.Context, webhookId openapi_types.UUID, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWebhookRequest(c.Server, webhookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindWorkTypes(ctx context.Context, params *FindWorkTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindWorkTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewFindJobApplicationsRequest generates requests for FindJobApplications
func NewFindJobApplicationsRequest(server string, params *FindJobApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ApplicationId", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CandidateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CandidateId", runtime.ParamLocationQuery, *params.CandidateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobId", runtime.ParamLocationQuery, *params.JobId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AdId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AdId", runtime.ParamLocationQuery, *params.AdId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobTitle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobTitle", runtime.ParamLocationQuery, *params.JobTitle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rejected != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Rejected", runtime.ParamLocationQuery, *params.Rejected); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReviewStage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Review.Stage", runtime.ParamLocationQuery, *params.ReviewStage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReviewUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Review.UserId", runtime.ParamLocationQuery, *params.ReviewUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReviewContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Review.ContactId", runtime.ParamLocationQuery, *params.ReviewContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReviewSubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Review.SubmittedAt", runtime.ParamLocationQuery, *params.ReviewSubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReviewReviewedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Review.ReviewedAt", runtime.ParamLocationQuery, *params.ReviewReviewedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Keywords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Keywords", runtime.ParamLocationQuery, *params.Keywords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.ActionId", runtime.ParamLocationQuery, *params.PartnerActionActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionReference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Reference", runtime.ParamLocationQuery, *params.PartnerActionReference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionStage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Stage", runtime.ParamLocationQuery, *params.PartnerActionStage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionSubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.SubmittedAt", runtime.ParamLocationQuery, *params.PartnerActionSubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FolderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FolderId", runtime.ParamLocationQuery, *params.FolderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedBy", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindJobApplicationActivityRequest generates requests for FindJobApplicationActivity
func NewFindJobApplicationActivityRequest(server string, params *FindJobApplicationActivityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/activities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeDetails", runtime.ParamLocationQuery, *params.IncludeDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindJobApplicationActivitySettingsRequest generates requests for FindJobApplicationActivitySettings
func NewFindJobApplicationActivitySettingsRequest(server string, params *FindJobApplicationActivitySettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/activitysettings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobApplicationActivitySettingRequest generates requests for GetJobApplicationActivitySetting
func NewGetJobApplicationActivitySettingRequest(server string, settingId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "settingId", runtime.ParamLocationPath, settingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/activitysettings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletedJobApplicationsRequest generates requests for DeletedJobApplications
func NewDeletedJobApplicationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/deleted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobApplicationCustomFieldListRequest generates requests for GetJobApplicationCustomFieldList
func NewGetJobApplicationCustomFieldListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/fields/custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutJobApplicationCustomFieldListRequest calls the generic PutJobApplicationCustomFieldList builder with application/json body
func NewPutJobApplicationCustomFieldListRequest(server string, fieldId int32, body PutJobApplicationCustomFieldListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJobApplicationCustomFieldListRequestWithBody(server, fieldId, "application/json", bodyReader)
}

// NewPutJobApplicationCustomFieldListRequestWithBody generates requests for PutJobApplicationCustomFieldList with any type of body
func NewPutJobApplicationCustomFieldListRequestWithBody(server string, fieldId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/fields/custom/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobApplicationCustomFieldListItemRequest generates requests for GetJobApplicationCustomFieldListItem
func NewGetJobApplicationCustomFieldListItemRequest(server string, fieldId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/fields/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobApplicationStatusListRequest generates requests for GetJobApplicationStatusList
func NewGetJobApplicationStatusListRequest(server string, params *GetJobApplicationStatusListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/lists/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Rejected != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Rejected", runtime.ParamLocationQuery, *params.Rejected); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Default != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Default", runtime.ParamLocationQuery, *params.Default); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobApplicationStatusListItemRequest generates requests for GetJobApplicationStatusListItem
func NewGetJobApplicationStatusListItemRequest(server string, statusId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statusId", runtime.ParamLocationPath, statusId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/lists/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobApplicationWorkflowListRequest generates requests for GetJobApplicationWorkflowList
func NewGetJobApplicationWorkflowListRequest(server string, params *GetJobApplicationWorkflowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/lists/workflow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobApplicationRequest generates requests for GetJobApplication
func NewGetJobApplicationRequest(server string, applicationId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJobApplicationRequest calls the generic UpdateJobApplication builder with application/json body
func NewUpdateJobApplicationRequest(server string, applicationId int64, body UpdateJobApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJobApplicationRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewUpdateJobApplicationRequestWithBody generates requests for UpdateJobApplication with any type of body
func NewUpdateJobApplicationRequestWithBody(server string, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobApplicationActivityByApplicationIdRequest generates requests for GetJobApplicationActivityByApplicationId
func NewGetJobApplicationActivityByApplicationIdRequest(server string, applicationId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobApplicationActivityRequest calls the generic AddJobApplicationActivity builder with application/json body
func NewAddJobApplicationActivityRequest(server string, applicationId int64, body AddJobApplicationActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddJobApplicationActivityRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewAddJobApplicationActivityRequestWithBody generates requests for AddJobApplicationActivity with any type of body
func NewAddJobApplicationActivityRequestWithBody(server string, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobApplicationActivityRequest generates requests for GetJobApplicationActivity
func NewGetJobApplicationActivityRequest(server string, applicationId int64, activityId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "activityId", runtime.ParamLocationPath, activityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/activities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindJobApplicationAttachmentsRequest generates requests for FindJobApplicationAttachments
func NewFindJobApplicationAttachmentsRequest(server string, applicationId int64, params *FindJobApplicationAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobApplicationAttachmentRequest generates requests for GetJobApplicationAttachment
func NewGetJobApplicationAttachmentRequest(server string, applicationId int64, attach int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobApplicationAttachmentRequestWithBody generates requests for AddJobApplicationAttachment with any type of body
func NewAddJobApplicationAttachmentRequestWithBody(server string, applicationId int64, attach SubmitCandidateAttachmentType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateJobApplicationAttachmentRequest calls the generic UpdateJobApplicationAttachment builder with application/json body
func NewUpdateJobApplicationAttachmentRequest(server string, applicationId int64, attach int64, body UpdateJobApplicationAttachmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJobApplicationAttachmentRequestWithBody(server, applicationId, attach, "application/json", bodyReader)
}

// NewUpdateJobApplicationAttachmentRequestWithBody generates requests for UpdateJobApplicationAttachment with any type of body
func NewUpdateJobApplicationAttachmentRequestWithBody(server string, applicationId int64, attach int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobApplicationInterviewsRequest generates requests for GetJobApplicationInterviews
func NewGetJobApplicationInterviewsRequest(server string, applicationId int64, params *GetJobApplicationInterviewsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/interviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJobApplicationExternalInterviewRequest calls the generic PostJobApplicationExternalInterview builder with application/json body
func NewPostJobApplicationExternalInterviewRequest(server string, applicationId int64, body PostJobApplicationExternalInterviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobApplicationExternalInterviewRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewPostJobApplicationExternalInterviewRequestWithBody generates requests for PostJobApplicationExternalInterview with any type of body
func NewPostJobApplicationExternalInterviewRequestWithBody(server string, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/interviews/external", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutJobApplicationExternalInterviewRequest calls the generic PutJobApplicationExternalInterview builder with application/json body
func NewPutJobApplicationExternalInterviewRequest(server string, applicationId int64, interviewId int32, body PutJobApplicationExternalInterviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJobApplicationExternalInterviewRequestWithBody(server, applicationId, interviewId, "application/json", bodyReader)
}

// NewPutJobApplicationExternalInterviewRequestWithBody generates requests for PutJobApplicationExternalInterview with any type of body
func NewPutJobApplicationExternalInterviewRequestWithBody(server string, applicationId int64, interviewId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "interviewId", runtime.ParamLocationPath, interviewId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/interviews/external/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJobApplicationInternalInterviewRequest calls the generic PostJobApplicationInternalInterview builder with application/json body
func NewPostJobApplicationInternalInterviewRequest(server string, applicationId int64, body PostJobApplicationInternalInterviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobApplicationInternalInterviewRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewPostJobApplicationInternalInterviewRequestWithBody generates requests for PostJobApplicationInternalInterview with any type of body
func NewPostJobApplicationInternalInterviewRequestWithBody(server string, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/interviews/internal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutJobApplicationInternalInterviewRequest calls the generic PutJobApplicationInternalInterview builder with application/json body
func NewPutJobApplicationInternalInterviewRequest(server string, applicationId int64, interviewId int32, body PutJobApplicationInternalInterviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJobApplicationInternalInterviewRequestWithBody(server, applicationId, interviewId, "application/json", bodyReader)
}

// NewPutJobApplicationInternalInterviewRequestWithBody generates requests for PutJobApplicationInternalInterview with any type of body
func NewPutJobApplicationInternalInterviewRequestWithBody(server string, applicationId int64, interviewId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "interviewId", runtime.ParamLocationPath, interviewId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/interviews/internal/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobApplicationNotesRequest generates requests for GetJobApplicationNotes
func NewGetJobApplicationNotesRequest(server string, applicationId int64, params *GetJobApplicationNotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NoteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NoteId", runtime.ParamLocationQuery, *params.NoteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobApplicationNoteRequest calls the generic AddJobApplicationNote builder with application/json body
func NewAddJobApplicationNoteRequest(server string, applicationId int64, body AddJobApplicationNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddJobApplicationNoteRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewAddJobApplicationNoteRequestWithBody generates requests for AddJobApplicationNote with any type of body
func NewAddJobApplicationNoteRequestWithBody(server string, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReviewSubmitJobApplicationRequest calls the generic ReviewSubmitJobApplication builder with application/json body
func NewReviewSubmitJobApplicationRequest(server string, applicationId int64, body ReviewSubmitJobApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReviewSubmitJobApplicationRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewReviewSubmitJobApplicationRequestWithBody generates requests for ReviewSubmitJobApplication with any type of body
func NewReviewSubmitJobApplicationRequestWithBody(server string, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/review", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReviewViewJobApplicationRequest calls the generic ReviewViewJobApplication builder with application/json body
func NewReviewViewJobApplicationRequest(server string, applicationId int64, body ReviewViewJobApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReviewViewJobApplicationRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewReviewViewJobApplicationRequestWithBody generates requests for ReviewViewJobApplication with any type of body
func NewReviewViewJobApplicationRequestWithBody(server string, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/review", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReviewAcceptJobApplicationRequest calls the generic ReviewAcceptJobApplication builder with application/json body
func NewReviewAcceptJobApplicationRequest(server string, applicationId int64, body ReviewAcceptJobApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReviewAcceptJobApplicationRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewReviewAcceptJobApplicationRequestWithBody generates requests for ReviewAcceptJobApplication with any type of body
func NewReviewAcceptJobApplicationRequestWithBody(server string, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/review/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReviewRejectJobApplicationRequest calls the generic ReviewRejectJobApplication builder with application/json body
func NewReviewRejectJobApplicationRequest(server string, applicationId int64, body ReviewRejectJobApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReviewRejectJobApplicationRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewReviewRejectJobApplicationRequestWithBody generates requests for ReviewRejectJobApplication with any type of body
func NewReviewRejectJobApplicationRequestWithBody(server string, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/review/reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutJobApplicationStatusRequest calls the generic PutJobApplicationStatus builder with application/json body
func NewPutJobApplicationStatusRequest(server string, applicationId int64, body PutJobApplicationStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJobApplicationStatusRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewPutJobApplicationStatusRequestWithBody generates requests for PutJobApplicationStatus with any type of body
func NewPutJobApplicationStatusRequestWithBody(server string, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddJobApplicationUserTaskRequest calls the generic AddJobApplicationUserTask builder with application/json body
func NewAddJobApplicationUserTaskRequest(server string, applicationId int64, body AddJobApplicationUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddJobApplicationUserTaskRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewAddJobApplicationUserTaskRequestWithBody generates requests for AddJobApplicationUserTask with any type of body
func NewAddJobApplicationUserTaskRequestWithBody(server string, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/usertasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobApplicationUserTaskRequest generates requests for GetJobApplicationUserTask
func NewGetJobApplicationUserTaskRequest(server string, applicationId int64, taskId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJobApplicationUserTaskRequest calls the generic UpdateJobApplicationUserTask builder with application/json body
func NewUpdateJobApplicationUserTaskRequest(server string, applicationId int64, taskId int64, body UpdateJobApplicationUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJobApplicationUserTaskRequestWithBody(server, applicationId, taskId, "application/json", bodyReader)
}

// NewUpdateJobApplicationUserTaskRequestWithBody generates requests for UpdateJobApplicationUserTask with any type of body
func NewUpdateJobApplicationUserTaskRequestWithBody(server string, applicationId int64, taskId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobApplicationVideosRequest generates requests for GetJobApplicationVideos
func NewGetJobApplicationVideosRequest(server string, applicationId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/videos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLatestJobApplicationVideoRequest generates requests for GetLatestJobApplicationVideo
func NewGetLatestJobApplicationVideoRequest(server string, applicationId int64, videoType CandidateVideoType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "videoType", runtime.ParamLocationPath, videoType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/videos/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobApplicationVideoRequest calls the generic AddJobApplicationVideo builder with application/json body
func NewAddJobApplicationVideoRequest(server string, applicationId int64, videoType CandidateVideoType, body AddJobApplicationVideoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddJobApplicationVideoRequestWithBody(server, applicationId, videoType, "application/json", bodyReader)
}

// NewAddJobApplicationVideoRequestWithBody generates requests for AddJobApplicationVideo with any type of body
func NewAddJobApplicationVideoRequestWithBody(server string, applicationId int64, videoType CandidateVideoType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "videoType", runtime.ParamLocationPath, videoType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/videos/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindCandidatesRequest generates requests for FindCandidates
func NewFindCandidatesRequest(server string, params *FindCandidatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CandidateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CandidateId", runtime.ParamLocationQuery, *params.CandidateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Phone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Phone", runtime.ParamLocationQuery, *params.Phone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CurrentPosition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CurrentPosition", runtime.ParamLocationQuery, *params.CurrentPosition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.City != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "City", runtime.ParamLocationQuery, *params.City); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "State", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Location != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Location", runtime.ParamLocationQuery, *params.Location); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateOfBirth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateOfBirth", runtime.ParamLocationQuery, *params.DateOfBirth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Keywords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Keywords", runtime.ParamLocationQuery, *params.Keywords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.ActionId", runtime.ParamLocationQuery, *params.PartnerActionActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionReference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Reference", runtime.ParamLocationQuery, *params.PartnerActionReference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionStage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Stage", runtime.ParamLocationQuery, *params.PartnerActionStage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionSubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.SubmittedAt", runtime.ParamLocationQuery, *params.PartnerActionSubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecruiterUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RecruiterUserId", runtime.ParamLocationQuery, *params.RecruiterUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FolderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FolderId", runtime.ParamLocationQuery, *params.FolderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCandidateRequest calls the generic AddCandidate builder with application/json body
func NewAddCandidateRequest(server string, params *AddCandidateParams, body AddCandidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCandidateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAddCandidateRequestWithBody generates requests for AddCandidate with any type of body
func NewAddCandidateRequestWithBody(server string, params *AddCandidateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XAllowDuplicates != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Allow-Duplicates", runtime.ParamLocationHeader, *params.XAllowDuplicates)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Allow-Duplicates", headerParam0)
		}

	}

	return req, nil
}

// NewFindCandidateActivitiesRequest generates requests for FindCandidateActivities
func NewFindCandidateActivitiesRequest(server string, params *FindCandidateActivitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/activities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeDetails", runtime.ParamLocationQuery, *params.IncludeDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindCandidateActivitySettingsRequest generates requests for FindCandidateActivitySettings
func NewFindCandidateActivitySettingsRequest(server string, params *FindCandidateActivitySettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/activitysettings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateActivitySettingRequest generates requests for GetCandidateActivitySetting
func NewGetCandidateActivitySettingRequest(server string, settingId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "settingId", runtime.ParamLocationPath, settingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/activitysettings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindAllCandidateAttachmentsRequest generates requests for FindAllCandidateAttachments
func NewFindAllCandidateAttachmentsRequest(server string, params *FindAllCandidateAttachmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/attachments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CandidateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CandidateId", runtime.ParamLocationQuery, *params.CandidateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpiryDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExpiryDate", runtime.ParamLocationQuery, *params.ExpiryDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletedCandidatesRequest generates requests for DeletedCandidates
func NewDeletedCandidatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/deleted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateCustomFieldListRequest generates requests for GetCandidateCustomFieldList
func NewGetCandidateCustomFieldListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/fields/custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateCustomFieldListItemRequest generates requests for GetCandidateCustomFieldListItem
func NewGetCandidateCustomFieldListItemRequest(server string, fieldId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/fields/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCandidateCustomFieldListItemRequest calls the generic PutCandidateCustomFieldListItem builder with application/json body
func NewPutCandidateCustomFieldListItemRequest(server string, fieldId int32, body PutCandidateCustomFieldListItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCandidateCustomFieldListItemRequestWithBody(server, fieldId, "application/json", bodyReader)
}

// NewPutCandidateCustomFieldListItemRequestWithBody generates requests for PutCandidateCustomFieldListItem with any type of body
func NewPutCandidateCustomFieldListItemRequestWithBody(server string, fieldId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/fields/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCandidateAttachmentCategoryListRequest generates requests for GetCandidateAttachmentCategoryList
func NewGetCandidateAttachmentCategoryListRequest(server string, params *GetCandidateAttachmentCategoryListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/lists/attachmentcategory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateNoteTypeListRequest generates requests for GetCandidateNoteTypeList
func NewGetCandidateNoteTypeListRequest(server string, params *GetCandidateNoteTypeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/lists/notetype")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateRatingListRequest generates requests for GetCandidateRatingList
func NewGetCandidateRatingListRequest(server string, params *GetCandidateRatingListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/lists/rating")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateSalutationListRequest generates requests for GetCandidateSalutationList
func NewGetCandidateSalutationListRequest(server string, params *GetCandidateSalutationListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/lists/salutation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateSourceListRequest generates requests for GetCandidateSourceList
func NewGetCandidateSourceListRequest(server string, params *GetCandidateSourceListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/lists/source")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateStatusListRequest generates requests for GetCandidateStatusList
func NewGetCandidateStatusListRequest(server string, params *GetCandidateStatusListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/lists/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Default != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Default", runtime.ParamLocationQuery, *params.Default); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateStatusListItemRequest generates requests for GetCandidateStatusListItem
func NewGetCandidateStatusListItemRequest(server string, statusId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statusId", runtime.ParamLocationPath, statusId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/lists/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindCandidatesPayrollBillingsRequest generates requests for FindCandidatesPayrollBillings
func NewFindCandidatesPayrollBillingsRequest(server string, params *FindCandidatesPayrollBillingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/payrollbilling")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CandidateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CandidateId", runtime.ParamLocationQuery, *params.CandidateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateRequest generates requests for GetCandidate
func NewGetCandidateRequest(server string, candidateId int32, params *GetCandidateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCandidateRequest calls the generic UpdateCandidate builder with application/json body
func NewUpdateCandidateRequest(server string, candidateId int32, params *UpdateCandidateParams, body UpdateCandidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCandidateRequestWithBody(server, candidateId, params, "application/json", bodyReader)
}

// NewUpdateCandidateRequestWithBody generates requests for UpdateCandidate with any type of body
func NewUpdateCandidateRequestWithBody(server string, candidateId int32, params *UpdateCandidateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XAllowDuplicates != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Allow-Duplicates", runtime.ParamLocationHeader, *params.XAllowDuplicates)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Allow-Duplicates", headerParam0)
		}

	}

	return req, nil
}

// NewGetCandidateActivityByCandidateIdRequest generates requests for GetCandidateActivityByCandidateId
func NewGetCandidateActivityByCandidateIdRequest(server string, candidateId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCandidateActivityRequest calls the generic AddCandidateActivity builder with application/json body
func NewAddCandidateActivityRequest(server string, candidateId int32, body AddCandidateActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCandidateActivityRequestWithBody(server, candidateId, "application/json", bodyReader)
}

// NewAddCandidateActivityRequestWithBody generates requests for AddCandidateActivity with any type of body
func NewAddCandidateActivityRequestWithBody(server string, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCandidateActivityRequest generates requests for GetCandidateActivity
func NewGetCandidateActivityRequest(server string, candidateId int32, activityId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "activityId", runtime.ParamLocationPath, activityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/activities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateJobApplicationsRequest generates requests for GetCandidateJobApplications
func NewGetCandidateJobApplicationsRequest(server string, candidateId int32, params *GetCandidateJobApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCandidateJobOrdersRequest calls the generic AddCandidateJobOrders builder with application/json body
func NewAddCandidateJobOrdersRequest(server string, candidateId int32, body AddCandidateJobOrdersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCandidateJobOrdersRequestWithBody(server, candidateId, "application/json", bodyReader)
}

// NewAddCandidateJobOrdersRequestWithBody generates requests for AddCandidateJobOrders with any type of body
func NewAddCandidateJobOrdersRequestWithBody(server string, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActiveCandidateJobApplicationsRequest generates requests for GetActiveCandidateJobApplications
func NewGetActiveCandidateJobApplicationsRequest(server string, candidateId int32, params *GetActiveCandidateJobApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/applications/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindCandidateAttachmentsRequest generates requests for FindCandidateAttachments
func NewFindCandidateAttachmentsRequest(server string, candidateId int32, params *FindCandidateAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Latest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Latest", runtime.ParamLocationQuery, *params.Latest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateAttachmentRequest generates requests for GetCandidateAttachment
func NewGetCandidateAttachmentRequest(server string, candidateId int32, attach int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCandidateAttachmentRequestWithBody generates requests for AddCandidateAttachment with any type of body
func NewAddCandidateAttachmentRequestWithBody(server string, candidateId int32, attach SubmitCandidateAttachmentType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateCandidateAttachmentRequest calls the generic UpdateCandidateAttachment builder with application/json body
func NewUpdateCandidateAttachmentRequest(server string, candidateId int32, attach int64, body UpdateCandidateAttachmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCandidateAttachmentRequestWithBody(server, candidateId, attach, "application/json", bodyReader)
}

// NewUpdateCandidateAttachmentRequestWithBody generates requests for UpdateCandidateAttachment with any type of body
func NewUpdateCandidateAttachmentRequestWithBody(server string, candidateId int32, attach int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCandidateAvailabilityRequest generates requests for GetCandidateAvailability
func NewGetCandidateAvailabilityRequest(server string, candidateId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/availability", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCandidateAvailabilityWeekRequest generates requests for DeleteCandidateAvailabilityWeek
func NewDeleteCandidateAvailabilityWeekRequest(server string, candidateId int32, params *DeleteCandidateAvailabilityWeekParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/availability/weekly", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "WeekOf", runtime.ParamLocationQuery, params.WeekOf); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Recurring != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Recurring", runtime.ParamLocationQuery, *params.Recurring); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Until != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Until", runtime.ParamLocationQuery, *params.Until); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCandidateAvailabilityWeekRequest calls the generic UpdateCandidateAvailabilityWeek builder with application/json body
func NewUpdateCandidateAvailabilityWeekRequest(server string, candidateId int32, body UpdateCandidateAvailabilityWeekJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCandidateAvailabilityWeekRequestWithBody(server, candidateId, "application/json", bodyReader)
}

// NewUpdateCandidateAvailabilityWeekRequestWithBody generates requests for UpdateCandidateAvailabilityWeek with any type of body
func NewUpdateCandidateAvailabilityWeekRequestWithBody(server string, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/availability/weekly", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCandidateFloatsRequest generates requests for GetCandidateFloats
func NewGetCandidateFloatsRequest(server string, candidateId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/floats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateInterviewsRequest generates requests for GetCandidateInterviews
func NewGetCandidateInterviewsRequest(server string, candidateId int32, params *GetCandidateInterviewsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/interviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateNotesRequest generates requests for GetCandidateNotes
func NewGetCandidateNotesRequest(server string, candidateId int32, params *GetCandidateNotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NoteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NoteId", runtime.ParamLocationQuery, *params.NoteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCandidateNoteRequest calls the generic AddCandidateNote builder with application/json body
func NewAddCandidateNoteRequest(server string, candidateId int32, body AddCandidateNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCandidateNoteRequestWithBody(server, candidateId, "application/json", bodyReader)
}

// NewAddCandidateNoteRequestWithBody generates requests for AddCandidateNote with any type of body
func NewAddCandidateNoteRequestWithBody(server string, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCandidatePayrollBillingRequest generates requests for GetCandidatePayrollBilling
func NewGetCandidatePayrollBillingRequest(server string, candidateId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/payrollbilling", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCandidatePhotoRequest generates requests for DeleteCandidatePhoto
func NewDeleteCandidatePhotoRequest(server string, candidateId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/photo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidatePhotoRequest generates requests for GetCandidatePhoto
func NewGetCandidatePhotoRequest(server string, candidateId int32, params *GetCandidatePhotoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/photo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.W != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "w", runtime.ParamLocationQuery, *params.W); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.H != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "h", runtime.ParamLocationQuery, *params.H); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadCandidatePhotoRequest generates requests for HeadCandidatePhoto
func NewHeadCandidatePhotoRequest(server string, candidateId int32, params *HeadCandidatePhotoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/photo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.W != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "w", runtime.ParamLocationQuery, *params.W); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.H != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "h", runtime.ParamLocationQuery, *params.H); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCandidatePhotoRequestWithBody generates requests for UpdateCandidatePhoto with any type of body
func NewUpdateCandidatePhotoRequestWithBody(server string, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/photo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCandidatePlacementsRequest generates requests for GetCandidatePlacements
func NewGetCandidatePlacementsRequest(server string, candidateId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/placements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateApprovedPlacementsRequest generates requests for GetCandidateApprovedPlacements
func NewGetCandidateApprovedPlacementsRequest(server string, candidateId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/placements/approved", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPrivacyDeleteCandidateRequest generates requests for PrivacyDeleteCandidate
func NewPrivacyDeleteCandidateRequest(server string, candidateId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/privacy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateSkillsRequest generates requests for GetCandidateSkills
func NewGetCandidateSkillsRequest(server string, candidateId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/skills", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCandidateSkillsRequest calls the generic DeleteCandidateSkills builder with application/json body
func NewDeleteCandidateSkillsRequest(server string, candidateId int32, body DeleteCandidateSkillsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCandidateSkillsRequestWithBody(server, candidateId, "application/json", bodyReader)
}

// NewDeleteCandidateSkillsRequestWithBody generates requests for DeleteCandidateSkills with any type of body
func NewDeleteCandidateSkillsRequestWithBody(server string, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/skills", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCandidateSkillsRequest calls the generic PutCandidateSkills builder with application/json body
func NewPutCandidateSkillsRequest(server string, candidateId int32, body PutCandidateSkillsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCandidateSkillsRequestWithBody(server, candidateId, "application/json", bodyReader)
}

// NewPutCandidateSkillsRequestWithBody generates requests for PutCandidateSkills with any type of body
func NewPutCandidateSkillsRequestWithBody(server string, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/skills", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCandidateCategoryRequest generates requests for DeleteCandidateCategory
func NewDeleteCandidateCategoryRequest(server string, candidateId int32, categoryId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/skills/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCandidateStatusRequest calls the generic PutCandidateStatus builder with application/json body
func NewPutCandidateStatusRequest(server string, candidateId int32, body PutCandidateStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCandidateStatusRequestWithBody(server, candidateId, "application/json", bodyReader)
}

// NewPutCandidateStatusRequestWithBody generates requests for PutCandidateStatus with any type of body
func NewPutCandidateStatusRequestWithBody(server string, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCandidateSubmissionsRequest generates requests for GetCandidateSubmissions
func NewGetCandidateSubmissionsRequest(server string, candidateId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/submissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCandidateUserTaskRequest calls the generic AddCandidateUserTask builder with application/json body
func NewAddCandidateUserTaskRequest(server string, candidateId int32, body AddCandidateUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCandidateUserTaskRequestWithBody(server, candidateId, "application/json", bodyReader)
}

// NewAddCandidateUserTaskRequestWithBody generates requests for AddCandidateUserTask with any type of body
func NewAddCandidateUserTaskRequestWithBody(server string, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/usertasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCandidateUserTaskRequest generates requests for GetCandidateUserTask
func NewGetCandidateUserTaskRequest(server string, candidateId int32, taskId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCandidateUserTaskRequest calls the generic UpdateCandidateUserTask builder with application/json body
func NewUpdateCandidateUserTaskRequest(server string, candidateId int32, taskId int64, body UpdateCandidateUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCandidateUserTaskRequestWithBody(server, candidateId, taskId, "application/json", bodyReader)
}

// NewUpdateCandidateUserTaskRequestWithBody generates requests for UpdateCandidateUserTask with any type of body
func NewUpdateCandidateUserTaskRequestWithBody(server string, candidateId int32, taskId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCandidateVideosRequest generates requests for GetCandidateVideos
func NewGetCandidateVideosRequest(server string, candidateId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/videos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLatestCandidateVideoRequest generates requests for GetLatestCandidateVideo
func NewGetLatestCandidateVideoRequest(server string, candidateId int32, videoType CandidateVideoType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "videoType", runtime.ParamLocationPath, videoType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/videos/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCandidateVideoRequest calls the generic AddCandidateVideo builder with application/json body
func NewAddCandidateVideoRequest(server string, candidateId int32, videoType CandidateVideoType, body AddCandidateVideoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCandidateVideoRequestWithBody(server, candidateId, videoType, "application/json", bodyReader)
}

// NewAddCandidateVideoRequestWithBody generates requests for AddCandidateVideo with any type of body
func NewAddCandidateVideoRequestWithBody(server string, candidateId int32, videoType CandidateVideoType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "videoType", runtime.ParamLocationPath, videoType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/candidates/%s/videos/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindCategoriesRequest generates requests for FindCategories
func NewFindCategoriesRequest(server string, params *FindCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CategoryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CategoryId", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindCompaniesRequest generates requests for FindCompanies
func NewFindCompaniesRequest(server string, params *FindCompaniesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CompanyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ParentId", runtime.ParamLocationQuery, *params.ParentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubsidiaryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SubsidiaryId", runtime.ParamLocationQuery, *params.SubsidiaryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.ActionId", runtime.ParamLocationQuery, *params.PartnerActionActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionReference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Reference", runtime.ParamLocationQuery, *params.PartnerActionReference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionStage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Stage", runtime.ParamLocationQuery, *params.PartnerActionStage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionSubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.SubmittedAt", runtime.ParamLocationQuery, *params.PartnerActionSubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FolderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FolderId", runtime.ParamLocationQuery, *params.FolderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedBy", runtime.ParamLocationQuery, *params.CreatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedBy", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCompanyRequest calls the generic AddCompany builder with application/json body
func NewAddCompanyRequest(server string, params *AddCompanyParams, body AddCompanyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCompanyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAddCompanyRequestWithBody generates requests for AddCompany with any type of body
func NewAddCompanyRequestWithBody(server string, params *AddCompanyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XAllowDuplicates != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Allow-Duplicates", runtime.ParamLocationHeader, *params.XAllowDuplicates)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Allow-Duplicates", headerParam0)
		}

	}

	return req, nil
}

// NewFindCompanyActivityRequest generates requests for FindCompanyActivity
func NewFindCompanyActivityRequest(server string, params *FindCompanyActivityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/activities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeDetails", runtime.ParamLocationQuery, *params.IncludeDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindCompanyActivitySettingsRequest generates requests for FindCompanyActivitySettings
func NewFindCompanyActivitySettingsRequest(server string, params *FindCompanyActivitySettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/activitysettings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyActivitySettingRequest generates requests for GetCompanyActivitySetting
func NewGetCompanyActivitySettingRequest(server string, settingId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "settingId", runtime.ParamLocationPath, settingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/activitysettings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletedCompaniesRequest generates requests for DeletedCompanies
func NewDeletedCompaniesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/deleted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyCustomFieldListRequest generates requests for GetCompanyCustomFieldList
func NewGetCompanyCustomFieldListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/fields/custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyCustomFieldListItemRequest generates requests for GetCompanyCustomFieldListItem
func NewGetCompanyCustomFieldListItemRequest(server string, fieldId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/fields/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCompanyCustomFieldListRequest calls the generic PutCompanyCustomFieldList builder with application/json body
func NewPutCompanyCustomFieldListRequest(server string, fieldId int32, body PutCompanyCustomFieldListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCompanyCustomFieldListRequestWithBody(server, fieldId, "application/json", bodyReader)
}

// NewPutCompanyCustomFieldListRequestWithBody generates requests for PutCompanyCustomFieldList with any type of body
func NewPutCompanyCustomFieldListRequestWithBody(server string, fieldId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/fields/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompanyAttachmentCategoryListRequest generates requests for GetCompanyAttachmentCategoryList
func NewGetCompanyAttachmentCategoryListRequest(server string, params *GetCompanyAttachmentCategoryListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/lists/attachmentcategory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyNoteTypeListRequest generates requests for GetCompanyNoteTypeList
func NewGetCompanyNoteTypeListRequest(server string, params *GetCompanyNoteTypeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/lists/notetype")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyStatusListRequest generates requests for GetCompanyStatusList
func NewGetCompanyStatusListRequest(server string, params *GetCompanyStatusListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/lists/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Default != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Default", runtime.ParamLocationQuery, *params.Default); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyStatusListItemRequest generates requests for GetCompanyStatusListItem
func NewGetCompanyStatusListItemRequest(server string, statusId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statusId", runtime.ParamLocationPath, statusId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/lists/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyRequest generates requests for GetCompany
func NewGetCompanyRequest(server string, companyId int32, params *GetCompanyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCompanyRequest calls the generic UpdateCompany builder with application/json body
func NewUpdateCompanyRequest(server string, companyId int32, params *UpdateCompanyParams, body UpdateCompanyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCompanyRequestWithBody(server, companyId, params, "application/json", bodyReader)
}

// NewUpdateCompanyRequestWithBody generates requests for UpdateCompany with any type of body
func NewUpdateCompanyRequestWithBody(server string, companyId int32, params *UpdateCompanyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XAllowDuplicates != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Allow-Duplicates", runtime.ParamLocationHeader, *params.XAllowDuplicates)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Allow-Duplicates", headerParam0)
		}

	}

	return req, nil
}

// NewGetCompanyActivityByCompanyIdRequest generates requests for GetCompanyActivityByCompanyId
func NewGetCompanyActivityByCompanyIdRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCompanyActivityRequest calls the generic AddCompanyActivity builder with application/json body
func NewAddCompanyActivityRequest(server string, companyId int32, body AddCompanyActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCompanyActivityRequestWithBody(server, companyId, "application/json", bodyReader)
}

// NewAddCompanyActivityRequestWithBody generates requests for AddCompanyActivity with any type of body
func NewAddCompanyActivityRequestWithBody(server string, companyId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompanyActivityRequest generates requests for GetCompanyActivity
func NewGetCompanyActivityRequest(server string, companyId int32, activityId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "activityId", runtime.ParamLocationPath, activityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/activities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyAddressesRequest generates requests for GetCompanyAddresses
func NewGetCompanyAddressesRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/addresses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCompanyAddressRequest calls the generic AddCompanyAddress builder with application/json body
func NewAddCompanyAddressRequest(server string, companyId int32, body AddCompanyAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCompanyAddressRequestWithBody(server, companyId, "application/json", bodyReader)
}

// NewAddCompanyAddressRequestWithBody generates requests for AddCompanyAddress with any type of body
func NewAddCompanyAddressRequestWithBody(server string, companyId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/addresses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveCompanyAddressRequest generates requests for RemoveCompanyAddress
func NewRemoveCompanyAddressRequest(server string, companyId int32, addressId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "addressId", runtime.ParamLocationPath, addressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/addresses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyAddressRequest generates requests for GetCompanyAddress
func NewGetCompanyAddressRequest(server string, companyId int32, addressId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "addressId", runtime.ParamLocationPath, addressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/addresses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCompanyAddressRequest calls the generic UpdateCompanyAddress builder with application/json body
func NewUpdateCompanyAddressRequest(server string, companyId int32, addressId openapi_types.UUID, body UpdateCompanyAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCompanyAddressRequestWithBody(server, companyId, addressId, "application/json", bodyReader)
}

// NewUpdateCompanyAddressRequestWithBody generates requests for UpdateCompanyAddress with any type of body
func NewUpdateCompanyAddressRequestWithBody(server string, companyId int32, addressId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "addressId", runtime.ParamLocationPath, addressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/addresses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindCompanyAttachmentsRequest generates requests for FindCompanyAttachments
func NewFindCompanyAttachmentsRequest(server string, companyId int32, params *FindCompanyAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Latest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Latest", runtime.ParamLocationQuery, *params.Latest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyAttachmentRequest generates requests for GetCompanyAttachment
func NewGetCompanyAttachmentRequest(server string, companyId int32, attach int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCompanyAttachmentRequestWithBody generates requests for AddCompanyAttachment with any type of body
func NewAddCompanyAttachmentRequestWithBody(server string, companyId int32, attach CompanyAttachmentType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateCompanyAttachmentRequest calls the generic UpdateCompanyAttachment builder with application/json body
func NewUpdateCompanyAttachmentRequest(server string, companyId int32, attach int64, body UpdateCompanyAttachmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCompanyAttachmentRequestWithBody(server, companyId, attach, "application/json", bodyReader)
}

// NewUpdateCompanyAttachmentRequestWithBody generates requests for UpdateCompanyAttachment with any type of body
func NewUpdateCompanyAttachmentRequestWithBody(server string, companyId int32, attach int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompanyContactsRequest generates requests for GetCompanyContacts
func NewGetCompanyContactsRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyFloatsRequest generates requests for GetCompanyFloats
func NewGetCompanyFloatsRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/floats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyJobOrdersRequest generates requests for GetCompanyJobOrders
func NewGetCompanyJobOrdersRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyActiveJobOrdersRequest generates requests for GetCompanyActiveJobOrders
func NewGetCompanyActiveJobOrdersRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/jobs/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCompanyLogoRequest generates requests for DeleteCompanyLogo
func NewDeleteCompanyLogoRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/logo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyLogoRequest generates requests for GetCompanyLogo
func NewGetCompanyLogoRequest(server string, companyId int32, params *GetCompanyLogoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/logo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.W != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "w", runtime.ParamLocationQuery, *params.W); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.H != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "h", runtime.ParamLocationQuery, *params.H); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadCompanyLogoRequest generates requests for HeadCompanyLogo
func NewHeadCompanyLogoRequest(server string, companyId int32, params *HeadCompanyLogoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/logo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.W != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "w", runtime.ParamLocationQuery, *params.W); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.H != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "h", runtime.ParamLocationQuery, *params.H); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCompanyLogoRequestWithBody generates requests for UpdateCompanyLogo with any type of body
func NewUpdateCompanyLogoRequestWithBody(server string, companyId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/logo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompanyNotesRequest generates requests for GetCompanyNotes
func NewGetCompanyNotesRequest(server string, companyId int32, params *GetCompanyNotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NoteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NoteId", runtime.ParamLocationQuery, *params.NoteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCompanyNoteRequest calls the generic AddCompanyNote builder with application/json body
func NewAddCompanyNoteRequest(server string, companyId int32, body AddCompanyNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCompanyNoteRequestWithBody(server, companyId, "application/json", bodyReader)
}

// NewAddCompanyNoteRequestWithBody generates requests for AddCompanyNote with any type of body
func NewAddCompanyNoteRequestWithBody(server string, companyId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompanyPlacementsRequest generates requests for GetCompanyPlacements
func NewGetCompanyPlacementsRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/placements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyApprovedPlacementsRequest generates requests for GetCompanyApprovedPlacements
func NewGetCompanyApprovedPlacementsRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/placements/approved", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyRequisitionsRequest generates requests for GetCompanyRequisitions
func NewGetCompanyRequisitionsRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/requisitions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanySkillsRequest generates requests for GetCompanySkills
func NewGetCompanySkillsRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/skills", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCompanyStatusRequest calls the generic PutCompanyStatus builder with application/json body
func NewPutCompanyStatusRequest(server string, companyId int32, body PutCompanyStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCompanyStatusRequestWithBody(server, companyId, "application/json", bodyReader)
}

// NewPutCompanyStatusRequestWithBody generates requests for PutCompanyStatus with any type of body
func NewPutCompanyStatusRequestWithBody(server string, companyId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompanySubmissionsRequest generates requests for GetCompanySubmissions
func NewGetCompanySubmissionsRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/submissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanySubsidiariesRequest generates requests for GetCompanySubsidiaries
func NewGetCompanySubsidiariesRequest(server string, companyId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/subsidiaries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCompanyUserTaskRequest calls the generic AddCompanyUserTask builder with application/json body
func NewAddCompanyUserTaskRequest(server string, companyId int32, body AddCompanyUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCompanyUserTaskRequestWithBody(server, companyId, "application/json", bodyReader)
}

// NewAddCompanyUserTaskRequestWithBody generates requests for AddCompanyUserTask with any type of body
func NewAddCompanyUserTaskRequestWithBody(server string, companyId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/usertasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompanyUserTaskRequest generates requests for GetCompanyUserTask
func NewGetCompanyUserTaskRequest(server string, companyId int32, taskId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCompanyUserTaskRequest calls the generic UpdateCompanyUserTask builder with application/json body
func NewUpdateCompanyUserTaskRequest(server string, companyId int32, taskId int64, body UpdateCompanyUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCompanyUserTaskRequestWithBody(server, companyId, taskId, "application/json", bodyReader)
}

// NewUpdateCompanyUserTaskRequestWithBody generates requests for UpdateCompanyUserTask with any type of body
func NewUpdateCompanyUserTaskRequestWithBody(server string, companyId int32, taskId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCompanyWorkflowsRequest generates requests for ListCompanyWorkflows
func NewListCompanyWorkflowsRequest(server string, companyId int32, workflowType CompanyWorkflowType, params *ListCompanyWorkflowsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workflowType", runtime.ParamLocationPath, workflowType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/workflows/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WorkflowId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "WorkflowId", runtime.ParamLocationQuery, *params.WorkflowId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCompanyWorkflowRequest calls the generic AddCompanyWorkflow builder with application/json body
func NewAddCompanyWorkflowRequest(server string, companyId int32, workflowType CompanyWorkflowType, body AddCompanyWorkflowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCompanyWorkflowRequestWithBody(server, companyId, workflowType, "application/json", bodyReader)
}

// NewAddCompanyWorkflowRequestWithBody generates requests for AddCompanyWorkflow with any type of body
func NewAddCompanyWorkflowRequestWithBody(server string, companyId int32, workflowType CompanyWorkflowType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workflowType", runtime.ParamLocationPath, workflowType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/workflows/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompanyWorkflowRequest generates requests for GetCompanyWorkflow
func NewGetCompanyWorkflowRequest(server string, companyId int32, workflowType CompanyWorkflowType, workflowId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workflowType", runtime.ParamLocationPath, workflowType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "workflowId", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/workflows/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCompanyWorkflowRequest calls the generic UpdateCompanyWorkflow builder with application/json body
func NewUpdateCompanyWorkflowRequest(server string, companyId int32, workflowType CompanyWorkflowType, workflowId int32, body UpdateCompanyWorkflowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCompanyWorkflowRequestWithBody(server, companyId, workflowType, workflowId, "application/json", bodyReader)
}

// NewUpdateCompanyWorkflowRequestWithBody generates requests for UpdateCompanyWorkflow with any type of body
func NewUpdateCompanyWorkflowRequestWithBody(server string, companyId int32, workflowType CompanyWorkflowType, workflowId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workflowType", runtime.ParamLocationPath, workflowType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "workflowId", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s/workflows/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindContactsRequest generates requests for FindContacts
func NewFindContactsRequest(server string, params *FindContactsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ContactId", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Phone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Phone", runtime.ParamLocationQuery, *params.Phone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CompanyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HiringManager != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HiringManager", runtime.ParamLocationQuery, *params.HiringManager); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.ActionId", runtime.ParamLocationQuery, *params.PartnerActionActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionReference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Reference", runtime.ParamLocationQuery, *params.PartnerActionReference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionStage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Stage", runtime.ParamLocationQuery, *params.PartnerActionStage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionSubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.SubmittedAt", runtime.ParamLocationQuery, *params.PartnerActionSubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FolderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FolderId", runtime.ParamLocationQuery, *params.FolderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedBy", runtime.ParamLocationQuery, *params.CreatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedBy", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddContactRequest calls the generic AddContact builder with application/json body
func NewAddContactRequest(server string, params *AddContactParams, body AddContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddContactRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAddContactRequestWithBody generates requests for AddContact with any type of body
func NewAddContactRequestWithBody(server string, params *AddContactParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XAllowDuplicates != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Allow-Duplicates", runtime.ParamLocationHeader, *params.XAllowDuplicates)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Allow-Duplicates", headerParam0)
		}

	}

	return req, nil
}

// NewFindContactActivityRequest generates requests for FindContactActivity
func NewFindContactActivityRequest(server string, params *FindContactActivityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/activities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeDetails", runtime.ParamLocationQuery, *params.IncludeDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindContactActivitySettingsRequest generates requests for FindContactActivitySettings
func NewFindContactActivitySettingsRequest(server string, params *FindContactActivitySettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/activitysettings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactActivitySettingRequest generates requests for GetContactActivitySetting
func NewGetContactActivitySettingRequest(server string, settingId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "settingId", runtime.ParamLocationPath, settingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/activitysettings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletedContactsRequest generates requests for DeletedContacts
func NewDeletedContactsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/deleted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactCustomFieldListRequest generates requests for GetContactCustomFieldList
func NewGetContactCustomFieldListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/fields/custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutContactCustomFieldListRequest calls the generic PutContactCustomFieldList builder with application/json body
func NewPutContactCustomFieldListRequest(server string, fieldId int32, body PutContactCustomFieldListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutContactCustomFieldListRequestWithBody(server, fieldId, "application/json", bodyReader)
}

// NewPutContactCustomFieldListRequestWithBody generates requests for PutContactCustomFieldList with any type of body
func NewPutContactCustomFieldListRequestWithBody(server string, fieldId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/fields/custom/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactCustomFieldListItemRequest generates requests for GetContactCustomFieldListItem
func NewGetContactCustomFieldListItemRequest(server string, fieldId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/fields/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactAttachmentCategoryListRequest generates requests for GetContactAttachmentCategoryList
func NewGetContactAttachmentCategoryListRequest(server string, params *GetContactAttachmentCategoryListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/lists/attachmentcategory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactNoteTypeListRequest generates requests for GetContactNoteTypeList
func NewGetContactNoteTypeListRequest(server string, params *GetContactNoteTypeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/lists/notetype")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactSalutationListRequest generates requests for GetContactSalutationList
func NewGetContactSalutationListRequest(server string, params *GetContactSalutationListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/lists/salutation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactStatusListRequest generates requests for GetContactStatusList
func NewGetContactStatusListRequest(server string, params *GetContactStatusListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/lists/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Default != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Default", runtime.ParamLocationQuery, *params.Default); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactStatusListItemRequest generates requests for GetContactStatusListItem
func NewGetContactStatusListItemRequest(server string, statusId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statusId", runtime.ParamLocationPath, statusId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/lists/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactRequest generates requests for GetContact
func NewGetContactRequest(server string, contactId int32, params *GetContactParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContactRequest calls the generic UpdateContact builder with application/json body
func NewUpdateContactRequest(server string, contactId int32, params *UpdateContactParams, body UpdateContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContactRequestWithBody(server, contactId, params, "application/json", bodyReader)
}

// NewUpdateContactRequestWithBody generates requests for UpdateContact with any type of body
func NewUpdateContactRequestWithBody(server string, contactId int32, params *UpdateContactParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XAllowDuplicates != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Allow-Duplicates", runtime.ParamLocationHeader, *params.XAllowDuplicates)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Allow-Duplicates", headerParam0)
		}

	}

	return req, nil
}

// NewGetContactActivityByContactIdRequest generates requests for GetContactActivityByContactId
func NewGetContactActivityByContactIdRequest(server string, contactId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddContactActivityRequest calls the generic AddContactActivity builder with application/json body
func NewAddContactActivityRequest(server string, contactId int32, body AddContactActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddContactActivityRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewAddContactActivityRequestWithBody generates requests for AddContactActivity with any type of body
func NewAddContactActivityRequestWithBody(server string, contactId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactActivityRequest generates requests for GetContactActivity
func NewGetContactActivityRequest(server string, contactId int32, activityId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "activityId", runtime.ParamLocationPath, activityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/activities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindContactAttachmentsRequest generates requests for FindContactAttachments
func NewFindContactAttachmentsRequest(server string, contactId int32, params *FindContactAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Latest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Latest", runtime.ParamLocationQuery, *params.Latest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactAttachmentRequest generates requests for GetContactAttachment
func NewGetContactAttachmentRequest(server string, contactId int32, attach int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddContactAttachmentRequestWithBody generates requests for AddContactAttachment with any type of body
func NewAddContactAttachmentRequestWithBody(server string, contactId int32, attach ContactAttachmentType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateContactAttachmentRequest calls the generic UpdateContactAttachment builder with application/json body
func NewUpdateContactAttachmentRequest(server string, contactId int32, attach int64, body UpdateContactAttachmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContactAttachmentRequestWithBody(server, contactId, attach, "application/json", bodyReader)
}

// NewUpdateContactAttachmentRequestWithBody generates requests for UpdateContactAttachment with any type of body
func NewUpdateContactAttachmentRequestWithBody(server string, contactId int32, attach int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactInterviewsRequest generates requests for GetContactInterviews
func NewGetContactInterviewsRequest(server string, contactId int32, params *GetContactInterviewsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/interviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactJobOrdersRequest generates requests for GetContactJobOrders
func NewGetContactJobOrdersRequest(server string, contactId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactActiveJobOrdersRequest generates requests for GetContactActiveJobOrders
func NewGetContactActiveJobOrdersRequest(server string, contactId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/jobs/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactNotesRequest generates requests for GetContactNotes
func NewGetContactNotesRequest(server string, contactId int32, params *GetContactNotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NoteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NoteId", runtime.ParamLocationQuery, *params.NoteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddContactNoteRequest calls the generic AddContactNote builder with application/json body
func NewAddContactNoteRequest(server string, contactId int32, body AddContactNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddContactNoteRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewAddContactNoteRequestWithBody generates requests for AddContactNote with any type of body
func NewAddContactNoteRequestWithBody(server string, contactId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletteContactPhotoRequest generates requests for DeletteContactPhoto
func NewDeletteContactPhotoRequest(server string, contactId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/photo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactPhotoRequest generates requests for GetContactPhoto
func NewGetContactPhotoRequest(server string, contactId int32, params *GetContactPhotoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/photo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.W != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "w", runtime.ParamLocationQuery, *params.W); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.H != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "h", runtime.ParamLocationQuery, *params.H); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadContactPhotoRequest generates requests for HeadContactPhoto
func NewHeadContactPhotoRequest(server string, contactId int32, params *HeadContactPhotoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/photo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.W != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "w", runtime.ParamLocationQuery, *params.W); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.H != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "h", runtime.ParamLocationQuery, *params.H); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContactPhotoRequestWithBody generates requests for UpdateContactPhoto with any type of body
func NewUpdateContactPhotoRequestWithBody(server string, contactId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/photo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactSkillsRequest generates requests for GetContactSkills
func NewGetContactSkillsRequest(server string, contactId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/skills", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteContactSkillsRequest calls the generic DeleteContactSkills builder with application/json body
func NewDeleteContactSkillsRequest(server string, contactId int32, body DeleteContactSkillsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteContactSkillsRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewDeleteContactSkillsRequestWithBody generates requests for DeleteContactSkills with any type of body
func NewDeleteContactSkillsRequestWithBody(server string, contactId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/skills", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutContactSkillsRequest calls the generic PutContactSkills builder with application/json body
func NewPutContactSkillsRequest(server string, contactId int32, body PutContactSkillsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutContactSkillsRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewPutContactSkillsRequestWithBody generates requests for PutContactSkills with any type of body
func NewPutContactSkillsRequestWithBody(server string, contactId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/skills", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContactCategoryRequest generates requests for DeleteContactCategory
func NewDeleteContactCategoryRequest(server string, contactId int32, categoryId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/skills/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutContactStatusRequest calls the generic PutContactStatus builder with application/json body
func NewPutContactStatusRequest(server string, contactId int32, body PutContactStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutContactStatusRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewPutContactStatusRequestWithBody generates requests for PutContactStatus with any type of body
func NewPutContactStatusRequestWithBody(server string, contactId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddContactUserTaskRequest calls the generic AddContactUserTask builder with application/json body
func NewAddContactUserTaskRequest(server string, contactId int32, body AddContactUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddContactUserTaskRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewAddContactUserTaskRequestWithBody generates requests for AddContactUserTask with any type of body
func NewAddContactUserTaskRequestWithBody(server string, contactId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/usertasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactUserTaskRequest generates requests for GetContactUserTask
func NewGetContactUserTaskRequest(server string, contactId int32, taskId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContactUserTaskRequest calls the generic UpdateContactUserTask builder with application/json body
func NewUpdateContactUserTaskRequest(server string, contactId int32, taskId int64, body UpdateContactUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContactUserTaskRequestWithBody(server, contactId, taskId, "application/json", bodyReader)
}

// NewUpdateContactUserTaskRequestWithBody generates requests for UpdateContactUserTask with any type of body
func NewUpdateContactUserTaskRequestWithBody(server string, contactId int32, taskId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindCountriesRequest generates requests for FindCountries
func NewFindCountriesRequest(server string, params *FindCountriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/countries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Code != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Code", runtime.ParamLocationQuery, *params.Code); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFloatsRequest generates requests for GetFloats
func NewGetFloatsRequest(server string, params *GetFloatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/floats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FloatId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FloatId", runtime.ParamLocationQuery, *params.FloatId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CandidateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CandidateId", runtime.ParamLocationQuery, *params.CandidateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CompanyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFloatRequest generates requests for GetFloat
func NewGetFloatRequest(server string, floatId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "floatId", runtime.ParamLocationPath, floatId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/floats/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindFoldersRequest generates requests for FindFolders
func NewFindFoldersRequest(server string, params *FindFoldersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FolderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FolderId", runtime.ParamLocationQuery, *params.FolderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobId", runtime.ParamLocationQuery, *params.JobId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CandidateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CandidateId", runtime.ParamLocationQuery, *params.CandidateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ApplicationId", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlacementId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PlacementId", runtime.ParamLocationQuery, *params.PlacementId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CompanyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ContactId", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwnerUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OwnerUserId", runtime.ParamLocationQuery, *params.OwnerUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SharedWithUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SharedWithUserId", runtime.ParamLocationQuery, *params.SharedWithUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwnerStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OwnerStatus", runtime.ParamLocationQuery, *params.OwnerStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmbedMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EmbedMode", runtime.ParamLocationQuery, *params.EmbedMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFolderRequest generates requests for GetFolder
func NewGetFolderRequest(server string, folderId int64, params *GetFolderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "folderId", runtime.ParamLocationPath, folderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EmbedMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EmbedMode", runtime.ParamLocationQuery, *params.EmbedMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchFolderRequest calls the generic PatchFolder builder with application/json body
func NewPatchFolderRequest(server string, folderId int64, body PatchFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchFolderRequestWithBody(server, folderId, "application/json", bodyReader)
}

// NewPatchFolderRequestWithBody generates requests for PatchFolder with any type of body
func NewPatchFolderRequestWithBody(server string, folderId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "folderId", runtime.ParamLocationPath, folderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindInterviewsRequest generates requests for FindInterviews
func NewFindInterviewsRequest(server string, params *FindInterviewsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interviews")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InterviewId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InterviewId", runtime.ParamLocationQuery, *params.InterviewId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobId", runtime.ParamLocationQuery, *params.JobId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ContactId", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CandidateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CandidateId", runtime.ParamLocationQuery, *params.CandidateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ApplicationId", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartAt", runtime.ParamLocationQuery, *params.StartAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndAt", runtime.ParamLocationQuery, *params.EndAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Location != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Location", runtime.ParamLocationQuery, *params.Location); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedBy", runtime.ParamLocationQuery, *params.CreatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteInterviewRequest generates requests for DeleteInterview
func NewDeleteInterviewRequest(server string, interviewId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interviewId", runtime.ParamLocationPath, interviewId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interviews/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInterviewRequest generates requests for GetInterview
func NewGetInterviewRequest(server string, interviewId int32, applicationId int64, params *GetInterviewParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interviewId", runtime.ParamLocationPath, interviewId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interviews/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInterviewEvaluationsRequest generates requests for GetInterviewEvaluations
func NewGetInterviewEvaluationsRequest(server string, interviewId int32, applicationId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interviewId", runtime.ParamLocationPath, interviewId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interviews/%s/%s/evaluations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExternalInterviewEvaluationRequest generates requests for GetExternalInterviewEvaluation
func NewGetExternalInterviewEvaluationRequest(server string, interviewId int32, applicationId int64, contactId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interviewId", runtime.ParamLocationPath, interviewId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interviews/%s/%s/evaluations/external/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutExternalInterviewEvaluationRequest calls the generic PutExternalInterviewEvaluation builder with application/json body
func NewPutExternalInterviewEvaluationRequest(server string, interviewId int32, applicationId int64, contactId int32, body PutExternalInterviewEvaluationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutExternalInterviewEvaluationRequestWithBody(server, interviewId, applicationId, contactId, "application/json", bodyReader)
}

// NewPutExternalInterviewEvaluationRequestWithBody generates requests for PutExternalInterviewEvaluation with any type of body
func NewPutExternalInterviewEvaluationRequestWithBody(server string, interviewId int32, applicationId int64, contactId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interviewId", runtime.ParamLocationPath, interviewId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interviews/%s/%s/evaluations/external/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInternalInterviewEvaluationRequest generates requests for GetInternalInterviewEvaluation
func NewGetInternalInterviewEvaluationRequest(server string, interviewId int32, applicationId int64, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interviewId", runtime.ParamLocationPath, interviewId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interviews/%s/%s/evaluations/internal/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInternalInterviewEvaluationRequest calls the generic PutInternalInterviewEvaluation builder with application/json body
func NewPutInternalInterviewEvaluationRequest(server string, interviewId int32, applicationId int64, userId int32, body PutInternalInterviewEvaluationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInternalInterviewEvaluationRequestWithBody(server, interviewId, applicationId, userId, "application/json", bodyReader)
}

// NewPutInternalInterviewEvaluationRequestWithBody generates requests for PutInternalInterviewEvaluation with any type of body
func NewPutInternalInterviewEvaluationRequestWithBody(server string, interviewId int32, applicationId int64, userId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interviewId", runtime.ParamLocationPath, interviewId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interviews/%s/%s/evaluations/internal/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobAdsRequest generates requests for GetJobAds
func NewGetJobAdsRequest(server string, params *GetJobAdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PartnerActionActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.ActionId", runtime.ParamLocationQuery, *params.PartnerActionActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionReference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Reference", runtime.ParamLocationQuery, *params.PartnerActionReference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionStage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Stage", runtime.ParamLocationQuery, *params.PartnerActionStage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionSubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.SubmittedAt", runtime.ParamLocationQuery, *params.PartnerActionSubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobAdDraftRequest calls the generic AddJobAdDraft builder with application/json body
func NewAddJobAdDraftRequest(server string, body AddJobAdDraftJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddJobAdDraftRequestWithBody(server, "application/json", bodyReader)
}

// NewAddJobAdDraftRequestWithBody generates requests for AddJobAdDraft with any type of body
func NewAddJobAdDraftRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobAdRequest generates requests for GetJobAd
func NewGetJobAdRequest(server string, adId int32, params *GetJobAdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "adId", runtime.ParamLocationPath, adId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJobAdDraftRequest calls the generic UpdateJobAdDraft builder with application/json body
func NewUpdateJobAdDraftRequest(server string, adId int32, body UpdateJobAdDraftJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJobAdDraftRequestWithBody(server, adId, "application/json", bodyReader)
}

// NewUpdateJobAdDraftRequestWithBody generates requests for UpdateJobAdDraft with any type of body
func NewUpdateJobAdDraftRequestWithBody(server string, adId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "adId", runtime.ParamLocationPath, adId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobAdJobApplicationsRequest generates requests for GetJobAdJobApplications
func NewGetJobAdJobApplicationsRequest(server string, adId int32, params *GetJobAdJobApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "adId", runtime.ParamLocationPath, adId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobads/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobAdActiveJobApplicationsRequest generates requests for GetJobAdActiveJobApplications
func NewGetJobAdActiveJobApplicationsRequest(server string, adId int32, params *GetJobAdActiveJobApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "adId", runtime.ParamLocationPath, adId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobads/%s/applications/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindJobBoardsRequest generates requests for FindJobBoards
func NewFindJobBoardsRequest(server string, params *FindJobBoardsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobboards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BoardId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BoardId", runtime.ParamLocationQuery, *params.BoardId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobBoardRequest generates requests for GetJobBoard
func NewGetJobBoardRequest(server string, boardId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "boardId", runtime.ParamLocationPath, boardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindJobBoardJobAdsRequest generates requests for FindJobBoardJobAds
func NewFindJobBoardJobAdsRequest(server string, boardId int32, params *FindJobBoardJobAdsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "boardId", runtime.ParamLocationPath, boardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobboards/%s/ads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AdId", runtime.ParamLocationQuery, *params.AdId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalHotJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Portal.HotJob", runtime.ParamLocationQuery, *params.PortalHotJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Portal.Value", runtime.ParamLocationQuery, *params.PortalValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Portal.ValueId", runtime.ParamLocationQuery, *params.PortalValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Portal.Template", runtime.ParamLocationQuery, *params.PortalTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PostedAt", runtime.ParamLocationQuery, *params.PostedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpiresAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExpiresAt", runtime.ParamLocationQuery, *params.ExpiresAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobBoardJobAdRequest generates requests for GetJobBoardJobAd
func NewGetJobBoardJobAdRequest(server string, boardId int32, adId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "boardId", runtime.ParamLocationPath, boardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "adId", runtime.ParamLocationPath, adId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobboards/%s/ads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitJobBoardJobApplicationRequest calls the generic SubmitJobBoardJobApplication builder with application/json body
func NewSubmitJobBoardJobApplicationRequest(server string, boardId int32, adId int32, body SubmitJobBoardJobApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitJobBoardJobApplicationRequestWithBody(server, boardId, adId, "application/json", bodyReader)
}

// NewSubmitJobBoardJobApplicationRequestWithBody generates requests for SubmitJobBoardJobApplication with any type of body
func NewSubmitJobBoardJobApplicationRequestWithBody(server string, boardId int32, adId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "boardId", runtime.ParamLocationPath, boardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "adId", runtime.ParamLocationPath, adId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobboards/%s/ads/%s/applications", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAttachJobBoardJobApplicationDocumentRequestWithBody generates requests for AttachJobBoardJobApplicationDocument with any type of body
func NewAttachJobBoardJobApplicationDocumentRequestWithBody(server string, boardId int32, adId int32, applicationId int64, attachmentType SubmitCandidateAttachmentType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "boardId", runtime.ParamLocationPath, boardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "adId", runtime.ParamLocationPath, adId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "attachmentType", runtime.ParamLocationPath, attachmentType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobboards/%s/ads/%s/applications/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindJobOrdersRequest generates requests for FindJobOrders
func NewFindJobOrdersRequest(server string, params *FindJobOrdersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.JobId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobId", runtime.ParamLocationQuery, *params.JobId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobTitle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobTitle", runtime.ParamLocationQuery, *params.JobTitle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyCompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Company.CompanyId", runtime.ParamLocationQuery, *params.CompanyCompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Company.Name", runtime.ParamLocationQuery, *params.CompanyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CompanyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ContactId", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.ActionId", runtime.ParamLocationQuery, *params.PartnerActionActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionReference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Reference", runtime.ParamLocationQuery, *params.PartnerActionReference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionStage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Stage", runtime.ParamLocationQuery, *params.PartnerActionStage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionSubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.SubmittedAt", runtime.ParamLocationQuery, *params.PartnerActionSubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserFavourite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserFavourite", runtime.ParamLocationQuery, *params.UserFavourite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FolderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FolderId", runtime.ParamLocationQuery, *params.FolderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwnerUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OwnerUserId", runtime.ParamLocationQuery, *params.OwnerUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecruiterUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RecruiterUserId", runtime.ParamLocationQuery, *params.RecruiterUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedBy", runtime.ParamLocationQuery, *params.CreatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedBy", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClosedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ClosedBy", runtime.ParamLocationQuery, *params.ClosedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClosedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ClosedAt", runtime.ParamLocationQuery, *params.ClosedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobOrderRequest calls the generic AddJobOrder builder with application/json body
func NewAddJobOrderRequest(server string, body AddJobOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddJobOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewAddJobOrderRequestWithBody generates requests for AddJobOrder with any type of body
func NewAddJobOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindJobOrderActivityRequest generates requests for FindJobOrderActivity
func NewFindJobOrderActivityRequest(server string, params *FindJobOrderActivityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/activities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeDetails", runtime.ParamLocationQuery, *params.IncludeDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindJobOrderActivitySettingsRequest generates requests for FindJobOrderActivitySettings
func NewFindJobOrderActivitySettingsRequest(server string, params *FindJobOrderActivitySettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/activitysettings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderActivitySettingRequest generates requests for GetJobOrderActivitySetting
func NewGetJobOrderActivitySettingRequest(server string, settingId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "settingId", runtime.ParamLocationPath, settingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/activitysettings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletedJobOrdersRequest generates requests for DeletedJobOrders
func NewDeletedJobOrdersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/deleted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderCustomFieldListRequest generates requests for GetJobOrderCustomFieldList
func NewGetJobOrderCustomFieldListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/fields/custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutJobOrderCustomFieldListRequest calls the generic PutJobOrderCustomFieldList builder with application/json body
func NewPutJobOrderCustomFieldListRequest(server string, fieldId int32, body PutJobOrderCustomFieldListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJobOrderCustomFieldListRequestWithBody(server, fieldId, "application/json", bodyReader)
}

// NewPutJobOrderCustomFieldListRequestWithBody generates requests for PutJobOrderCustomFieldList with any type of body
func NewPutJobOrderCustomFieldListRequestWithBody(server string, fieldId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/fields/custom/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobOrderCustomFieldItemRequest generates requests for GetJobOrderCustomFieldItem
func NewGetJobOrderCustomFieldItemRequest(server string, fieldId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/fields/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderAttachmentCategoryListRequest generates requests for GetJobOrderAttachmentCategoryList
func NewGetJobOrderAttachmentCategoryListRequest(server string, params *GetJobOrderAttachmentCategoryListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/lists/attachmentcategory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderNoteTypeListRequest generates requests for GetJobOrderNoteTypeList
func NewGetJobOrderNoteTypeListRequest(server string, params *GetJobOrderNoteTypeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/lists/notetype")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderSourceListRequest generates requests for GetJobOrderSourceList
func NewGetJobOrderSourceListRequest(server string, params *GetJobOrderSourceListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/lists/source")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderStatusListRequest generates requests for GetJobOrderStatusList
func NewGetJobOrderStatusListRequest(server string, params *GetJobOrderStatusListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/lists/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Default != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Default", runtime.ParamLocationQuery, *params.Default); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderStatusItemRequest generates requests for GetJobOrderStatusItem
func NewGetJobOrderStatusItemRequest(server string, statusId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statusId", runtime.ParamLocationPath, statusId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/lists/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderRequest generates requests for GetJobOrder
func NewGetJobOrderRequest(server string, jobId int32, params *GetJobOrderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJobOrderRequest calls the generic UpdateJobOrder builder with application/json body
func NewUpdateJobOrderRequest(server string, jobId int32, body UpdateJobOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJobOrderRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewUpdateJobOrderRequestWithBody generates requests for UpdateJobOrder with any type of body
func NewUpdateJobOrderRequestWithBody(server string, jobId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobOrderActivityByJobIdRequest generates requests for GetJobOrderActivityByJobId
func NewGetJobOrderActivityByJobIdRequest(server string, jobId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobOrderActivityRequest calls the generic AddJobOrderActivity builder with application/json body
func NewAddJobOrderActivityRequest(server string, jobId int32, body AddJobOrderActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddJobOrderActivityRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewAddJobOrderActivityRequestWithBody generates requests for AddJobOrderActivity with any type of body
func NewAddJobOrderActivityRequestWithBody(server string, jobId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobOrderActivityRequest generates requests for GetJobOrderActivity
func NewGetJobOrderActivityRequest(server string, jobId int32, activityId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "activityId", runtime.ParamLocationPath, activityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/activities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderJobApplicationsRequest generates requests for GetJobOrderJobApplications
func NewGetJobOrderJobApplicationsRequest(server string, jobId int32, params *GetJobOrderJobApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobOrderCandidatesRequest calls the generic AddJobOrderCandidates builder with application/json body
func NewAddJobOrderCandidatesRequest(server string, jobId int32, body AddJobOrderCandidatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddJobOrderCandidatesRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewAddJobOrderCandidatesRequestWithBody generates requests for AddJobOrderCandidates with any type of body
func NewAddJobOrderCandidatesRequestWithBody(server string, jobId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobOrderActiveJobApplicationsRequest generates requests for GetJobOrderActiveJobApplications
func NewGetJobOrderActiveJobApplicationsRequest(server string, jobId int32, params *GetJobOrderActiveJobApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/applications/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitJobOrderCandidateRequest calls the generic SubmitJobOrderCandidate builder with application/json body
func NewSubmitJobOrderCandidateRequest(server string, jobId int32, body SubmitJobOrderCandidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitJobOrderCandidateRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewSubmitJobOrderCandidateRequestWithBody generates requests for SubmitJobOrderCandidate with any type of body
func NewSubmitJobOrderCandidateRequestWithBody(server string, jobId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/applications/submit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindJobOrderAttachmentsRequest generates requests for FindJobOrderAttachments
func NewFindJobOrderAttachmentsRequest(server string, jobId int32, params *FindJobOrderAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Latest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Latest", runtime.ParamLocationQuery, *params.Latest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderAttachmentRequest generates requests for GetJobOrderAttachment
func NewGetJobOrderAttachmentRequest(server string, jobId int32, attach int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobOrderAttachmentRequestWithBody generates requests for AddJobOrderAttachment with any type of body
func NewAddJobOrderAttachmentRequestWithBody(server string, jobId int32, attach JobOrderAttachmentType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateJobOrderAttachmentRequest calls the generic UpdateJobOrderAttachment builder with application/json body
func NewUpdateJobOrderAttachmentRequest(server string, jobId int32, attach int64, body UpdateJobOrderAttachmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJobOrderAttachmentRequestWithBody(server, jobId, attach, "application/json", bodyReader)
}

// NewUpdateJobOrderAttachmentRequestWithBody generates requests for UpdateJobOrderAttachment with any type of body
func NewUpdateJobOrderAttachmentRequestWithBody(server string, jobId int32, attach int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInvoicesRequest generates requests for Invoices
func NewInvoicesRequest(server string, jobId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderInvoiceRequest generates requests for GetJobOrderInvoice
func NewGetJobOrderInvoiceRequest(server string, jobId int32, invoiceId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/invoices/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderNotesRequest generates requests for GetJobOrderNotes
func NewGetJobOrderNotesRequest(server string, jobId int32, params *GetJobOrderNotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NoteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NoteId", runtime.ParamLocationQuery, *params.NoteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobOrderNoteRequest calls the generic AddJobOrderNote builder with application/json body
func NewAddJobOrderNoteRequest(server string, jobId int32, body AddJobOrderNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddJobOrderNoteRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewAddJobOrderNoteRequestWithBody generates requests for AddJobOrderNote with any type of body
func NewAddJobOrderNoteRequestWithBody(server string, jobId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobOrderPlacementsRequest generates requests for GetJobOrderPlacements
func NewGetJobOrderPlacementsRequest(server string, jobId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/placements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderApprovedPlacementsRequest generates requests for GetJobOrderApprovedPlacements
func NewGetJobOrderApprovedPlacementsRequest(server string, jobId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/placements/approved", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutJobOrderStatusRequest calls the generic PutJobOrderStatus builder with application/json body
func NewPutJobOrderStatusRequest(server string, jobId int32, body PutJobOrderStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJobOrderStatusRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewPutJobOrderStatusRequestWithBody generates requests for PutJobOrderStatus with any type of body
func NewPutJobOrderStatusRequestWithBody(server string, jobId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobOrderSubmissionsRequest generates requests for GetJobOrderSubmissions
func NewGetJobOrderSubmissionsRequest(server string, jobId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/submissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobOrderUserTaskRequest calls the generic AddJobOrderUserTask builder with application/json body
func NewAddJobOrderUserTaskRequest(server string, jobId int32, body AddJobOrderUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddJobOrderUserTaskRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewAddJobOrderUserTaskRequestWithBody generates requests for AddJobOrderUserTask with any type of body
func NewAddJobOrderUserTaskRequestWithBody(server string, jobId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/usertasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobOrderUserTaskRequest generates requests for GetJobOrderUserTask
func NewGetJobOrderUserTaskRequest(server string, jobId int32, taskId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJobOrderUserTaskRequest calls the generic UpdateJobOrderUserTask builder with application/json body
func NewUpdateJobOrderUserTaskRequest(server string, jobId int32, taskId int64, body UpdateJobOrderUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJobOrderUserTaskRequestWithBody(server, jobId, taskId, "application/json", bodyReader)
}

// NewUpdateJobOrderUserTaskRequestWithBody generates requests for UpdateJobOrderUserTask with any type of body
func NewUpdateJobOrderUserTaskRequestWithBody(server string, jobId int32, taskId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJobOrderPayrollBillingRequest generates requests for DeleteJobOrderPayrollBilling
func NewDeleteJobOrderPayrollBillingRequest(server string, jobOrderId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobOrderId", runtime.ParamLocationPath, jobOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/ratecard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobOrderPayrollBillingRequest generates requests for GetJobOrderPayrollBilling
func NewGetJobOrderPayrollBillingRequest(server string, jobOrderId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobOrderId", runtime.ParamLocationPath, jobOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/ratecard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddJobOrderPayrollBillingRequest generates requests for AddJobOrderPayrollBilling
func NewAddJobOrderPayrollBillingRequest(server string, jobOrderId int32, rateCardId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobOrderId", runtime.ParamLocationPath, jobOrderId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rateCardId", runtime.ParamLocationPath, rateCardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/ratecard/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJobOrderPayrollBillingRequest generates requests for UpdateJobOrderPayrollBilling
func NewUpdateJobOrderPayrollBillingRequest(server string, jobOrderId int32, rateCardId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobOrderId", runtime.ParamLocationPath, jobOrderId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rateCardId", runtime.ParamLocationPath, rateCardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/ratecard/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindLocationsRequest generates requests for FindLocations
func NewFindLocationsRequest(server string, params *FindLocationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LocationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "LocationId", runtime.ParamLocationQuery, *params.LocationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindNotesRequest generates requests for FindNotes
func NewFindNotesRequest(server string, params *FindNotesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CandidateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CandidateId", runtime.ParamLocationQuery, *params.CandidateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CompanyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ContactId", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobId", runtime.ParamLocationQuery, *params.JobId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RequisitionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RequisitionId", runtime.ParamLocationQuery, *params.RequisitionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ApplicationId", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlacementId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PlacementId", runtime.ParamLocationQuery, *params.PlacementId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EntityType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EntityType", runtime.ParamLocationQuery, *params.EntityType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NoteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NoteId", runtime.ParamLocationQuery, *params.NoteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddNoteRequest calls the generic AddNote builder with application/json body
func NewAddNoteRequest(server string, body AddNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddNoteRequestWithBody(server, "application/json", bodyReader)
}

// NewAddNoteRequestWithBody generates requests for AddNote with any type of body
func NewAddNoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNoteRequest generates requests for GetNote
func NewGetNoteRequest(server string, noteId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "noteId", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNoteRequest calls the generic UpdateNote builder with application/json body
func NewUpdateNoteRequest(server string, noteId openapi_types.UUID, body UpdateNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNoteRequestWithBody(server, noteId, "application/json", bodyReader)
}

// NewUpdateNoteRequestWithBody generates requests for UpdateNote with any type of body
func NewUpdateNoteRequestWithBody(server string, noteId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "noteId", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddNoteAttachmentRequestWithBody generates requests for AddNoteAttachment with any type of body
func NewAddNoteAttachmentRequestWithBody(server string, noteId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "noteId", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notes/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNoteAttachmentRequest generates requests for GetNoteAttachment
func NewGetNoteAttachmentRequest(server string, noteId openapi_types.UUID, attachmentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "noteId", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notes/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindOpportunitiesRequest generates requests for FindOpportunities
func NewFindOpportunitiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/opportunities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddOpportunityRequest calls the generic AddOpportunity builder with application/json body
func NewAddOpportunityRequest(server string, body AddOpportunityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddOpportunityRequestWithBody(server, "application/json", bodyReader)
}

// NewAddOpportunityRequestWithBody generates requests for AddOpportunity with any type of body
func NewAddOpportunityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/opportunities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpportunityRequest generates requests for GetOpportunity
func NewGetOpportunityRequest(server string, opportunityId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "opportunityId", runtime.ParamLocationPath, opportunityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/opportunities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOpportunityRequest calls the generic UpdateOpportunity builder with application/json body
func NewUpdateOpportunityRequest(server string, opportunityId openapi_types.UUID, body UpdateOpportunityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOpportunityRequestWithBody(server, opportunityId, "application/json", bodyReader)
}

// NewUpdateOpportunityRequestWithBody generates requests for UpdateOpportunity with any type of body
func NewUpdateOpportunityRequestWithBody(server string, opportunityId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "opportunityId", runtime.ParamLocationPath, opportunityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/opportunities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindPartnerActionsRequest generates requests for FindPartnerActions
func NewFindPartnerActionsRequest(server string, params *FindPartnerActionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ActionType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ActionType", runtime.ParamLocationQuery, *params.ActionType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ActionId", runtime.ParamLocationQuery, *params.ActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPartnerActionJobApplicationsRequest generates requests for GetPartnerActionJobApplications
func NewGetPartnerActionJobApplicationsRequest(server string, actionId openapi_types.UUID, params *GetPartnerActionJobApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Stage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Stage", runtime.ParamLocationQuery, *params.Stage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SubmittedAt", runtime.ParamLocationQuery, *params.SubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompleteJobApplicationPartnerActionRequest calls the generic CompleteJobApplicationPartnerAction builder with application/json body
func NewCompleteJobApplicationPartnerActionRequest(server string, actionId openapi_types.UUID, applicationId int64, body CompleteJobApplicationPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteJobApplicationPartnerActionRequestWithBody(server, actionId, applicationId, "application/json", bodyReader)
}

// NewCompleteJobApplicationPartnerActionRequestWithBody generates requests for CompleteJobApplicationPartnerAction with any type of body
func NewCompleteJobApplicationPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/applications/%s/complete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProgressJobApplicationPartnerActionRequest calls the generic ProgressJobApplicationPartnerAction builder with application/json body
func NewProgressJobApplicationPartnerActionRequest(server string, actionId openapi_types.UUID, applicationId int64, body ProgressJobApplicationPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProgressJobApplicationPartnerActionRequestWithBody(server, actionId, applicationId, "application/json", bodyReader)
}

// NewProgressJobApplicationPartnerActionRequestWithBody generates requests for ProgressJobApplicationPartnerAction with any type of body
func NewProgressJobApplicationPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/applications/%s/progress", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRejectJobApplicationPartnerActionRequest calls the generic RejectJobApplicationPartnerAction builder with application/json body
func NewRejectJobApplicationPartnerActionRequest(server string, actionId openapi_types.UUID, applicationId int64, body RejectJobApplicationPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRejectJobApplicationPartnerActionRequestWithBody(server, actionId, applicationId, "application/json", bodyReader)
}

// NewRejectJobApplicationPartnerActionRequestWithBody generates requests for RejectJobApplicationPartnerAction with any type of body
func NewRejectJobApplicationPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/applications/%s/reject", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPartnerActionCandidatesRequest generates requests for GetPartnerActionCandidates
func NewGetPartnerActionCandidatesRequest(server string, actionId openapi_types.UUID, params *GetPartnerActionCandidatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/candidates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Stage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Stage", runtime.ParamLocationQuery, *params.Stage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SubmittedAt", runtime.ParamLocationQuery, *params.SubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompleteCandidatePartnerActionRequest calls the generic CompleteCandidatePartnerAction builder with application/json body
func NewCompleteCandidatePartnerActionRequest(server string, actionId openapi_types.UUID, candidateId int32, body CompleteCandidatePartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteCandidatePartnerActionRequestWithBody(server, actionId, candidateId, "application/json", bodyReader)
}

// NewCompleteCandidatePartnerActionRequestWithBody generates requests for CompleteCandidatePartnerAction with any type of body
func NewCompleteCandidatePartnerActionRequestWithBody(server string, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/candidates/%s/complete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProgressCandidatePartnerActionRequest calls the generic ProgressCandidatePartnerAction builder with application/json body
func NewProgressCandidatePartnerActionRequest(server string, actionId openapi_types.UUID, candidateId int32, body ProgressCandidatePartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProgressCandidatePartnerActionRequestWithBody(server, actionId, candidateId, "application/json", bodyReader)
}

// NewProgressCandidatePartnerActionRequestWithBody generates requests for ProgressCandidatePartnerAction with any type of body
func NewProgressCandidatePartnerActionRequestWithBody(server string, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/candidates/%s/progress", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRejectCandidatePartnerActionRequest calls the generic RejectCandidatePartnerAction builder with application/json body
func NewRejectCandidatePartnerActionRequest(server string, actionId openapi_types.UUID, candidateId int32, body RejectCandidatePartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRejectCandidatePartnerActionRequestWithBody(server, actionId, candidateId, "application/json", bodyReader)
}

// NewRejectCandidatePartnerActionRequestWithBody generates requests for RejectCandidatePartnerAction with any type of body
func NewRejectCandidatePartnerActionRequestWithBody(server string, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "candidateId", runtime.ParamLocationPath, candidateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/candidates/%s/reject", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPartnerActionCompaniesRequest generates requests for GetPartnerActionCompanies
func NewGetPartnerActionCompaniesRequest(server string, actionId openapi_types.UUID, params *GetPartnerActionCompaniesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/companies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Stage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Stage", runtime.ParamLocationQuery, *params.Stage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SubmittedAt", runtime.ParamLocationQuery, *params.SubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompleteCompanyPartnerActionRequest calls the generic CompleteCompanyPartnerAction builder with application/json body
func NewCompleteCompanyPartnerActionRequest(server string, actionId openapi_types.UUID, companyId int32, body CompleteCompanyPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteCompanyPartnerActionRequestWithBody(server, actionId, companyId, "application/json", bodyReader)
}

// NewCompleteCompanyPartnerActionRequestWithBody generates requests for CompleteCompanyPartnerAction with any type of body
func NewCompleteCompanyPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/companies/%s/complete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProgressCompanyPartnerActionRequest calls the generic ProgressCompanyPartnerAction builder with application/json body
func NewProgressCompanyPartnerActionRequest(server string, actionId openapi_types.UUID, companyId int32, body ProgressCompanyPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProgressCompanyPartnerActionRequestWithBody(server, actionId, companyId, "application/json", bodyReader)
}

// NewProgressCompanyPartnerActionRequestWithBody generates requests for ProgressCompanyPartnerAction with any type of body
func NewProgressCompanyPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/companies/%s/progress", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRejectCompanyPartnerActionRequest calls the generic RejectCompanyPartnerAction builder with application/json body
func NewRejectCompanyPartnerActionRequest(server string, actionId openapi_types.UUID, companyId int32, body RejectCompanyPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRejectCompanyPartnerActionRequestWithBody(server, actionId, companyId, "application/json", bodyReader)
}

// NewRejectCompanyPartnerActionRequestWithBody generates requests for RejectCompanyPartnerAction with any type of body
func NewRejectCompanyPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/companies/%s/reject", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPartnerActionContactsRequest generates requests for GetPartnerActionContacts
func NewGetPartnerActionContactsRequest(server string, actionId openapi_types.UUID, params *GetPartnerActionContactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Stage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Stage", runtime.ParamLocationQuery, *params.Stage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SubmittedAt", runtime.ParamLocationQuery, *params.SubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompleteContactPartnerActionRequest calls the generic CompleteContactPartnerAction builder with application/json body
func NewCompleteContactPartnerActionRequest(server string, actionId openapi_types.UUID, contactId int32, body CompleteContactPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteContactPartnerActionRequestWithBody(server, actionId, contactId, "application/json", bodyReader)
}

// NewCompleteContactPartnerActionRequestWithBody generates requests for CompleteContactPartnerAction with any type of body
func NewCompleteContactPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/contacts/%s/complete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProgressContactPartnerActionRequest calls the generic ProgressContactPartnerAction builder with application/json body
func NewProgressContactPartnerActionRequest(server string, actionId openapi_types.UUID, contactId int32, body ProgressContactPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProgressContactPartnerActionRequestWithBody(server, actionId, contactId, "application/json", bodyReader)
}

// NewProgressContactPartnerActionRequestWithBody generates requests for ProgressContactPartnerAction with any type of body
func NewProgressContactPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/contacts/%s/progress", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRejectContactPartnerActionRequest calls the generic RejectContactPartnerAction builder with application/json body
func NewRejectContactPartnerActionRequest(server string, actionId openapi_types.UUID, contactId int32, body RejectContactPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRejectContactPartnerActionRequestWithBody(server, actionId, contactId, "application/json", bodyReader)
}

// NewRejectContactPartnerActionRequestWithBody generates requests for RejectContactPartnerAction with any type of body
func NewRejectContactPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/contacts/%s/reject", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPartnerActionJobAdsRequest generates requests for GetPartnerActionJobAds
func NewGetPartnerActionJobAdsRequest(server string, actionId openapi_types.UUID, params *GetPartnerActionJobAdsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/jobads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Stage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Stage", runtime.ParamLocationQuery, *params.Stage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SubmittedAt", runtime.ParamLocationQuery, *params.SubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompleteJobAdPartnerActionRequest calls the generic CompleteJobAdPartnerAction builder with application/json body
func NewCompleteJobAdPartnerActionRequest(server string, actionId openapi_types.UUID, adId int32, body CompleteJobAdPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteJobAdPartnerActionRequestWithBody(server, actionId, adId, "application/json", bodyReader)
}

// NewCompleteJobAdPartnerActionRequestWithBody generates requests for CompleteJobAdPartnerAction with any type of body
func NewCompleteJobAdPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "adId", runtime.ParamLocationPath, adId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/jobads/%s/complete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProgressJobAdPartnerActionRequest calls the generic ProgressJobAdPartnerAction builder with application/json body
func NewProgressJobAdPartnerActionRequest(server string, actionId openapi_types.UUID, adId int32, body ProgressJobAdPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProgressJobAdPartnerActionRequestWithBody(server, actionId, adId, "application/json", bodyReader)
}

// NewProgressJobAdPartnerActionRequestWithBody generates requests for ProgressJobAdPartnerAction with any type of body
func NewProgressJobAdPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "adId", runtime.ParamLocationPath, adId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/jobads/%s/progress", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRejectJobAdPartnerActionRequest calls the generic RejectJobAdPartnerAction builder with application/json body
func NewRejectJobAdPartnerActionRequest(server string, actionId openapi_types.UUID, adId int32, body RejectJobAdPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRejectJobAdPartnerActionRequestWithBody(server, actionId, adId, "application/json", bodyReader)
}

// NewRejectJobAdPartnerActionRequestWithBody generates requests for RejectJobAdPartnerAction with any type of body
func NewRejectJobAdPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "adId", runtime.ParamLocationPath, adId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/jobads/%s/reject", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPartnerActionJobOrdersRequest generates requests for GetPartnerActionJobOrders
func NewGetPartnerActionJobOrdersRequest(server string, actionId openapi_types.UUID, params *GetPartnerActionJobOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Stage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Stage", runtime.ParamLocationQuery, *params.Stage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SubmittedAt", runtime.ParamLocationQuery, *params.SubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompleteJobOrderPartnerActionRequest calls the generic CompleteJobOrderPartnerAction builder with application/json body
func NewCompleteJobOrderPartnerActionRequest(server string, actionId openapi_types.UUID, jobId int32, body CompleteJobOrderPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteJobOrderPartnerActionRequestWithBody(server, actionId, jobId, "application/json", bodyReader)
}

// NewCompleteJobOrderPartnerActionRequestWithBody generates requests for CompleteJobOrderPartnerAction with any type of body
func NewCompleteJobOrderPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/jobs/%s/complete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProgressJobOrderPartnerActionRequest calls the generic ProgressJobOrderPartnerAction builder with application/json body
func NewProgressJobOrderPartnerActionRequest(server string, actionId openapi_types.UUID, jobId int32, body ProgressJobOrderPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProgressJobOrderPartnerActionRequestWithBody(server, actionId, jobId, "application/json", bodyReader)
}

// NewProgressJobOrderPartnerActionRequestWithBody generates requests for ProgressJobOrderPartnerAction with any type of body
func NewProgressJobOrderPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/jobs/%s/progress", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRejectJobOrderPartnerActionRequest calls the generic RejectJobOrderPartnerAction builder with application/json body
func NewRejectJobOrderPartnerActionRequest(server string, actionId openapi_types.UUID, jobId int32, body RejectJobOrderPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRejectJobOrderPartnerActionRequestWithBody(server, actionId, jobId, "application/json", bodyReader)
}

// NewRejectJobOrderPartnerActionRequestWithBody generates requests for RejectJobOrderPartnerAction with any type of body
func NewRejectJobOrderPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/jobs/%s/reject", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPartnerActionPlacementsRequest generates requests for GetPartnerActionPlacements
func NewGetPartnerActionPlacementsRequest(server string, actionId openapi_types.UUID, params *GetPartnerActionPlacementsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/placements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Stage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Stage", runtime.ParamLocationQuery, *params.Stage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SubmittedAt", runtime.ParamLocationQuery, *params.SubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompletePlacementPartnerActionRequest calls the generic CompletePlacementPartnerAction builder with application/json body
func NewCompletePlacementPartnerActionRequest(server string, actionId openapi_types.UUID, placementId int32, body CompletePlacementPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompletePlacementPartnerActionRequestWithBody(server, actionId, placementId, "application/json", bodyReader)
}

// NewCompletePlacementPartnerActionRequestWithBody generates requests for CompletePlacementPartnerAction with any type of body
func NewCompletePlacementPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/placements/%s/complete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProgressPlacementPartnerActionRequest calls the generic ProgressPlacementPartnerAction builder with application/json body
func NewProgressPlacementPartnerActionRequest(server string, actionId openapi_types.UUID, placementId int32, body ProgressPlacementPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProgressPlacementPartnerActionRequestWithBody(server, actionId, placementId, "application/json", bodyReader)
}

// NewProgressPlacementPartnerActionRequestWithBody generates requests for ProgressPlacementPartnerAction with any type of body
func NewProgressPlacementPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/placements/%s/progress", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRejectPlacementPartnerActionRequest calls the generic RejectPlacementPartnerAction builder with application/json body
func NewRejectPlacementPartnerActionRequest(server string, actionId openapi_types.UUID, placementId int32, body RejectPlacementPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRejectPlacementPartnerActionRequestWithBody(server, actionId, placementId, "application/json", bodyReader)
}

// NewRejectPlacementPartnerActionRequestWithBody generates requests for RejectPlacementPartnerAction with any type of body
func NewRejectPlacementPartnerActionRequestWithBody(server string, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s/placements/%s/reject", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePartnerActionRequest generates requests for DeletePartnerAction
func NewDeletePartnerActionRequest(server string, act openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "act", runtime.ParamLocationPath, act)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPartnerActionRequest generates requests for GetPartnerAction
func NewGetPartnerActionRequest(server string, act openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "act", runtime.ParamLocationPath, act)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPartnerActionRequest calls the generic AddPartnerAction builder with application/json body
func NewAddPartnerActionRequest(server string, act PartnerActionType, body AddPartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPartnerActionRequestWithBody(server, act, "application/json", bodyReader)
}

// NewAddPartnerActionRequestWithBody generates requests for AddPartnerAction with any type of body
func NewAddPartnerActionRequestWithBody(server string, act PartnerActionType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "act", runtime.ParamLocationPath, act)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePartnerActionRequest calls the generic UpdatePartnerAction builder with application/json body
func NewUpdatePartnerActionRequest(server string, act openapi_types.UUID, body UpdatePartnerActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePartnerActionRequestWithBody(server, act, "application/json", bodyReader)
}

// NewUpdatePartnerActionRequestWithBody generates requests for UpdatePartnerAction with any type of body
func NewUpdatePartnerActionRequestWithBody(server string, act openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "act", runtime.ParamLocationPath, act)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindPlacementsRequest generates requests for FindPlacements
func NewFindPlacementsRequest(server string, params *FindPlacementsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PlacementId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PlacementId", runtime.ParamLocationQuery, *params.PlacementId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.ActionId", runtime.ParamLocationQuery, *params.PartnerActionActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionReference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Reference", runtime.ParamLocationQuery, *params.PartnerActionReference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionStage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.Stage", runtime.ParamLocationQuery, *params.PartnerActionStage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartnerActionSubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PartnerAction.SubmittedAt", runtime.ParamLocationQuery, *params.PartnerActionSubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CandidateCandidateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Candidate.CandidateId", runtime.ParamLocationQuery, *params.CandidateCandidateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CandidateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Candidate.Name", runtime.ParamLocationQuery, *params.CandidateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CandidateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CandidateId", runtime.ParamLocationQuery, *params.CandidateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyCompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Company.CompanyId", runtime.ParamLocationQuery, *params.CompanyCompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Company.Name", runtime.ParamLocationQuery, *params.CompanyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CompanyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobId", runtime.ParamLocationQuery, *params.JobId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ApplicationId", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FolderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FolderId", runtime.ParamLocationQuery, *params.FolderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwnerUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OwnerUserId", runtime.ParamLocationQuery, *params.OwnerUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecruiterUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RecruiterUserId", runtime.ParamLocationQuery, *params.RecruiterUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedBy", runtime.ParamLocationQuery, *params.CreatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedBy", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Approved != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Approved", runtime.ParamLocationQuery, *params.Approved); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApprovedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ApprovedBy", runtime.ParamLocationQuery, *params.ApprovedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApprovedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ApprovedAt", runtime.ParamLocationQuery, *params.ApprovedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Export != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Export", runtime.ParamLocationQuery, *params.Export); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimesheetPeriod != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Timesheet.Period", runtime.ParamLocationQuery, *params.TimesheetPeriod); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPlacementRequest calls the generic AddPlacement builder with application/json body
func NewAddPlacementRequest(server string, body AddPlacementJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPlacementRequestWithBody(server, "application/json", bodyReader)
}

// NewAddPlacementRequestWithBody generates requests for AddPlacement with any type of body
func NewAddPlacementRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindPlacementActivityRequest generates requests for FindPlacementActivity
func NewFindPlacementActivityRequest(server string, params *FindPlacementActivityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/activities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeDetails", runtime.ParamLocationQuery, *params.IncludeDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindPlacementActivitySettingsRequest generates requests for FindPlacementActivitySettings
func NewFindPlacementActivitySettingsRequest(server string, params *FindPlacementActivitySettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/activitysettings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementActivitySettingRequest generates requests for GetPlacementActivitySetting
func NewGetPlacementActivitySettingRequest(server string, settingId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "settingId", runtime.ParamLocationPath, settingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/activitysettings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletedPlacementsRequest generates requests for DeletedPlacements
func NewDeletedPlacementsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/deleted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementCustomFieldListRequest generates requests for GetPlacementCustomFieldList
func NewGetPlacementCustomFieldListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/fields/custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPlacementCustomFieldListRequest calls the generic PutPlacementCustomFieldList builder with application/json body
func NewPutPlacementCustomFieldListRequest(server string, fieldId int32, body PutPlacementCustomFieldListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPlacementCustomFieldListRequestWithBody(server, fieldId, "application/json", bodyReader)
}

// NewPutPlacementCustomFieldListRequestWithBody generates requests for PutPlacementCustomFieldList with any type of body
func NewPutPlacementCustomFieldListRequestWithBody(server string, fieldId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/fields/custom/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlacementCustomFieldItemRequest generates requests for GetPlacementCustomFieldItem
func NewGetPlacementCustomFieldItemRequest(server string, fieldId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/fields/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementAttachmentCategoryListRequest generates requests for GetPlacementAttachmentCategoryList
func NewGetPlacementAttachmentCategoryListRequest(server string, params *GetPlacementAttachmentCategoryListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/lists/attachmentcategory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementAwardListRequest generates requests for GetPlacementAwardList
func NewGetPlacementAwardListRequest(server string, params *GetPlacementAwardListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/lists/awards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementBillingTermsListRequest generates requests for GetPlacementBillingTermsList
func NewGetPlacementBillingTermsListRequest(server string, params *GetPlacementBillingTermsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/lists/billingterms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementIndustryCodeListRequest generates requests for GetPlacementIndustryCodeList
func NewGetPlacementIndustryCodeListRequest(server string, params *GetPlacementIndustryCodeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/lists/industrycodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementNoteTypeListRequest generates requests for GetPlacementNoteTypeList
func NewGetPlacementNoteTypeListRequest(server string, params *GetPlacementNoteTypeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/lists/notetype")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementPaymentTypeListRequest generates requests for GetPlacementPaymentTypeList
func NewGetPlacementPaymentTypeListRequest(server string, params *GetPlacementPaymentTypeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/lists/paymenttypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementStatusListRequest generates requests for GetPlacementStatusList
func NewGetPlacementStatusListRequest(server string, params *GetPlacementStatusListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/lists/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StatusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Default != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Default", runtime.ParamLocationQuery, *params.Default); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementStatusItemRequest generates requests for GetPlacementStatusItem
func NewGetPlacementStatusItemRequest(server string, statusId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statusId", runtime.ParamLocationPath, statusId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/lists/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementRequest generates requests for GetPlacement
func NewGetPlacementRequest(server string, placementId int32, params *GetPlacementParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlacementRequest calls the generic UpdatePlacement builder with application/json body
func NewUpdatePlacementRequest(server string, placementId int32, body UpdatePlacementJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlacementRequestWithBody(server, placementId, "application/json", bodyReader)
}

// NewUpdatePlacementRequestWithBody generates requests for UpdatePlacement with any type of body
func NewUpdatePlacementRequestWithBody(server string, placementId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlacementActivityByPlacementIdRequest generates requests for GetPlacementActivityByPlacementId
func NewGetPlacementActivityByPlacementIdRequest(server string, placementId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPlacementActivityRequest calls the generic AddPlacementActivity builder with application/json body
func NewAddPlacementActivityRequest(server string, placementId int32, body AddPlacementActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPlacementActivityRequestWithBody(server, placementId, "application/json", bodyReader)
}

// NewAddPlacementActivityRequestWithBody generates requests for AddPlacementActivity with any type of body
func NewAddPlacementActivityRequestWithBody(server string, placementId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlacementActivityRequest generates requests for GetPlacementActivity
func NewGetPlacementActivityRequest(server string, placementId int32, activityId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "activityId", runtime.ParamLocationPath, activityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/activities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindPlacementAttachmentsRequest generates requests for FindPlacementAttachments
func NewFindPlacementAttachmentsRequest(server string, placementId int32, params *FindPlacementAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Latest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Latest", runtime.ParamLocationQuery, *params.Latest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementAttachmentRequest generates requests for GetPlacementAttachment
func NewGetPlacementAttachmentRequest(server string, placementId int32, attach int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPlacementAttachmentRequestWithBody generates requests for AddPlacementAttachment with any type of body
func NewAddPlacementAttachmentRequestWithBody(server string, placementId int32, attach PlacementAttachmentType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePlacementAttachmentRequest calls the generic UpdatePlacementAttachment builder with application/json body
func NewUpdatePlacementAttachmentRequest(server string, placementId int32, attach int64, body UpdatePlacementAttachmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlacementAttachmentRequestWithBody(server, placementId, attach, "application/json", bodyReader)
}

// NewUpdatePlacementAttachmentRequestWithBody generates requests for UpdatePlacementAttachment with any type of body
func NewUpdatePlacementAttachmentRequestWithBody(server string, placementId int32, attach int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attach", runtime.ParamLocationPath, attach)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlacementNotesRequest generates requests for GetPlacementNotes
func NewGetPlacementNotesRequest(server string, placementId int32, params *GetPlacementNotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NoteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NoteId", runtime.ParamLocationQuery, *params.NoteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPlacementNoteRequest calls the generic AddPlacementNote builder with application/json body
func NewAddPlacementNoteRequest(server string, placementId int32, body AddPlacementNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPlacementNoteRequestWithBody(server, placementId, "application/json", bodyReader)
}

// NewAddPlacementNoteRequestWithBody generates requests for AddPlacementNote with any type of body
func NewAddPlacementNoteRequestWithBody(server string, placementId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutPlacementStatusRequest calls the generic PutPlacementStatus builder with application/json body
func NewPutPlacementStatusRequest(server string, placementId int32, body PutPlacementStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPlacementStatusRequestWithBody(server, placementId, "application/json", bodyReader)
}

// NewPutPlacementStatusRequestWithBody generates requests for PutPlacementStatus with any type of body
func NewPutPlacementStatusRequestWithBody(server string, placementId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlacementTimesheetsRequest generates requests for GetPlacementTimesheets
func NewGetPlacementTimesheetsRequest(server string, placementId int32, params *GetPlacementTimesheetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/timesheets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPlacementUserTaskRequest calls the generic AddPlacementUserTask builder with application/json body
func NewAddPlacementUserTaskRequest(server string, placementId int32, body AddPlacementUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPlacementUserTaskRequestWithBody(server, placementId, "application/json", bodyReader)
}

// NewAddPlacementUserTaskRequestWithBody generates requests for AddPlacementUserTask with any type of body
func NewAddPlacementUserTaskRequestWithBody(server string, placementId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/usertasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlacementUserTaskRequest generates requests for GetPlacementUserTask
func NewGetPlacementUserTaskRequest(server string, placementId int32, taskId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlacementUserTaskRequest calls the generic UpdatePlacementUserTask builder with application/json body
func NewUpdatePlacementUserTaskRequest(server string, placementId int32, taskId int64, body UpdatePlacementUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlacementUserTaskRequestWithBody(server, placementId, taskId, "application/json", bodyReader)
}

// NewUpdatePlacementUserTaskRequestWithBody generates requests for UpdatePlacementUserTask with any type of body
func NewUpdatePlacementUserTaskRequestWithBody(server string, placementId int32, taskId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements/%s/usertasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindRequisitionsRequest generates requests for FindRequisitions
func NewFindRequisitionsRequest(server string, params *FindRequisitionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequisitionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RequisitionId", runtime.ParamLocationQuery, *params.RequisitionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CompanyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HiringManagerContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HiringManager.ContactId", runtime.ParamLocationQuery, *params.HiringManagerContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HiringManagerName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HiringManager.Name", runtime.ParamLocationQuery, *params.HiringManagerName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApproverContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Approver.ContactId", runtime.ParamLocationQuery, *params.ApproverContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApproverName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Approver.Name", runtime.ParamLocationQuery, *params.ApproverName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApproverPending != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Approver.Pending", runtime.ParamLocationQuery, *params.ApproverPending); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwnerUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OwnerUserId", runtime.ParamLocationQuery, *params.OwnerUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecruiterUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RecruiterUserId", runtime.ParamLocationQuery, *params.RecruiterUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRequisitionRequest calls the generic AddRequisition builder with application/json body
func NewAddRequisitionRequest(server string, body AddRequisitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRequisitionRequestWithBody(server, "application/json", bodyReader)
}

// NewAddRequisitionRequestWithBody generates requests for AddRequisition with any type of body
func NewAddRequisitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRequisitionCustomFieldListRequest generates requests for GetRequisitionCustomFieldList
func NewGetRequisitionCustomFieldListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/fields/custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequisitionCustomFieldItemRequest generates requests for GetRequisitionCustomFieldItem
func NewGetRequisitionCustomFieldItemRequest(server string, fieldId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/fields/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequisitionFormsRequest generates requests for GetRequisitionForms
func NewGetRequisitionFormsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/forms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRequisitionRequest generates requests for DeleteRequisition
func NewDeleteRequisitionRequest(server string, requisitionId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequisitionRequest generates requests for GetRequisition
func NewGetRequisitionRequest(server string, requisitionId int32, params *GetRequisitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRequisitionRequest calls the generic UpdateRequisition builder with application/json body
func NewUpdateRequisitionRequest(server string, requisitionId int32, body UpdateRequisitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequisitionRequestWithBody(server, requisitionId, "application/json", bodyReader)
}

// NewUpdateRequisitionRequestWithBody generates requests for UpdateRequisition with any type of body
func NewUpdateRequisitionRequestWithBody(server string, requisitionId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApproveRequisitionRequest calls the generic ApproveRequisition builder with application/json body
func NewApproveRequisitionRequest(server string, requisitionId int32, body ApproveRequisitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApproveRequisitionRequestWithBody(server, requisitionId, "application/json", bodyReader)
}

// NewApproveRequisitionRequestWithBody generates requests for ApproveRequisition with any type of body
func NewApproveRequisitionRequestWithBody(server string, requisitionId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s/approve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRequisitionAttachmentListRequest generates requests for GetRequisitionAttachmentList
func NewGetRequisitionAttachmentListRequest(server string, requisitionId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRequisitionAttachmentRequest generates requests for DeleteRequisitionAttachment
func NewDeleteRequisitionAttachmentRequest(server string, requisitionId int32, attachmentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequisitionAttachmentRequest generates requests for GetRequisitionAttachment
func NewGetRequisitionAttachmentRequest(server string, requisitionId int32, attachmentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRequisitionAttachmentRequestWithBody generates requests for AddRequisitionAttachment with any type of body
func NewAddRequisitionAttachmentRequestWithBody(server string, requisitionId int32, attachmentType RequisitionAttachmentType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentType", runtime.ParamLocationPath, attachmentType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRequisitionApprovalHistoryRequest generates requests for GetRequisitionApprovalHistory
func NewGetRequisitionApprovalHistoryRequest(server string, requisitionId int32, params *GetRequisitionApprovalHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequisitionNotesRequest generates requests for GetRequisitionNotes
func NewGetRequisitionNotesRequest(server string, requisitionId int32, params *GetRequisitionNotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NoteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NoteId", runtime.ParamLocationQuery, *params.NoteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRequisitionNoteRequest calls the generic AddRequisitionNote builder with application/json body
func NewAddRequisitionNoteRequest(server string, requisitionId int32, body AddRequisitionNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRequisitionNoteRequestWithBody(server, requisitionId, "application/json", bodyReader)
}

// NewAddRequisitionNoteRequestWithBody generates requests for AddRequisitionNote with any type of body
func NewAddRequisitionNoteRequestWithBody(server string, requisitionId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRejectRequisitionRequest calls the generic RejectRequisition builder with application/json body
func NewRejectRequisitionRequest(server string, requisitionId int32, body RejectRequisitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRejectRequisitionRequestWithBody(server, requisitionId, "application/json", bodyReader)
}

// NewRejectRequisitionRequestWithBody generates requests for RejectRequisition with any type of body
func NewRejectRequisitionRequestWithBody(server string, requisitionId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s/reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSubmitRequisitionRequest calls the generic SubmitRequisition builder with application/json body
func NewSubmitRequisitionRequest(server string, requisitionId int32, body SubmitRequisitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitRequisitionRequestWithBody(server, requisitionId, "application/json", bodyReader)
}

// NewSubmitRequisitionRequestWithBody generates requests for SubmitRequisition with any type of body
func NewSubmitRequisitionRequestWithBody(server string, requisitionId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requisitionId", runtime.ParamLocationPath, requisitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requisitions/%s/submit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindEmailAddressRequest generates requests for FindEmailAddress
func NewFindEmailAddressRequest(server string, params *FindEmailAddressParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/emailaddress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindPhoneNumberRequest generates requests for FindPhoneNumber
func NewFindPhoneNumberRequest(server string, params *FindPhoneNumberParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/phonenumber")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.E164 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "E164", runtime.ParamLocationQuery, *params.E164); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSendJobApplcationSmsRequest calls the generic SendJobApplcationSms builder with application/json body
func NewSendJobApplcationSmsRequest(server string, body SendJobApplcationSmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendJobApplcationSmsRequestWithBody(server, "application/json", bodyReader)
}

// NewSendJobApplcationSmsRequestWithBody generates requests for SendJobApplcationSms with any type of body
func NewSendJobApplcationSmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sms/applications/candidate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendJobApplicationContactSmsRequest calls the generic SendJobApplicationContactSms builder with application/json body
func NewSendJobApplicationContactSmsRequest(server string, body SendJobApplicationContactSmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendJobApplicationContactSmsRequestWithBody(server, "application/json", bodyReader)
}

// NewSendJobApplicationContactSmsRequestWithBody generates requests for SendJobApplicationContactSms with any type of body
func NewSendJobApplicationContactSmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sms/applications/contact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendCandidateSmsRequest calls the generic SendCandidateSms builder with application/json body
func NewSendCandidateSmsRequest(server string, body SendCandidateSmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendCandidateSmsRequestWithBody(server, "application/json", bodyReader)
}

// NewSendCandidateSmsRequestWithBody generates requests for SendCandidateSms with any type of body
func NewSendCandidateSmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sms/candidates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendCompanySmsRequest calls the generic SendCompanySms builder with application/json body
func NewSendCompanySmsRequest(server string, body SendCompanySmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendCompanySmsRequestWithBody(server, "application/json", bodyReader)
}

// NewSendCompanySmsRequestWithBody generates requests for SendCompanySms with any type of body
func NewSendCompanySmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sms/companies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendContactSmsRequest calls the generic SendContactSms builder with application/json body
func NewSendContactSmsRequest(server string, body SendContactSmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendContactSmsRequestWithBody(server, "application/json", bodyReader)
}

// NewSendContactSmsRequestWithBody generates requests for SendContactSms with any type of body
func NewSendContactSmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sms/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendJobOrderSmsRequest calls the generic SendJobOrderSms builder with application/json body
func NewSendJobOrderSmsRequest(server string, body SendJobOrderSmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendJobOrderSmsRequestWithBody(server, "application/json", bodyReader)
}

// NewSendJobOrderSmsRequestWithBody generates requests for SendJobOrderSms with any type of body
func NewSendJobOrderSmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sms/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendPlacementSmsRequest calls the generic SendPlacementSms builder with application/json body
func NewSendPlacementSmsRequest(server string, entityType RecipientEntityType, body SendPlacementSmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendPlacementSmsRequestWithBody(server, entityType, "application/json", bodyReader)
}

// NewSendPlacementSmsRequestWithBody generates requests for SendPlacementSms with any type of body
func NewSendPlacementSmsRequestWithBody(server string, entityType RecipientEntityType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entityType", runtime.ParamLocationPath, entityType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sms/placements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindSubmissionsRequest generates requests for FindSubmissions
func NewFindSubmissionsRequest(server string, params *FindSubmissionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/submissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SubmissionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SubmissionId", runtime.ParamLocationQuery, *params.SubmissionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CandidateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CandidateId", runtime.ParamLocationQuery, *params.CandidateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CompanyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobId", runtime.ParamLocationQuery, *params.JobId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubmissionRequest generates requests for GetSubmission
func NewGetSubmissionRequest(server string, submissionId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "submissionId", runtime.ParamLocationPath, submissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/submissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindUserGroupsRequest generates requests for FindUserGroups
func NewFindUserGroupsRequest(server string, params *FindUserGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usergroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GroupId", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserGroupRequest generates requests for GetUserGroup
func NewGetUserGroupRequest(server string, groupId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usergroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupUsersRequest generates requests for GetGroupUsers
func NewGetGroupUsersRequest(server string, groupId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usergroups/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindUserOfficesRequest generates requests for FindUserOffices
func NewFindUserOfficesRequest(server string, params *FindUserOfficesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/useroffices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OfficeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OfficeId", runtime.ParamLocationQuery, *params.OfficeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserOfficeRequest generates requests for GetUserOffice
func NewGetUserOfficeRequest(server string, officeId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "officeId", runtime.ParamLocationPath, officeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/useroffices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOfficeUsersRequest generates requests for GetOfficeUsers
func NewGetOfficeUsersRequest(server string, officeId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "officeId", runtime.ParamLocationPath, officeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/useroffices/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindUsersRequest generates requests for FindUsers
func NewFindUsersRequest(server string, params *FindUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OfficeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OfficeId", runtime.ParamLocationQuery, *params.OfficeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GroupId", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedBy", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCurrentUserRequest generates requests for GetCurrentUser
func NewGetCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserInterviewsRequest generates requests for GetUserInterviews
func NewGetUserInterviewsRequest(server string, userId int32, params *GetUserInterviewsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/interviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserPhotoRequest generates requests for GetUserPhoto
func NewGetUserPhotoRequest(server string, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/photo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserUserGroupsRequest generates requests for GetUserUserGroups
func NewGetUserUserGroupsRequest(server string, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/usergroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindUserUserTasksRequest generates requests for FindUserUserTasks
func NewFindUserUserTasksRequest(server string, userId int32, params *FindUserUserTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/usertasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartAt", runtime.ParamLocationQuery, *params.StartAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindUserTasksRequest generates requests for FindUserTasks
func NewFindUserTasksRequest(server string, params *FindUserTasksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usertasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartAt", runtime.ParamLocationQuery, *params.StartAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedBy", runtime.ParamLocationQuery, *params.CreatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CreatedAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedBy", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UpdatedAt", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserTaskRequest calls the generic AddUserTask builder with application/json body
func NewAddUserTaskRequest(server string, body AddUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUserTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewAddUserTaskRequestWithBody generates requests for AddUserTask with any type of body
func NewAddUserTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usertasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserTaskRequest generates requests for DeleteUserTask
func NewDeleteUserTaskRequest(server string, taskId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usertasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserTaskRequest generates requests for GetUserTask
func NewGetUserTaskRequest(server string, taskId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usertasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserTaskRequest calls the generic UpdateUserTask builder with application/json body
func NewUpdateUserTaskRequest(server string, taskId int64, body UpdateUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserTaskRequestWithBody(server, taskId, "application/json", bodyReader)
}

// NewUpdateUserTaskRequestWithBody generates requests for UpdateUserTask with any type of body
func NewUpdateUserTaskRequestWithBody(server string, taskId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usertasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarkCompleteUserTaskRequest generates requests for MarkCompleteUserTask
func NewMarkCompleteUserTaskRequest(server string, taskId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usertasks/%s/complete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarkIncompleteUserTaskRequest generates requests for MarkIncompleteUserTask
func NewMarkIncompleteUserTaskRequest(server string, taskId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usertasks/%s/incomplete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindWebhooksRequest generates requests for FindWebhooks
func NewFindWebhooksRequest(server string, params *FindWebhooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Events != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Events", runtime.ParamLocationQuery, *params.Events); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddWebhookRequest calls the generic AddWebhook builder with application/json body
func NewAddWebhookRequest(server string, body AddWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewAddWebhookRequestWithBody generates requests for AddWebhook with any type of body
func NewAddWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWebhookRequest generates requests for DeleteWebhook
func NewDeleteWebhookRequest(server string, webhookId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhookRequest generates requests for GetWebhook
func NewGetWebhookRequest(server string, webhookId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWebhookRequest calls the generic UpdateWebhook builder with application/json body
func NewUpdateWebhookRequest(server string, webhookId openapi_types.UUID, body UpdateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWebhookRequestWithBody(server, webhookId, "application/json", bodyReader)
}

// NewUpdateWebhookRequestWithBody generates requests for UpdateWebhook with any type of body
func NewUpdateWebhookRequestWithBody(server string, webhookId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindWorkTypesRequest generates requests for FindWorkTypes
func NewFindWorkTypesRequest(server string, params *FindWorkTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/worktypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WorkTypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "WorkTypeId", runtime.ParamLocationQuery, *params.WorkTypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// FindJobApplicationsWithResponse request
	FindJobApplicationsWithResponse(ctx context.Context, params *FindJobApplicationsParams, reqEditors ...RequestEditorFn) (*FindJobApplicationsResponse, error)

	// FindJobApplicationActivityWithResponse request
	FindJobApplicationActivityWithResponse(ctx context.Context, params *FindJobApplicationActivityParams, reqEditors ...RequestEditorFn) (*FindJobApplicationActivityResponse, error)

	// FindJobApplicationActivitySettingsWithResponse request
	FindJobApplicationActivitySettingsWithResponse(ctx context.Context, params *FindJobApplicationActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindJobApplicationActivitySettingsResponse, error)

	// GetJobApplicationActivitySettingWithResponse request
	GetJobApplicationActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetJobApplicationActivitySettingResponse, error)

	// DeletedJobApplicationsWithResponse request
	DeletedJobApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedJobApplicationsResponse, error)

	// GetJobApplicationCustomFieldListWithResponse request
	GetJobApplicationCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJobApplicationCustomFieldListResponse, error)

	// PutJobApplicationCustomFieldListWithBodyWithResponse request with any body
	PutJobApplicationCustomFieldListWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobApplicationCustomFieldListResponse, error)

	PutJobApplicationCustomFieldListWithResponse(ctx context.Context, fieldId int32, body PutJobApplicationCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobApplicationCustomFieldListResponse, error)

	// GetJobApplicationCustomFieldListItemWithResponse request
	GetJobApplicationCustomFieldListItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetJobApplicationCustomFieldListItemResponse, error)

	// GetJobApplicationStatusListWithResponse request
	GetJobApplicationStatusListWithResponse(ctx context.Context, params *GetJobApplicationStatusListParams, reqEditors ...RequestEditorFn) (*GetJobApplicationStatusListResponse, error)

	// GetJobApplicationStatusListItemWithResponse request
	GetJobApplicationStatusListItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetJobApplicationStatusListItemResponse, error)

	// GetJobApplicationWorkflowListWithResponse request
	GetJobApplicationWorkflowListWithResponse(ctx context.Context, params *GetJobApplicationWorkflowListParams, reqEditors ...RequestEditorFn) (*GetJobApplicationWorkflowListResponse, error)

	// GetJobApplicationWithResponse request
	GetJobApplicationWithResponse(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*GetJobApplicationResponse, error)

	// UpdateJobApplicationWithBodyWithResponse request with any body
	UpdateJobApplicationWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobApplicationResponse, error)

	UpdateJobApplicationWithResponse(ctx context.Context, applicationId int64, body UpdateJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobApplicationResponse, error)

	// GetJobApplicationActivityByApplicationIdWithResponse request
	GetJobApplicationActivityByApplicationIdWithResponse(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*GetJobApplicationActivityByApplicationIdResponse, error)

	// AddJobApplicationActivityWithBodyWithResponse request with any body
	AddJobApplicationActivityWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobApplicationActivityResponse, error)

	AddJobApplicationActivityWithResponse(ctx context.Context, applicationId int64, body AddJobApplicationActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobApplicationActivityResponse, error)

	// GetJobApplicationActivityWithResponse request
	GetJobApplicationActivityWithResponse(ctx context.Context, applicationId int64, activityId int64, reqEditors ...RequestEditorFn) (*GetJobApplicationActivityResponse, error)

	// FindJobApplicationAttachmentsWithResponse request
	FindJobApplicationAttachmentsWithResponse(ctx context.Context, applicationId int64, params *FindJobApplicationAttachmentsParams, reqEditors ...RequestEditorFn) (*FindJobApplicationAttachmentsResponse, error)

	// GetJobApplicationAttachmentWithResponse request
	GetJobApplicationAttachmentWithResponse(ctx context.Context, applicationId int64, attach int64, reqEditors ...RequestEditorFn) (*GetJobApplicationAttachmentResponse, error)

	// AddJobApplicationAttachmentWithBodyWithResponse request with any body
	AddJobApplicationAttachmentWithBodyWithResponse(ctx context.Context, applicationId int64, attach SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobApplicationAttachmentResponse, error)

	// UpdateJobApplicationAttachmentWithBodyWithResponse request with any body
	UpdateJobApplicationAttachmentWithBodyWithResponse(ctx context.Context, applicationId int64, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobApplicationAttachmentResponse, error)

	UpdateJobApplicationAttachmentWithResponse(ctx context.Context, applicationId int64, attach int64, body UpdateJobApplicationAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobApplicationAttachmentResponse, error)

	// GetJobApplicationInterviewsWithResponse request
	GetJobApplicationInterviewsWithResponse(ctx context.Context, applicationId int64, params *GetJobApplicationInterviewsParams, reqEditors ...RequestEditorFn) (*GetJobApplicationInterviewsResponse, error)

	// PostJobApplicationExternalInterviewWithBodyWithResponse request with any body
	PostJobApplicationExternalInterviewWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobApplicationExternalInterviewResponse, error)

	PostJobApplicationExternalInterviewWithResponse(ctx context.Context, applicationId int64, body PostJobApplicationExternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobApplicationExternalInterviewResponse, error)

	// PutJobApplicationExternalInterviewWithBodyWithResponse request with any body
	PutJobApplicationExternalInterviewWithBodyWithResponse(ctx context.Context, applicationId int64, interviewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobApplicationExternalInterviewResponse, error)

	PutJobApplicationExternalInterviewWithResponse(ctx context.Context, applicationId int64, interviewId int32, body PutJobApplicationExternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobApplicationExternalInterviewResponse, error)

	// PostJobApplicationInternalInterviewWithBodyWithResponse request with any body
	PostJobApplicationInternalInterviewWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobApplicationInternalInterviewResponse, error)

	PostJobApplicationInternalInterviewWithResponse(ctx context.Context, applicationId int64, body PostJobApplicationInternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobApplicationInternalInterviewResponse, error)

	// PutJobApplicationInternalInterviewWithBodyWithResponse request with any body
	PutJobApplicationInternalInterviewWithBodyWithResponse(ctx context.Context, applicationId int64, interviewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobApplicationInternalInterviewResponse, error)

	PutJobApplicationInternalInterviewWithResponse(ctx context.Context, applicationId int64, interviewId int32, body PutJobApplicationInternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobApplicationInternalInterviewResponse, error)

	// GetJobApplicationNotesWithResponse request
	GetJobApplicationNotesWithResponse(ctx context.Context, applicationId int64, params *GetJobApplicationNotesParams, reqEditors ...RequestEditorFn) (*GetJobApplicationNotesResponse, error)

	// AddJobApplicationNoteWithBodyWithResponse request with any body
	AddJobApplicationNoteWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobApplicationNoteResponse, error)

	AddJobApplicationNoteWithResponse(ctx context.Context, applicationId int64, body AddJobApplicationNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobApplicationNoteResponse, error)

	// ReviewSubmitJobApplicationWithBodyWithResponse request with any body
	ReviewSubmitJobApplicationWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviewSubmitJobApplicationResponse, error)

	ReviewSubmitJobApplicationWithResponse(ctx context.Context, applicationId int64, body ReviewSubmitJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviewSubmitJobApplicationResponse, error)

	// ReviewViewJobApplicationWithBodyWithResponse request with any body
	ReviewViewJobApplicationWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviewViewJobApplicationResponse, error)

	ReviewViewJobApplicationWithResponse(ctx context.Context, applicationId int64, body ReviewViewJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviewViewJobApplicationResponse, error)

	// ReviewAcceptJobApplicationWithBodyWithResponse request with any body
	ReviewAcceptJobApplicationWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviewAcceptJobApplicationResponse, error)

	ReviewAcceptJobApplicationWithResponse(ctx context.Context, applicationId int64, body ReviewAcceptJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviewAcceptJobApplicationResponse, error)

	// ReviewRejectJobApplicationWithBodyWithResponse request with any body
	ReviewRejectJobApplicationWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviewRejectJobApplicationResponse, error)

	ReviewRejectJobApplicationWithResponse(ctx context.Context, applicationId int64, body ReviewRejectJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviewRejectJobApplicationResponse, error)

	// PutJobApplicationStatusWithBodyWithResponse request with any body
	PutJobApplicationStatusWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobApplicationStatusResponse, error)

	PutJobApplicationStatusWithResponse(ctx context.Context, applicationId int64, body PutJobApplicationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobApplicationStatusResponse, error)

	// AddJobApplicationUserTaskWithBodyWithResponse request with any body
	AddJobApplicationUserTaskWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobApplicationUserTaskResponse, error)

	AddJobApplicationUserTaskWithResponse(ctx context.Context, applicationId int64, body AddJobApplicationUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobApplicationUserTaskResponse, error)

	// GetJobApplicationUserTaskWithResponse request
	GetJobApplicationUserTaskWithResponse(ctx context.Context, applicationId int64, taskId int64, reqEditors ...RequestEditorFn) (*GetJobApplicationUserTaskResponse, error)

	// UpdateJobApplicationUserTaskWithBodyWithResponse request with any body
	UpdateJobApplicationUserTaskWithBodyWithResponse(ctx context.Context, applicationId int64, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobApplicationUserTaskResponse, error)

	UpdateJobApplicationUserTaskWithResponse(ctx context.Context, applicationId int64, taskId int64, body UpdateJobApplicationUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobApplicationUserTaskResponse, error)

	// GetJobApplicationVideosWithResponse request
	GetJobApplicationVideosWithResponse(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*GetJobApplicationVideosResponse, error)

	// GetLatestJobApplicationVideoWithResponse request
	GetLatestJobApplicationVideoWithResponse(ctx context.Context, applicationId int64, videoType CandidateVideoType, reqEditors ...RequestEditorFn) (*GetLatestJobApplicationVideoResponse, error)

	// AddJobApplicationVideoWithBodyWithResponse request with any body
	AddJobApplicationVideoWithBodyWithResponse(ctx context.Context, applicationId int64, videoType CandidateVideoType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobApplicationVideoResponse, error)

	AddJobApplicationVideoWithResponse(ctx context.Context, applicationId int64, videoType CandidateVideoType, body AddJobApplicationVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobApplicationVideoResponse, error)

	// FindCandidatesWithResponse request
	FindCandidatesWithResponse(ctx context.Context, params *FindCandidatesParams, reqEditors ...RequestEditorFn) (*FindCandidatesResponse, error)

	// AddCandidateWithBodyWithResponse request with any body
	AddCandidateWithBodyWithResponse(ctx context.Context, params *AddCandidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateResponse, error)

	AddCandidateWithResponse(ctx context.Context, params *AddCandidateParams, body AddCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateResponse, error)

	// FindCandidateActivitiesWithResponse request
	FindCandidateActivitiesWithResponse(ctx context.Context, params *FindCandidateActivitiesParams, reqEditors ...RequestEditorFn) (*FindCandidateActivitiesResponse, error)

	// FindCandidateActivitySettingsWithResponse request
	FindCandidateActivitySettingsWithResponse(ctx context.Context, params *FindCandidateActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindCandidateActivitySettingsResponse, error)

	// GetCandidateActivitySettingWithResponse request
	GetCandidateActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetCandidateActivitySettingResponse, error)

	// FindAllCandidateAttachmentsWithResponse request
	FindAllCandidateAttachmentsWithResponse(ctx context.Context, params *FindAllCandidateAttachmentsParams, reqEditors ...RequestEditorFn) (*FindAllCandidateAttachmentsResponse, error)

	// DeletedCandidatesWithResponse request
	DeletedCandidatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedCandidatesResponse, error)

	// GetCandidateCustomFieldListWithResponse request
	GetCandidateCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCandidateCustomFieldListResponse, error)

	// GetCandidateCustomFieldListItemWithResponse request
	GetCandidateCustomFieldListItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetCandidateCustomFieldListItemResponse, error)

	// PutCandidateCustomFieldListItemWithBodyWithResponse request with any body
	PutCandidateCustomFieldListItemWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCandidateCustomFieldListItemResponse, error)

	PutCandidateCustomFieldListItemWithResponse(ctx context.Context, fieldId int32, body PutCandidateCustomFieldListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCandidateCustomFieldListItemResponse, error)

	// GetCandidateAttachmentCategoryListWithResponse request
	GetCandidateAttachmentCategoryListWithResponse(ctx context.Context, params *GetCandidateAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*GetCandidateAttachmentCategoryListResponse, error)

	// GetCandidateNoteTypeListWithResponse request
	GetCandidateNoteTypeListWithResponse(ctx context.Context, params *GetCandidateNoteTypeListParams, reqEditors ...RequestEditorFn) (*GetCandidateNoteTypeListResponse, error)

	// GetCandidateRatingListWithResponse request
	GetCandidateRatingListWithResponse(ctx context.Context, params *GetCandidateRatingListParams, reqEditors ...RequestEditorFn) (*GetCandidateRatingListResponse, error)

	// GetCandidateSalutationListWithResponse request
	GetCandidateSalutationListWithResponse(ctx context.Context, params *GetCandidateSalutationListParams, reqEditors ...RequestEditorFn) (*GetCandidateSalutationListResponse, error)

	// GetCandidateSourceListWithResponse request
	GetCandidateSourceListWithResponse(ctx context.Context, params *GetCandidateSourceListParams, reqEditors ...RequestEditorFn) (*GetCandidateSourceListResponse, error)

	// GetCandidateStatusListWithResponse request
	GetCandidateStatusListWithResponse(ctx context.Context, params *GetCandidateStatusListParams, reqEditors ...RequestEditorFn) (*GetCandidateStatusListResponse, error)

	// GetCandidateStatusListItemWithResponse request
	GetCandidateStatusListItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetCandidateStatusListItemResponse, error)

	// FindCandidatesPayrollBillingsWithResponse request
	FindCandidatesPayrollBillingsWithResponse(ctx context.Context, params *FindCandidatesPayrollBillingsParams, reqEditors ...RequestEditorFn) (*FindCandidatesPayrollBillingsResponse, error)

	// GetCandidateWithResponse request
	GetCandidateWithResponse(ctx context.Context, candidateId int32, params *GetCandidateParams, reqEditors ...RequestEditorFn) (*GetCandidateResponse, error)

	// UpdateCandidateWithBodyWithResponse request with any body
	UpdateCandidateWithBodyWithResponse(ctx context.Context, candidateId int32, params *UpdateCandidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCandidateResponse, error)

	UpdateCandidateWithResponse(ctx context.Context, candidateId int32, params *UpdateCandidateParams, body UpdateCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCandidateResponse, error)

	// GetCandidateActivityByCandidateIdWithResponse request
	GetCandidateActivityByCandidateIdWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateActivityByCandidateIdResponse, error)

	// AddCandidateActivityWithBodyWithResponse request with any body
	AddCandidateActivityWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateActivityResponse, error)

	AddCandidateActivityWithResponse(ctx context.Context, candidateId int32, body AddCandidateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateActivityResponse, error)

	// GetCandidateActivityWithResponse request
	GetCandidateActivityWithResponse(ctx context.Context, candidateId int32, activityId int64, reqEditors ...RequestEditorFn) (*GetCandidateActivityResponse, error)

	// GetCandidateJobApplicationsWithResponse request
	GetCandidateJobApplicationsWithResponse(ctx context.Context, candidateId int32, params *GetCandidateJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetCandidateJobApplicationsResponse, error)

	// AddCandidateJobOrdersWithBodyWithResponse request with any body
	AddCandidateJobOrdersWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateJobOrdersResponse, error)

	AddCandidateJobOrdersWithResponse(ctx context.Context, candidateId int32, body AddCandidateJobOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateJobOrdersResponse, error)

	// GetActiveCandidateJobApplicationsWithResponse request
	GetActiveCandidateJobApplicationsWithResponse(ctx context.Context, candidateId int32, params *GetActiveCandidateJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetActiveCandidateJobApplicationsResponse, error)

	// FindCandidateAttachmentsWithResponse request
	FindCandidateAttachmentsWithResponse(ctx context.Context, candidateId int32, params *FindCandidateAttachmentsParams, reqEditors ...RequestEditorFn) (*FindCandidateAttachmentsResponse, error)

	// GetCandidateAttachmentWithResponse request
	GetCandidateAttachmentWithResponse(ctx context.Context, candidateId int32, attach int64, reqEditors ...RequestEditorFn) (*GetCandidateAttachmentResponse, error)

	// AddCandidateAttachmentWithBodyWithResponse request with any body
	AddCandidateAttachmentWithBodyWithResponse(ctx context.Context, candidateId int32, attach SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateAttachmentResponse, error)

	// UpdateCandidateAttachmentWithBodyWithResponse request with any body
	UpdateCandidateAttachmentWithBodyWithResponse(ctx context.Context, candidateId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCandidateAttachmentResponse, error)

	UpdateCandidateAttachmentWithResponse(ctx context.Context, candidateId int32, attach int64, body UpdateCandidateAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCandidateAttachmentResponse, error)

	// GetCandidateAvailabilityWithResponse request
	GetCandidateAvailabilityWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateAvailabilityResponse, error)

	// DeleteCandidateAvailabilityWeekWithResponse request
	DeleteCandidateAvailabilityWeekWithResponse(ctx context.Context, candidateId int32, params *DeleteCandidateAvailabilityWeekParams, reqEditors ...RequestEditorFn) (*DeleteCandidateAvailabilityWeekResponse, error)

	// UpdateCandidateAvailabilityWeekWithBodyWithResponse request with any body
	UpdateCandidateAvailabilityWeekWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCandidateAvailabilityWeekResponse, error)

	UpdateCandidateAvailabilityWeekWithResponse(ctx context.Context, candidateId int32, body UpdateCandidateAvailabilityWeekJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCandidateAvailabilityWeekResponse, error)

	// GetCandidateFloatsWithResponse request
	GetCandidateFloatsWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateFloatsResponse, error)

	// GetCandidateInterviewsWithResponse request
	GetCandidateInterviewsWithResponse(ctx context.Context, candidateId int32, params *GetCandidateInterviewsParams, reqEditors ...RequestEditorFn) (*GetCandidateInterviewsResponse, error)

	// GetCandidateNotesWithResponse request
	GetCandidateNotesWithResponse(ctx context.Context, candidateId int32, params *GetCandidateNotesParams, reqEditors ...RequestEditorFn) (*GetCandidateNotesResponse, error)

	// AddCandidateNoteWithBodyWithResponse request with any body
	AddCandidateNoteWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateNoteResponse, error)

	AddCandidateNoteWithResponse(ctx context.Context, candidateId int32, body AddCandidateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateNoteResponse, error)

	// GetCandidatePayrollBillingWithResponse request
	GetCandidatePayrollBillingWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidatePayrollBillingResponse, error)

	// DeleteCandidatePhotoWithResponse request
	DeleteCandidatePhotoWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*DeleteCandidatePhotoResponse, error)

	// GetCandidatePhotoWithResponse request
	GetCandidatePhotoWithResponse(ctx context.Context, candidateId int32, params *GetCandidatePhotoParams, reqEditors ...RequestEditorFn) (*GetCandidatePhotoResponse, error)

	// HeadCandidatePhotoWithResponse request
	HeadCandidatePhotoWithResponse(ctx context.Context, candidateId int32, params *HeadCandidatePhotoParams, reqEditors ...RequestEditorFn) (*HeadCandidatePhotoResponse, error)

	// UpdateCandidatePhotoWithBodyWithResponse request with any body
	UpdateCandidatePhotoWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCandidatePhotoResponse, error)

	// GetCandidatePlacementsWithResponse request
	GetCandidatePlacementsWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidatePlacementsResponse, error)

	// GetCandidateApprovedPlacementsWithResponse request
	GetCandidateApprovedPlacementsWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateApprovedPlacementsResponse, error)

	// PrivacyDeleteCandidateWithResponse request
	PrivacyDeleteCandidateWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*PrivacyDeleteCandidateResponse, error)

	// GetCandidateSkillsWithResponse request
	GetCandidateSkillsWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateSkillsResponse, error)

	// DeleteCandidateSkillsWithBodyWithResponse request with any body
	DeleteCandidateSkillsWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCandidateSkillsResponse, error)

	DeleteCandidateSkillsWithResponse(ctx context.Context, candidateId int32, body DeleteCandidateSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCandidateSkillsResponse, error)

	// PutCandidateSkillsWithBodyWithResponse request with any body
	PutCandidateSkillsWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCandidateSkillsResponse, error)

	PutCandidateSkillsWithResponse(ctx context.Context, candidateId int32, body PutCandidateSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCandidateSkillsResponse, error)

	// DeleteCandidateCategoryWithResponse request
	DeleteCandidateCategoryWithResponse(ctx context.Context, candidateId int32, categoryId int32, reqEditors ...RequestEditorFn) (*DeleteCandidateCategoryResponse, error)

	// PutCandidateStatusWithBodyWithResponse request with any body
	PutCandidateStatusWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCandidateStatusResponse, error)

	PutCandidateStatusWithResponse(ctx context.Context, candidateId int32, body PutCandidateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCandidateStatusResponse, error)

	// GetCandidateSubmissionsWithResponse request
	GetCandidateSubmissionsWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateSubmissionsResponse, error)

	// AddCandidateUserTaskWithBodyWithResponse request with any body
	AddCandidateUserTaskWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateUserTaskResponse, error)

	AddCandidateUserTaskWithResponse(ctx context.Context, candidateId int32, body AddCandidateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateUserTaskResponse, error)

	// GetCandidateUserTaskWithResponse request
	GetCandidateUserTaskWithResponse(ctx context.Context, candidateId int32, taskId int64, reqEditors ...RequestEditorFn) (*GetCandidateUserTaskResponse, error)

	// UpdateCandidateUserTaskWithBodyWithResponse request with any body
	UpdateCandidateUserTaskWithBodyWithResponse(ctx context.Context, candidateId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCandidateUserTaskResponse, error)

	UpdateCandidateUserTaskWithResponse(ctx context.Context, candidateId int32, taskId int64, body UpdateCandidateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCandidateUserTaskResponse, error)

	// GetCandidateVideosWithResponse request
	GetCandidateVideosWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateVideosResponse, error)

	// GetLatestCandidateVideoWithResponse request
	GetLatestCandidateVideoWithResponse(ctx context.Context, candidateId int32, videoType CandidateVideoType, reqEditors ...RequestEditorFn) (*GetLatestCandidateVideoResponse, error)

	// AddCandidateVideoWithBodyWithResponse request with any body
	AddCandidateVideoWithBodyWithResponse(ctx context.Context, candidateId int32, videoType CandidateVideoType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateVideoResponse, error)

	AddCandidateVideoWithResponse(ctx context.Context, candidateId int32, videoType CandidateVideoType, body AddCandidateVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateVideoResponse, error)

	// FindCategoriesWithResponse request
	FindCategoriesWithResponse(ctx context.Context, params *FindCategoriesParams, reqEditors ...RequestEditorFn) (*FindCategoriesResponse, error)

	// FindCompaniesWithResponse request
	FindCompaniesWithResponse(ctx context.Context, params *FindCompaniesParams, reqEditors ...RequestEditorFn) (*FindCompaniesResponse, error)

	// AddCompanyWithBodyWithResponse request with any body
	AddCompanyWithBodyWithResponse(ctx context.Context, params *AddCompanyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyResponse, error)

	AddCompanyWithResponse(ctx context.Context, params *AddCompanyParams, body AddCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyResponse, error)

	// FindCompanyActivityWithResponse request
	FindCompanyActivityWithResponse(ctx context.Context, params *FindCompanyActivityParams, reqEditors ...RequestEditorFn) (*FindCompanyActivityResponse, error)

	// FindCompanyActivitySettingsWithResponse request
	FindCompanyActivitySettingsWithResponse(ctx context.Context, params *FindCompanyActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindCompanyActivitySettingsResponse, error)

	// GetCompanyActivitySettingWithResponse request
	GetCompanyActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetCompanyActivitySettingResponse, error)

	// DeletedCompaniesWithResponse request
	DeletedCompaniesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedCompaniesResponse, error)

	// GetCompanyCustomFieldListWithResponse request
	GetCompanyCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCompanyCustomFieldListResponse, error)

	// GetCompanyCustomFieldListItemWithResponse request
	GetCompanyCustomFieldListItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetCompanyCustomFieldListItemResponse, error)

	// PutCompanyCustomFieldListWithBodyWithResponse request with any body
	PutCompanyCustomFieldListWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCompanyCustomFieldListResponse, error)

	PutCompanyCustomFieldListWithResponse(ctx context.Context, fieldId int32, body PutCompanyCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCompanyCustomFieldListResponse, error)

	// GetCompanyAttachmentCategoryListWithResponse request
	GetCompanyAttachmentCategoryListWithResponse(ctx context.Context, params *GetCompanyAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*GetCompanyAttachmentCategoryListResponse, error)

	// GetCompanyNoteTypeListWithResponse request
	GetCompanyNoteTypeListWithResponse(ctx context.Context, params *GetCompanyNoteTypeListParams, reqEditors ...RequestEditorFn) (*GetCompanyNoteTypeListResponse, error)

	// GetCompanyStatusListWithResponse request
	GetCompanyStatusListWithResponse(ctx context.Context, params *GetCompanyStatusListParams, reqEditors ...RequestEditorFn) (*GetCompanyStatusListResponse, error)

	// GetCompanyStatusListItemWithResponse request
	GetCompanyStatusListItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetCompanyStatusListItemResponse, error)

	// GetCompanyWithResponse request
	GetCompanyWithResponse(ctx context.Context, companyId int32, params *GetCompanyParams, reqEditors ...RequestEditorFn) (*GetCompanyResponse, error)

	// UpdateCompanyWithBodyWithResponse request with any body
	UpdateCompanyWithBodyWithResponse(ctx context.Context, companyId int32, params *UpdateCompanyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyResponse, error)

	UpdateCompanyWithResponse(ctx context.Context, companyId int32, params *UpdateCompanyParams, body UpdateCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompanyResponse, error)

	// GetCompanyActivityByCompanyIdWithResponse request
	GetCompanyActivityByCompanyIdWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyActivityByCompanyIdResponse, error)

	// AddCompanyActivityWithBodyWithResponse request with any body
	AddCompanyActivityWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyActivityResponse, error)

	AddCompanyActivityWithResponse(ctx context.Context, companyId int32, body AddCompanyActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyActivityResponse, error)

	// GetCompanyActivityWithResponse request
	GetCompanyActivityWithResponse(ctx context.Context, companyId int32, activityId int64, reqEditors ...RequestEditorFn) (*GetCompanyActivityResponse, error)

	// GetCompanyAddressesWithResponse request
	GetCompanyAddressesWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyAddressesResponse, error)

	// AddCompanyAddressWithBodyWithResponse request with any body
	AddCompanyAddressWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyAddressResponse, error)

	AddCompanyAddressWithResponse(ctx context.Context, companyId int32, body AddCompanyAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyAddressResponse, error)

	// RemoveCompanyAddressWithResponse request
	RemoveCompanyAddressWithResponse(ctx context.Context, companyId int32, addressId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveCompanyAddressResponse, error)

	// GetCompanyAddressWithResponse request
	GetCompanyAddressWithResponse(ctx context.Context, companyId int32, addressId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCompanyAddressResponse, error)

	// UpdateCompanyAddressWithBodyWithResponse request with any body
	UpdateCompanyAddressWithBodyWithResponse(ctx context.Context, companyId int32, addressId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyAddressResponse, error)

	UpdateCompanyAddressWithResponse(ctx context.Context, companyId int32, addressId openapi_types.UUID, body UpdateCompanyAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompanyAddressResponse, error)

	// FindCompanyAttachmentsWithResponse request
	FindCompanyAttachmentsWithResponse(ctx context.Context, companyId int32, params *FindCompanyAttachmentsParams, reqEditors ...RequestEditorFn) (*FindCompanyAttachmentsResponse, error)

	// GetCompanyAttachmentWithResponse request
	GetCompanyAttachmentWithResponse(ctx context.Context, companyId int32, attach int64, reqEditors ...RequestEditorFn) (*GetCompanyAttachmentResponse, error)

	// AddCompanyAttachmentWithBodyWithResponse request with any body
	AddCompanyAttachmentWithBodyWithResponse(ctx context.Context, companyId int32, attach CompanyAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyAttachmentResponse, error)

	// UpdateCompanyAttachmentWithBodyWithResponse request with any body
	UpdateCompanyAttachmentWithBodyWithResponse(ctx context.Context, companyId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyAttachmentResponse, error)

	UpdateCompanyAttachmentWithResponse(ctx context.Context, companyId int32, attach int64, body UpdateCompanyAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompanyAttachmentResponse, error)

	// GetCompanyContactsWithResponse request
	GetCompanyContactsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyContactsResponse, error)

	// GetCompanyFloatsWithResponse request
	GetCompanyFloatsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyFloatsResponse, error)

	// GetCompanyJobOrdersWithResponse request
	GetCompanyJobOrdersWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyJobOrdersResponse, error)

	// GetCompanyActiveJobOrdersWithResponse request
	GetCompanyActiveJobOrdersWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyActiveJobOrdersResponse, error)

	// DeleteCompanyLogoWithResponse request
	DeleteCompanyLogoWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*DeleteCompanyLogoResponse, error)

	// GetCompanyLogoWithResponse request
	GetCompanyLogoWithResponse(ctx context.Context, companyId int32, params *GetCompanyLogoParams, reqEditors ...RequestEditorFn) (*GetCompanyLogoResponse, error)

	// HeadCompanyLogoWithResponse request
	HeadCompanyLogoWithResponse(ctx context.Context, companyId int32, params *HeadCompanyLogoParams, reqEditors ...RequestEditorFn) (*HeadCompanyLogoResponse, error)

	// UpdateCompanyLogoWithBodyWithResponse request with any body
	UpdateCompanyLogoWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyLogoResponse, error)

	// GetCompanyNotesWithResponse request
	GetCompanyNotesWithResponse(ctx context.Context, companyId int32, params *GetCompanyNotesParams, reqEditors ...RequestEditorFn) (*GetCompanyNotesResponse, error)

	// AddCompanyNoteWithBodyWithResponse request with any body
	AddCompanyNoteWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyNoteResponse, error)

	AddCompanyNoteWithResponse(ctx context.Context, companyId int32, body AddCompanyNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyNoteResponse, error)

	// GetCompanyPlacementsWithResponse request
	GetCompanyPlacementsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyPlacementsResponse, error)

	// GetCompanyApprovedPlacementsWithResponse request
	GetCompanyApprovedPlacementsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyApprovedPlacementsResponse, error)

	// GetCompanyRequisitionsWithResponse request
	GetCompanyRequisitionsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyRequisitionsResponse, error)

	// GetCompanySkillsWithResponse request
	GetCompanySkillsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanySkillsResponse, error)

	// PutCompanyStatusWithBodyWithResponse request with any body
	PutCompanyStatusWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCompanyStatusResponse, error)

	PutCompanyStatusWithResponse(ctx context.Context, companyId int32, body PutCompanyStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCompanyStatusResponse, error)

	// GetCompanySubmissionsWithResponse request
	GetCompanySubmissionsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanySubmissionsResponse, error)

	// GetCompanySubsidiariesWithResponse request
	GetCompanySubsidiariesWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanySubsidiariesResponse, error)

	// AddCompanyUserTaskWithBodyWithResponse request with any body
	AddCompanyUserTaskWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyUserTaskResponse, error)

	AddCompanyUserTaskWithResponse(ctx context.Context, companyId int32, body AddCompanyUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyUserTaskResponse, error)

	// GetCompanyUserTaskWithResponse request
	GetCompanyUserTaskWithResponse(ctx context.Context, companyId int32, taskId int64, reqEditors ...RequestEditorFn) (*GetCompanyUserTaskResponse, error)

	// UpdateCompanyUserTaskWithBodyWithResponse request with any body
	UpdateCompanyUserTaskWithBodyWithResponse(ctx context.Context, companyId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyUserTaskResponse, error)

	UpdateCompanyUserTaskWithResponse(ctx context.Context, companyId int32, taskId int64, body UpdateCompanyUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompanyUserTaskResponse, error)

	// ListCompanyWorkflowsWithResponse request
	ListCompanyWorkflowsWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, params *ListCompanyWorkflowsParams, reqEditors ...RequestEditorFn) (*ListCompanyWorkflowsResponse, error)

	// AddCompanyWorkflowWithBodyWithResponse request with any body
	AddCompanyWorkflowWithBodyWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyWorkflowResponse, error)

	AddCompanyWorkflowWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, body AddCompanyWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyWorkflowResponse, error)

	// GetCompanyWorkflowWithResponse request
	GetCompanyWorkflowWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, reqEditors ...RequestEditorFn) (*GetCompanyWorkflowResponse, error)

	// UpdateCompanyWorkflowWithBodyWithResponse request with any body
	UpdateCompanyWorkflowWithBodyWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyWorkflowResponse, error)

	UpdateCompanyWorkflowWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, body UpdateCompanyWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompanyWorkflowResponse, error)

	// FindContactsWithResponse request
	FindContactsWithResponse(ctx context.Context, params *FindContactsParams, reqEditors ...RequestEditorFn) (*FindContactsResponse, error)

	// AddContactWithBodyWithResponse request with any body
	AddContactWithBodyWithResponse(ctx context.Context, params *AddContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddContactResponse, error)

	AddContactWithResponse(ctx context.Context, params *AddContactParams, body AddContactJSONRequestBody, reqEditors ...RequestEditorFn) (*AddContactResponse, error)

	// FindContactActivityWithResponse request
	FindContactActivityWithResponse(ctx context.Context, params *FindContactActivityParams, reqEditors ...RequestEditorFn) (*FindContactActivityResponse, error)

	// FindContactActivitySettingsWithResponse request
	FindContactActivitySettingsWithResponse(ctx context.Context, params *FindContactActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindContactActivitySettingsResponse, error)

	// GetContactActivitySettingWithResponse request
	GetContactActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetContactActivitySettingResponse, error)

	// DeletedContactsWithResponse request
	DeletedContactsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedContactsResponse, error)

	// GetContactCustomFieldListWithResponse request
	GetContactCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactCustomFieldListResponse, error)

	// PutContactCustomFieldListWithBodyWithResponse request with any body
	PutContactCustomFieldListWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactCustomFieldListResponse, error)

	PutContactCustomFieldListWithResponse(ctx context.Context, fieldId int32, body PutContactCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactCustomFieldListResponse, error)

	// GetContactCustomFieldListItemWithResponse request
	GetContactCustomFieldListItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetContactCustomFieldListItemResponse, error)

	// GetContactAttachmentCategoryListWithResponse request
	GetContactAttachmentCategoryListWithResponse(ctx context.Context, params *GetContactAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*GetContactAttachmentCategoryListResponse, error)

	// GetContactNoteTypeListWithResponse request
	GetContactNoteTypeListWithResponse(ctx context.Context, params *GetContactNoteTypeListParams, reqEditors ...RequestEditorFn) (*GetContactNoteTypeListResponse, error)

	// GetContactSalutationListWithResponse request
	GetContactSalutationListWithResponse(ctx context.Context, params *GetContactSalutationListParams, reqEditors ...RequestEditorFn) (*GetContactSalutationListResponse, error)

	// GetContactStatusListWithResponse request
	GetContactStatusListWithResponse(ctx context.Context, params *GetContactStatusListParams, reqEditors ...RequestEditorFn) (*GetContactStatusListResponse, error)

	// GetContactStatusListItemWithResponse request
	GetContactStatusListItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetContactStatusListItemResponse, error)

	// GetContactWithResponse request
	GetContactWithResponse(ctx context.Context, contactId int32, params *GetContactParams, reqEditors ...RequestEditorFn) (*GetContactResponse, error)

	// UpdateContactWithBodyWithResponse request with any body
	UpdateContactWithBodyWithResponse(ctx context.Context, contactId int32, params *UpdateContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error)

	UpdateContactWithResponse(ctx context.Context, contactId int32, params *UpdateContactParams, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error)

	// GetContactActivityByContactIdWithResponse request
	GetContactActivityByContactIdWithResponse(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*GetContactActivityByContactIdResponse, error)

	// AddContactActivityWithBodyWithResponse request with any body
	AddContactActivityWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddContactActivityResponse, error)

	AddContactActivityWithResponse(ctx context.Context, contactId int32, body AddContactActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddContactActivityResponse, error)

	// GetContactActivityWithResponse request
	GetContactActivityWithResponse(ctx context.Context, contactId int32, activityId int64, reqEditors ...RequestEditorFn) (*GetContactActivityResponse, error)

	// FindContactAttachmentsWithResponse request
	FindContactAttachmentsWithResponse(ctx context.Context, contactId int32, params *FindContactAttachmentsParams, reqEditors ...RequestEditorFn) (*FindContactAttachmentsResponse, error)

	// GetContactAttachmentWithResponse request
	GetContactAttachmentWithResponse(ctx context.Context, contactId int32, attach int64, reqEditors ...RequestEditorFn) (*GetContactAttachmentResponse, error)

	// AddContactAttachmentWithBodyWithResponse request with any body
	AddContactAttachmentWithBodyWithResponse(ctx context.Context, contactId int32, attach ContactAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddContactAttachmentResponse, error)

	// UpdateContactAttachmentWithBodyWithResponse request with any body
	UpdateContactAttachmentWithBodyWithResponse(ctx context.Context, contactId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactAttachmentResponse, error)

	UpdateContactAttachmentWithResponse(ctx context.Context, contactId int32, attach int64, body UpdateContactAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactAttachmentResponse, error)

	// GetContactInterviewsWithResponse request
	GetContactInterviewsWithResponse(ctx context.Context, contactId int32, params *GetContactInterviewsParams, reqEditors ...RequestEditorFn) (*GetContactInterviewsResponse, error)

	// GetContactJobOrdersWithResponse request
	GetContactJobOrdersWithResponse(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*GetContactJobOrdersResponse, error)

	// GetContactActiveJobOrdersWithResponse request
	GetContactActiveJobOrdersWithResponse(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*GetContactActiveJobOrdersResponse, error)

	// GetContactNotesWithResponse request
	GetContactNotesWithResponse(ctx context.Context, contactId int32, params *GetContactNotesParams, reqEditors ...RequestEditorFn) (*GetContactNotesResponse, error)

	// AddContactNoteWithBodyWithResponse request with any body
	AddContactNoteWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddContactNoteResponse, error)

	AddContactNoteWithResponse(ctx context.Context, contactId int32, body AddContactNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddContactNoteResponse, error)

	// DeletteContactPhotoWithResponse request
	DeletteContactPhotoWithResponse(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*DeletteContactPhotoResponse, error)

	// GetContactPhotoWithResponse request
	GetContactPhotoWithResponse(ctx context.Context, contactId int32, params *GetContactPhotoParams, reqEditors ...RequestEditorFn) (*GetContactPhotoResponse, error)

	// HeadContactPhotoWithResponse request
	HeadContactPhotoWithResponse(ctx context.Context, contactId int32, params *HeadContactPhotoParams, reqEditors ...RequestEditorFn) (*HeadContactPhotoResponse, error)

	// UpdateContactPhotoWithBodyWithResponse request with any body
	UpdateContactPhotoWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactPhotoResponse, error)

	// GetContactSkillsWithResponse request
	GetContactSkillsWithResponse(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*GetContactSkillsResponse, error)

	// DeleteContactSkillsWithBodyWithResponse request with any body
	DeleteContactSkillsWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteContactSkillsResponse, error)

	DeleteContactSkillsWithResponse(ctx context.Context, contactId int32, body DeleteContactSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteContactSkillsResponse, error)

	// PutContactSkillsWithBodyWithResponse request with any body
	PutContactSkillsWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactSkillsResponse, error)

	PutContactSkillsWithResponse(ctx context.Context, contactId int32, body PutContactSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactSkillsResponse, error)

	// DeleteContactCategoryWithResponse request
	DeleteContactCategoryWithResponse(ctx context.Context, contactId int32, categoryId int32, reqEditors ...RequestEditorFn) (*DeleteContactCategoryResponse, error)

	// PutContactStatusWithBodyWithResponse request with any body
	PutContactStatusWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactStatusResponse, error)

	PutContactStatusWithResponse(ctx context.Context, contactId int32, body PutContactStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactStatusResponse, error)

	// AddContactUserTaskWithBodyWithResponse request with any body
	AddContactUserTaskWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddContactUserTaskResponse, error)

	AddContactUserTaskWithResponse(ctx context.Context, contactId int32, body AddContactUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddContactUserTaskResponse, error)

	// GetContactUserTaskWithResponse request
	GetContactUserTaskWithResponse(ctx context.Context, contactId int32, taskId int64, reqEditors ...RequestEditorFn) (*GetContactUserTaskResponse, error)

	// UpdateContactUserTaskWithBodyWithResponse request with any body
	UpdateContactUserTaskWithBodyWithResponse(ctx context.Context, contactId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactUserTaskResponse, error)

	UpdateContactUserTaskWithResponse(ctx context.Context, contactId int32, taskId int64, body UpdateContactUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactUserTaskResponse, error)

	// FindCountriesWithResponse request
	FindCountriesWithResponse(ctx context.Context, params *FindCountriesParams, reqEditors ...RequestEditorFn) (*FindCountriesResponse, error)

	// GetFloatsWithResponse request
	GetFloatsWithResponse(ctx context.Context, params *GetFloatsParams, reqEditors ...RequestEditorFn) (*GetFloatsResponse, error)

	// GetFloatWithResponse request
	GetFloatWithResponse(ctx context.Context, floatId int64, reqEditors ...RequestEditorFn) (*GetFloatResponse, error)

	// FindFoldersWithResponse request
	FindFoldersWithResponse(ctx context.Context, params *FindFoldersParams, reqEditors ...RequestEditorFn) (*FindFoldersResponse, error)

	// GetFolderWithResponse request
	GetFolderWithResponse(ctx context.Context, folderId int64, params *GetFolderParams, reqEditors ...RequestEditorFn) (*GetFolderResponse, error)

	// PatchFolderWithBodyWithResponse request with any body
	PatchFolderWithBodyWithResponse(ctx context.Context, folderId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFolderResponse, error)

	PatchFolderWithResponse(ctx context.Context, folderId int64, body PatchFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFolderResponse, error)

	// FindInterviewsWithResponse request
	FindInterviewsWithResponse(ctx context.Context, params *FindInterviewsParams, reqEditors ...RequestEditorFn) (*FindInterviewsResponse, error)

	// DeleteInterviewWithResponse request
	DeleteInterviewWithResponse(ctx context.Context, interviewId int32, reqEditors ...RequestEditorFn) (*DeleteInterviewResponse, error)

	// GetInterviewWithResponse request
	GetInterviewWithResponse(ctx context.Context, interviewId int32, applicationId int64, params *GetInterviewParams, reqEditors ...RequestEditorFn) (*GetInterviewResponse, error)

	// GetInterviewEvaluationsWithResponse request
	GetInterviewEvaluationsWithResponse(ctx context.Context, interviewId int32, applicationId int64, reqEditors ...RequestEditorFn) (*GetInterviewEvaluationsResponse, error)

	// GetExternalInterviewEvaluationWithResponse request
	GetExternalInterviewEvaluationWithResponse(ctx context.Context, interviewId int32, applicationId int64, contactId int32, reqEditors ...RequestEditorFn) (*GetExternalInterviewEvaluationResponse, error)

	// PutExternalInterviewEvaluationWithBodyWithResponse request with any body
	PutExternalInterviewEvaluationWithBodyWithResponse(ctx context.Context, interviewId int32, applicationId int64, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutExternalInterviewEvaluationResponse, error)

	PutExternalInterviewEvaluationWithResponse(ctx context.Context, interviewId int32, applicationId int64, contactId int32, body PutExternalInterviewEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutExternalInterviewEvaluationResponse, error)

	// GetInternalInterviewEvaluationWithResponse request
	GetInternalInterviewEvaluationWithResponse(ctx context.Context, interviewId int32, applicationId int64, userId int32, reqEditors ...RequestEditorFn) (*GetInternalInterviewEvaluationResponse, error)

	// PutInternalInterviewEvaluationWithBodyWithResponse request with any body
	PutInternalInterviewEvaluationWithBodyWithResponse(ctx context.Context, interviewId int32, applicationId int64, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInternalInterviewEvaluationResponse, error)

	PutInternalInterviewEvaluationWithResponse(ctx context.Context, interviewId int32, applicationId int64, userId int32, body PutInternalInterviewEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInternalInterviewEvaluationResponse, error)

	// GetJobAdsWithResponse request
	GetJobAdsWithResponse(ctx context.Context, params *GetJobAdsParams, reqEditors ...RequestEditorFn) (*GetJobAdsResponse, error)

	// AddJobAdDraftWithBodyWithResponse request with any body
	AddJobAdDraftWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobAdDraftResponse, error)

	AddJobAdDraftWithResponse(ctx context.Context, body AddJobAdDraftJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobAdDraftResponse, error)

	// GetJobAdWithResponse request
	GetJobAdWithResponse(ctx context.Context, adId int32, params *GetJobAdParams, reqEditors ...RequestEditorFn) (*GetJobAdResponse, error)

	// UpdateJobAdDraftWithBodyWithResponse request with any body
	UpdateJobAdDraftWithBodyWithResponse(ctx context.Context, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobAdDraftResponse, error)

	UpdateJobAdDraftWithResponse(ctx context.Context, adId int32, body UpdateJobAdDraftJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobAdDraftResponse, error)

	// GetJobAdJobApplicationsWithResponse request
	GetJobAdJobApplicationsWithResponse(ctx context.Context, adId int32, params *GetJobAdJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetJobAdJobApplicationsResponse, error)

	// GetJobAdActiveJobApplicationsWithResponse request
	GetJobAdActiveJobApplicationsWithResponse(ctx context.Context, adId int32, params *GetJobAdActiveJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetJobAdActiveJobApplicationsResponse, error)

	// FindJobBoardsWithResponse request
	FindJobBoardsWithResponse(ctx context.Context, params *FindJobBoardsParams, reqEditors ...RequestEditorFn) (*FindJobBoardsResponse, error)

	// GetJobBoardWithResponse request
	GetJobBoardWithResponse(ctx context.Context, boardId int32, reqEditors ...RequestEditorFn) (*GetJobBoardResponse, error)

	// FindJobBoardJobAdsWithResponse request
	FindJobBoardJobAdsWithResponse(ctx context.Context, boardId int32, params *FindJobBoardJobAdsParams, reqEditors ...RequestEditorFn) (*FindJobBoardJobAdsResponse, error)

	// GetJobBoardJobAdWithResponse request
	GetJobBoardJobAdWithResponse(ctx context.Context, boardId int32, adId int32, reqEditors ...RequestEditorFn) (*GetJobBoardJobAdResponse, error)

	// SubmitJobBoardJobApplicationWithBodyWithResponse request with any body
	SubmitJobBoardJobApplicationWithBodyWithResponse(ctx context.Context, boardId int32, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitJobBoardJobApplicationResponse, error)

	SubmitJobBoardJobApplicationWithResponse(ctx context.Context, boardId int32, adId int32, body SubmitJobBoardJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitJobBoardJobApplicationResponse, error)

	// AttachJobBoardJobApplicationDocumentWithBodyWithResponse request with any body
	AttachJobBoardJobApplicationDocumentWithBodyWithResponse(ctx context.Context, boardId int32, adId int32, applicationId int64, attachmentType SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachJobBoardJobApplicationDocumentResponse, error)

	// FindJobOrdersWithResponse request
	FindJobOrdersWithResponse(ctx context.Context, params *FindJobOrdersParams, reqEditors ...RequestEditorFn) (*FindJobOrdersResponse, error)

	// AddJobOrderWithBodyWithResponse request with any body
	AddJobOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderResponse, error)

	AddJobOrderWithResponse(ctx context.Context, body AddJobOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobOrderResponse, error)

	// FindJobOrderActivityWithResponse request
	FindJobOrderActivityWithResponse(ctx context.Context, params *FindJobOrderActivityParams, reqEditors ...RequestEditorFn) (*FindJobOrderActivityResponse, error)

	// FindJobOrderActivitySettingsWithResponse request
	FindJobOrderActivitySettingsWithResponse(ctx context.Context, params *FindJobOrderActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindJobOrderActivitySettingsResponse, error)

	// GetJobOrderActivitySettingWithResponse request
	GetJobOrderActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetJobOrderActivitySettingResponse, error)

	// DeletedJobOrdersWithResponse request
	DeletedJobOrdersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedJobOrdersResponse, error)

	// GetJobOrderCustomFieldListWithResponse request
	GetJobOrderCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJobOrderCustomFieldListResponse, error)

	// PutJobOrderCustomFieldListWithBodyWithResponse request with any body
	PutJobOrderCustomFieldListWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobOrderCustomFieldListResponse, error)

	PutJobOrderCustomFieldListWithResponse(ctx context.Context, fieldId int32, body PutJobOrderCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobOrderCustomFieldListResponse, error)

	// GetJobOrderCustomFieldItemWithResponse request
	GetJobOrderCustomFieldItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetJobOrderCustomFieldItemResponse, error)

	// GetJobOrderAttachmentCategoryListWithResponse request
	GetJobOrderAttachmentCategoryListWithResponse(ctx context.Context, params *GetJobOrderAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*GetJobOrderAttachmentCategoryListResponse, error)

	// GetJobOrderNoteTypeListWithResponse request
	GetJobOrderNoteTypeListWithResponse(ctx context.Context, params *GetJobOrderNoteTypeListParams, reqEditors ...RequestEditorFn) (*GetJobOrderNoteTypeListResponse, error)

	// GetJobOrderSourceListWithResponse request
	GetJobOrderSourceListWithResponse(ctx context.Context, params *GetJobOrderSourceListParams, reqEditors ...RequestEditorFn) (*GetJobOrderSourceListResponse, error)

	// GetJobOrderStatusListWithResponse request
	GetJobOrderStatusListWithResponse(ctx context.Context, params *GetJobOrderStatusListParams, reqEditors ...RequestEditorFn) (*GetJobOrderStatusListResponse, error)

	// GetJobOrderStatusItemWithResponse request
	GetJobOrderStatusItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetJobOrderStatusItemResponse, error)

	// GetJobOrderWithResponse request
	GetJobOrderWithResponse(ctx context.Context, jobId int32, params *GetJobOrderParams, reqEditors ...RequestEditorFn) (*GetJobOrderResponse, error)

	// UpdateJobOrderWithBodyWithResponse request with any body
	UpdateJobOrderWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobOrderResponse, error)

	UpdateJobOrderWithResponse(ctx context.Context, jobId int32, body UpdateJobOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobOrderResponse, error)

	// GetJobOrderActivityByJobIdWithResponse request
	GetJobOrderActivityByJobIdWithResponse(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*GetJobOrderActivityByJobIdResponse, error)

	// AddJobOrderActivityWithBodyWithResponse request with any body
	AddJobOrderActivityWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderActivityResponse, error)

	AddJobOrderActivityWithResponse(ctx context.Context, jobId int32, body AddJobOrderActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobOrderActivityResponse, error)

	// GetJobOrderActivityWithResponse request
	GetJobOrderActivityWithResponse(ctx context.Context, jobId int32, activityId int64, reqEditors ...RequestEditorFn) (*GetJobOrderActivityResponse, error)

	// GetJobOrderJobApplicationsWithResponse request
	GetJobOrderJobApplicationsWithResponse(ctx context.Context, jobId int32, params *GetJobOrderJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetJobOrderJobApplicationsResponse, error)

	// AddJobOrderCandidatesWithBodyWithResponse request with any body
	AddJobOrderCandidatesWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderCandidatesResponse, error)

	AddJobOrderCandidatesWithResponse(ctx context.Context, jobId int32, body AddJobOrderCandidatesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobOrderCandidatesResponse, error)

	// GetJobOrderActiveJobApplicationsWithResponse request
	GetJobOrderActiveJobApplicationsWithResponse(ctx context.Context, jobId int32, params *GetJobOrderActiveJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetJobOrderActiveJobApplicationsResponse, error)

	// SubmitJobOrderCandidateWithBodyWithResponse request with any body
	SubmitJobOrderCandidateWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitJobOrderCandidateResponse, error)

	SubmitJobOrderCandidateWithResponse(ctx context.Context, jobId int32, body SubmitJobOrderCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitJobOrderCandidateResponse, error)

	// FindJobOrderAttachmentsWithResponse request
	FindJobOrderAttachmentsWithResponse(ctx context.Context, jobId int32, params *FindJobOrderAttachmentsParams, reqEditors ...RequestEditorFn) (*FindJobOrderAttachmentsResponse, error)

	// GetJobOrderAttachmentWithResponse request
	GetJobOrderAttachmentWithResponse(ctx context.Context, jobId int32, attach int64, reqEditors ...RequestEditorFn) (*GetJobOrderAttachmentResponse, error)

	// AddJobOrderAttachmentWithBodyWithResponse request with any body
	AddJobOrderAttachmentWithBodyWithResponse(ctx context.Context, jobId int32, attach JobOrderAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderAttachmentResponse, error)

	// UpdateJobOrderAttachmentWithBodyWithResponse request with any body
	UpdateJobOrderAttachmentWithBodyWithResponse(ctx context.Context, jobId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobOrderAttachmentResponse, error)

	UpdateJobOrderAttachmentWithResponse(ctx context.Context, jobId int32, attach int64, body UpdateJobOrderAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobOrderAttachmentResponse, error)

	// InvoicesWithResponse request
	InvoicesWithResponse(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*InvoicesResponse, error)

	// GetJobOrderInvoiceWithResponse request
	GetJobOrderInvoiceWithResponse(ctx context.Context, jobId int32, invoiceId int32, reqEditors ...RequestEditorFn) (*GetJobOrderInvoiceResponse, error)

	// GetJobOrderNotesWithResponse request
	GetJobOrderNotesWithResponse(ctx context.Context, jobId int32, params *GetJobOrderNotesParams, reqEditors ...RequestEditorFn) (*GetJobOrderNotesResponse, error)

	// AddJobOrderNoteWithBodyWithResponse request with any body
	AddJobOrderNoteWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderNoteResponse, error)

	AddJobOrderNoteWithResponse(ctx context.Context, jobId int32, body AddJobOrderNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobOrderNoteResponse, error)

	// GetJobOrderPlacementsWithResponse request
	GetJobOrderPlacementsWithResponse(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*GetJobOrderPlacementsResponse, error)

	// GetJobOrderApprovedPlacementsWithResponse request
	GetJobOrderApprovedPlacementsWithResponse(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*GetJobOrderApprovedPlacementsResponse, error)

	// PutJobOrderStatusWithBodyWithResponse request with any body
	PutJobOrderStatusWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobOrderStatusResponse, error)

	PutJobOrderStatusWithResponse(ctx context.Context, jobId int32, body PutJobOrderStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobOrderStatusResponse, error)

	// GetJobOrderSubmissionsWithResponse request
	GetJobOrderSubmissionsWithResponse(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*GetJobOrderSubmissionsResponse, error)

	// AddJobOrderUserTaskWithBodyWithResponse request with any body
	AddJobOrderUserTaskWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderUserTaskResponse, error)

	AddJobOrderUserTaskWithResponse(ctx context.Context, jobId int32, body AddJobOrderUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobOrderUserTaskResponse, error)

	// GetJobOrderUserTaskWithResponse request
	GetJobOrderUserTaskWithResponse(ctx context.Context, jobId int32, taskId int64, reqEditors ...RequestEditorFn) (*GetJobOrderUserTaskResponse, error)

	// UpdateJobOrderUserTaskWithBodyWithResponse request with any body
	UpdateJobOrderUserTaskWithBodyWithResponse(ctx context.Context, jobId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobOrderUserTaskResponse, error)

	UpdateJobOrderUserTaskWithResponse(ctx context.Context, jobId int32, taskId int64, body UpdateJobOrderUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobOrderUserTaskResponse, error)

	// DeleteJobOrderPayrollBillingWithResponse request
	DeleteJobOrderPayrollBillingWithResponse(ctx context.Context, jobOrderId int32, reqEditors ...RequestEditorFn) (*DeleteJobOrderPayrollBillingResponse, error)

	// GetJobOrderPayrollBillingWithResponse request
	GetJobOrderPayrollBillingWithResponse(ctx context.Context, jobOrderId int32, reqEditors ...RequestEditorFn) (*GetJobOrderPayrollBillingResponse, error)

	// AddJobOrderPayrollBillingWithResponse request
	AddJobOrderPayrollBillingWithResponse(ctx context.Context, jobOrderId int32, rateCardId int32, reqEditors ...RequestEditorFn) (*AddJobOrderPayrollBillingResponse, error)

	// UpdateJobOrderPayrollBillingWithResponse request
	UpdateJobOrderPayrollBillingWithResponse(ctx context.Context, jobOrderId int32, rateCardId int32, reqEditors ...RequestEditorFn) (*UpdateJobOrderPayrollBillingResponse, error)

	// FindLocationsWithResponse request
	FindLocationsWithResponse(ctx context.Context, params *FindLocationsParams, reqEditors ...RequestEditorFn) (*FindLocationsResponse, error)

	// FindNotesWithResponse request
	FindNotesWithResponse(ctx context.Context, params *FindNotesParams, reqEditors ...RequestEditorFn) (*FindNotesResponse, error)

	// AddNoteWithBodyWithResponse request with any body
	AddNoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNoteResponse, error)

	AddNoteWithResponse(ctx context.Context, body AddNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNoteResponse, error)

	// GetNoteWithResponse request
	GetNoteWithResponse(ctx context.Context, noteId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNoteResponse, error)

	// UpdateNoteWithBodyWithResponse request with any body
	UpdateNoteWithBodyWithResponse(ctx context.Context, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNoteResponse, error)

	UpdateNoteWithResponse(ctx context.Context, noteId openapi_types.UUID, body UpdateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNoteResponse, error)

	// AddNoteAttachmentWithBodyWithResponse request with any body
	AddNoteAttachmentWithBodyWithResponse(ctx context.Context, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNoteAttachmentResponse, error)

	// GetNoteAttachmentWithResponse request
	GetNoteAttachmentWithResponse(ctx context.Context, noteId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNoteAttachmentResponse, error)

	// FindOpportunitiesWithResponse request
	FindOpportunitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindOpportunitiesResponse, error)

	// AddOpportunityWithBodyWithResponse request with any body
	AddOpportunityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOpportunityResponse, error)

	AddOpportunityWithResponse(ctx context.Context, body AddOpportunityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddOpportunityResponse, error)

	// GetOpportunityWithResponse request
	GetOpportunityWithResponse(ctx context.Context, opportunityId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOpportunityResponse, error)

	// UpdateOpportunityWithBodyWithResponse request with any body
	UpdateOpportunityWithBodyWithResponse(ctx context.Context, opportunityId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOpportunityResponse, error)

	UpdateOpportunityWithResponse(ctx context.Context, opportunityId openapi_types.UUID, body UpdateOpportunityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOpportunityResponse, error)

	// FindPartnerActionsWithResponse request
	FindPartnerActionsWithResponse(ctx context.Context, params *FindPartnerActionsParams, reqEditors ...RequestEditorFn) (*FindPartnerActionsResponse, error)

	// GetPartnerActionJobApplicationsWithResponse request
	GetPartnerActionJobApplicationsWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetPartnerActionJobApplicationsResponse, error)

	// CompleteJobApplicationPartnerActionWithBodyWithResponse request with any body
	CompleteJobApplicationPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteJobApplicationPartnerActionResponse, error)

	CompleteJobApplicationPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body CompleteJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteJobApplicationPartnerActionResponse, error)

	// ProgressJobApplicationPartnerActionWithBodyWithResponse request with any body
	ProgressJobApplicationPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressJobApplicationPartnerActionResponse, error)

	ProgressJobApplicationPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body ProgressJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressJobApplicationPartnerActionResponse, error)

	// RejectJobApplicationPartnerActionWithBodyWithResponse request with any body
	RejectJobApplicationPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectJobApplicationPartnerActionResponse, error)

	RejectJobApplicationPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body RejectJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectJobApplicationPartnerActionResponse, error)

	// GetPartnerActionCandidatesWithResponse request
	GetPartnerActionCandidatesWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionCandidatesParams, reqEditors ...RequestEditorFn) (*GetPartnerActionCandidatesResponse, error)

	// CompleteCandidatePartnerActionWithBodyWithResponse request with any body
	CompleteCandidatePartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteCandidatePartnerActionResponse, error)

	CompleteCandidatePartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body CompleteCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteCandidatePartnerActionResponse, error)

	// ProgressCandidatePartnerActionWithBodyWithResponse request with any body
	ProgressCandidatePartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressCandidatePartnerActionResponse, error)

	ProgressCandidatePartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body ProgressCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressCandidatePartnerActionResponse, error)

	// RejectCandidatePartnerActionWithBodyWithResponse request with any body
	RejectCandidatePartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectCandidatePartnerActionResponse, error)

	RejectCandidatePartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body RejectCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectCandidatePartnerActionResponse, error)

	// GetPartnerActionCompaniesWithResponse request
	GetPartnerActionCompaniesWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionCompaniesParams, reqEditors ...RequestEditorFn) (*GetPartnerActionCompaniesResponse, error)

	// CompleteCompanyPartnerActionWithBodyWithResponse request with any body
	CompleteCompanyPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteCompanyPartnerActionResponse, error)

	CompleteCompanyPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, body CompleteCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteCompanyPartnerActionResponse, error)

	// ProgressCompanyPartnerActionWithBodyWithResponse request with any body
	ProgressCompanyPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressCompanyPartnerActionResponse, error)

	ProgressCompanyPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, body ProgressCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressCompanyPartnerActionResponse, error)

	// RejectCompanyPartnerActionWithBodyWithResponse request with any body
	RejectCompanyPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectCompanyPartnerActionResponse, error)

	RejectCompanyPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, body RejectCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectCompanyPartnerActionResponse, error)

	// GetPartnerActionContactsWithResponse request
	GetPartnerActionContactsWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionContactsParams, reqEditors ...RequestEditorFn) (*GetPartnerActionContactsResponse, error)

	// CompleteContactPartnerActionWithBodyWithResponse request with any body
	CompleteContactPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteContactPartnerActionResponse, error)

	CompleteContactPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, body CompleteContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteContactPartnerActionResponse, error)

	// ProgressContactPartnerActionWithBodyWithResponse request with any body
	ProgressContactPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressContactPartnerActionResponse, error)

	ProgressContactPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, body ProgressContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressContactPartnerActionResponse, error)

	// RejectContactPartnerActionWithBodyWithResponse request with any body
	RejectContactPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectContactPartnerActionResponse, error)

	RejectContactPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, body RejectContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectContactPartnerActionResponse, error)

	// GetPartnerActionJobAdsWithResponse request
	GetPartnerActionJobAdsWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobAdsParams, reqEditors ...RequestEditorFn) (*GetPartnerActionJobAdsResponse, error)

	// CompleteJobAdPartnerActionWithBodyWithResponse request with any body
	CompleteJobAdPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteJobAdPartnerActionResponse, error)

	CompleteJobAdPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, body CompleteJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteJobAdPartnerActionResponse, error)

	// ProgressJobAdPartnerActionWithBodyWithResponse request with any body
	ProgressJobAdPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressJobAdPartnerActionResponse, error)

	ProgressJobAdPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, body ProgressJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressJobAdPartnerActionResponse, error)

	// RejectJobAdPartnerActionWithBodyWithResponse request with any body
	RejectJobAdPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectJobAdPartnerActionResponse, error)

	RejectJobAdPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, body RejectJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectJobAdPartnerActionResponse, error)

	// GetPartnerActionJobOrdersWithResponse request
	GetPartnerActionJobOrdersWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobOrdersParams, reqEditors ...RequestEditorFn) (*GetPartnerActionJobOrdersResponse, error)

	// CompleteJobOrderPartnerActionWithBodyWithResponse request with any body
	CompleteJobOrderPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteJobOrderPartnerActionResponse, error)

	CompleteJobOrderPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, body CompleteJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteJobOrderPartnerActionResponse, error)

	// ProgressJobOrderPartnerActionWithBodyWithResponse request with any body
	ProgressJobOrderPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressJobOrderPartnerActionResponse, error)

	ProgressJobOrderPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, body ProgressJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressJobOrderPartnerActionResponse, error)

	// RejectJobOrderPartnerActionWithBodyWithResponse request with any body
	RejectJobOrderPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectJobOrderPartnerActionResponse, error)

	RejectJobOrderPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, body RejectJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectJobOrderPartnerActionResponse, error)

	// GetPartnerActionPlacementsWithResponse request
	GetPartnerActionPlacementsWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionPlacementsParams, reqEditors ...RequestEditorFn) (*GetPartnerActionPlacementsResponse, error)

	// CompletePlacementPartnerActionWithBodyWithResponse request with any body
	CompletePlacementPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompletePlacementPartnerActionResponse, error)

	CompletePlacementPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, body CompletePlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompletePlacementPartnerActionResponse, error)

	// ProgressPlacementPartnerActionWithBodyWithResponse request with any body
	ProgressPlacementPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressPlacementPartnerActionResponse, error)

	ProgressPlacementPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, body ProgressPlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressPlacementPartnerActionResponse, error)

	// RejectPlacementPartnerActionWithBodyWithResponse request with any body
	RejectPlacementPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectPlacementPartnerActionResponse, error)

	RejectPlacementPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, body RejectPlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectPlacementPartnerActionResponse, error)

	// DeletePartnerActionWithResponse request
	DeletePartnerActionWithResponse(ctx context.Context, act openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeletePartnerActionResponse, error)

	// GetPartnerActionWithResponse request
	GetPartnerActionWithResponse(ctx context.Context, act openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPartnerActionResponse, error)

	// AddPartnerActionWithBodyWithResponse request with any body
	AddPartnerActionWithBodyWithResponse(ctx context.Context, act PartnerActionType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPartnerActionResponse, error)

	AddPartnerActionWithResponse(ctx context.Context, act PartnerActionType, body AddPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPartnerActionResponse, error)

	// UpdatePartnerActionWithBodyWithResponse request with any body
	UpdatePartnerActionWithBodyWithResponse(ctx context.Context, act openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePartnerActionResponse, error)

	UpdatePartnerActionWithResponse(ctx context.Context, act openapi_types.UUID, body UpdatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePartnerActionResponse, error)

	// FindPlacementsWithResponse request
	FindPlacementsWithResponse(ctx context.Context, params *FindPlacementsParams, reqEditors ...RequestEditorFn) (*FindPlacementsResponse, error)

	// AddPlacementWithBodyWithResponse request with any body
	AddPlacementWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlacementResponse, error)

	AddPlacementWithResponse(ctx context.Context, body AddPlacementJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlacementResponse, error)

	// FindPlacementActivityWithResponse request
	FindPlacementActivityWithResponse(ctx context.Context, params *FindPlacementActivityParams, reqEditors ...RequestEditorFn) (*FindPlacementActivityResponse, error)

	// FindPlacementActivitySettingsWithResponse request
	FindPlacementActivitySettingsWithResponse(ctx context.Context, params *FindPlacementActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindPlacementActivitySettingsResponse, error)

	// GetPlacementActivitySettingWithResponse request
	GetPlacementActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetPlacementActivitySettingResponse, error)

	// DeletedPlacementsWithResponse request
	DeletedPlacementsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedPlacementsResponse, error)

	// GetPlacementCustomFieldListWithResponse request
	GetPlacementCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementCustomFieldListResponse, error)

	// PutPlacementCustomFieldListWithBodyWithResponse request with any body
	PutPlacementCustomFieldListWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPlacementCustomFieldListResponse, error)

	PutPlacementCustomFieldListWithResponse(ctx context.Context, fieldId int32, body PutPlacementCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPlacementCustomFieldListResponse, error)

	// GetPlacementCustomFieldItemWithResponse request
	GetPlacementCustomFieldItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetPlacementCustomFieldItemResponse, error)

	// GetPlacementAttachmentCategoryListWithResponse request
	GetPlacementAttachmentCategoryListWithResponse(ctx context.Context, params *GetPlacementAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*GetPlacementAttachmentCategoryListResponse, error)

	// GetPlacementAwardListWithResponse request
	GetPlacementAwardListWithResponse(ctx context.Context, params *GetPlacementAwardListParams, reqEditors ...RequestEditorFn) (*GetPlacementAwardListResponse, error)

	// GetPlacementBillingTermsListWithResponse request
	GetPlacementBillingTermsListWithResponse(ctx context.Context, params *GetPlacementBillingTermsListParams, reqEditors ...RequestEditorFn) (*GetPlacementBillingTermsListResponse, error)

	// GetPlacementIndustryCodeListWithResponse request
	GetPlacementIndustryCodeListWithResponse(ctx context.Context, params *GetPlacementIndustryCodeListParams, reqEditors ...RequestEditorFn) (*GetPlacementIndustryCodeListResponse, error)

	// GetPlacementNoteTypeListWithResponse request
	GetPlacementNoteTypeListWithResponse(ctx context.Context, params *GetPlacementNoteTypeListParams, reqEditors ...RequestEditorFn) (*GetPlacementNoteTypeListResponse, error)

	// GetPlacementPaymentTypeListWithResponse request
	GetPlacementPaymentTypeListWithResponse(ctx context.Context, params *GetPlacementPaymentTypeListParams, reqEditors ...RequestEditorFn) (*GetPlacementPaymentTypeListResponse, error)

	// GetPlacementStatusListWithResponse request
	GetPlacementStatusListWithResponse(ctx context.Context, params *GetPlacementStatusListParams, reqEditors ...RequestEditorFn) (*GetPlacementStatusListResponse, error)

	// GetPlacementStatusItemWithResponse request
	GetPlacementStatusItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetPlacementStatusItemResponse, error)

	// GetPlacementWithResponse request
	GetPlacementWithResponse(ctx context.Context, placementId int32, params *GetPlacementParams, reqEditors ...RequestEditorFn) (*GetPlacementResponse, error)

	// UpdatePlacementWithBodyWithResponse request with any body
	UpdatePlacementWithBodyWithResponse(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlacementResponse, error)

	UpdatePlacementWithResponse(ctx context.Context, placementId int32, body UpdatePlacementJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlacementResponse, error)

	// GetPlacementActivityByPlacementIdWithResponse request
	GetPlacementActivityByPlacementIdWithResponse(ctx context.Context, placementId int32, reqEditors ...RequestEditorFn) (*GetPlacementActivityByPlacementIdResponse, error)

	// AddPlacementActivityWithBodyWithResponse request with any body
	AddPlacementActivityWithBodyWithResponse(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlacementActivityResponse, error)

	AddPlacementActivityWithResponse(ctx context.Context, placementId int32, body AddPlacementActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlacementActivityResponse, error)

	// GetPlacementActivityWithResponse request
	GetPlacementActivityWithResponse(ctx context.Context, placementId int32, activityId int64, reqEditors ...RequestEditorFn) (*GetPlacementActivityResponse, error)

	// FindPlacementAttachmentsWithResponse request
	FindPlacementAttachmentsWithResponse(ctx context.Context, placementId int32, params *FindPlacementAttachmentsParams, reqEditors ...RequestEditorFn) (*FindPlacementAttachmentsResponse, error)

	// GetPlacementAttachmentWithResponse request
	GetPlacementAttachmentWithResponse(ctx context.Context, placementId int32, attach int64, reqEditors ...RequestEditorFn) (*GetPlacementAttachmentResponse, error)

	// AddPlacementAttachmentWithBodyWithResponse request with any body
	AddPlacementAttachmentWithBodyWithResponse(ctx context.Context, placementId int32, attach PlacementAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlacementAttachmentResponse, error)

	// UpdatePlacementAttachmentWithBodyWithResponse request with any body
	UpdatePlacementAttachmentWithBodyWithResponse(ctx context.Context, placementId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlacementAttachmentResponse, error)

	UpdatePlacementAttachmentWithResponse(ctx context.Context, placementId int32, attach int64, body UpdatePlacementAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlacementAttachmentResponse, error)

	// GetPlacementNotesWithResponse request
	GetPlacementNotesWithResponse(ctx context.Context, placementId int32, params *GetPlacementNotesParams, reqEditors ...RequestEditorFn) (*GetPlacementNotesResponse, error)

	// AddPlacementNoteWithBodyWithResponse request with any body
	AddPlacementNoteWithBodyWithResponse(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlacementNoteResponse, error)

	AddPlacementNoteWithResponse(ctx context.Context, placementId int32, body AddPlacementNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlacementNoteResponse, error)

	// PutPlacementStatusWithBodyWithResponse request with any body
	PutPlacementStatusWithBodyWithResponse(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPlacementStatusResponse, error)

	PutPlacementStatusWithResponse(ctx context.Context, placementId int32, body PutPlacementStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPlacementStatusResponse, error)

	// GetPlacementTimesheetsWithResponse request
	GetPlacementTimesheetsWithResponse(ctx context.Context, placementId int32, params *GetPlacementTimesheetsParams, reqEditors ...RequestEditorFn) (*GetPlacementTimesheetsResponse, error)

	// AddPlacementUserTaskWithBodyWithResponse request with any body
	AddPlacementUserTaskWithBodyWithResponse(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlacementUserTaskResponse, error)

	AddPlacementUserTaskWithResponse(ctx context.Context, placementId int32, body AddPlacementUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlacementUserTaskResponse, error)

	// GetPlacementUserTaskWithResponse request
	GetPlacementUserTaskWithResponse(ctx context.Context, placementId int32, taskId int64, reqEditors ...RequestEditorFn) (*GetPlacementUserTaskResponse, error)

	// UpdatePlacementUserTaskWithBodyWithResponse request with any body
	UpdatePlacementUserTaskWithBodyWithResponse(ctx context.Context, placementId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlacementUserTaskResponse, error)

	UpdatePlacementUserTaskWithResponse(ctx context.Context, placementId int32, taskId int64, body UpdatePlacementUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlacementUserTaskResponse, error)

	// FindRequisitionsWithResponse request
	FindRequisitionsWithResponse(ctx context.Context, params *FindRequisitionsParams, reqEditors ...RequestEditorFn) (*FindRequisitionsResponse, error)

	// AddRequisitionWithBodyWithResponse request with any body
	AddRequisitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRequisitionResponse, error)

	AddRequisitionWithResponse(ctx context.Context, body AddRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRequisitionResponse, error)

	// GetRequisitionCustomFieldListWithResponse request
	GetRequisitionCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRequisitionCustomFieldListResponse, error)

	// GetRequisitionCustomFieldItemWithResponse request
	GetRequisitionCustomFieldItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetRequisitionCustomFieldItemResponse, error)

	// GetRequisitionFormsWithResponse request
	GetRequisitionFormsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRequisitionFormsResponse, error)

	// DeleteRequisitionWithResponse request
	DeleteRequisitionWithResponse(ctx context.Context, requisitionId int32, reqEditors ...RequestEditorFn) (*DeleteRequisitionResponse, error)

	// GetRequisitionWithResponse request
	GetRequisitionWithResponse(ctx context.Context, requisitionId int32, params *GetRequisitionParams, reqEditors ...RequestEditorFn) (*GetRequisitionResponse, error)

	// UpdateRequisitionWithBodyWithResponse request with any body
	UpdateRequisitionWithBodyWithResponse(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRequisitionResponse, error)

	UpdateRequisitionWithResponse(ctx context.Context, requisitionId int32, body UpdateRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRequisitionResponse, error)

	// ApproveRequisitionWithBodyWithResponse request with any body
	ApproveRequisitionWithBodyWithResponse(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApproveRequisitionResponse, error)

	ApproveRequisitionWithResponse(ctx context.Context, requisitionId int32, body ApproveRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*ApproveRequisitionResponse, error)

	// GetRequisitionAttachmentListWithResponse request
	GetRequisitionAttachmentListWithResponse(ctx context.Context, requisitionId int32, reqEditors ...RequestEditorFn) (*GetRequisitionAttachmentListResponse, error)

	// DeleteRequisitionAttachmentWithResponse request
	DeleteRequisitionAttachmentWithResponse(ctx context.Context, requisitionId int32, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteRequisitionAttachmentResponse, error)

	// GetRequisitionAttachmentWithResponse request
	GetRequisitionAttachmentWithResponse(ctx context.Context, requisitionId int32, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRequisitionAttachmentResponse, error)

	// AddRequisitionAttachmentWithBodyWithResponse request with any body
	AddRequisitionAttachmentWithBodyWithResponse(ctx context.Context, requisitionId int32, attachmentType RequisitionAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRequisitionAttachmentResponse, error)

	// GetRequisitionApprovalHistoryWithResponse request
	GetRequisitionApprovalHistoryWithResponse(ctx context.Context, requisitionId int32, params *GetRequisitionApprovalHistoryParams, reqEditors ...RequestEditorFn) (*GetRequisitionApprovalHistoryResponse, error)

	// GetRequisitionNotesWithResponse request
	GetRequisitionNotesWithResponse(ctx context.Context, requisitionId int32, params *GetRequisitionNotesParams, reqEditors ...RequestEditorFn) (*GetRequisitionNotesResponse, error)

	// AddRequisitionNoteWithBodyWithResponse request with any body
	AddRequisitionNoteWithBodyWithResponse(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRequisitionNoteResponse, error)

	AddRequisitionNoteWithResponse(ctx context.Context, requisitionId int32, body AddRequisitionNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRequisitionNoteResponse, error)

	// RejectRequisitionWithBodyWithResponse request with any body
	RejectRequisitionWithBodyWithResponse(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectRequisitionResponse, error)

	RejectRequisitionWithResponse(ctx context.Context, requisitionId int32, body RejectRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectRequisitionResponse, error)

	// SubmitRequisitionWithBodyWithResponse request with any body
	SubmitRequisitionWithBodyWithResponse(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitRequisitionResponse, error)

	SubmitRequisitionWithResponse(ctx context.Context, requisitionId int32, body SubmitRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitRequisitionResponse, error)

	// FindEmailAddressWithResponse request
	FindEmailAddressWithResponse(ctx context.Context, params *FindEmailAddressParams, reqEditors ...RequestEditorFn) (*FindEmailAddressResponse, error)

	// FindPhoneNumberWithResponse request
	FindPhoneNumberWithResponse(ctx context.Context, params *FindPhoneNumberParams, reqEditors ...RequestEditorFn) (*FindPhoneNumberResponse, error)

	// SendJobApplcationSmsWithBodyWithResponse request with any body
	SendJobApplcationSmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendJobApplcationSmsResponse, error)

	SendJobApplcationSmsWithResponse(ctx context.Context, body SendJobApplcationSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendJobApplcationSmsResponse, error)

	// SendJobApplicationContactSmsWithBodyWithResponse request with any body
	SendJobApplicationContactSmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendJobApplicationContactSmsResponse, error)

	SendJobApplicationContactSmsWithResponse(ctx context.Context, body SendJobApplicationContactSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendJobApplicationContactSmsResponse, error)

	// SendCandidateSmsWithBodyWithResponse request with any body
	SendCandidateSmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendCandidateSmsResponse, error)

	SendCandidateSmsWithResponse(ctx context.Context, body SendCandidateSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendCandidateSmsResponse, error)

	// SendCompanySmsWithBodyWithResponse request with any body
	SendCompanySmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendCompanySmsResponse, error)

	SendCompanySmsWithResponse(ctx context.Context, body SendCompanySmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendCompanySmsResponse, error)

	// SendContactSmsWithBodyWithResponse request with any body
	SendContactSmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendContactSmsResponse, error)

	SendContactSmsWithResponse(ctx context.Context, body SendContactSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendContactSmsResponse, error)

	// SendJobOrderSmsWithBodyWithResponse request with any body
	SendJobOrderSmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendJobOrderSmsResponse, error)

	SendJobOrderSmsWithResponse(ctx context.Context, body SendJobOrderSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendJobOrderSmsResponse, error)

	// SendPlacementSmsWithBodyWithResponse request with any body
	SendPlacementSmsWithBodyWithResponse(ctx context.Context, entityType RecipientEntityType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendPlacementSmsResponse, error)

	SendPlacementSmsWithResponse(ctx context.Context, entityType RecipientEntityType, body SendPlacementSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendPlacementSmsResponse, error)

	// FindSubmissionsWithResponse request
	FindSubmissionsWithResponse(ctx context.Context, params *FindSubmissionsParams, reqEditors ...RequestEditorFn) (*FindSubmissionsResponse, error)

	// GetSubmissionWithResponse request
	GetSubmissionWithResponse(ctx context.Context, submissionId int64, reqEditors ...RequestEditorFn) (*GetSubmissionResponse, error)

	// FindUserGroupsWithResponse request
	FindUserGroupsWithResponse(ctx context.Context, params *FindUserGroupsParams, reqEditors ...RequestEditorFn) (*FindUserGroupsResponse, error)

	// GetUserGroupWithResponse request
	GetUserGroupWithResponse(ctx context.Context, groupId int32, reqEditors ...RequestEditorFn) (*GetUserGroupResponse, error)

	// GetGroupUsersWithResponse request
	GetGroupUsersWithResponse(ctx context.Context, groupId int32, reqEditors ...RequestEditorFn) (*GetGroupUsersResponse, error)

	// FindUserOfficesWithResponse request
	FindUserOfficesWithResponse(ctx context.Context, params *FindUserOfficesParams, reqEditors ...RequestEditorFn) (*FindUserOfficesResponse, error)

	// GetUserOfficeWithResponse request
	GetUserOfficeWithResponse(ctx context.Context, officeId int32, reqEditors ...RequestEditorFn) (*GetUserOfficeResponse, error)

	// GetOfficeUsersWithResponse request
	GetOfficeUsersWithResponse(ctx context.Context, officeId int32, reqEditors ...RequestEditorFn) (*GetOfficeUsersResponse, error)

	// FindUsersWithResponse request
	FindUsersWithResponse(ctx context.Context, params *FindUsersParams, reqEditors ...RequestEditorFn) (*FindUsersResponse, error)

	// GetCurrentUserWithResponse request
	GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetUserInterviewsWithResponse request
	GetUserInterviewsWithResponse(ctx context.Context, userId int32, params *GetUserInterviewsParams, reqEditors ...RequestEditorFn) (*GetUserInterviewsResponse, error)

	// GetUserPhotoWithResponse request
	GetUserPhotoWithResponse(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*GetUserPhotoResponse, error)

	// GetUserUserGroupsWithResponse request
	GetUserUserGroupsWithResponse(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*GetUserUserGroupsResponse, error)

	// FindUserUserTasksWithResponse request
	FindUserUserTasksWithResponse(ctx context.Context, userId int32, params *FindUserUserTasksParams, reqEditors ...RequestEditorFn) (*FindUserUserTasksResponse, error)

	// FindUserTasksWithResponse request
	FindUserTasksWithResponse(ctx context.Context, params *FindUserTasksParams, reqEditors ...RequestEditorFn) (*FindUserTasksResponse, error)

	// AddUserTaskWithBodyWithResponse request with any body
	AddUserTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserTaskResponse, error)

	AddUserTaskWithResponse(ctx context.Context, body AddUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserTaskResponse, error)

	// DeleteUserTaskWithResponse request
	DeleteUserTaskWithResponse(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*DeleteUserTaskResponse, error)

	// GetUserTaskWithResponse request
	GetUserTaskWithResponse(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*GetUserTaskResponse, error)

	// UpdateUserTaskWithBodyWithResponse request with any body
	UpdateUserTaskWithBodyWithResponse(ctx context.Context, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserTaskResponse, error)

	UpdateUserTaskWithResponse(ctx context.Context, taskId int64, body UpdateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserTaskResponse, error)

	// MarkCompleteUserTaskWithResponse request
	MarkCompleteUserTaskWithResponse(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*MarkCompleteUserTaskResponse, error)

	// MarkIncompleteUserTaskWithResponse request
	MarkIncompleteUserTaskWithResponse(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*MarkIncompleteUserTaskResponse, error)

	// FindWebhooksWithResponse request
	FindWebhooksWithResponse(ctx context.Context, params *FindWebhooksParams, reqEditors ...RequestEditorFn) (*FindWebhooksResponse, error)

	// AddWebhookWithBodyWithResponse request with any body
	AddWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddWebhookResponse, error)

	AddWebhookWithResponse(ctx context.Context, body AddWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*AddWebhookResponse, error)

	// DeleteWebhookWithResponse request
	DeleteWebhookWithResponse(ctx context.Context, webhookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteWebhookResponse, error)

	// GetWebhookWithResponse request
	GetWebhookWithResponse(ctx context.Context, webhookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetWebhookResponse, error)

	// UpdateWebhookWithBodyWithResponse request with any body
	UpdateWebhookWithBodyWithResponse(ctx context.Context, webhookId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWebhookResponse, error)

	UpdateWebhookWithResponse(ctx context.Context, webhookId openapi_types.UUID, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWebhookResponse, error)

	// FindWorkTypesWithResponse request
	FindWorkTypesWithResponse(ctx context.Context, params *FindWorkTypesParams, reqEditors ...RequestEditorFn) (*FindWorkTypesResponse, error)
}

type FindJobApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindJobApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindJobApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindJobApplicationActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationActivityListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindJobApplicationActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindJobApplicationActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindJobApplicationActivitySettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationActivitySettingsListModel
}

// Status returns HTTPResponse.Status
func (r FindJobApplicationActivitySettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindJobApplicationActivitySettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationActivitySettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationActivitySettingModel
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationActivitySettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationActivitySettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletedJobApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeletedJobApplicationListModel
}

// Status returns HTTPResponse.Status
func (r DeletedJobApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletedJobApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJobApplicationCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r PutJobApplicationCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJobApplicationCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationCustomFieldListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationCustomFieldListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationCustomFieldListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationStatusListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationStatusListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationStatusListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationStatusListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationStatusListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationStatusRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationStatusListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationStatusListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationWorkflowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationStatusByWorkflowListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationWorkflowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationWorkflowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJobApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateJobApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJobApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationActivityByApplicationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationActivitySummaryListModel
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationActivityByApplicationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationActivityByApplicationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobApplicationActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobApplicationActivityModel
}

// Status returns HTTPResponse.Status
func (r AddJobApplicationActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobApplicationActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationActivityRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindJobApplicationAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateAttachmentListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindJobApplicationAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindJobApplicationAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobApplicationAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CandidateAttachmentRepresentation
}

// Status returns HTTPResponse.Status
func (r AddJobApplicationAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobApplicationAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJobApplicationAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateJobApplicationAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJobApplicationAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationInterviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationInterviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationInterviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobApplicationExternalInterviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InterviewModel
}

// Status returns HTTPResponse.Status
func (r PostJobApplicationExternalInterviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobApplicationExternalInterviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJobApplicationExternalInterviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewModel
}

// Status returns HTTPResponse.Status
func (r PutJobApplicationExternalInterviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJobApplicationExternalInterviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobApplicationInternalInterviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InterviewModel
}

// Status returns HTTPResponse.Status
func (r PostJobApplicationInternalInterviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobApplicationInternalInterviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJobApplicationInternalInterviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewModel
}

// Status returns HTTPResponse.Status
func (r PutJobApplicationInternalInterviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJobApplicationInternalInterviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobApplicationNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NoteModel
}

// Status returns HTTPResponse.Status
func (r AddJobApplicationNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobApplicationNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReviewSubmitJobApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReviewSubmitJobApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReviewSubmitJobApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReviewViewJobApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReviewViewJobApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReviewViewJobApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReviewAcceptJobApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReviewAcceptJobApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReviewAcceptJobApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReviewRejectJobApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReviewRejectJobApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReviewRejectJobApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJobApplicationStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PutJobApplicationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJobApplicationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobApplicationUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobApplicationUserTaskModel
}

// Status returns HTTPResponse.Status
func (r AddJobApplicationUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobApplicationUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationUserTaskRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJobApplicationUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobApplicationUserTaskModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateJobApplicationUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJobApplicationUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobApplicationVideosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateVideoListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobApplicationVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobApplicationVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestJobApplicationVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateVideoRepresentation
}

// Status returns HTTPResponse.Status
func (r GetLatestJobApplicationVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestJobApplicationVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobApplicationVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateVideoModel
}

// Status returns HTTPResponse.Status
func (r AddJobApplicationVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobApplicationVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCandidatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindCandidatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCandidatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCandidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CandidateRepresentation
	JSON409      *ErrorModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r AddCandidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCandidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCandidateActivitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateActivityListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindCandidateActivitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCandidateActivitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCandidateActivitySettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateActivitySettingsListModel
}

// Status returns HTTPResponse.Status
func (r FindCandidateActivitySettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCandidateActivitySettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateActivitySettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateActivitySettingModel
}

// Status returns HTTPResponse.Status
func (r GetCandidateActivitySettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateActivitySettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindAllCandidateAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateAttachmentListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindAllCandidateAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindAllCandidateAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletedCandidatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeletedCandidateListModel
}

// Status returns HTTPResponse.Status
func (r DeletedCandidatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletedCandidatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateCustomFieldListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateCustomFieldListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateCustomFieldListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCandidateCustomFieldListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r PutCandidateCustomFieldListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCandidateCustomFieldListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateAttachmentCategoryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateAttachmentCategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateAttachmentCategoryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateAttachmentCategoryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateNoteTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteTypeListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateNoteTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateNoteTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateRatingListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameModelListOf
}

// Status returns HTTPResponse.Status
func (r GetCandidateRatingListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateRatingListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateSalutationListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameModelListOf
}

// Status returns HTTPResponse.Status
func (r GetCandidateSalutationListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateSalutationListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateSourceListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameModelListOf
}

// Status returns HTTPResponse.Status
func (r GetCandidateSourceListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateSourceListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateStatusListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateStatusListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateStatusListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateStatusListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateStatusListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateStatusListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCandidatesPayrollBillingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidatePayrollBillingListModel
	JSON400      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r FindCandidatesPayrollBillingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCandidatesPayrollBillingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetCandidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCandidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateCandidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCandidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateActivityByCandidateIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateActivitySummaryListModel
}

// Status returns HTTPResponse.Status
func (r GetCandidateActivityByCandidateIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateActivityByCandidateIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCandidateActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CandidateActivityModel
}

// Status returns HTTPResponse.Status
func (r AddCandidateActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCandidateActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateActivityRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetCandidateActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateJobApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateJobApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateJobApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCandidateJobOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobApplicationListRepresentation
	JSON409      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r AddCandidateJobOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCandidateJobOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActiveCandidateJobApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetActiveCandidateJobApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActiveCandidateJobApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCandidateAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateAttachmentListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindCandidateAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCandidateAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCandidateAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCandidateAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CandidateAttachmentRepresentation
}

// Status returns HTTPResponse.Status
func (r AddCandidateAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCandidateAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCandidateAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateAttachmentRepresentation
}

// Status returns HTTPResponse.Status
func (r UpdateCandidateAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCandidateAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateAvailabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateAvailabilityListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateAvailabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateAvailabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCandidateAvailabilityWeekResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCandidateAvailabilityWeekResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCandidateAvailabilityWeekResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCandidateAvailabilityWeekResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCandidateAvailabilityWeekResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCandidateAvailabilityWeekResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateFloatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FloatListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateFloatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateFloatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateInterviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateInterviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateInterviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCandidateNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NoteModel
}

// Status returns HTTPResponse.Status
func (r AddCandidateNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCandidateNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidatePayrollBillingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidatePayrollBillingModel
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetCandidatePayrollBillingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidatePayrollBillingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCandidatePhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCandidatePhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCandidatePhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidatePhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCandidatePhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidatePhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadCandidatePhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadCandidatePhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadCandidatePhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCandidatePhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCandidatePhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCandidatePhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidatePlacementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidatePlacementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidatePlacementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateApprovedPlacementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateApprovedPlacementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateApprovedPlacementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PrivacyDeleteCandidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PrivacyDeleteCandidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PrivacyDeleteCandidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateSkillsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateSkillsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateSkillsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCandidateSkillsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r DeleteCandidateSkillsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCandidateSkillsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCandidateSkillsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r PutCandidateSkillsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCandidateSkillsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCandidateCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r DeleteCandidateCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCandidateCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCandidateStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PutCandidateStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCandidateStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateSubmissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmissionListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateSubmissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateSubmissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCandidateUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CandidateUserTaskModel
}

// Status returns HTTPResponse.Status
func (r AddCandidateUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCandidateUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateUserTaskRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetCandidateUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCandidateUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CandidateUserTaskModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateCandidateUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCandidateUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateVideosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateVideoListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCandidateVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestCandidateVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateVideoRepresentation
}

// Status returns HTTPResponse.Status
func (r GetLatestCandidateVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestCandidateVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCandidateVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateVideoModel
}

// Status returns HTTPResponse.Status
func (r AddCandidateVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCandidateVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCompaniesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindCompaniesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCompaniesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompanyRepresentation
	JSON409      *ErrorModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r AddCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCompanyActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyActivityListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindCompanyActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCompanyActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCompanyActivitySettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyActivitySettingsListModel
}

// Status returns HTTPResponse.Status
func (r FindCompanyActivitySettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCompanyActivitySettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyActivitySettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyActivitySettingModel
}

// Status returns HTTPResponse.Status
func (r GetCompanyActivitySettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyActivitySettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletedCompaniesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeletedCompanyListModel
}

// Status returns HTTPResponse.Status
func (r DeletedCompaniesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletedCompaniesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyCustomFieldListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyCustomFieldListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyCustomFieldListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCompanyCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r PutCompanyCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCompanyCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyAttachmentCategoryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyAttachmentCategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyAttachmentCategoryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyAttachmentCategoryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyNoteTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteTypeListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyNoteTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyNoteTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyStatusListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyStatusListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyStatusListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyStatusListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyStatusListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyStatusListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyActivityByCompanyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyActivitySummaryListModel
}

// Status returns HTTPResponse.Status
func (r GetCompanyActivityByCompanyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyActivityByCompanyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCompanyActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompanyActivityModel
}

// Status returns HTTPResponse.Status
func (r AddCompanyActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCompanyActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyActivityRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetCompanyActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyAddressListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCompanyAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompanyAddressRepresentation
}

// Status returns HTTPResponse.Status
func (r AddCompanyAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCompanyAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveCompanyAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveCompanyAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveCompanyAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyAddressRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCompanyAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCompanyAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCompanyAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCompanyAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyAttachmentListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindCompanyAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCompanyAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCompanyAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCompanyAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompanyAttachmentRepresentation
}

// Status returns HTTPResponse.Status
func (r AddCompanyAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCompanyAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCompanyAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCompanyAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCompanyAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyFloatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FloatListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyFloatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyFloatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyJobOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyJobOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyJobOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyActiveJobOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyActiveJobOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyActiveJobOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCompanyLogoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCompanyLogoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCompanyLogoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyLogoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCompanyLogoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyLogoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadCompanyLogoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadCompanyLogoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadCompanyLogoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCompanyLogoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCompanyLogoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCompanyLogoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCompanyNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NoteModel
}

// Status returns HTTPResponse.Status
func (r AddCompanyNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCompanyNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyPlacementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyPlacementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyPlacementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyApprovedPlacementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyApprovedPlacementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyApprovedPlacementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyRequisitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequisitionListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyRequisitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyRequisitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanySkillsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanySkillsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanySkillsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCompanyStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PutCompanyStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCompanyStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanySubmissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmissionListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanySubmissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanySubmissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanySubsidiariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanySubsidiariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanySubsidiariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCompanyUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompanyUserTaskModel
}

// Status returns HTTPResponse.Status
func (r AddCompanyUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCompanyUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyUserTaskRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetCompanyUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCompanyUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompanyUserTaskModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateCompanyUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCompanyUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCompanyWorkflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyWorkflowListRepresentation
}

// Status returns HTTPResponse.Status
func (r ListCompanyWorkflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCompanyWorkflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCompanyWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompanyWorkflowRepresentation
}

// Status returns HTTPResponse.Status
func (r AddCompanyWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCompanyWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyWorkflowRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCompanyWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCompanyWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyWorkflowRepresentation
}

// Status returns HTTPResponse.Status
func (r UpdateCompanyWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCompanyWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContactRepresentation
	JSON409      *ErrorModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r AddContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindContactActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactActivityListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindContactActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindContactActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindContactActivitySettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactActivitySettingsListModel
}

// Status returns HTTPResponse.Status
func (r FindContactActivitySettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindContactActivitySettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactActivitySettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactActivitySettingModel
}

// Status returns HTTPResponse.Status
func (r GetContactActivitySettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactActivitySettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletedContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeletedContactListModel
}

// Status returns HTTPResponse.Status
func (r DeletedContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletedContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutContactCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r PutContactCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutContactCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactCustomFieldListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactCustomFieldListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactCustomFieldListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactAttachmentCategoryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactAttachmentCategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactAttachmentCategoryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactAttachmentCategoryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactNoteTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteTypeListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactNoteTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactNoteTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactSalutationListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameModelListOf
}

// Status returns HTTPResponse.Status
func (r GetContactSalutationListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactSalutationListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactStatusListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactStatusListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactStatusListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactStatusListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactStatusListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactStatusListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactActivityByContactIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactActivitySummaryListModel
}

// Status returns HTTPResponse.Status
func (r GetContactActivityByContactIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactActivityByContactIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddContactActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContactActivityModel
}

// Status returns HTTPResponse.Status
func (r AddContactActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddContactActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactActivityRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetContactActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindContactAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactAttachmentListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindContactAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindContactAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetContactAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddContactAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContactAttachmentRepresentation
}

// Status returns HTTPResponse.Status
func (r AddContactAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddContactAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateContactAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactInterviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactInterviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactInterviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactJobOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactJobOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactJobOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactActiveJobOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactActiveJobOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactActiveJobOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddContactNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NoteModel
}

// Status returns HTTPResponse.Status
func (r AddContactNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddContactNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletteContactPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletteContactPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletteContactPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetContactPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadContactPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadContactPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadContactPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateContactPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactSkillsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetContactSkillsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactSkillsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactSkillsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r DeleteContactSkillsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactSkillsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutContactSkillsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r PutContactSkillsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutContactSkillsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r DeleteContactCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutContactStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PutContactStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutContactStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddContactUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContactUserTaskModel
}

// Status returns HTTPResponse.Status
func (r AddContactUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddContactUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactUserTaskRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetContactUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContactUserTaskModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateContactUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCountriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CountryListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindCountriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCountriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFloatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FloatListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetFloatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFloatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFloatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FloatRepresentation
}

// Status returns HTTPResponse.Status
func (r GetFloatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFloatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FolderListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FolderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PatchFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindInterviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindInterviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindInterviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInterviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteInterviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInterviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewRepresentation
}

// Status returns HTTPResponse.Status
func (r GetInterviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterviewEvaluationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewEvaluationListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetInterviewEvaluationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterviewEvaluationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExternalInterviewEvaluationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewEvaluationRepresentation
}

// Status returns HTTPResponse.Status
func (r GetExternalInterviewEvaluationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExternalInterviewEvaluationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutExternalInterviewEvaluationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewEvaluationRepresentation
}

// Status returns HTTPResponse.Status
func (r PutExternalInterviewEvaluationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutExternalInterviewEvaluationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInternalInterviewEvaluationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewEvaluationRepresentation
}

// Status returns HTTPResponse.Status
func (r GetInternalInterviewEvaluationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInternalInterviewEvaluationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInternalInterviewEvaluationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewEvaluationRepresentation
}

// Status returns HTTPResponse.Status
func (r PutInternalInterviewEvaluationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInternalInterviewEvaluationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobAdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobAdListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobAdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobAdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobAdDraftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobAdRepresentation
}

// Status returns HTTPResponse.Status
func (r AddJobAdDraftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobAdDraftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobAdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobAdRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobAdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobAdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJobAdDraftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateJobAdDraftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJobAdDraftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobAdJobApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobAdJobApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobAdJobApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobAdActiveJobApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobAdActiveJobApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobAdActiveJobApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindJobBoardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobBoardListModel
}

// Status returns HTTPResponse.Status
func (r FindJobBoardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindJobBoardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobBoardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobBoardModel
}

// Status returns HTTPResponse.Status
func (r GetJobBoardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobBoardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindJobBoardJobAdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobBoardJobAdListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindJobBoardJobAdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindJobBoardJobAdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobBoardJobAdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobBoardJobAdRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobBoardJobAdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobBoardJobAdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitJobBoardJobApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmittedJobApplicationModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r SubmitJobBoardJobApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitJobBoardJobApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachJobBoardJobApplicationDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r AttachJobBoardJobApplicationDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachJobBoardJobApplicationDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindJobOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindJobOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindJobOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobOrderRepresentation
}

// Status returns HTTPResponse.Status
func (r AddJobOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindJobOrderActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderActivityListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindJobOrderActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindJobOrderActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindJobOrderActivitySettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderActivitySettingsListModel
}

// Status returns HTTPResponse.Status
func (r FindJobOrderActivitySettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindJobOrderActivitySettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderActivitySettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderActivitySettingModel
}

// Status returns HTTPResponse.Status
func (r GetJobOrderActivitySettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderActivitySettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletedJobOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeletedJobOrderListModel
}

// Status returns HTTPResponse.Status
func (r DeletedJobOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletedJobOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJobOrderCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r PutJobOrderCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJobOrderCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderCustomFieldItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderCustomFieldItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderCustomFieldItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderAttachmentCategoryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderAttachmentCategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderAttachmentCategoryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderAttachmentCategoryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderNoteTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteTypeListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderNoteTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderNoteTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderSourceListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameModelListOf
}

// Status returns HTTPResponse.Status
func (r GetJobOrderSourceListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderSourceListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderStatusListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderStatusListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderStatusListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderStatusItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusRepresentation
	JSON404      *StatusRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderStatusItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderStatusItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJobOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateJobOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJobOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderActivityByJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderActivitySummaryListModel
}

// Status returns HTTPResponse.Status
func (r GetJobOrderActivityByJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderActivityByJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobOrderActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobOrderActivityModel
}

// Status returns HTTPResponse.Status
func (r AddJobOrderActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobOrderActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderActivityRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetJobOrderActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderJobApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderJobApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderJobApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobOrderCandidatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobApplicationListRepresentation
	JSON409      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r AddJobOrderCandidatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobOrderCandidatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderActiveJobApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderActiveJobApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderActiveJobApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitJobOrderCandidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobApplicationRepresentation
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r SubmitJobOrderCandidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitJobOrderCandidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindJobOrderAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderAttachmentListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindJobOrderAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindJobOrderAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJobOrderAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobOrderAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobOrderAttachmentRepresentation
}

// Status returns HTTPResponse.Status
func (r AddJobOrderAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobOrderAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJobOrderAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateJobOrderAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJobOrderAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderInvoiceListModel
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r InvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderRetainedInvoiceRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetJobOrderInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobOrderNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NoteModel
}

// Status returns HTTPResponse.Status
func (r AddJobOrderNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobOrderNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderPlacementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderPlacementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderPlacementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderApprovedPlacementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderApprovedPlacementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderApprovedPlacementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJobOrderStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PutJobOrderStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJobOrderStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderSubmissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmissionListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetJobOrderSubmissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderSubmissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobOrderUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobOrderUserTaskModel
}

// Status returns HTTPResponse.Status
func (r AddJobOrderUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobOrderUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderUserTaskRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetJobOrderUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJobOrderUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobOrderUserTaskModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateJobOrderUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJobOrderUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJobOrderPayrollBillingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteJobOrderPayrollBillingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJobOrderPayrollBillingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobOrderPayrollBillingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderRateCardModel
}

// Status returns HTTPResponse.Status
func (r GetJobOrderPayrollBillingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobOrderPayrollBillingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddJobOrderPayrollBillingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderRateCardModel
}

// Status returns HTTPResponse.Status
func (r AddJobOrderPayrollBillingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddJobOrderPayrollBillingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJobOrderPayrollBillingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderRateCardModel
}

// Status returns HTTPResponse.Status
func (r UpdateJobOrderPayrollBillingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJobOrderPayrollBillingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocationListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NoteModel
}

// Status returns HTTPResponse.Status
func (r AddNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteRepresentation
}

// Status returns HTTPResponse.Status
func (r GetNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddNoteAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddNoteAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddNoteAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNoteAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNoteAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNoteAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindOpportunitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OpportunityListModel
}

// Status returns HTTPResponse.Status
func (r FindOpportunitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindOpportunitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddOpportunityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedOpportunityModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r AddOpportunityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddOpportunityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpportunityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OpportunitySummaryModel
}

// Status returns HTTPResponse.Status
func (r GetOpportunityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpportunityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOpportunityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateOpportunityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOpportunityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindPartnerActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PartnerActionListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindPartnerActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindPartnerActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnerActionJobApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobApplicationListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPartnerActionJobApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnerActionJobApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteJobApplicationPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteJobApplicationPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteJobApplicationPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProgressJobApplicationPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProgressJobApplicationPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProgressJobApplicationPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RejectJobApplicationPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RejectJobApplicationPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectJobApplicationPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnerActionCandidatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CandidateListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPartnerActionCandidatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnerActionCandidatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteCandidatePartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteCandidatePartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteCandidatePartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProgressCandidatePartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProgressCandidatePartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProgressCandidatePartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RejectCandidatePartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RejectCandidatePartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectCandidatePartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnerActionCompaniesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPartnerActionCompaniesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnerActionCompaniesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteCompanyPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteCompanyPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteCompanyPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProgressCompanyPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProgressCompanyPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProgressCompanyPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RejectCompanyPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RejectCompanyPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectCompanyPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnerActionContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPartnerActionContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnerActionContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteContactPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteContactPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteContactPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProgressContactPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProgressContactPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProgressContactPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RejectContactPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RejectContactPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectContactPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnerActionJobAdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobAdListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPartnerActionJobAdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnerActionJobAdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteJobAdPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteJobAdPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteJobAdPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProgressJobAdPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProgressJobAdPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProgressJobAdPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RejectJobAdPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RejectJobAdPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectJobAdPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnerActionJobOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobOrderListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPartnerActionJobOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnerActionJobOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteJobOrderPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteJobOrderPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteJobOrderPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProgressJobOrderPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProgressJobOrderPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProgressJobOrderPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RejectJobOrderPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RejectJobOrderPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectJobOrderPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnerActionPlacementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPartnerActionPlacementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnerActionPlacementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompletePlacementPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompletePlacementPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompletePlacementPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProgressPlacementPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProgressPlacementPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProgressPlacementPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RejectPlacementPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RejectPlacementPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectPlacementPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PartnerActionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PartnerActionRepresentation
}

// Status returns HTTPResponse.Status
func (r AddPartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePartnerActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PartnerActionRepresentation
}

// Status returns HTTPResponse.Status
func (r UpdatePartnerActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePartnerActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindPlacementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindPlacementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindPlacementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPlacementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreatedPlacementModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r AddPlacementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPlacementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindPlacementActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementActivityListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindPlacementActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindPlacementActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindPlacementActivitySettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementActivitySettingsListModel
}

// Status returns HTTPResponse.Status
func (r FindPlacementActivitySettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindPlacementActivitySettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementActivitySettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementActivitySettingModel
}

// Status returns HTTPResponse.Status
func (r GetPlacementActivitySettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementActivitySettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletedPlacementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeletedPlacementListModel
}

// Status returns HTTPResponse.Status
func (r DeletedPlacementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletedPlacementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPlacementCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPlacementCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r PutPlacementCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPlacementCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementCustomFieldItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPlacementCustomFieldItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementCustomFieldItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementAttachmentCategoryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementAttachmentCategoryListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPlacementAttachmentCategoryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementAttachmentCategoryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementAwardListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameModelListOf
}

// Status returns HTTPResponse.Status
func (r GetPlacementAwardListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementAwardListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementBillingTermsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameModelListOf
}

// Status returns HTTPResponse.Status
func (r GetPlacementBillingTermsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementBillingTermsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementIndustryCodeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameModelListOf
}

// Status returns HTTPResponse.Status
func (r GetPlacementIndustryCodeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementIndustryCodeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementNoteTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteTypeListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPlacementNoteTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementNoteTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementPaymentTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameModelListOf
}

// Status returns HTTPResponse.Status
func (r GetPlacementPaymentTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementPaymentTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementStatusListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPlacementStatusListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementStatusListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementStatusItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPlacementStatusItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementStatusItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPlacementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlacementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdatePlacementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlacementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementActivityByPlacementIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementActivitySummaryListModel
}

// Status returns HTTPResponse.Status
func (r GetPlacementActivityByPlacementIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementActivityByPlacementIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPlacementActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PlacementActivityModel
}

// Status returns HTTPResponse.Status
func (r AddPlacementActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPlacementActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementActivityRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetPlacementActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindPlacementAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementAttachmentListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindPlacementAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindPlacementAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlacementAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPlacementAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PlacementAttachmentRepresentation
}

// Status returns HTTPResponse.Status
func (r AddPlacementAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPlacementAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlacementAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlacementAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlacementAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPlacementNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPlacementNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NoteModel
}

// Status returns HTTPResponse.Status
func (r AddPlacementNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPlacementNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPlacementStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PutPlacementStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPlacementStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementTimesheetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementTimesheetListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPlacementTimesheetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementTimesheetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPlacementUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PlacementUserTaskModel
}

// Status returns HTTPResponse.Status
func (r AddPlacementUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPlacementUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementUserTaskRepresentation
	JSON404      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetPlacementUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlacementUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PlacementUserTaskModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdatePlacementUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlacementUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindRequisitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequisitionListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindRequisitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindRequisitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRequisitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RequisitionRepresentation
}

// Status returns HTTPResponse.Status
func (r AddRequisitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRequisitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequisitionCustomFieldListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRequisitionCustomFieldListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequisitionCustomFieldListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequisitionCustomFieldItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRequisitionCustomFieldItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequisitionCustomFieldItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequisitionFormsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequisitionFormListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRequisitionFormsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequisitionFormsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRequisitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRequisitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRequisitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequisitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequisitionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRequisitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequisitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRequisitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateRequisitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRequisitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApproveRequisitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApproveRequisitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApproveRequisitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequisitionAttachmentListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteAttachmentListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRequisitionAttachmentListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequisitionAttachmentListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRequisitionAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRequisitionAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRequisitionAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequisitionAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRequisitionAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequisitionAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRequisitionAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddRequisitionAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRequisitionAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequisitionApprovalHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequisitionHistoryModel
}

// Status returns HTTPResponse.Status
func (r GetRequisitionApprovalHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequisitionApprovalHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequisitionNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRequisitionNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequisitionNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRequisitionNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NoteModel
}

// Status returns HTTPResponse.Status
func (r AddRequisitionNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRequisitionNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RejectRequisitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RejectRequisitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectRequisitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitRequisitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SubmitRequisitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitRequisitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindEmailAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MatchedByEmailAddressModel
}

// Status returns HTTPResponse.Status
func (r FindEmailAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindEmailAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MatchedByPhoneNumberModel
}

// Status returns HTTPResponse.Status
func (r FindPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendJobApplcationSmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmsRepresentation
}

// Status returns HTTPResponse.Status
func (r SendJobApplcationSmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendJobApplcationSmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendJobApplicationContactSmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmsRepresentation
}

// Status returns HTTPResponse.Status
func (r SendJobApplicationContactSmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendJobApplicationContactSmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendCandidateSmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmsRepresentation
}

// Status returns HTTPResponse.Status
func (r SendCandidateSmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendCandidateSmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendCompanySmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmsRepresentation
}

// Status returns HTTPResponse.Status
func (r SendCompanySmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendCompanySmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendContactSmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmsRepresentation
}

// Status returns HTTPResponse.Status
func (r SendContactSmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendContactSmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendJobOrderSmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmsRepresentation
}

// Status returns HTTPResponse.Status
func (r SendJobOrderSmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendJobOrderSmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendPlacementSmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmsRepresentation
}

// Status returns HTTPResponse.Status
func (r SendPlacementSmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendPlacementSmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindSubmissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmissionListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindSubmissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindSubmissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubmissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmissionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetSubmissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubmissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindUserGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserGroupListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindUserGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindUserGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserGroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetGroupUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindUserOfficesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserOfficeListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindUserOfficesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindUserOfficesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserOfficeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserOfficeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetUserOfficeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserOfficeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOfficeUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetOfficeUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOfficeUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserInterviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InterviewListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetUserInterviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInterviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserUserGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserGroupListRepresentation
}

// Status returns HTTPResponse.Status
func (r GetUserUserGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindUserUserTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserTaskListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindUserUserTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindUserUserTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindUserTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserTaskListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindUserTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindUserTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserTaskModel
}

// Status returns HTTPResponse.Status
func (r AddUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserTaskRepresentation
}

// Status returns HTTPResponse.Status
func (r GetUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserTaskModel
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarkCompleteUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MarkCompleteUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarkCompleteUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarkIncompleteUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MarkIncompleteUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarkIncompleteUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebhookRepresentation
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r AddWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookRepresentation
}

// Status returns HTTPResponse.Status
func (r GetWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindWorkTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkTypeListRepresentation
}

// Status returns HTTPResponse.Status
func (r FindWorkTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindWorkTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// FindJobApplicationsWithResponse request returning *FindJobApplicationsResponse
func (c *ClientWithResponses) FindJobApplicationsWithResponse(ctx context.Context, params *FindJobApplicationsParams, reqEditors ...RequestEditorFn) (*FindJobApplicationsResponse, error) {
	rsp, err := c.FindJobApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindJobApplicationsResponse(rsp)
}

// FindJobApplicationActivityWithResponse request returning *FindJobApplicationActivityResponse
func (c *ClientWithResponses) FindJobApplicationActivityWithResponse(ctx context.Context, params *FindJobApplicationActivityParams, reqEditors ...RequestEditorFn) (*FindJobApplicationActivityResponse, error) {
	rsp, err := c.FindJobApplicationActivity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindJobApplicationActivityResponse(rsp)
}

// FindJobApplicationActivitySettingsWithResponse request returning *FindJobApplicationActivitySettingsResponse
func (c *ClientWithResponses) FindJobApplicationActivitySettingsWithResponse(ctx context.Context, params *FindJobApplicationActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindJobApplicationActivitySettingsResponse, error) {
	rsp, err := c.FindJobApplicationActivitySettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindJobApplicationActivitySettingsResponse(rsp)
}

// GetJobApplicationActivitySettingWithResponse request returning *GetJobApplicationActivitySettingResponse
func (c *ClientWithResponses) GetJobApplicationActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetJobApplicationActivitySettingResponse, error) {
	rsp, err := c.GetJobApplicationActivitySetting(ctx, settingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationActivitySettingResponse(rsp)
}

// DeletedJobApplicationsWithResponse request returning *DeletedJobApplicationsResponse
func (c *ClientWithResponses) DeletedJobApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedJobApplicationsResponse, error) {
	rsp, err := c.DeletedJobApplications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletedJobApplicationsResponse(rsp)
}

// GetJobApplicationCustomFieldListWithResponse request returning *GetJobApplicationCustomFieldListResponse
func (c *ClientWithResponses) GetJobApplicationCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJobApplicationCustomFieldListResponse, error) {
	rsp, err := c.GetJobApplicationCustomFieldList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationCustomFieldListResponse(rsp)
}

// PutJobApplicationCustomFieldListWithBodyWithResponse request with arbitrary body returning *PutJobApplicationCustomFieldListResponse
func (c *ClientWithResponses) PutJobApplicationCustomFieldListWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobApplicationCustomFieldListResponse, error) {
	rsp, err := c.PutJobApplicationCustomFieldListWithBody(ctx, fieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobApplicationCustomFieldListResponse(rsp)
}

func (c *ClientWithResponses) PutJobApplicationCustomFieldListWithResponse(ctx context.Context, fieldId int32, body PutJobApplicationCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobApplicationCustomFieldListResponse, error) {
	rsp, err := c.PutJobApplicationCustomFieldList(ctx, fieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobApplicationCustomFieldListResponse(rsp)
}

// GetJobApplicationCustomFieldListItemWithResponse request returning *GetJobApplicationCustomFieldListItemResponse
func (c *ClientWithResponses) GetJobApplicationCustomFieldListItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetJobApplicationCustomFieldListItemResponse, error) {
	rsp, err := c.GetJobApplicationCustomFieldListItem(ctx, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationCustomFieldListItemResponse(rsp)
}

// GetJobApplicationStatusListWithResponse request returning *GetJobApplicationStatusListResponse
func (c *ClientWithResponses) GetJobApplicationStatusListWithResponse(ctx context.Context, params *GetJobApplicationStatusListParams, reqEditors ...RequestEditorFn) (*GetJobApplicationStatusListResponse, error) {
	rsp, err := c.GetJobApplicationStatusList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationStatusListResponse(rsp)
}

// GetJobApplicationStatusListItemWithResponse request returning *GetJobApplicationStatusListItemResponse
func (c *ClientWithResponses) GetJobApplicationStatusListItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetJobApplicationStatusListItemResponse, error) {
	rsp, err := c.GetJobApplicationStatusListItem(ctx, statusId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationStatusListItemResponse(rsp)
}

// GetJobApplicationWorkflowListWithResponse request returning *GetJobApplicationWorkflowListResponse
func (c *ClientWithResponses) GetJobApplicationWorkflowListWithResponse(ctx context.Context, params *GetJobApplicationWorkflowListParams, reqEditors ...RequestEditorFn) (*GetJobApplicationWorkflowListResponse, error) {
	rsp, err := c.GetJobApplicationWorkflowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationWorkflowListResponse(rsp)
}

// GetJobApplicationWithResponse request returning *GetJobApplicationResponse
func (c *ClientWithResponses) GetJobApplicationWithResponse(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*GetJobApplicationResponse, error) {
	rsp, err := c.GetJobApplication(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationResponse(rsp)
}

// UpdateJobApplicationWithBodyWithResponse request with arbitrary body returning *UpdateJobApplicationResponse
func (c *ClientWithResponses) UpdateJobApplicationWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobApplicationResponse, error) {
	rsp, err := c.UpdateJobApplicationWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobApplicationResponse(rsp)
}

func (c *ClientWithResponses) UpdateJobApplicationWithResponse(ctx context.Context, applicationId int64, body UpdateJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobApplicationResponse, error) {
	rsp, err := c.UpdateJobApplication(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobApplicationResponse(rsp)
}

// GetJobApplicationActivityByApplicationIdWithResponse request returning *GetJobApplicationActivityByApplicationIdResponse
func (c *ClientWithResponses) GetJobApplicationActivityByApplicationIdWithResponse(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*GetJobApplicationActivityByApplicationIdResponse, error) {
	rsp, err := c.GetJobApplicationActivityByApplicationId(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationActivityByApplicationIdResponse(rsp)
}

// AddJobApplicationActivityWithBodyWithResponse request with arbitrary body returning *AddJobApplicationActivityResponse
func (c *ClientWithResponses) AddJobApplicationActivityWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobApplicationActivityResponse, error) {
	rsp, err := c.AddJobApplicationActivityWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobApplicationActivityResponse(rsp)
}

func (c *ClientWithResponses) AddJobApplicationActivityWithResponse(ctx context.Context, applicationId int64, body AddJobApplicationActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobApplicationActivityResponse, error) {
	rsp, err := c.AddJobApplicationActivity(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobApplicationActivityResponse(rsp)
}

// GetJobApplicationActivityWithResponse request returning *GetJobApplicationActivityResponse
func (c *ClientWithResponses) GetJobApplicationActivityWithResponse(ctx context.Context, applicationId int64, activityId int64, reqEditors ...RequestEditorFn) (*GetJobApplicationActivityResponse, error) {
	rsp, err := c.GetJobApplicationActivity(ctx, applicationId, activityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationActivityResponse(rsp)
}

// FindJobApplicationAttachmentsWithResponse request returning *FindJobApplicationAttachmentsResponse
func (c *ClientWithResponses) FindJobApplicationAttachmentsWithResponse(ctx context.Context, applicationId int64, params *FindJobApplicationAttachmentsParams, reqEditors ...RequestEditorFn) (*FindJobApplicationAttachmentsResponse, error) {
	rsp, err := c.FindJobApplicationAttachments(ctx, applicationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindJobApplicationAttachmentsResponse(rsp)
}

// GetJobApplicationAttachmentWithResponse request returning *GetJobApplicationAttachmentResponse
func (c *ClientWithResponses) GetJobApplicationAttachmentWithResponse(ctx context.Context, applicationId int64, attach int64, reqEditors ...RequestEditorFn) (*GetJobApplicationAttachmentResponse, error) {
	rsp, err := c.GetJobApplicationAttachment(ctx, applicationId, attach, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationAttachmentResponse(rsp)
}

// AddJobApplicationAttachmentWithBodyWithResponse request with arbitrary body returning *AddJobApplicationAttachmentResponse
func (c *ClientWithResponses) AddJobApplicationAttachmentWithBodyWithResponse(ctx context.Context, applicationId int64, attach SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobApplicationAttachmentResponse, error) {
	rsp, err := c.AddJobApplicationAttachmentWithBody(ctx, applicationId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobApplicationAttachmentResponse(rsp)
}

// UpdateJobApplicationAttachmentWithBodyWithResponse request with arbitrary body returning *UpdateJobApplicationAttachmentResponse
func (c *ClientWithResponses) UpdateJobApplicationAttachmentWithBodyWithResponse(ctx context.Context, applicationId int64, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobApplicationAttachmentResponse, error) {
	rsp, err := c.UpdateJobApplicationAttachmentWithBody(ctx, applicationId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobApplicationAttachmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateJobApplicationAttachmentWithResponse(ctx context.Context, applicationId int64, attach int64, body UpdateJobApplicationAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobApplicationAttachmentResponse, error) {
	rsp, err := c.UpdateJobApplicationAttachment(ctx, applicationId, attach, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobApplicationAttachmentResponse(rsp)
}

// GetJobApplicationInterviewsWithResponse request returning *GetJobApplicationInterviewsResponse
func (c *ClientWithResponses) GetJobApplicationInterviewsWithResponse(ctx context.Context, applicationId int64, params *GetJobApplicationInterviewsParams, reqEditors ...RequestEditorFn) (*GetJobApplicationInterviewsResponse, error) {
	rsp, err := c.GetJobApplicationInterviews(ctx, applicationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationInterviewsResponse(rsp)
}

// PostJobApplicationExternalInterviewWithBodyWithResponse request with arbitrary body returning *PostJobApplicationExternalInterviewResponse
func (c *ClientWithResponses) PostJobApplicationExternalInterviewWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobApplicationExternalInterviewResponse, error) {
	rsp, err := c.PostJobApplicationExternalInterviewWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobApplicationExternalInterviewResponse(rsp)
}

func (c *ClientWithResponses) PostJobApplicationExternalInterviewWithResponse(ctx context.Context, applicationId int64, body PostJobApplicationExternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobApplicationExternalInterviewResponse, error) {
	rsp, err := c.PostJobApplicationExternalInterview(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobApplicationExternalInterviewResponse(rsp)
}

// PutJobApplicationExternalInterviewWithBodyWithResponse request with arbitrary body returning *PutJobApplicationExternalInterviewResponse
func (c *ClientWithResponses) PutJobApplicationExternalInterviewWithBodyWithResponse(ctx context.Context, applicationId int64, interviewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobApplicationExternalInterviewResponse, error) {
	rsp, err := c.PutJobApplicationExternalInterviewWithBody(ctx, applicationId, interviewId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobApplicationExternalInterviewResponse(rsp)
}

func (c *ClientWithResponses) PutJobApplicationExternalInterviewWithResponse(ctx context.Context, applicationId int64, interviewId int32, body PutJobApplicationExternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobApplicationExternalInterviewResponse, error) {
	rsp, err := c.PutJobApplicationExternalInterview(ctx, applicationId, interviewId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobApplicationExternalInterviewResponse(rsp)
}

// PostJobApplicationInternalInterviewWithBodyWithResponse request with arbitrary body returning *PostJobApplicationInternalInterviewResponse
func (c *ClientWithResponses) PostJobApplicationInternalInterviewWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobApplicationInternalInterviewResponse, error) {
	rsp, err := c.PostJobApplicationInternalInterviewWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobApplicationInternalInterviewResponse(rsp)
}

func (c *ClientWithResponses) PostJobApplicationInternalInterviewWithResponse(ctx context.Context, applicationId int64, body PostJobApplicationInternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobApplicationInternalInterviewResponse, error) {
	rsp, err := c.PostJobApplicationInternalInterview(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobApplicationInternalInterviewResponse(rsp)
}

// PutJobApplicationInternalInterviewWithBodyWithResponse request with arbitrary body returning *PutJobApplicationInternalInterviewResponse
func (c *ClientWithResponses) PutJobApplicationInternalInterviewWithBodyWithResponse(ctx context.Context, applicationId int64, interviewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobApplicationInternalInterviewResponse, error) {
	rsp, err := c.PutJobApplicationInternalInterviewWithBody(ctx, applicationId, interviewId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobApplicationInternalInterviewResponse(rsp)
}

func (c *ClientWithResponses) PutJobApplicationInternalInterviewWithResponse(ctx context.Context, applicationId int64, interviewId int32, body PutJobApplicationInternalInterviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobApplicationInternalInterviewResponse, error) {
	rsp, err := c.PutJobApplicationInternalInterview(ctx, applicationId, interviewId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobApplicationInternalInterviewResponse(rsp)
}

// GetJobApplicationNotesWithResponse request returning *GetJobApplicationNotesResponse
func (c *ClientWithResponses) GetJobApplicationNotesWithResponse(ctx context.Context, applicationId int64, params *GetJobApplicationNotesParams, reqEditors ...RequestEditorFn) (*GetJobApplicationNotesResponse, error) {
	rsp, err := c.GetJobApplicationNotes(ctx, applicationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationNotesResponse(rsp)
}

// AddJobApplicationNoteWithBodyWithResponse request with arbitrary body returning *AddJobApplicationNoteResponse
func (c *ClientWithResponses) AddJobApplicationNoteWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobApplicationNoteResponse, error) {
	rsp, err := c.AddJobApplicationNoteWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobApplicationNoteResponse(rsp)
}

func (c *ClientWithResponses) AddJobApplicationNoteWithResponse(ctx context.Context, applicationId int64, body AddJobApplicationNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobApplicationNoteResponse, error) {
	rsp, err := c.AddJobApplicationNote(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobApplicationNoteResponse(rsp)
}

// ReviewSubmitJobApplicationWithBodyWithResponse request with arbitrary body returning *ReviewSubmitJobApplicationResponse
func (c *ClientWithResponses) ReviewSubmitJobApplicationWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviewSubmitJobApplicationResponse, error) {
	rsp, err := c.ReviewSubmitJobApplicationWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviewSubmitJobApplicationResponse(rsp)
}

func (c *ClientWithResponses) ReviewSubmitJobApplicationWithResponse(ctx context.Context, applicationId int64, body ReviewSubmitJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviewSubmitJobApplicationResponse, error) {
	rsp, err := c.ReviewSubmitJobApplication(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviewSubmitJobApplicationResponse(rsp)
}

// ReviewViewJobApplicationWithBodyWithResponse request with arbitrary body returning *ReviewViewJobApplicationResponse
func (c *ClientWithResponses) ReviewViewJobApplicationWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviewViewJobApplicationResponse, error) {
	rsp, err := c.ReviewViewJobApplicationWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviewViewJobApplicationResponse(rsp)
}

func (c *ClientWithResponses) ReviewViewJobApplicationWithResponse(ctx context.Context, applicationId int64, body ReviewViewJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviewViewJobApplicationResponse, error) {
	rsp, err := c.ReviewViewJobApplication(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviewViewJobApplicationResponse(rsp)
}

// ReviewAcceptJobApplicationWithBodyWithResponse request with arbitrary body returning *ReviewAcceptJobApplicationResponse
func (c *ClientWithResponses) ReviewAcceptJobApplicationWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviewAcceptJobApplicationResponse, error) {
	rsp, err := c.ReviewAcceptJobApplicationWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviewAcceptJobApplicationResponse(rsp)
}

func (c *ClientWithResponses) ReviewAcceptJobApplicationWithResponse(ctx context.Context, applicationId int64, body ReviewAcceptJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviewAcceptJobApplicationResponse, error) {
	rsp, err := c.ReviewAcceptJobApplication(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviewAcceptJobApplicationResponse(rsp)
}

// ReviewRejectJobApplicationWithBodyWithResponse request with arbitrary body returning *ReviewRejectJobApplicationResponse
func (c *ClientWithResponses) ReviewRejectJobApplicationWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviewRejectJobApplicationResponse, error) {
	rsp, err := c.ReviewRejectJobApplicationWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviewRejectJobApplicationResponse(rsp)
}

func (c *ClientWithResponses) ReviewRejectJobApplicationWithResponse(ctx context.Context, applicationId int64, body ReviewRejectJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviewRejectJobApplicationResponse, error) {
	rsp, err := c.ReviewRejectJobApplication(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviewRejectJobApplicationResponse(rsp)
}

// PutJobApplicationStatusWithBodyWithResponse request with arbitrary body returning *PutJobApplicationStatusResponse
func (c *ClientWithResponses) PutJobApplicationStatusWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobApplicationStatusResponse, error) {
	rsp, err := c.PutJobApplicationStatusWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobApplicationStatusResponse(rsp)
}

func (c *ClientWithResponses) PutJobApplicationStatusWithResponse(ctx context.Context, applicationId int64, body PutJobApplicationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobApplicationStatusResponse, error) {
	rsp, err := c.PutJobApplicationStatus(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobApplicationStatusResponse(rsp)
}

// AddJobApplicationUserTaskWithBodyWithResponse request with arbitrary body returning *AddJobApplicationUserTaskResponse
func (c *ClientWithResponses) AddJobApplicationUserTaskWithBodyWithResponse(ctx context.Context, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobApplicationUserTaskResponse, error) {
	rsp, err := c.AddJobApplicationUserTaskWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobApplicationUserTaskResponse(rsp)
}

func (c *ClientWithResponses) AddJobApplicationUserTaskWithResponse(ctx context.Context, applicationId int64, body AddJobApplicationUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobApplicationUserTaskResponse, error) {
	rsp, err := c.AddJobApplicationUserTask(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobApplicationUserTaskResponse(rsp)
}

// GetJobApplicationUserTaskWithResponse request returning *GetJobApplicationUserTaskResponse
func (c *ClientWithResponses) GetJobApplicationUserTaskWithResponse(ctx context.Context, applicationId int64, taskId int64, reqEditors ...RequestEditorFn) (*GetJobApplicationUserTaskResponse, error) {
	rsp, err := c.GetJobApplicationUserTask(ctx, applicationId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationUserTaskResponse(rsp)
}

// UpdateJobApplicationUserTaskWithBodyWithResponse request with arbitrary body returning *UpdateJobApplicationUserTaskResponse
func (c *ClientWithResponses) UpdateJobApplicationUserTaskWithBodyWithResponse(ctx context.Context, applicationId int64, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobApplicationUserTaskResponse, error) {
	rsp, err := c.UpdateJobApplicationUserTaskWithBody(ctx, applicationId, taskId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobApplicationUserTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateJobApplicationUserTaskWithResponse(ctx context.Context, applicationId int64, taskId int64, body UpdateJobApplicationUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobApplicationUserTaskResponse, error) {
	rsp, err := c.UpdateJobApplicationUserTask(ctx, applicationId, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobApplicationUserTaskResponse(rsp)
}

// GetJobApplicationVideosWithResponse request returning *GetJobApplicationVideosResponse
func (c *ClientWithResponses) GetJobApplicationVideosWithResponse(ctx context.Context, applicationId int64, reqEditors ...RequestEditorFn) (*GetJobApplicationVideosResponse, error) {
	rsp, err := c.GetJobApplicationVideos(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobApplicationVideosResponse(rsp)
}

// GetLatestJobApplicationVideoWithResponse request returning *GetLatestJobApplicationVideoResponse
func (c *ClientWithResponses) GetLatestJobApplicationVideoWithResponse(ctx context.Context, applicationId int64, videoType CandidateVideoType, reqEditors ...RequestEditorFn) (*GetLatestJobApplicationVideoResponse, error) {
	rsp, err := c.GetLatestJobApplicationVideo(ctx, applicationId, videoType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestJobApplicationVideoResponse(rsp)
}

// AddJobApplicationVideoWithBodyWithResponse request with arbitrary body returning *AddJobApplicationVideoResponse
func (c *ClientWithResponses) AddJobApplicationVideoWithBodyWithResponse(ctx context.Context, applicationId int64, videoType CandidateVideoType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobApplicationVideoResponse, error) {
	rsp, err := c.AddJobApplicationVideoWithBody(ctx, applicationId, videoType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobApplicationVideoResponse(rsp)
}

func (c *ClientWithResponses) AddJobApplicationVideoWithResponse(ctx context.Context, applicationId int64, videoType CandidateVideoType, body AddJobApplicationVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobApplicationVideoResponse, error) {
	rsp, err := c.AddJobApplicationVideo(ctx, applicationId, videoType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobApplicationVideoResponse(rsp)
}

// FindCandidatesWithResponse request returning *FindCandidatesResponse
func (c *ClientWithResponses) FindCandidatesWithResponse(ctx context.Context, params *FindCandidatesParams, reqEditors ...RequestEditorFn) (*FindCandidatesResponse, error) {
	rsp, err := c.FindCandidates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCandidatesResponse(rsp)
}

// AddCandidateWithBodyWithResponse request with arbitrary body returning *AddCandidateResponse
func (c *ClientWithResponses) AddCandidateWithBodyWithResponse(ctx context.Context, params *AddCandidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateResponse, error) {
	rsp, err := c.AddCandidateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateResponse(rsp)
}

func (c *ClientWithResponses) AddCandidateWithResponse(ctx context.Context, params *AddCandidateParams, body AddCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateResponse, error) {
	rsp, err := c.AddCandidate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateResponse(rsp)
}

// FindCandidateActivitiesWithResponse request returning *FindCandidateActivitiesResponse
func (c *ClientWithResponses) FindCandidateActivitiesWithResponse(ctx context.Context, params *FindCandidateActivitiesParams, reqEditors ...RequestEditorFn) (*FindCandidateActivitiesResponse, error) {
	rsp, err := c.FindCandidateActivities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCandidateActivitiesResponse(rsp)
}

// FindCandidateActivitySettingsWithResponse request returning *FindCandidateActivitySettingsResponse
func (c *ClientWithResponses) FindCandidateActivitySettingsWithResponse(ctx context.Context, params *FindCandidateActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindCandidateActivitySettingsResponse, error) {
	rsp, err := c.FindCandidateActivitySettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCandidateActivitySettingsResponse(rsp)
}

// GetCandidateActivitySettingWithResponse request returning *GetCandidateActivitySettingResponse
func (c *ClientWithResponses) GetCandidateActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetCandidateActivitySettingResponse, error) {
	rsp, err := c.GetCandidateActivitySetting(ctx, settingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateActivitySettingResponse(rsp)
}

// FindAllCandidateAttachmentsWithResponse request returning *FindAllCandidateAttachmentsResponse
func (c *ClientWithResponses) FindAllCandidateAttachmentsWithResponse(ctx context.Context, params *FindAllCandidateAttachmentsParams, reqEditors ...RequestEditorFn) (*FindAllCandidateAttachmentsResponse, error) {
	rsp, err := c.FindAllCandidateAttachments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindAllCandidateAttachmentsResponse(rsp)
}

// DeletedCandidatesWithResponse request returning *DeletedCandidatesResponse
func (c *ClientWithResponses) DeletedCandidatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedCandidatesResponse, error) {
	rsp, err := c.DeletedCandidates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletedCandidatesResponse(rsp)
}

// GetCandidateCustomFieldListWithResponse request returning *GetCandidateCustomFieldListResponse
func (c *ClientWithResponses) GetCandidateCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCandidateCustomFieldListResponse, error) {
	rsp, err := c.GetCandidateCustomFieldList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateCustomFieldListResponse(rsp)
}

// GetCandidateCustomFieldListItemWithResponse request returning *GetCandidateCustomFieldListItemResponse
func (c *ClientWithResponses) GetCandidateCustomFieldListItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetCandidateCustomFieldListItemResponse, error) {
	rsp, err := c.GetCandidateCustomFieldListItem(ctx, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateCustomFieldListItemResponse(rsp)
}

// PutCandidateCustomFieldListItemWithBodyWithResponse request with arbitrary body returning *PutCandidateCustomFieldListItemResponse
func (c *ClientWithResponses) PutCandidateCustomFieldListItemWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCandidateCustomFieldListItemResponse, error) {
	rsp, err := c.PutCandidateCustomFieldListItemWithBody(ctx, fieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCandidateCustomFieldListItemResponse(rsp)
}

func (c *ClientWithResponses) PutCandidateCustomFieldListItemWithResponse(ctx context.Context, fieldId int32, body PutCandidateCustomFieldListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCandidateCustomFieldListItemResponse, error) {
	rsp, err := c.PutCandidateCustomFieldListItem(ctx, fieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCandidateCustomFieldListItemResponse(rsp)
}

// GetCandidateAttachmentCategoryListWithResponse request returning *GetCandidateAttachmentCategoryListResponse
func (c *ClientWithResponses) GetCandidateAttachmentCategoryListWithResponse(ctx context.Context, params *GetCandidateAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*GetCandidateAttachmentCategoryListResponse, error) {
	rsp, err := c.GetCandidateAttachmentCategoryList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateAttachmentCategoryListResponse(rsp)
}

// GetCandidateNoteTypeListWithResponse request returning *GetCandidateNoteTypeListResponse
func (c *ClientWithResponses) GetCandidateNoteTypeListWithResponse(ctx context.Context, params *GetCandidateNoteTypeListParams, reqEditors ...RequestEditorFn) (*GetCandidateNoteTypeListResponse, error) {
	rsp, err := c.GetCandidateNoteTypeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateNoteTypeListResponse(rsp)
}

// GetCandidateRatingListWithResponse request returning *GetCandidateRatingListResponse
func (c *ClientWithResponses) GetCandidateRatingListWithResponse(ctx context.Context, params *GetCandidateRatingListParams, reqEditors ...RequestEditorFn) (*GetCandidateRatingListResponse, error) {
	rsp, err := c.GetCandidateRatingList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateRatingListResponse(rsp)
}

// GetCandidateSalutationListWithResponse request returning *GetCandidateSalutationListResponse
func (c *ClientWithResponses) GetCandidateSalutationListWithResponse(ctx context.Context, params *GetCandidateSalutationListParams, reqEditors ...RequestEditorFn) (*GetCandidateSalutationListResponse, error) {
	rsp, err := c.GetCandidateSalutationList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateSalutationListResponse(rsp)
}

// GetCandidateSourceListWithResponse request returning *GetCandidateSourceListResponse
func (c *ClientWithResponses) GetCandidateSourceListWithResponse(ctx context.Context, params *GetCandidateSourceListParams, reqEditors ...RequestEditorFn) (*GetCandidateSourceListResponse, error) {
	rsp, err := c.GetCandidateSourceList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateSourceListResponse(rsp)
}

// GetCandidateStatusListWithResponse request returning *GetCandidateStatusListResponse
func (c *ClientWithResponses) GetCandidateStatusListWithResponse(ctx context.Context, params *GetCandidateStatusListParams, reqEditors ...RequestEditorFn) (*GetCandidateStatusListResponse, error) {
	rsp, err := c.GetCandidateStatusList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateStatusListResponse(rsp)
}

// GetCandidateStatusListItemWithResponse request returning *GetCandidateStatusListItemResponse
func (c *ClientWithResponses) GetCandidateStatusListItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetCandidateStatusListItemResponse, error) {
	rsp, err := c.GetCandidateStatusListItem(ctx, statusId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateStatusListItemResponse(rsp)
}

// FindCandidatesPayrollBillingsWithResponse request returning *FindCandidatesPayrollBillingsResponse
func (c *ClientWithResponses) FindCandidatesPayrollBillingsWithResponse(ctx context.Context, params *FindCandidatesPayrollBillingsParams, reqEditors ...RequestEditorFn) (*FindCandidatesPayrollBillingsResponse, error) {
	rsp, err := c.FindCandidatesPayrollBillings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCandidatesPayrollBillingsResponse(rsp)
}

// GetCandidateWithResponse request returning *GetCandidateResponse
func (c *ClientWithResponses) GetCandidateWithResponse(ctx context.Context, candidateId int32, params *GetCandidateParams, reqEditors ...RequestEditorFn) (*GetCandidateResponse, error) {
	rsp, err := c.GetCandidate(ctx, candidateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateResponse(rsp)
}

// UpdateCandidateWithBodyWithResponse request with arbitrary body returning *UpdateCandidateResponse
func (c *ClientWithResponses) UpdateCandidateWithBodyWithResponse(ctx context.Context, candidateId int32, params *UpdateCandidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCandidateResponse, error) {
	rsp, err := c.UpdateCandidateWithBody(ctx, candidateId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCandidateResponse(rsp)
}

func (c *ClientWithResponses) UpdateCandidateWithResponse(ctx context.Context, candidateId int32, params *UpdateCandidateParams, body UpdateCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCandidateResponse, error) {
	rsp, err := c.UpdateCandidate(ctx, candidateId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCandidateResponse(rsp)
}

// GetCandidateActivityByCandidateIdWithResponse request returning *GetCandidateActivityByCandidateIdResponse
func (c *ClientWithResponses) GetCandidateActivityByCandidateIdWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateActivityByCandidateIdResponse, error) {
	rsp, err := c.GetCandidateActivityByCandidateId(ctx, candidateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateActivityByCandidateIdResponse(rsp)
}

// AddCandidateActivityWithBodyWithResponse request with arbitrary body returning *AddCandidateActivityResponse
func (c *ClientWithResponses) AddCandidateActivityWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateActivityResponse, error) {
	rsp, err := c.AddCandidateActivityWithBody(ctx, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateActivityResponse(rsp)
}

func (c *ClientWithResponses) AddCandidateActivityWithResponse(ctx context.Context, candidateId int32, body AddCandidateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateActivityResponse, error) {
	rsp, err := c.AddCandidateActivity(ctx, candidateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateActivityResponse(rsp)
}

// GetCandidateActivityWithResponse request returning *GetCandidateActivityResponse
func (c *ClientWithResponses) GetCandidateActivityWithResponse(ctx context.Context, candidateId int32, activityId int64, reqEditors ...RequestEditorFn) (*GetCandidateActivityResponse, error) {
	rsp, err := c.GetCandidateActivity(ctx, candidateId, activityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateActivityResponse(rsp)
}

// GetCandidateJobApplicationsWithResponse request returning *GetCandidateJobApplicationsResponse
func (c *ClientWithResponses) GetCandidateJobApplicationsWithResponse(ctx context.Context, candidateId int32, params *GetCandidateJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetCandidateJobApplicationsResponse, error) {
	rsp, err := c.GetCandidateJobApplications(ctx, candidateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateJobApplicationsResponse(rsp)
}

// AddCandidateJobOrdersWithBodyWithResponse request with arbitrary body returning *AddCandidateJobOrdersResponse
func (c *ClientWithResponses) AddCandidateJobOrdersWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateJobOrdersResponse, error) {
	rsp, err := c.AddCandidateJobOrdersWithBody(ctx, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateJobOrdersResponse(rsp)
}

func (c *ClientWithResponses) AddCandidateJobOrdersWithResponse(ctx context.Context, candidateId int32, body AddCandidateJobOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateJobOrdersResponse, error) {
	rsp, err := c.AddCandidateJobOrders(ctx, candidateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateJobOrdersResponse(rsp)
}

// GetActiveCandidateJobApplicationsWithResponse request returning *GetActiveCandidateJobApplicationsResponse
func (c *ClientWithResponses) GetActiveCandidateJobApplicationsWithResponse(ctx context.Context, candidateId int32, params *GetActiveCandidateJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetActiveCandidateJobApplicationsResponse, error) {
	rsp, err := c.GetActiveCandidateJobApplications(ctx, candidateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActiveCandidateJobApplicationsResponse(rsp)
}

// FindCandidateAttachmentsWithResponse request returning *FindCandidateAttachmentsResponse
func (c *ClientWithResponses) FindCandidateAttachmentsWithResponse(ctx context.Context, candidateId int32, params *FindCandidateAttachmentsParams, reqEditors ...RequestEditorFn) (*FindCandidateAttachmentsResponse, error) {
	rsp, err := c.FindCandidateAttachments(ctx, candidateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCandidateAttachmentsResponse(rsp)
}

// GetCandidateAttachmentWithResponse request returning *GetCandidateAttachmentResponse
func (c *ClientWithResponses) GetCandidateAttachmentWithResponse(ctx context.Context, candidateId int32, attach int64, reqEditors ...RequestEditorFn) (*GetCandidateAttachmentResponse, error) {
	rsp, err := c.GetCandidateAttachment(ctx, candidateId, attach, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateAttachmentResponse(rsp)
}

// AddCandidateAttachmentWithBodyWithResponse request with arbitrary body returning *AddCandidateAttachmentResponse
func (c *ClientWithResponses) AddCandidateAttachmentWithBodyWithResponse(ctx context.Context, candidateId int32, attach SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateAttachmentResponse, error) {
	rsp, err := c.AddCandidateAttachmentWithBody(ctx, candidateId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateAttachmentResponse(rsp)
}

// UpdateCandidateAttachmentWithBodyWithResponse request with arbitrary body returning *UpdateCandidateAttachmentResponse
func (c *ClientWithResponses) UpdateCandidateAttachmentWithBodyWithResponse(ctx context.Context, candidateId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCandidateAttachmentResponse, error) {
	rsp, err := c.UpdateCandidateAttachmentWithBody(ctx, candidateId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCandidateAttachmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateCandidateAttachmentWithResponse(ctx context.Context, candidateId int32, attach int64, body UpdateCandidateAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCandidateAttachmentResponse, error) {
	rsp, err := c.UpdateCandidateAttachment(ctx, candidateId, attach, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCandidateAttachmentResponse(rsp)
}

// GetCandidateAvailabilityWithResponse request returning *GetCandidateAvailabilityResponse
func (c *ClientWithResponses) GetCandidateAvailabilityWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateAvailabilityResponse, error) {
	rsp, err := c.GetCandidateAvailability(ctx, candidateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateAvailabilityResponse(rsp)
}

// DeleteCandidateAvailabilityWeekWithResponse request returning *DeleteCandidateAvailabilityWeekResponse
func (c *ClientWithResponses) DeleteCandidateAvailabilityWeekWithResponse(ctx context.Context, candidateId int32, params *DeleteCandidateAvailabilityWeekParams, reqEditors ...RequestEditorFn) (*DeleteCandidateAvailabilityWeekResponse, error) {
	rsp, err := c.DeleteCandidateAvailabilityWeek(ctx, candidateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCandidateAvailabilityWeekResponse(rsp)
}

// UpdateCandidateAvailabilityWeekWithBodyWithResponse request with arbitrary body returning *UpdateCandidateAvailabilityWeekResponse
func (c *ClientWithResponses) UpdateCandidateAvailabilityWeekWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCandidateAvailabilityWeekResponse, error) {
	rsp, err := c.UpdateCandidateAvailabilityWeekWithBody(ctx, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCandidateAvailabilityWeekResponse(rsp)
}

func (c *ClientWithResponses) UpdateCandidateAvailabilityWeekWithResponse(ctx context.Context, candidateId int32, body UpdateCandidateAvailabilityWeekJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCandidateAvailabilityWeekResponse, error) {
	rsp, err := c.UpdateCandidateAvailabilityWeek(ctx, candidateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCandidateAvailabilityWeekResponse(rsp)
}

// GetCandidateFloatsWithResponse request returning *GetCandidateFloatsResponse
func (c *ClientWithResponses) GetCandidateFloatsWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateFloatsResponse, error) {
	rsp, err := c.GetCandidateFloats(ctx, candidateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateFloatsResponse(rsp)
}

// GetCandidateInterviewsWithResponse request returning *GetCandidateInterviewsResponse
func (c *ClientWithResponses) GetCandidateInterviewsWithResponse(ctx context.Context, candidateId int32, params *GetCandidateInterviewsParams, reqEditors ...RequestEditorFn) (*GetCandidateInterviewsResponse, error) {
	rsp, err := c.GetCandidateInterviews(ctx, candidateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateInterviewsResponse(rsp)
}

// GetCandidateNotesWithResponse request returning *GetCandidateNotesResponse
func (c *ClientWithResponses) GetCandidateNotesWithResponse(ctx context.Context, candidateId int32, params *GetCandidateNotesParams, reqEditors ...RequestEditorFn) (*GetCandidateNotesResponse, error) {
	rsp, err := c.GetCandidateNotes(ctx, candidateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateNotesResponse(rsp)
}

// AddCandidateNoteWithBodyWithResponse request with arbitrary body returning *AddCandidateNoteResponse
func (c *ClientWithResponses) AddCandidateNoteWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateNoteResponse, error) {
	rsp, err := c.AddCandidateNoteWithBody(ctx, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateNoteResponse(rsp)
}

func (c *ClientWithResponses) AddCandidateNoteWithResponse(ctx context.Context, candidateId int32, body AddCandidateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateNoteResponse, error) {
	rsp, err := c.AddCandidateNote(ctx, candidateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateNoteResponse(rsp)
}

// GetCandidatePayrollBillingWithResponse request returning *GetCandidatePayrollBillingResponse
func (c *ClientWithResponses) GetCandidatePayrollBillingWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidatePayrollBillingResponse, error) {
	rsp, err := c.GetCandidatePayrollBilling(ctx, candidateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidatePayrollBillingResponse(rsp)
}

// DeleteCandidatePhotoWithResponse request returning *DeleteCandidatePhotoResponse
func (c *ClientWithResponses) DeleteCandidatePhotoWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*DeleteCandidatePhotoResponse, error) {
	rsp, err := c.DeleteCandidatePhoto(ctx, candidateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCandidatePhotoResponse(rsp)
}

// GetCandidatePhotoWithResponse request returning *GetCandidatePhotoResponse
func (c *ClientWithResponses) GetCandidatePhotoWithResponse(ctx context.Context, candidateId int32, params *GetCandidatePhotoParams, reqEditors ...RequestEditorFn) (*GetCandidatePhotoResponse, error) {
	rsp, err := c.GetCandidatePhoto(ctx, candidateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidatePhotoResponse(rsp)
}

// HeadCandidatePhotoWithResponse request returning *HeadCandidatePhotoResponse
func (c *ClientWithResponses) HeadCandidatePhotoWithResponse(ctx context.Context, candidateId int32, params *HeadCandidatePhotoParams, reqEditors ...RequestEditorFn) (*HeadCandidatePhotoResponse, error) {
	rsp, err := c.HeadCandidatePhoto(ctx, candidateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadCandidatePhotoResponse(rsp)
}

// UpdateCandidatePhotoWithBodyWithResponse request with arbitrary body returning *UpdateCandidatePhotoResponse
func (c *ClientWithResponses) UpdateCandidatePhotoWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCandidatePhotoResponse, error) {
	rsp, err := c.UpdateCandidatePhotoWithBody(ctx, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCandidatePhotoResponse(rsp)
}

// GetCandidatePlacementsWithResponse request returning *GetCandidatePlacementsResponse
func (c *ClientWithResponses) GetCandidatePlacementsWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidatePlacementsResponse, error) {
	rsp, err := c.GetCandidatePlacements(ctx, candidateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidatePlacementsResponse(rsp)
}

// GetCandidateApprovedPlacementsWithResponse request returning *GetCandidateApprovedPlacementsResponse
func (c *ClientWithResponses) GetCandidateApprovedPlacementsWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateApprovedPlacementsResponse, error) {
	rsp, err := c.GetCandidateApprovedPlacements(ctx, candidateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateApprovedPlacementsResponse(rsp)
}

// PrivacyDeleteCandidateWithResponse request returning *PrivacyDeleteCandidateResponse
func (c *ClientWithResponses) PrivacyDeleteCandidateWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*PrivacyDeleteCandidateResponse, error) {
	rsp, err := c.PrivacyDeleteCandidate(ctx, candidateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePrivacyDeleteCandidateResponse(rsp)
}

// GetCandidateSkillsWithResponse request returning *GetCandidateSkillsResponse
func (c *ClientWithResponses) GetCandidateSkillsWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateSkillsResponse, error) {
	rsp, err := c.GetCandidateSkills(ctx, candidateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateSkillsResponse(rsp)
}

// DeleteCandidateSkillsWithBodyWithResponse request with arbitrary body returning *DeleteCandidateSkillsResponse
func (c *ClientWithResponses) DeleteCandidateSkillsWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCandidateSkillsResponse, error) {
	rsp, err := c.DeleteCandidateSkillsWithBody(ctx, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCandidateSkillsResponse(rsp)
}

func (c *ClientWithResponses) DeleteCandidateSkillsWithResponse(ctx context.Context, candidateId int32, body DeleteCandidateSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCandidateSkillsResponse, error) {
	rsp, err := c.DeleteCandidateSkills(ctx, candidateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCandidateSkillsResponse(rsp)
}

// PutCandidateSkillsWithBodyWithResponse request with arbitrary body returning *PutCandidateSkillsResponse
func (c *ClientWithResponses) PutCandidateSkillsWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCandidateSkillsResponse, error) {
	rsp, err := c.PutCandidateSkillsWithBody(ctx, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCandidateSkillsResponse(rsp)
}

func (c *ClientWithResponses) PutCandidateSkillsWithResponse(ctx context.Context, candidateId int32, body PutCandidateSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCandidateSkillsResponse, error) {
	rsp, err := c.PutCandidateSkills(ctx, candidateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCandidateSkillsResponse(rsp)
}

// DeleteCandidateCategoryWithResponse request returning *DeleteCandidateCategoryResponse
func (c *ClientWithResponses) DeleteCandidateCategoryWithResponse(ctx context.Context, candidateId int32, categoryId int32, reqEditors ...RequestEditorFn) (*DeleteCandidateCategoryResponse, error) {
	rsp, err := c.DeleteCandidateCategory(ctx, candidateId, categoryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCandidateCategoryResponse(rsp)
}

// PutCandidateStatusWithBodyWithResponse request with arbitrary body returning *PutCandidateStatusResponse
func (c *ClientWithResponses) PutCandidateStatusWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCandidateStatusResponse, error) {
	rsp, err := c.PutCandidateStatusWithBody(ctx, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCandidateStatusResponse(rsp)
}

func (c *ClientWithResponses) PutCandidateStatusWithResponse(ctx context.Context, candidateId int32, body PutCandidateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCandidateStatusResponse, error) {
	rsp, err := c.PutCandidateStatus(ctx, candidateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCandidateStatusResponse(rsp)
}

// GetCandidateSubmissionsWithResponse request returning *GetCandidateSubmissionsResponse
func (c *ClientWithResponses) GetCandidateSubmissionsWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateSubmissionsResponse, error) {
	rsp, err := c.GetCandidateSubmissions(ctx, candidateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateSubmissionsResponse(rsp)
}

// AddCandidateUserTaskWithBodyWithResponse request with arbitrary body returning *AddCandidateUserTaskResponse
func (c *ClientWithResponses) AddCandidateUserTaskWithBodyWithResponse(ctx context.Context, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateUserTaskResponse, error) {
	rsp, err := c.AddCandidateUserTaskWithBody(ctx, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateUserTaskResponse(rsp)
}

func (c *ClientWithResponses) AddCandidateUserTaskWithResponse(ctx context.Context, candidateId int32, body AddCandidateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateUserTaskResponse, error) {
	rsp, err := c.AddCandidateUserTask(ctx, candidateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateUserTaskResponse(rsp)
}

// GetCandidateUserTaskWithResponse request returning *GetCandidateUserTaskResponse
func (c *ClientWithResponses) GetCandidateUserTaskWithResponse(ctx context.Context, candidateId int32, taskId int64, reqEditors ...RequestEditorFn) (*GetCandidateUserTaskResponse, error) {
	rsp, err := c.GetCandidateUserTask(ctx, candidateId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateUserTaskResponse(rsp)
}

// UpdateCandidateUserTaskWithBodyWithResponse request with arbitrary body returning *UpdateCandidateUserTaskResponse
func (c *ClientWithResponses) UpdateCandidateUserTaskWithBodyWithResponse(ctx context.Context, candidateId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCandidateUserTaskResponse, error) {
	rsp, err := c.UpdateCandidateUserTaskWithBody(ctx, candidateId, taskId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCandidateUserTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateCandidateUserTaskWithResponse(ctx context.Context, candidateId int32, taskId int64, body UpdateCandidateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCandidateUserTaskResponse, error) {
	rsp, err := c.UpdateCandidateUserTask(ctx, candidateId, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCandidateUserTaskResponse(rsp)
}

// GetCandidateVideosWithResponse request returning *GetCandidateVideosResponse
func (c *ClientWithResponses) GetCandidateVideosWithResponse(ctx context.Context, candidateId int32, reqEditors ...RequestEditorFn) (*GetCandidateVideosResponse, error) {
	rsp, err := c.GetCandidateVideos(ctx, candidateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateVideosResponse(rsp)
}

// GetLatestCandidateVideoWithResponse request returning *GetLatestCandidateVideoResponse
func (c *ClientWithResponses) GetLatestCandidateVideoWithResponse(ctx context.Context, candidateId int32, videoType CandidateVideoType, reqEditors ...RequestEditorFn) (*GetLatestCandidateVideoResponse, error) {
	rsp, err := c.GetLatestCandidateVideo(ctx, candidateId, videoType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestCandidateVideoResponse(rsp)
}

// AddCandidateVideoWithBodyWithResponse request with arbitrary body returning *AddCandidateVideoResponse
func (c *ClientWithResponses) AddCandidateVideoWithBodyWithResponse(ctx context.Context, candidateId int32, videoType CandidateVideoType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCandidateVideoResponse, error) {
	rsp, err := c.AddCandidateVideoWithBody(ctx, candidateId, videoType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateVideoResponse(rsp)
}

func (c *ClientWithResponses) AddCandidateVideoWithResponse(ctx context.Context, candidateId int32, videoType CandidateVideoType, body AddCandidateVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCandidateVideoResponse, error) {
	rsp, err := c.AddCandidateVideo(ctx, candidateId, videoType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCandidateVideoResponse(rsp)
}

// FindCategoriesWithResponse request returning *FindCategoriesResponse
func (c *ClientWithResponses) FindCategoriesWithResponse(ctx context.Context, params *FindCategoriesParams, reqEditors ...RequestEditorFn) (*FindCategoriesResponse, error) {
	rsp, err := c.FindCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCategoriesResponse(rsp)
}

// FindCompaniesWithResponse request returning *FindCompaniesResponse
func (c *ClientWithResponses) FindCompaniesWithResponse(ctx context.Context, params *FindCompaniesParams, reqEditors ...RequestEditorFn) (*FindCompaniesResponse, error) {
	rsp, err := c.FindCompanies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCompaniesResponse(rsp)
}

// AddCompanyWithBodyWithResponse request with arbitrary body returning *AddCompanyResponse
func (c *ClientWithResponses) AddCompanyWithBodyWithResponse(ctx context.Context, params *AddCompanyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyResponse, error) {
	rsp, err := c.AddCompanyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyResponse(rsp)
}

func (c *ClientWithResponses) AddCompanyWithResponse(ctx context.Context, params *AddCompanyParams, body AddCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyResponse, error) {
	rsp, err := c.AddCompany(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyResponse(rsp)
}

// FindCompanyActivityWithResponse request returning *FindCompanyActivityResponse
func (c *ClientWithResponses) FindCompanyActivityWithResponse(ctx context.Context, params *FindCompanyActivityParams, reqEditors ...RequestEditorFn) (*FindCompanyActivityResponse, error) {
	rsp, err := c.FindCompanyActivity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCompanyActivityResponse(rsp)
}

// FindCompanyActivitySettingsWithResponse request returning *FindCompanyActivitySettingsResponse
func (c *ClientWithResponses) FindCompanyActivitySettingsWithResponse(ctx context.Context, params *FindCompanyActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindCompanyActivitySettingsResponse, error) {
	rsp, err := c.FindCompanyActivitySettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCompanyActivitySettingsResponse(rsp)
}

// GetCompanyActivitySettingWithResponse request returning *GetCompanyActivitySettingResponse
func (c *ClientWithResponses) GetCompanyActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetCompanyActivitySettingResponse, error) {
	rsp, err := c.GetCompanyActivitySetting(ctx, settingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyActivitySettingResponse(rsp)
}

// DeletedCompaniesWithResponse request returning *DeletedCompaniesResponse
func (c *ClientWithResponses) DeletedCompaniesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedCompaniesResponse, error) {
	rsp, err := c.DeletedCompanies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletedCompaniesResponse(rsp)
}

// GetCompanyCustomFieldListWithResponse request returning *GetCompanyCustomFieldListResponse
func (c *ClientWithResponses) GetCompanyCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCompanyCustomFieldListResponse, error) {
	rsp, err := c.GetCompanyCustomFieldList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyCustomFieldListResponse(rsp)
}

// GetCompanyCustomFieldListItemWithResponse request returning *GetCompanyCustomFieldListItemResponse
func (c *ClientWithResponses) GetCompanyCustomFieldListItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetCompanyCustomFieldListItemResponse, error) {
	rsp, err := c.GetCompanyCustomFieldListItem(ctx, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyCustomFieldListItemResponse(rsp)
}

// PutCompanyCustomFieldListWithBodyWithResponse request with arbitrary body returning *PutCompanyCustomFieldListResponse
func (c *ClientWithResponses) PutCompanyCustomFieldListWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCompanyCustomFieldListResponse, error) {
	rsp, err := c.PutCompanyCustomFieldListWithBody(ctx, fieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCompanyCustomFieldListResponse(rsp)
}

func (c *ClientWithResponses) PutCompanyCustomFieldListWithResponse(ctx context.Context, fieldId int32, body PutCompanyCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCompanyCustomFieldListResponse, error) {
	rsp, err := c.PutCompanyCustomFieldList(ctx, fieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCompanyCustomFieldListResponse(rsp)
}

// GetCompanyAttachmentCategoryListWithResponse request returning *GetCompanyAttachmentCategoryListResponse
func (c *ClientWithResponses) GetCompanyAttachmentCategoryListWithResponse(ctx context.Context, params *GetCompanyAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*GetCompanyAttachmentCategoryListResponse, error) {
	rsp, err := c.GetCompanyAttachmentCategoryList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyAttachmentCategoryListResponse(rsp)
}

// GetCompanyNoteTypeListWithResponse request returning *GetCompanyNoteTypeListResponse
func (c *ClientWithResponses) GetCompanyNoteTypeListWithResponse(ctx context.Context, params *GetCompanyNoteTypeListParams, reqEditors ...RequestEditorFn) (*GetCompanyNoteTypeListResponse, error) {
	rsp, err := c.GetCompanyNoteTypeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyNoteTypeListResponse(rsp)
}

// GetCompanyStatusListWithResponse request returning *GetCompanyStatusListResponse
func (c *ClientWithResponses) GetCompanyStatusListWithResponse(ctx context.Context, params *GetCompanyStatusListParams, reqEditors ...RequestEditorFn) (*GetCompanyStatusListResponse, error) {
	rsp, err := c.GetCompanyStatusList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyStatusListResponse(rsp)
}

// GetCompanyStatusListItemWithResponse request returning *GetCompanyStatusListItemResponse
func (c *ClientWithResponses) GetCompanyStatusListItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetCompanyStatusListItemResponse, error) {
	rsp, err := c.GetCompanyStatusListItem(ctx, statusId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyStatusListItemResponse(rsp)
}

// GetCompanyWithResponse request returning *GetCompanyResponse
func (c *ClientWithResponses) GetCompanyWithResponse(ctx context.Context, companyId int32, params *GetCompanyParams, reqEditors ...RequestEditorFn) (*GetCompanyResponse, error) {
	rsp, err := c.GetCompany(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyResponse(rsp)
}

// UpdateCompanyWithBodyWithResponse request with arbitrary body returning *UpdateCompanyResponse
func (c *ClientWithResponses) UpdateCompanyWithBodyWithResponse(ctx context.Context, companyId int32, params *UpdateCompanyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyResponse, error) {
	rsp, err := c.UpdateCompanyWithBody(ctx, companyId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompanyResponse(rsp)
}

func (c *ClientWithResponses) UpdateCompanyWithResponse(ctx context.Context, companyId int32, params *UpdateCompanyParams, body UpdateCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompanyResponse, error) {
	rsp, err := c.UpdateCompany(ctx, companyId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompanyResponse(rsp)
}

// GetCompanyActivityByCompanyIdWithResponse request returning *GetCompanyActivityByCompanyIdResponse
func (c *ClientWithResponses) GetCompanyActivityByCompanyIdWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyActivityByCompanyIdResponse, error) {
	rsp, err := c.GetCompanyActivityByCompanyId(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyActivityByCompanyIdResponse(rsp)
}

// AddCompanyActivityWithBodyWithResponse request with arbitrary body returning *AddCompanyActivityResponse
func (c *ClientWithResponses) AddCompanyActivityWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyActivityResponse, error) {
	rsp, err := c.AddCompanyActivityWithBody(ctx, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyActivityResponse(rsp)
}

func (c *ClientWithResponses) AddCompanyActivityWithResponse(ctx context.Context, companyId int32, body AddCompanyActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyActivityResponse, error) {
	rsp, err := c.AddCompanyActivity(ctx, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyActivityResponse(rsp)
}

// GetCompanyActivityWithResponse request returning *GetCompanyActivityResponse
func (c *ClientWithResponses) GetCompanyActivityWithResponse(ctx context.Context, companyId int32, activityId int64, reqEditors ...RequestEditorFn) (*GetCompanyActivityResponse, error) {
	rsp, err := c.GetCompanyActivity(ctx, companyId, activityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyActivityResponse(rsp)
}

// GetCompanyAddressesWithResponse request returning *GetCompanyAddressesResponse
func (c *ClientWithResponses) GetCompanyAddressesWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyAddressesResponse, error) {
	rsp, err := c.GetCompanyAddresses(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyAddressesResponse(rsp)
}

// AddCompanyAddressWithBodyWithResponse request with arbitrary body returning *AddCompanyAddressResponse
func (c *ClientWithResponses) AddCompanyAddressWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyAddressResponse, error) {
	rsp, err := c.AddCompanyAddressWithBody(ctx, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyAddressResponse(rsp)
}

func (c *ClientWithResponses) AddCompanyAddressWithResponse(ctx context.Context, companyId int32, body AddCompanyAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyAddressResponse, error) {
	rsp, err := c.AddCompanyAddress(ctx, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyAddressResponse(rsp)
}

// RemoveCompanyAddressWithResponse request returning *RemoveCompanyAddressResponse
func (c *ClientWithResponses) RemoveCompanyAddressWithResponse(ctx context.Context, companyId int32, addressId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveCompanyAddressResponse, error) {
	rsp, err := c.RemoveCompanyAddress(ctx, companyId, addressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveCompanyAddressResponse(rsp)
}

// GetCompanyAddressWithResponse request returning *GetCompanyAddressResponse
func (c *ClientWithResponses) GetCompanyAddressWithResponse(ctx context.Context, companyId int32, addressId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCompanyAddressResponse, error) {
	rsp, err := c.GetCompanyAddress(ctx, companyId, addressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyAddressResponse(rsp)
}

// UpdateCompanyAddressWithBodyWithResponse request with arbitrary body returning *UpdateCompanyAddressResponse
func (c *ClientWithResponses) UpdateCompanyAddressWithBodyWithResponse(ctx context.Context, companyId int32, addressId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyAddressResponse, error) {
	rsp, err := c.UpdateCompanyAddressWithBody(ctx, companyId, addressId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompanyAddressResponse(rsp)
}

func (c *ClientWithResponses) UpdateCompanyAddressWithResponse(ctx context.Context, companyId int32, addressId openapi_types.UUID, body UpdateCompanyAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompanyAddressResponse, error) {
	rsp, err := c.UpdateCompanyAddress(ctx, companyId, addressId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompanyAddressResponse(rsp)
}

// FindCompanyAttachmentsWithResponse request returning *FindCompanyAttachmentsResponse
func (c *ClientWithResponses) FindCompanyAttachmentsWithResponse(ctx context.Context, companyId int32, params *FindCompanyAttachmentsParams, reqEditors ...RequestEditorFn) (*FindCompanyAttachmentsResponse, error) {
	rsp, err := c.FindCompanyAttachments(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCompanyAttachmentsResponse(rsp)
}

// GetCompanyAttachmentWithResponse request returning *GetCompanyAttachmentResponse
func (c *ClientWithResponses) GetCompanyAttachmentWithResponse(ctx context.Context, companyId int32, attach int64, reqEditors ...RequestEditorFn) (*GetCompanyAttachmentResponse, error) {
	rsp, err := c.GetCompanyAttachment(ctx, companyId, attach, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyAttachmentResponse(rsp)
}

// AddCompanyAttachmentWithBodyWithResponse request with arbitrary body returning *AddCompanyAttachmentResponse
func (c *ClientWithResponses) AddCompanyAttachmentWithBodyWithResponse(ctx context.Context, companyId int32, attach CompanyAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyAttachmentResponse, error) {
	rsp, err := c.AddCompanyAttachmentWithBody(ctx, companyId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyAttachmentResponse(rsp)
}

// UpdateCompanyAttachmentWithBodyWithResponse request with arbitrary body returning *UpdateCompanyAttachmentResponse
func (c *ClientWithResponses) UpdateCompanyAttachmentWithBodyWithResponse(ctx context.Context, companyId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyAttachmentResponse, error) {
	rsp, err := c.UpdateCompanyAttachmentWithBody(ctx, companyId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompanyAttachmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateCompanyAttachmentWithResponse(ctx context.Context, companyId int32, attach int64, body UpdateCompanyAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompanyAttachmentResponse, error) {
	rsp, err := c.UpdateCompanyAttachment(ctx, companyId, attach, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompanyAttachmentResponse(rsp)
}

// GetCompanyContactsWithResponse request returning *GetCompanyContactsResponse
func (c *ClientWithResponses) GetCompanyContactsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyContactsResponse, error) {
	rsp, err := c.GetCompanyContacts(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyContactsResponse(rsp)
}

// GetCompanyFloatsWithResponse request returning *GetCompanyFloatsResponse
func (c *ClientWithResponses) GetCompanyFloatsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyFloatsResponse, error) {
	rsp, err := c.GetCompanyFloats(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyFloatsResponse(rsp)
}

// GetCompanyJobOrdersWithResponse request returning *GetCompanyJobOrdersResponse
func (c *ClientWithResponses) GetCompanyJobOrdersWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyJobOrdersResponse, error) {
	rsp, err := c.GetCompanyJobOrders(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyJobOrdersResponse(rsp)
}

// GetCompanyActiveJobOrdersWithResponse request returning *GetCompanyActiveJobOrdersResponse
func (c *ClientWithResponses) GetCompanyActiveJobOrdersWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyActiveJobOrdersResponse, error) {
	rsp, err := c.GetCompanyActiveJobOrders(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyActiveJobOrdersResponse(rsp)
}

// DeleteCompanyLogoWithResponse request returning *DeleteCompanyLogoResponse
func (c *ClientWithResponses) DeleteCompanyLogoWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*DeleteCompanyLogoResponse, error) {
	rsp, err := c.DeleteCompanyLogo(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCompanyLogoResponse(rsp)
}

// GetCompanyLogoWithResponse request returning *GetCompanyLogoResponse
func (c *ClientWithResponses) GetCompanyLogoWithResponse(ctx context.Context, companyId int32, params *GetCompanyLogoParams, reqEditors ...RequestEditorFn) (*GetCompanyLogoResponse, error) {
	rsp, err := c.GetCompanyLogo(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyLogoResponse(rsp)
}

// HeadCompanyLogoWithResponse request returning *HeadCompanyLogoResponse
func (c *ClientWithResponses) HeadCompanyLogoWithResponse(ctx context.Context, companyId int32, params *HeadCompanyLogoParams, reqEditors ...RequestEditorFn) (*HeadCompanyLogoResponse, error) {
	rsp, err := c.HeadCompanyLogo(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadCompanyLogoResponse(rsp)
}

// UpdateCompanyLogoWithBodyWithResponse request with arbitrary body returning *UpdateCompanyLogoResponse
func (c *ClientWithResponses) UpdateCompanyLogoWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyLogoResponse, error) {
	rsp, err := c.UpdateCompanyLogoWithBody(ctx, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompanyLogoResponse(rsp)
}

// GetCompanyNotesWithResponse request returning *GetCompanyNotesResponse
func (c *ClientWithResponses) GetCompanyNotesWithResponse(ctx context.Context, companyId int32, params *GetCompanyNotesParams, reqEditors ...RequestEditorFn) (*GetCompanyNotesResponse, error) {
	rsp, err := c.GetCompanyNotes(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyNotesResponse(rsp)
}

// AddCompanyNoteWithBodyWithResponse request with arbitrary body returning *AddCompanyNoteResponse
func (c *ClientWithResponses) AddCompanyNoteWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyNoteResponse, error) {
	rsp, err := c.AddCompanyNoteWithBody(ctx, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyNoteResponse(rsp)
}

func (c *ClientWithResponses) AddCompanyNoteWithResponse(ctx context.Context, companyId int32, body AddCompanyNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyNoteResponse, error) {
	rsp, err := c.AddCompanyNote(ctx, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyNoteResponse(rsp)
}

// GetCompanyPlacementsWithResponse request returning *GetCompanyPlacementsResponse
func (c *ClientWithResponses) GetCompanyPlacementsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyPlacementsResponse, error) {
	rsp, err := c.GetCompanyPlacements(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyPlacementsResponse(rsp)
}

// GetCompanyApprovedPlacementsWithResponse request returning *GetCompanyApprovedPlacementsResponse
func (c *ClientWithResponses) GetCompanyApprovedPlacementsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyApprovedPlacementsResponse, error) {
	rsp, err := c.GetCompanyApprovedPlacements(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyApprovedPlacementsResponse(rsp)
}

// GetCompanyRequisitionsWithResponse request returning *GetCompanyRequisitionsResponse
func (c *ClientWithResponses) GetCompanyRequisitionsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanyRequisitionsResponse, error) {
	rsp, err := c.GetCompanyRequisitions(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyRequisitionsResponse(rsp)
}

// GetCompanySkillsWithResponse request returning *GetCompanySkillsResponse
func (c *ClientWithResponses) GetCompanySkillsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanySkillsResponse, error) {
	rsp, err := c.GetCompanySkills(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanySkillsResponse(rsp)
}

// PutCompanyStatusWithBodyWithResponse request with arbitrary body returning *PutCompanyStatusResponse
func (c *ClientWithResponses) PutCompanyStatusWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCompanyStatusResponse, error) {
	rsp, err := c.PutCompanyStatusWithBody(ctx, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCompanyStatusResponse(rsp)
}

func (c *ClientWithResponses) PutCompanyStatusWithResponse(ctx context.Context, companyId int32, body PutCompanyStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCompanyStatusResponse, error) {
	rsp, err := c.PutCompanyStatus(ctx, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCompanyStatusResponse(rsp)
}

// GetCompanySubmissionsWithResponse request returning *GetCompanySubmissionsResponse
func (c *ClientWithResponses) GetCompanySubmissionsWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanySubmissionsResponse, error) {
	rsp, err := c.GetCompanySubmissions(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanySubmissionsResponse(rsp)
}

// GetCompanySubsidiariesWithResponse request returning *GetCompanySubsidiariesResponse
func (c *ClientWithResponses) GetCompanySubsidiariesWithResponse(ctx context.Context, companyId int32, reqEditors ...RequestEditorFn) (*GetCompanySubsidiariesResponse, error) {
	rsp, err := c.GetCompanySubsidiaries(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanySubsidiariesResponse(rsp)
}

// AddCompanyUserTaskWithBodyWithResponse request with arbitrary body returning *AddCompanyUserTaskResponse
func (c *ClientWithResponses) AddCompanyUserTaskWithBodyWithResponse(ctx context.Context, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyUserTaskResponse, error) {
	rsp, err := c.AddCompanyUserTaskWithBody(ctx, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyUserTaskResponse(rsp)
}

func (c *ClientWithResponses) AddCompanyUserTaskWithResponse(ctx context.Context, companyId int32, body AddCompanyUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyUserTaskResponse, error) {
	rsp, err := c.AddCompanyUserTask(ctx, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyUserTaskResponse(rsp)
}

// GetCompanyUserTaskWithResponse request returning *GetCompanyUserTaskResponse
func (c *ClientWithResponses) GetCompanyUserTaskWithResponse(ctx context.Context, companyId int32, taskId int64, reqEditors ...RequestEditorFn) (*GetCompanyUserTaskResponse, error) {
	rsp, err := c.GetCompanyUserTask(ctx, companyId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyUserTaskResponse(rsp)
}

// UpdateCompanyUserTaskWithBodyWithResponse request with arbitrary body returning *UpdateCompanyUserTaskResponse
func (c *ClientWithResponses) UpdateCompanyUserTaskWithBodyWithResponse(ctx context.Context, companyId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyUserTaskResponse, error) {
	rsp, err := c.UpdateCompanyUserTaskWithBody(ctx, companyId, taskId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompanyUserTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateCompanyUserTaskWithResponse(ctx context.Context, companyId int32, taskId int64, body UpdateCompanyUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompanyUserTaskResponse, error) {
	rsp, err := c.UpdateCompanyUserTask(ctx, companyId, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompanyUserTaskResponse(rsp)
}

// ListCompanyWorkflowsWithResponse request returning *ListCompanyWorkflowsResponse
func (c *ClientWithResponses) ListCompanyWorkflowsWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, params *ListCompanyWorkflowsParams, reqEditors ...RequestEditorFn) (*ListCompanyWorkflowsResponse, error) {
	rsp, err := c.ListCompanyWorkflows(ctx, companyId, workflowType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCompanyWorkflowsResponse(rsp)
}

// AddCompanyWorkflowWithBodyWithResponse request with arbitrary body returning *AddCompanyWorkflowResponse
func (c *ClientWithResponses) AddCompanyWorkflowWithBodyWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompanyWorkflowResponse, error) {
	rsp, err := c.AddCompanyWorkflowWithBody(ctx, companyId, workflowType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyWorkflowResponse(rsp)
}

func (c *ClientWithResponses) AddCompanyWorkflowWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, body AddCompanyWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompanyWorkflowResponse, error) {
	rsp, err := c.AddCompanyWorkflow(ctx, companyId, workflowType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompanyWorkflowResponse(rsp)
}

// GetCompanyWorkflowWithResponse request returning *GetCompanyWorkflowResponse
func (c *ClientWithResponses) GetCompanyWorkflowWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, reqEditors ...RequestEditorFn) (*GetCompanyWorkflowResponse, error) {
	rsp, err := c.GetCompanyWorkflow(ctx, companyId, workflowType, workflowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyWorkflowResponse(rsp)
}

// UpdateCompanyWorkflowWithBodyWithResponse request with arbitrary body returning *UpdateCompanyWorkflowResponse
func (c *ClientWithResponses) UpdateCompanyWorkflowWithBodyWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompanyWorkflowResponse, error) {
	rsp, err := c.UpdateCompanyWorkflowWithBody(ctx, companyId, workflowType, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompanyWorkflowResponse(rsp)
}

func (c *ClientWithResponses) UpdateCompanyWorkflowWithResponse(ctx context.Context, companyId int32, workflowType CompanyWorkflowType, workflowId int32, body UpdateCompanyWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompanyWorkflowResponse, error) {
	rsp, err := c.UpdateCompanyWorkflow(ctx, companyId, workflowType, workflowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompanyWorkflowResponse(rsp)
}

// FindContactsWithResponse request returning *FindContactsResponse
func (c *ClientWithResponses) FindContactsWithResponse(ctx context.Context, params *FindContactsParams, reqEditors ...RequestEditorFn) (*FindContactsResponse, error) {
	rsp, err := c.FindContacts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindContactsResponse(rsp)
}

// AddContactWithBodyWithResponse request with arbitrary body returning *AddContactResponse
func (c *ClientWithResponses) AddContactWithBodyWithResponse(ctx context.Context, params *AddContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddContactResponse, error) {
	rsp, err := c.AddContactWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddContactResponse(rsp)
}

func (c *ClientWithResponses) AddContactWithResponse(ctx context.Context, params *AddContactParams, body AddContactJSONRequestBody, reqEditors ...RequestEditorFn) (*AddContactResponse, error) {
	rsp, err := c.AddContact(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddContactResponse(rsp)
}

// FindContactActivityWithResponse request returning *FindContactActivityResponse
func (c *ClientWithResponses) FindContactActivityWithResponse(ctx context.Context, params *FindContactActivityParams, reqEditors ...RequestEditorFn) (*FindContactActivityResponse, error) {
	rsp, err := c.FindContactActivity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindContactActivityResponse(rsp)
}

// FindContactActivitySettingsWithResponse request returning *FindContactActivitySettingsResponse
func (c *ClientWithResponses) FindContactActivitySettingsWithResponse(ctx context.Context, params *FindContactActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindContactActivitySettingsResponse, error) {
	rsp, err := c.FindContactActivitySettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindContactActivitySettingsResponse(rsp)
}

// GetContactActivitySettingWithResponse request returning *GetContactActivitySettingResponse
func (c *ClientWithResponses) GetContactActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetContactActivitySettingResponse, error) {
	rsp, err := c.GetContactActivitySetting(ctx, settingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactActivitySettingResponse(rsp)
}

// DeletedContactsWithResponse request returning *DeletedContactsResponse
func (c *ClientWithResponses) DeletedContactsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedContactsResponse, error) {
	rsp, err := c.DeletedContacts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletedContactsResponse(rsp)
}

// GetContactCustomFieldListWithResponse request returning *GetContactCustomFieldListResponse
func (c *ClientWithResponses) GetContactCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactCustomFieldListResponse, error) {
	rsp, err := c.GetContactCustomFieldList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactCustomFieldListResponse(rsp)
}

// PutContactCustomFieldListWithBodyWithResponse request with arbitrary body returning *PutContactCustomFieldListResponse
func (c *ClientWithResponses) PutContactCustomFieldListWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactCustomFieldListResponse, error) {
	rsp, err := c.PutContactCustomFieldListWithBody(ctx, fieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactCustomFieldListResponse(rsp)
}

func (c *ClientWithResponses) PutContactCustomFieldListWithResponse(ctx context.Context, fieldId int32, body PutContactCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactCustomFieldListResponse, error) {
	rsp, err := c.PutContactCustomFieldList(ctx, fieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactCustomFieldListResponse(rsp)
}

// GetContactCustomFieldListItemWithResponse request returning *GetContactCustomFieldListItemResponse
func (c *ClientWithResponses) GetContactCustomFieldListItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetContactCustomFieldListItemResponse, error) {
	rsp, err := c.GetContactCustomFieldListItem(ctx, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactCustomFieldListItemResponse(rsp)
}

// GetContactAttachmentCategoryListWithResponse request returning *GetContactAttachmentCategoryListResponse
func (c *ClientWithResponses) GetContactAttachmentCategoryListWithResponse(ctx context.Context, params *GetContactAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*GetContactAttachmentCategoryListResponse, error) {
	rsp, err := c.GetContactAttachmentCategoryList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactAttachmentCategoryListResponse(rsp)
}

// GetContactNoteTypeListWithResponse request returning *GetContactNoteTypeListResponse
func (c *ClientWithResponses) GetContactNoteTypeListWithResponse(ctx context.Context, params *GetContactNoteTypeListParams, reqEditors ...RequestEditorFn) (*GetContactNoteTypeListResponse, error) {
	rsp, err := c.GetContactNoteTypeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactNoteTypeListResponse(rsp)
}

// GetContactSalutationListWithResponse request returning *GetContactSalutationListResponse
func (c *ClientWithResponses) GetContactSalutationListWithResponse(ctx context.Context, params *GetContactSalutationListParams, reqEditors ...RequestEditorFn) (*GetContactSalutationListResponse, error) {
	rsp, err := c.GetContactSalutationList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactSalutationListResponse(rsp)
}

// GetContactStatusListWithResponse request returning *GetContactStatusListResponse
func (c *ClientWithResponses) GetContactStatusListWithResponse(ctx context.Context, params *GetContactStatusListParams, reqEditors ...RequestEditorFn) (*GetContactStatusListResponse, error) {
	rsp, err := c.GetContactStatusList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactStatusListResponse(rsp)
}

// GetContactStatusListItemWithResponse request returning *GetContactStatusListItemResponse
func (c *ClientWithResponses) GetContactStatusListItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetContactStatusListItemResponse, error) {
	rsp, err := c.GetContactStatusListItem(ctx, statusId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactStatusListItemResponse(rsp)
}

// GetContactWithResponse request returning *GetContactResponse
func (c *ClientWithResponses) GetContactWithResponse(ctx context.Context, contactId int32, params *GetContactParams, reqEditors ...RequestEditorFn) (*GetContactResponse, error) {
	rsp, err := c.GetContact(ctx, contactId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactResponse(rsp)
}

// UpdateContactWithBodyWithResponse request with arbitrary body returning *UpdateContactResponse
func (c *ClientWithResponses) UpdateContactWithBodyWithResponse(ctx context.Context, contactId int32, params *UpdateContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error) {
	rsp, err := c.UpdateContactWithBody(ctx, contactId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactResponse(rsp)
}

func (c *ClientWithResponses) UpdateContactWithResponse(ctx context.Context, contactId int32, params *UpdateContactParams, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error) {
	rsp, err := c.UpdateContact(ctx, contactId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactResponse(rsp)
}

// GetContactActivityByContactIdWithResponse request returning *GetContactActivityByContactIdResponse
func (c *ClientWithResponses) GetContactActivityByContactIdWithResponse(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*GetContactActivityByContactIdResponse, error) {
	rsp, err := c.GetContactActivityByContactId(ctx, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactActivityByContactIdResponse(rsp)
}

// AddContactActivityWithBodyWithResponse request with arbitrary body returning *AddContactActivityResponse
func (c *ClientWithResponses) AddContactActivityWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddContactActivityResponse, error) {
	rsp, err := c.AddContactActivityWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddContactActivityResponse(rsp)
}

func (c *ClientWithResponses) AddContactActivityWithResponse(ctx context.Context, contactId int32, body AddContactActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddContactActivityResponse, error) {
	rsp, err := c.AddContactActivity(ctx, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddContactActivityResponse(rsp)
}

// GetContactActivityWithResponse request returning *GetContactActivityResponse
func (c *ClientWithResponses) GetContactActivityWithResponse(ctx context.Context, contactId int32, activityId int64, reqEditors ...RequestEditorFn) (*GetContactActivityResponse, error) {
	rsp, err := c.GetContactActivity(ctx, contactId, activityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactActivityResponse(rsp)
}

// FindContactAttachmentsWithResponse request returning *FindContactAttachmentsResponse
func (c *ClientWithResponses) FindContactAttachmentsWithResponse(ctx context.Context, contactId int32, params *FindContactAttachmentsParams, reqEditors ...RequestEditorFn) (*FindContactAttachmentsResponse, error) {
	rsp, err := c.FindContactAttachments(ctx, contactId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindContactAttachmentsResponse(rsp)
}

// GetContactAttachmentWithResponse request returning *GetContactAttachmentResponse
func (c *ClientWithResponses) GetContactAttachmentWithResponse(ctx context.Context, contactId int32, attach int64, reqEditors ...RequestEditorFn) (*GetContactAttachmentResponse, error) {
	rsp, err := c.GetContactAttachment(ctx, contactId, attach, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactAttachmentResponse(rsp)
}

// AddContactAttachmentWithBodyWithResponse request with arbitrary body returning *AddContactAttachmentResponse
func (c *ClientWithResponses) AddContactAttachmentWithBodyWithResponse(ctx context.Context, contactId int32, attach ContactAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddContactAttachmentResponse, error) {
	rsp, err := c.AddContactAttachmentWithBody(ctx, contactId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddContactAttachmentResponse(rsp)
}

// UpdateContactAttachmentWithBodyWithResponse request with arbitrary body returning *UpdateContactAttachmentResponse
func (c *ClientWithResponses) UpdateContactAttachmentWithBodyWithResponse(ctx context.Context, contactId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactAttachmentResponse, error) {
	rsp, err := c.UpdateContactAttachmentWithBody(ctx, contactId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactAttachmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateContactAttachmentWithResponse(ctx context.Context, contactId int32, attach int64, body UpdateContactAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactAttachmentResponse, error) {
	rsp, err := c.UpdateContactAttachment(ctx, contactId, attach, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactAttachmentResponse(rsp)
}

// GetContactInterviewsWithResponse request returning *GetContactInterviewsResponse
func (c *ClientWithResponses) GetContactInterviewsWithResponse(ctx context.Context, contactId int32, params *GetContactInterviewsParams, reqEditors ...RequestEditorFn) (*GetContactInterviewsResponse, error) {
	rsp, err := c.GetContactInterviews(ctx, contactId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactInterviewsResponse(rsp)
}

// GetContactJobOrdersWithResponse request returning *GetContactJobOrdersResponse
func (c *ClientWithResponses) GetContactJobOrdersWithResponse(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*GetContactJobOrdersResponse, error) {
	rsp, err := c.GetContactJobOrders(ctx, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactJobOrdersResponse(rsp)
}

// GetContactActiveJobOrdersWithResponse request returning *GetContactActiveJobOrdersResponse
func (c *ClientWithResponses) GetContactActiveJobOrdersWithResponse(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*GetContactActiveJobOrdersResponse, error) {
	rsp, err := c.GetContactActiveJobOrders(ctx, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactActiveJobOrdersResponse(rsp)
}

// GetContactNotesWithResponse request returning *GetContactNotesResponse
func (c *ClientWithResponses) GetContactNotesWithResponse(ctx context.Context, contactId int32, params *GetContactNotesParams, reqEditors ...RequestEditorFn) (*GetContactNotesResponse, error) {
	rsp, err := c.GetContactNotes(ctx, contactId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactNotesResponse(rsp)
}

// AddContactNoteWithBodyWithResponse request with arbitrary body returning *AddContactNoteResponse
func (c *ClientWithResponses) AddContactNoteWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddContactNoteResponse, error) {
	rsp, err := c.AddContactNoteWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddContactNoteResponse(rsp)
}

func (c *ClientWithResponses) AddContactNoteWithResponse(ctx context.Context, contactId int32, body AddContactNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddContactNoteResponse, error) {
	rsp, err := c.AddContactNote(ctx, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddContactNoteResponse(rsp)
}

// DeletteContactPhotoWithResponse request returning *DeletteContactPhotoResponse
func (c *ClientWithResponses) DeletteContactPhotoWithResponse(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*DeletteContactPhotoResponse, error) {
	rsp, err := c.DeletteContactPhoto(ctx, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletteContactPhotoResponse(rsp)
}

// GetContactPhotoWithResponse request returning *GetContactPhotoResponse
func (c *ClientWithResponses) GetContactPhotoWithResponse(ctx context.Context, contactId int32, params *GetContactPhotoParams, reqEditors ...RequestEditorFn) (*GetContactPhotoResponse, error) {
	rsp, err := c.GetContactPhoto(ctx, contactId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactPhotoResponse(rsp)
}

// HeadContactPhotoWithResponse request returning *HeadContactPhotoResponse
func (c *ClientWithResponses) HeadContactPhotoWithResponse(ctx context.Context, contactId int32, params *HeadContactPhotoParams, reqEditors ...RequestEditorFn) (*HeadContactPhotoResponse, error) {
	rsp, err := c.HeadContactPhoto(ctx, contactId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadContactPhotoResponse(rsp)
}

// UpdateContactPhotoWithBodyWithResponse request with arbitrary body returning *UpdateContactPhotoResponse
func (c *ClientWithResponses) UpdateContactPhotoWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactPhotoResponse, error) {
	rsp, err := c.UpdateContactPhotoWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactPhotoResponse(rsp)
}

// GetContactSkillsWithResponse request returning *GetContactSkillsResponse
func (c *ClientWithResponses) GetContactSkillsWithResponse(ctx context.Context, contactId int32, reqEditors ...RequestEditorFn) (*GetContactSkillsResponse, error) {
	rsp, err := c.GetContactSkills(ctx, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactSkillsResponse(rsp)
}

// DeleteContactSkillsWithBodyWithResponse request with arbitrary body returning *DeleteContactSkillsResponse
func (c *ClientWithResponses) DeleteContactSkillsWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteContactSkillsResponse, error) {
	rsp, err := c.DeleteContactSkillsWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactSkillsResponse(rsp)
}

func (c *ClientWithResponses) DeleteContactSkillsWithResponse(ctx context.Context, contactId int32, body DeleteContactSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteContactSkillsResponse, error) {
	rsp, err := c.DeleteContactSkills(ctx, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactSkillsResponse(rsp)
}

// PutContactSkillsWithBodyWithResponse request with arbitrary body returning *PutContactSkillsResponse
func (c *ClientWithResponses) PutContactSkillsWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactSkillsResponse, error) {
	rsp, err := c.PutContactSkillsWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactSkillsResponse(rsp)
}

func (c *ClientWithResponses) PutContactSkillsWithResponse(ctx context.Context, contactId int32, body PutContactSkillsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactSkillsResponse, error) {
	rsp, err := c.PutContactSkills(ctx, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactSkillsResponse(rsp)
}

// DeleteContactCategoryWithResponse request returning *DeleteContactCategoryResponse
func (c *ClientWithResponses) DeleteContactCategoryWithResponse(ctx context.Context, contactId int32, categoryId int32, reqEditors ...RequestEditorFn) (*DeleteContactCategoryResponse, error) {
	rsp, err := c.DeleteContactCategory(ctx, contactId, categoryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactCategoryResponse(rsp)
}

// PutContactStatusWithBodyWithResponse request with arbitrary body returning *PutContactStatusResponse
func (c *ClientWithResponses) PutContactStatusWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactStatusResponse, error) {
	rsp, err := c.PutContactStatusWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactStatusResponse(rsp)
}

func (c *ClientWithResponses) PutContactStatusWithResponse(ctx context.Context, contactId int32, body PutContactStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactStatusResponse, error) {
	rsp, err := c.PutContactStatus(ctx, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactStatusResponse(rsp)
}

// AddContactUserTaskWithBodyWithResponse request with arbitrary body returning *AddContactUserTaskResponse
func (c *ClientWithResponses) AddContactUserTaskWithBodyWithResponse(ctx context.Context, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddContactUserTaskResponse, error) {
	rsp, err := c.AddContactUserTaskWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddContactUserTaskResponse(rsp)
}

func (c *ClientWithResponses) AddContactUserTaskWithResponse(ctx context.Context, contactId int32, body AddContactUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddContactUserTaskResponse, error) {
	rsp, err := c.AddContactUserTask(ctx, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddContactUserTaskResponse(rsp)
}

// GetContactUserTaskWithResponse request returning *GetContactUserTaskResponse
func (c *ClientWithResponses) GetContactUserTaskWithResponse(ctx context.Context, contactId int32, taskId int64, reqEditors ...RequestEditorFn) (*GetContactUserTaskResponse, error) {
	rsp, err := c.GetContactUserTask(ctx, contactId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactUserTaskResponse(rsp)
}

// UpdateContactUserTaskWithBodyWithResponse request with arbitrary body returning *UpdateContactUserTaskResponse
func (c *ClientWithResponses) UpdateContactUserTaskWithBodyWithResponse(ctx context.Context, contactId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactUserTaskResponse, error) {
	rsp, err := c.UpdateContactUserTaskWithBody(ctx, contactId, taskId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactUserTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateContactUserTaskWithResponse(ctx context.Context, contactId int32, taskId int64, body UpdateContactUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactUserTaskResponse, error) {
	rsp, err := c.UpdateContactUserTask(ctx, contactId, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactUserTaskResponse(rsp)
}

// FindCountriesWithResponse request returning *FindCountriesResponse
func (c *ClientWithResponses) FindCountriesWithResponse(ctx context.Context, params *FindCountriesParams, reqEditors ...RequestEditorFn) (*FindCountriesResponse, error) {
	rsp, err := c.FindCountries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCountriesResponse(rsp)
}

// GetFloatsWithResponse request returning *GetFloatsResponse
func (c *ClientWithResponses) GetFloatsWithResponse(ctx context.Context, params *GetFloatsParams, reqEditors ...RequestEditorFn) (*GetFloatsResponse, error) {
	rsp, err := c.GetFloats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFloatsResponse(rsp)
}

// GetFloatWithResponse request returning *GetFloatResponse
func (c *ClientWithResponses) GetFloatWithResponse(ctx context.Context, floatId int64, reqEditors ...RequestEditorFn) (*GetFloatResponse, error) {
	rsp, err := c.GetFloat(ctx, floatId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFloatResponse(rsp)
}

// FindFoldersWithResponse request returning *FindFoldersResponse
func (c *ClientWithResponses) FindFoldersWithResponse(ctx context.Context, params *FindFoldersParams, reqEditors ...RequestEditorFn) (*FindFoldersResponse, error) {
	rsp, err := c.FindFolders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindFoldersResponse(rsp)
}

// GetFolderWithResponse request returning *GetFolderResponse
func (c *ClientWithResponses) GetFolderWithResponse(ctx context.Context, folderId int64, params *GetFolderParams, reqEditors ...RequestEditorFn) (*GetFolderResponse, error) {
	rsp, err := c.GetFolder(ctx, folderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFolderResponse(rsp)
}

// PatchFolderWithBodyWithResponse request with arbitrary body returning *PatchFolderResponse
func (c *ClientWithResponses) PatchFolderWithBodyWithResponse(ctx context.Context, folderId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFolderResponse, error) {
	rsp, err := c.PatchFolderWithBody(ctx, folderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFolderResponse(rsp)
}

func (c *ClientWithResponses) PatchFolderWithResponse(ctx context.Context, folderId int64, body PatchFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFolderResponse, error) {
	rsp, err := c.PatchFolder(ctx, folderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFolderResponse(rsp)
}

// FindInterviewsWithResponse request returning *FindInterviewsResponse
func (c *ClientWithResponses) FindInterviewsWithResponse(ctx context.Context, params *FindInterviewsParams, reqEditors ...RequestEditorFn) (*FindInterviewsResponse, error) {
	rsp, err := c.FindInterviews(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindInterviewsResponse(rsp)
}

// DeleteInterviewWithResponse request returning *DeleteInterviewResponse
func (c *ClientWithResponses) DeleteInterviewWithResponse(ctx context.Context, interviewId int32, reqEditors ...RequestEditorFn) (*DeleteInterviewResponse, error) {
	rsp, err := c.DeleteInterview(ctx, interviewId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInterviewResponse(rsp)
}

// GetInterviewWithResponse request returning *GetInterviewResponse
func (c *ClientWithResponses) GetInterviewWithResponse(ctx context.Context, interviewId int32, applicationId int64, params *GetInterviewParams, reqEditors ...RequestEditorFn) (*GetInterviewResponse, error) {
	rsp, err := c.GetInterview(ctx, interviewId, applicationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterviewResponse(rsp)
}

// GetInterviewEvaluationsWithResponse request returning *GetInterviewEvaluationsResponse
func (c *ClientWithResponses) GetInterviewEvaluationsWithResponse(ctx context.Context, interviewId int32, applicationId int64, reqEditors ...RequestEditorFn) (*GetInterviewEvaluationsResponse, error) {
	rsp, err := c.GetInterviewEvaluations(ctx, interviewId, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterviewEvaluationsResponse(rsp)
}

// GetExternalInterviewEvaluationWithResponse request returning *GetExternalInterviewEvaluationResponse
func (c *ClientWithResponses) GetExternalInterviewEvaluationWithResponse(ctx context.Context, interviewId int32, applicationId int64, contactId int32, reqEditors ...RequestEditorFn) (*GetExternalInterviewEvaluationResponse, error) {
	rsp, err := c.GetExternalInterviewEvaluation(ctx, interviewId, applicationId, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExternalInterviewEvaluationResponse(rsp)
}

// PutExternalInterviewEvaluationWithBodyWithResponse request with arbitrary body returning *PutExternalInterviewEvaluationResponse
func (c *ClientWithResponses) PutExternalInterviewEvaluationWithBodyWithResponse(ctx context.Context, interviewId int32, applicationId int64, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutExternalInterviewEvaluationResponse, error) {
	rsp, err := c.PutExternalInterviewEvaluationWithBody(ctx, interviewId, applicationId, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutExternalInterviewEvaluationResponse(rsp)
}

func (c *ClientWithResponses) PutExternalInterviewEvaluationWithResponse(ctx context.Context, interviewId int32, applicationId int64, contactId int32, body PutExternalInterviewEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutExternalInterviewEvaluationResponse, error) {
	rsp, err := c.PutExternalInterviewEvaluation(ctx, interviewId, applicationId, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutExternalInterviewEvaluationResponse(rsp)
}

// GetInternalInterviewEvaluationWithResponse request returning *GetInternalInterviewEvaluationResponse
func (c *ClientWithResponses) GetInternalInterviewEvaluationWithResponse(ctx context.Context, interviewId int32, applicationId int64, userId int32, reqEditors ...RequestEditorFn) (*GetInternalInterviewEvaluationResponse, error) {
	rsp, err := c.GetInternalInterviewEvaluation(ctx, interviewId, applicationId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInternalInterviewEvaluationResponse(rsp)
}

// PutInternalInterviewEvaluationWithBodyWithResponse request with arbitrary body returning *PutInternalInterviewEvaluationResponse
func (c *ClientWithResponses) PutInternalInterviewEvaluationWithBodyWithResponse(ctx context.Context, interviewId int32, applicationId int64, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInternalInterviewEvaluationResponse, error) {
	rsp, err := c.PutInternalInterviewEvaluationWithBody(ctx, interviewId, applicationId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInternalInterviewEvaluationResponse(rsp)
}

func (c *ClientWithResponses) PutInternalInterviewEvaluationWithResponse(ctx context.Context, interviewId int32, applicationId int64, userId int32, body PutInternalInterviewEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInternalInterviewEvaluationResponse, error) {
	rsp, err := c.PutInternalInterviewEvaluation(ctx, interviewId, applicationId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInternalInterviewEvaluationResponse(rsp)
}

// GetJobAdsWithResponse request returning *GetJobAdsResponse
func (c *ClientWithResponses) GetJobAdsWithResponse(ctx context.Context, params *GetJobAdsParams, reqEditors ...RequestEditorFn) (*GetJobAdsResponse, error) {
	rsp, err := c.GetJobAds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobAdsResponse(rsp)
}

// AddJobAdDraftWithBodyWithResponse request with arbitrary body returning *AddJobAdDraftResponse
func (c *ClientWithResponses) AddJobAdDraftWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobAdDraftResponse, error) {
	rsp, err := c.AddJobAdDraftWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobAdDraftResponse(rsp)
}

func (c *ClientWithResponses) AddJobAdDraftWithResponse(ctx context.Context, body AddJobAdDraftJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobAdDraftResponse, error) {
	rsp, err := c.AddJobAdDraft(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobAdDraftResponse(rsp)
}

// GetJobAdWithResponse request returning *GetJobAdResponse
func (c *ClientWithResponses) GetJobAdWithResponse(ctx context.Context, adId int32, params *GetJobAdParams, reqEditors ...RequestEditorFn) (*GetJobAdResponse, error) {
	rsp, err := c.GetJobAd(ctx, adId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobAdResponse(rsp)
}

// UpdateJobAdDraftWithBodyWithResponse request with arbitrary body returning *UpdateJobAdDraftResponse
func (c *ClientWithResponses) UpdateJobAdDraftWithBodyWithResponse(ctx context.Context, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobAdDraftResponse, error) {
	rsp, err := c.UpdateJobAdDraftWithBody(ctx, adId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobAdDraftResponse(rsp)
}

func (c *ClientWithResponses) UpdateJobAdDraftWithResponse(ctx context.Context, adId int32, body UpdateJobAdDraftJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobAdDraftResponse, error) {
	rsp, err := c.UpdateJobAdDraft(ctx, adId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobAdDraftResponse(rsp)
}

// GetJobAdJobApplicationsWithResponse request returning *GetJobAdJobApplicationsResponse
func (c *ClientWithResponses) GetJobAdJobApplicationsWithResponse(ctx context.Context, adId int32, params *GetJobAdJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetJobAdJobApplicationsResponse, error) {
	rsp, err := c.GetJobAdJobApplications(ctx, adId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobAdJobApplicationsResponse(rsp)
}

// GetJobAdActiveJobApplicationsWithResponse request returning *GetJobAdActiveJobApplicationsResponse
func (c *ClientWithResponses) GetJobAdActiveJobApplicationsWithResponse(ctx context.Context, adId int32, params *GetJobAdActiveJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetJobAdActiveJobApplicationsResponse, error) {
	rsp, err := c.GetJobAdActiveJobApplications(ctx, adId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobAdActiveJobApplicationsResponse(rsp)
}

// FindJobBoardsWithResponse request returning *FindJobBoardsResponse
func (c *ClientWithResponses) FindJobBoardsWithResponse(ctx context.Context, params *FindJobBoardsParams, reqEditors ...RequestEditorFn) (*FindJobBoardsResponse, error) {
	rsp, err := c.FindJobBoards(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindJobBoardsResponse(rsp)
}

// GetJobBoardWithResponse request returning *GetJobBoardResponse
func (c *ClientWithResponses) GetJobBoardWithResponse(ctx context.Context, boardId int32, reqEditors ...RequestEditorFn) (*GetJobBoardResponse, error) {
	rsp, err := c.GetJobBoard(ctx, boardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobBoardResponse(rsp)
}

// FindJobBoardJobAdsWithResponse request returning *FindJobBoardJobAdsResponse
func (c *ClientWithResponses) FindJobBoardJobAdsWithResponse(ctx context.Context, boardId int32, params *FindJobBoardJobAdsParams, reqEditors ...RequestEditorFn) (*FindJobBoardJobAdsResponse, error) {
	rsp, err := c.FindJobBoardJobAds(ctx, boardId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindJobBoardJobAdsResponse(rsp)
}

// GetJobBoardJobAdWithResponse request returning *GetJobBoardJobAdResponse
func (c *ClientWithResponses) GetJobBoardJobAdWithResponse(ctx context.Context, boardId int32, adId int32, reqEditors ...RequestEditorFn) (*GetJobBoardJobAdResponse, error) {
	rsp, err := c.GetJobBoardJobAd(ctx, boardId, adId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobBoardJobAdResponse(rsp)
}

// SubmitJobBoardJobApplicationWithBodyWithResponse request with arbitrary body returning *SubmitJobBoardJobApplicationResponse
func (c *ClientWithResponses) SubmitJobBoardJobApplicationWithBodyWithResponse(ctx context.Context, boardId int32, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitJobBoardJobApplicationResponse, error) {
	rsp, err := c.SubmitJobBoardJobApplicationWithBody(ctx, boardId, adId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitJobBoardJobApplicationResponse(rsp)
}

func (c *ClientWithResponses) SubmitJobBoardJobApplicationWithResponse(ctx context.Context, boardId int32, adId int32, body SubmitJobBoardJobApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitJobBoardJobApplicationResponse, error) {
	rsp, err := c.SubmitJobBoardJobApplication(ctx, boardId, adId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitJobBoardJobApplicationResponse(rsp)
}

// AttachJobBoardJobApplicationDocumentWithBodyWithResponse request with arbitrary body returning *AttachJobBoardJobApplicationDocumentResponse
func (c *ClientWithResponses) AttachJobBoardJobApplicationDocumentWithBodyWithResponse(ctx context.Context, boardId int32, adId int32, applicationId int64, attachmentType SubmitCandidateAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachJobBoardJobApplicationDocumentResponse, error) {
	rsp, err := c.AttachJobBoardJobApplicationDocumentWithBody(ctx, boardId, adId, applicationId, attachmentType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachJobBoardJobApplicationDocumentResponse(rsp)
}

// FindJobOrdersWithResponse request returning *FindJobOrdersResponse
func (c *ClientWithResponses) FindJobOrdersWithResponse(ctx context.Context, params *FindJobOrdersParams, reqEditors ...RequestEditorFn) (*FindJobOrdersResponse, error) {
	rsp, err := c.FindJobOrders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindJobOrdersResponse(rsp)
}

// AddJobOrderWithBodyWithResponse request with arbitrary body returning *AddJobOrderResponse
func (c *ClientWithResponses) AddJobOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderResponse, error) {
	rsp, err := c.AddJobOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderResponse(rsp)
}

func (c *ClientWithResponses) AddJobOrderWithResponse(ctx context.Context, body AddJobOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobOrderResponse, error) {
	rsp, err := c.AddJobOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderResponse(rsp)
}

// FindJobOrderActivityWithResponse request returning *FindJobOrderActivityResponse
func (c *ClientWithResponses) FindJobOrderActivityWithResponse(ctx context.Context, params *FindJobOrderActivityParams, reqEditors ...RequestEditorFn) (*FindJobOrderActivityResponse, error) {
	rsp, err := c.FindJobOrderActivity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindJobOrderActivityResponse(rsp)
}

// FindJobOrderActivitySettingsWithResponse request returning *FindJobOrderActivitySettingsResponse
func (c *ClientWithResponses) FindJobOrderActivitySettingsWithResponse(ctx context.Context, params *FindJobOrderActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindJobOrderActivitySettingsResponse, error) {
	rsp, err := c.FindJobOrderActivitySettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindJobOrderActivitySettingsResponse(rsp)
}

// GetJobOrderActivitySettingWithResponse request returning *GetJobOrderActivitySettingResponse
func (c *ClientWithResponses) GetJobOrderActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetJobOrderActivitySettingResponse, error) {
	rsp, err := c.GetJobOrderActivitySetting(ctx, settingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderActivitySettingResponse(rsp)
}

// DeletedJobOrdersWithResponse request returning *DeletedJobOrdersResponse
func (c *ClientWithResponses) DeletedJobOrdersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedJobOrdersResponse, error) {
	rsp, err := c.DeletedJobOrders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletedJobOrdersResponse(rsp)
}

// GetJobOrderCustomFieldListWithResponse request returning *GetJobOrderCustomFieldListResponse
func (c *ClientWithResponses) GetJobOrderCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJobOrderCustomFieldListResponse, error) {
	rsp, err := c.GetJobOrderCustomFieldList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderCustomFieldListResponse(rsp)
}

// PutJobOrderCustomFieldListWithBodyWithResponse request with arbitrary body returning *PutJobOrderCustomFieldListResponse
func (c *ClientWithResponses) PutJobOrderCustomFieldListWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobOrderCustomFieldListResponse, error) {
	rsp, err := c.PutJobOrderCustomFieldListWithBody(ctx, fieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobOrderCustomFieldListResponse(rsp)
}

func (c *ClientWithResponses) PutJobOrderCustomFieldListWithResponse(ctx context.Context, fieldId int32, body PutJobOrderCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobOrderCustomFieldListResponse, error) {
	rsp, err := c.PutJobOrderCustomFieldList(ctx, fieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobOrderCustomFieldListResponse(rsp)
}

// GetJobOrderCustomFieldItemWithResponse request returning *GetJobOrderCustomFieldItemResponse
func (c *ClientWithResponses) GetJobOrderCustomFieldItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetJobOrderCustomFieldItemResponse, error) {
	rsp, err := c.GetJobOrderCustomFieldItem(ctx, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderCustomFieldItemResponse(rsp)
}

// GetJobOrderAttachmentCategoryListWithResponse request returning *GetJobOrderAttachmentCategoryListResponse
func (c *ClientWithResponses) GetJobOrderAttachmentCategoryListWithResponse(ctx context.Context, params *GetJobOrderAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*GetJobOrderAttachmentCategoryListResponse, error) {
	rsp, err := c.GetJobOrderAttachmentCategoryList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderAttachmentCategoryListResponse(rsp)
}

// GetJobOrderNoteTypeListWithResponse request returning *GetJobOrderNoteTypeListResponse
func (c *ClientWithResponses) GetJobOrderNoteTypeListWithResponse(ctx context.Context, params *GetJobOrderNoteTypeListParams, reqEditors ...RequestEditorFn) (*GetJobOrderNoteTypeListResponse, error) {
	rsp, err := c.GetJobOrderNoteTypeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderNoteTypeListResponse(rsp)
}

// GetJobOrderSourceListWithResponse request returning *GetJobOrderSourceListResponse
func (c *ClientWithResponses) GetJobOrderSourceListWithResponse(ctx context.Context, params *GetJobOrderSourceListParams, reqEditors ...RequestEditorFn) (*GetJobOrderSourceListResponse, error) {
	rsp, err := c.GetJobOrderSourceList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderSourceListResponse(rsp)
}

// GetJobOrderStatusListWithResponse request returning *GetJobOrderStatusListResponse
func (c *ClientWithResponses) GetJobOrderStatusListWithResponse(ctx context.Context, params *GetJobOrderStatusListParams, reqEditors ...RequestEditorFn) (*GetJobOrderStatusListResponse, error) {
	rsp, err := c.GetJobOrderStatusList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderStatusListResponse(rsp)
}

// GetJobOrderStatusItemWithResponse request returning *GetJobOrderStatusItemResponse
func (c *ClientWithResponses) GetJobOrderStatusItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetJobOrderStatusItemResponse, error) {
	rsp, err := c.GetJobOrderStatusItem(ctx, statusId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderStatusItemResponse(rsp)
}

// GetJobOrderWithResponse request returning *GetJobOrderResponse
func (c *ClientWithResponses) GetJobOrderWithResponse(ctx context.Context, jobId int32, params *GetJobOrderParams, reqEditors ...RequestEditorFn) (*GetJobOrderResponse, error) {
	rsp, err := c.GetJobOrder(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderResponse(rsp)
}

// UpdateJobOrderWithBodyWithResponse request with arbitrary body returning *UpdateJobOrderResponse
func (c *ClientWithResponses) UpdateJobOrderWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobOrderResponse, error) {
	rsp, err := c.UpdateJobOrderWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobOrderResponse(rsp)
}

func (c *ClientWithResponses) UpdateJobOrderWithResponse(ctx context.Context, jobId int32, body UpdateJobOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobOrderResponse, error) {
	rsp, err := c.UpdateJobOrder(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobOrderResponse(rsp)
}

// GetJobOrderActivityByJobIdWithResponse request returning *GetJobOrderActivityByJobIdResponse
func (c *ClientWithResponses) GetJobOrderActivityByJobIdWithResponse(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*GetJobOrderActivityByJobIdResponse, error) {
	rsp, err := c.GetJobOrderActivityByJobId(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderActivityByJobIdResponse(rsp)
}

// AddJobOrderActivityWithBodyWithResponse request with arbitrary body returning *AddJobOrderActivityResponse
func (c *ClientWithResponses) AddJobOrderActivityWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderActivityResponse, error) {
	rsp, err := c.AddJobOrderActivityWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderActivityResponse(rsp)
}

func (c *ClientWithResponses) AddJobOrderActivityWithResponse(ctx context.Context, jobId int32, body AddJobOrderActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobOrderActivityResponse, error) {
	rsp, err := c.AddJobOrderActivity(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderActivityResponse(rsp)
}

// GetJobOrderActivityWithResponse request returning *GetJobOrderActivityResponse
func (c *ClientWithResponses) GetJobOrderActivityWithResponse(ctx context.Context, jobId int32, activityId int64, reqEditors ...RequestEditorFn) (*GetJobOrderActivityResponse, error) {
	rsp, err := c.GetJobOrderActivity(ctx, jobId, activityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderActivityResponse(rsp)
}

// GetJobOrderJobApplicationsWithResponse request returning *GetJobOrderJobApplicationsResponse
func (c *ClientWithResponses) GetJobOrderJobApplicationsWithResponse(ctx context.Context, jobId int32, params *GetJobOrderJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetJobOrderJobApplicationsResponse, error) {
	rsp, err := c.GetJobOrderJobApplications(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderJobApplicationsResponse(rsp)
}

// AddJobOrderCandidatesWithBodyWithResponse request with arbitrary body returning *AddJobOrderCandidatesResponse
func (c *ClientWithResponses) AddJobOrderCandidatesWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderCandidatesResponse, error) {
	rsp, err := c.AddJobOrderCandidatesWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderCandidatesResponse(rsp)
}

func (c *ClientWithResponses) AddJobOrderCandidatesWithResponse(ctx context.Context, jobId int32, body AddJobOrderCandidatesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobOrderCandidatesResponse, error) {
	rsp, err := c.AddJobOrderCandidates(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderCandidatesResponse(rsp)
}

// GetJobOrderActiveJobApplicationsWithResponse request returning *GetJobOrderActiveJobApplicationsResponse
func (c *ClientWithResponses) GetJobOrderActiveJobApplicationsWithResponse(ctx context.Context, jobId int32, params *GetJobOrderActiveJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetJobOrderActiveJobApplicationsResponse, error) {
	rsp, err := c.GetJobOrderActiveJobApplications(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderActiveJobApplicationsResponse(rsp)
}

// SubmitJobOrderCandidateWithBodyWithResponse request with arbitrary body returning *SubmitJobOrderCandidateResponse
func (c *ClientWithResponses) SubmitJobOrderCandidateWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitJobOrderCandidateResponse, error) {
	rsp, err := c.SubmitJobOrderCandidateWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitJobOrderCandidateResponse(rsp)
}

func (c *ClientWithResponses) SubmitJobOrderCandidateWithResponse(ctx context.Context, jobId int32, body SubmitJobOrderCandidateJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitJobOrderCandidateResponse, error) {
	rsp, err := c.SubmitJobOrderCandidate(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitJobOrderCandidateResponse(rsp)
}

// FindJobOrderAttachmentsWithResponse request returning *FindJobOrderAttachmentsResponse
func (c *ClientWithResponses) FindJobOrderAttachmentsWithResponse(ctx context.Context, jobId int32, params *FindJobOrderAttachmentsParams, reqEditors ...RequestEditorFn) (*FindJobOrderAttachmentsResponse, error) {
	rsp, err := c.FindJobOrderAttachments(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindJobOrderAttachmentsResponse(rsp)
}

// GetJobOrderAttachmentWithResponse request returning *GetJobOrderAttachmentResponse
func (c *ClientWithResponses) GetJobOrderAttachmentWithResponse(ctx context.Context, jobId int32, attach int64, reqEditors ...RequestEditorFn) (*GetJobOrderAttachmentResponse, error) {
	rsp, err := c.GetJobOrderAttachment(ctx, jobId, attach, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderAttachmentResponse(rsp)
}

// AddJobOrderAttachmentWithBodyWithResponse request with arbitrary body returning *AddJobOrderAttachmentResponse
func (c *ClientWithResponses) AddJobOrderAttachmentWithBodyWithResponse(ctx context.Context, jobId int32, attach JobOrderAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderAttachmentResponse, error) {
	rsp, err := c.AddJobOrderAttachmentWithBody(ctx, jobId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderAttachmentResponse(rsp)
}

// UpdateJobOrderAttachmentWithBodyWithResponse request with arbitrary body returning *UpdateJobOrderAttachmentResponse
func (c *ClientWithResponses) UpdateJobOrderAttachmentWithBodyWithResponse(ctx context.Context, jobId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobOrderAttachmentResponse, error) {
	rsp, err := c.UpdateJobOrderAttachmentWithBody(ctx, jobId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobOrderAttachmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateJobOrderAttachmentWithResponse(ctx context.Context, jobId int32, attach int64, body UpdateJobOrderAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobOrderAttachmentResponse, error) {
	rsp, err := c.UpdateJobOrderAttachment(ctx, jobId, attach, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobOrderAttachmentResponse(rsp)
}

// InvoicesWithResponse request returning *InvoicesResponse
func (c *ClientWithResponses) InvoicesWithResponse(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*InvoicesResponse, error) {
	rsp, err := c.Invoices(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvoicesResponse(rsp)
}

// GetJobOrderInvoiceWithResponse request returning *GetJobOrderInvoiceResponse
func (c *ClientWithResponses) GetJobOrderInvoiceWithResponse(ctx context.Context, jobId int32, invoiceId int32, reqEditors ...RequestEditorFn) (*GetJobOrderInvoiceResponse, error) {
	rsp, err := c.GetJobOrderInvoice(ctx, jobId, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderInvoiceResponse(rsp)
}

// GetJobOrderNotesWithResponse request returning *GetJobOrderNotesResponse
func (c *ClientWithResponses) GetJobOrderNotesWithResponse(ctx context.Context, jobId int32, params *GetJobOrderNotesParams, reqEditors ...RequestEditorFn) (*GetJobOrderNotesResponse, error) {
	rsp, err := c.GetJobOrderNotes(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderNotesResponse(rsp)
}

// AddJobOrderNoteWithBodyWithResponse request with arbitrary body returning *AddJobOrderNoteResponse
func (c *ClientWithResponses) AddJobOrderNoteWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderNoteResponse, error) {
	rsp, err := c.AddJobOrderNoteWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderNoteResponse(rsp)
}

func (c *ClientWithResponses) AddJobOrderNoteWithResponse(ctx context.Context, jobId int32, body AddJobOrderNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobOrderNoteResponse, error) {
	rsp, err := c.AddJobOrderNote(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderNoteResponse(rsp)
}

// GetJobOrderPlacementsWithResponse request returning *GetJobOrderPlacementsResponse
func (c *ClientWithResponses) GetJobOrderPlacementsWithResponse(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*GetJobOrderPlacementsResponse, error) {
	rsp, err := c.GetJobOrderPlacements(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderPlacementsResponse(rsp)
}

// GetJobOrderApprovedPlacementsWithResponse request returning *GetJobOrderApprovedPlacementsResponse
func (c *ClientWithResponses) GetJobOrderApprovedPlacementsWithResponse(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*GetJobOrderApprovedPlacementsResponse, error) {
	rsp, err := c.GetJobOrderApprovedPlacements(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderApprovedPlacementsResponse(rsp)
}

// PutJobOrderStatusWithBodyWithResponse request with arbitrary body returning *PutJobOrderStatusResponse
func (c *ClientWithResponses) PutJobOrderStatusWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobOrderStatusResponse, error) {
	rsp, err := c.PutJobOrderStatusWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobOrderStatusResponse(rsp)
}

func (c *ClientWithResponses) PutJobOrderStatusWithResponse(ctx context.Context, jobId int32, body PutJobOrderStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobOrderStatusResponse, error) {
	rsp, err := c.PutJobOrderStatus(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobOrderStatusResponse(rsp)
}

// GetJobOrderSubmissionsWithResponse request returning *GetJobOrderSubmissionsResponse
func (c *ClientWithResponses) GetJobOrderSubmissionsWithResponse(ctx context.Context, jobId int32, reqEditors ...RequestEditorFn) (*GetJobOrderSubmissionsResponse, error) {
	rsp, err := c.GetJobOrderSubmissions(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderSubmissionsResponse(rsp)
}

// AddJobOrderUserTaskWithBodyWithResponse request with arbitrary body returning *AddJobOrderUserTaskResponse
func (c *ClientWithResponses) AddJobOrderUserTaskWithBodyWithResponse(ctx context.Context, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddJobOrderUserTaskResponse, error) {
	rsp, err := c.AddJobOrderUserTaskWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderUserTaskResponse(rsp)
}

func (c *ClientWithResponses) AddJobOrderUserTaskWithResponse(ctx context.Context, jobId int32, body AddJobOrderUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddJobOrderUserTaskResponse, error) {
	rsp, err := c.AddJobOrderUserTask(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderUserTaskResponse(rsp)
}

// GetJobOrderUserTaskWithResponse request returning *GetJobOrderUserTaskResponse
func (c *ClientWithResponses) GetJobOrderUserTaskWithResponse(ctx context.Context, jobId int32, taskId int64, reqEditors ...RequestEditorFn) (*GetJobOrderUserTaskResponse, error) {
	rsp, err := c.GetJobOrderUserTask(ctx, jobId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderUserTaskResponse(rsp)
}

// UpdateJobOrderUserTaskWithBodyWithResponse request with arbitrary body returning *UpdateJobOrderUserTaskResponse
func (c *ClientWithResponses) UpdateJobOrderUserTaskWithBodyWithResponse(ctx context.Context, jobId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobOrderUserTaskResponse, error) {
	rsp, err := c.UpdateJobOrderUserTaskWithBody(ctx, jobId, taskId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobOrderUserTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateJobOrderUserTaskWithResponse(ctx context.Context, jobId int32, taskId int64, body UpdateJobOrderUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobOrderUserTaskResponse, error) {
	rsp, err := c.UpdateJobOrderUserTask(ctx, jobId, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobOrderUserTaskResponse(rsp)
}

// DeleteJobOrderPayrollBillingWithResponse request returning *DeleteJobOrderPayrollBillingResponse
func (c *ClientWithResponses) DeleteJobOrderPayrollBillingWithResponse(ctx context.Context, jobOrderId int32, reqEditors ...RequestEditorFn) (*DeleteJobOrderPayrollBillingResponse, error) {
	rsp, err := c.DeleteJobOrderPayrollBilling(ctx, jobOrderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJobOrderPayrollBillingResponse(rsp)
}

// GetJobOrderPayrollBillingWithResponse request returning *GetJobOrderPayrollBillingResponse
func (c *ClientWithResponses) GetJobOrderPayrollBillingWithResponse(ctx context.Context, jobOrderId int32, reqEditors ...RequestEditorFn) (*GetJobOrderPayrollBillingResponse, error) {
	rsp, err := c.GetJobOrderPayrollBilling(ctx, jobOrderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobOrderPayrollBillingResponse(rsp)
}

// AddJobOrderPayrollBillingWithResponse request returning *AddJobOrderPayrollBillingResponse
func (c *ClientWithResponses) AddJobOrderPayrollBillingWithResponse(ctx context.Context, jobOrderId int32, rateCardId int32, reqEditors ...RequestEditorFn) (*AddJobOrderPayrollBillingResponse, error) {
	rsp, err := c.AddJobOrderPayrollBilling(ctx, jobOrderId, rateCardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddJobOrderPayrollBillingResponse(rsp)
}

// UpdateJobOrderPayrollBillingWithResponse request returning *UpdateJobOrderPayrollBillingResponse
func (c *ClientWithResponses) UpdateJobOrderPayrollBillingWithResponse(ctx context.Context, jobOrderId int32, rateCardId int32, reqEditors ...RequestEditorFn) (*UpdateJobOrderPayrollBillingResponse, error) {
	rsp, err := c.UpdateJobOrderPayrollBilling(ctx, jobOrderId, rateCardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobOrderPayrollBillingResponse(rsp)
}

// FindLocationsWithResponse request returning *FindLocationsResponse
func (c *ClientWithResponses) FindLocationsWithResponse(ctx context.Context, params *FindLocationsParams, reqEditors ...RequestEditorFn) (*FindLocationsResponse, error) {
	rsp, err := c.FindLocations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindLocationsResponse(rsp)
}

// FindNotesWithResponse request returning *FindNotesResponse
func (c *ClientWithResponses) FindNotesWithResponse(ctx context.Context, params *FindNotesParams, reqEditors ...RequestEditorFn) (*FindNotesResponse, error) {
	rsp, err := c.FindNotes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindNotesResponse(rsp)
}

// AddNoteWithBodyWithResponse request with arbitrary body returning *AddNoteResponse
func (c *ClientWithResponses) AddNoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNoteResponse, error) {
	rsp, err := c.AddNoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNoteResponse(rsp)
}

func (c *ClientWithResponses) AddNoteWithResponse(ctx context.Context, body AddNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNoteResponse, error) {
	rsp, err := c.AddNote(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNoteResponse(rsp)
}

// GetNoteWithResponse request returning *GetNoteResponse
func (c *ClientWithResponses) GetNoteWithResponse(ctx context.Context, noteId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNoteResponse, error) {
	rsp, err := c.GetNote(ctx, noteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNoteResponse(rsp)
}

// UpdateNoteWithBodyWithResponse request with arbitrary body returning *UpdateNoteResponse
func (c *ClientWithResponses) UpdateNoteWithBodyWithResponse(ctx context.Context, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNoteResponse, error) {
	rsp, err := c.UpdateNoteWithBody(ctx, noteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNoteResponse(rsp)
}

func (c *ClientWithResponses) UpdateNoteWithResponse(ctx context.Context, noteId openapi_types.UUID, body UpdateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNoteResponse, error) {
	rsp, err := c.UpdateNote(ctx, noteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNoteResponse(rsp)
}

// AddNoteAttachmentWithBodyWithResponse request with arbitrary body returning *AddNoteAttachmentResponse
func (c *ClientWithResponses) AddNoteAttachmentWithBodyWithResponse(ctx context.Context, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNoteAttachmentResponse, error) {
	rsp, err := c.AddNoteAttachmentWithBody(ctx, noteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNoteAttachmentResponse(rsp)
}

// GetNoteAttachmentWithResponse request returning *GetNoteAttachmentResponse
func (c *ClientWithResponses) GetNoteAttachmentWithResponse(ctx context.Context, noteId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNoteAttachmentResponse, error) {
	rsp, err := c.GetNoteAttachment(ctx, noteId, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNoteAttachmentResponse(rsp)
}

// FindOpportunitiesWithResponse request returning *FindOpportunitiesResponse
func (c *ClientWithResponses) FindOpportunitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindOpportunitiesResponse, error) {
	rsp, err := c.FindOpportunities(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindOpportunitiesResponse(rsp)
}

// AddOpportunityWithBodyWithResponse request with arbitrary body returning *AddOpportunityResponse
func (c *ClientWithResponses) AddOpportunityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOpportunityResponse, error) {
	rsp, err := c.AddOpportunityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOpportunityResponse(rsp)
}

func (c *ClientWithResponses) AddOpportunityWithResponse(ctx context.Context, body AddOpportunityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddOpportunityResponse, error) {
	rsp, err := c.AddOpportunity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOpportunityResponse(rsp)
}

// GetOpportunityWithResponse request returning *GetOpportunityResponse
func (c *ClientWithResponses) GetOpportunityWithResponse(ctx context.Context, opportunityId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOpportunityResponse, error) {
	rsp, err := c.GetOpportunity(ctx, opportunityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpportunityResponse(rsp)
}

// UpdateOpportunityWithBodyWithResponse request with arbitrary body returning *UpdateOpportunityResponse
func (c *ClientWithResponses) UpdateOpportunityWithBodyWithResponse(ctx context.Context, opportunityId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOpportunityResponse, error) {
	rsp, err := c.UpdateOpportunityWithBody(ctx, opportunityId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOpportunityResponse(rsp)
}

func (c *ClientWithResponses) UpdateOpportunityWithResponse(ctx context.Context, opportunityId openapi_types.UUID, body UpdateOpportunityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOpportunityResponse, error) {
	rsp, err := c.UpdateOpportunity(ctx, opportunityId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOpportunityResponse(rsp)
}

// FindPartnerActionsWithResponse request returning *FindPartnerActionsResponse
func (c *ClientWithResponses) FindPartnerActionsWithResponse(ctx context.Context, params *FindPartnerActionsParams, reqEditors ...RequestEditorFn) (*FindPartnerActionsResponse, error) {
	rsp, err := c.FindPartnerActions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindPartnerActionsResponse(rsp)
}

// GetPartnerActionJobApplicationsWithResponse request returning *GetPartnerActionJobApplicationsResponse
func (c *ClientWithResponses) GetPartnerActionJobApplicationsWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobApplicationsParams, reqEditors ...RequestEditorFn) (*GetPartnerActionJobApplicationsResponse, error) {
	rsp, err := c.GetPartnerActionJobApplications(ctx, actionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnerActionJobApplicationsResponse(rsp)
}

// CompleteJobApplicationPartnerActionWithBodyWithResponse request with arbitrary body returning *CompleteJobApplicationPartnerActionResponse
func (c *ClientWithResponses) CompleteJobApplicationPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteJobApplicationPartnerActionResponse, error) {
	rsp, err := c.CompleteJobApplicationPartnerActionWithBody(ctx, actionId, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteJobApplicationPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) CompleteJobApplicationPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body CompleteJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteJobApplicationPartnerActionResponse, error) {
	rsp, err := c.CompleteJobApplicationPartnerAction(ctx, actionId, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteJobApplicationPartnerActionResponse(rsp)
}

// ProgressJobApplicationPartnerActionWithBodyWithResponse request with arbitrary body returning *ProgressJobApplicationPartnerActionResponse
func (c *ClientWithResponses) ProgressJobApplicationPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressJobApplicationPartnerActionResponse, error) {
	rsp, err := c.ProgressJobApplicationPartnerActionWithBody(ctx, actionId, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressJobApplicationPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) ProgressJobApplicationPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body ProgressJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressJobApplicationPartnerActionResponse, error) {
	rsp, err := c.ProgressJobApplicationPartnerAction(ctx, actionId, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressJobApplicationPartnerActionResponse(rsp)
}

// RejectJobApplicationPartnerActionWithBodyWithResponse request with arbitrary body returning *RejectJobApplicationPartnerActionResponse
func (c *ClientWithResponses) RejectJobApplicationPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectJobApplicationPartnerActionResponse, error) {
	rsp, err := c.RejectJobApplicationPartnerActionWithBody(ctx, actionId, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectJobApplicationPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) RejectJobApplicationPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, applicationId int64, body RejectJobApplicationPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectJobApplicationPartnerActionResponse, error) {
	rsp, err := c.RejectJobApplicationPartnerAction(ctx, actionId, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectJobApplicationPartnerActionResponse(rsp)
}

// GetPartnerActionCandidatesWithResponse request returning *GetPartnerActionCandidatesResponse
func (c *ClientWithResponses) GetPartnerActionCandidatesWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionCandidatesParams, reqEditors ...RequestEditorFn) (*GetPartnerActionCandidatesResponse, error) {
	rsp, err := c.GetPartnerActionCandidates(ctx, actionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnerActionCandidatesResponse(rsp)
}

// CompleteCandidatePartnerActionWithBodyWithResponse request with arbitrary body returning *CompleteCandidatePartnerActionResponse
func (c *ClientWithResponses) CompleteCandidatePartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteCandidatePartnerActionResponse, error) {
	rsp, err := c.CompleteCandidatePartnerActionWithBody(ctx, actionId, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteCandidatePartnerActionResponse(rsp)
}

func (c *ClientWithResponses) CompleteCandidatePartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body CompleteCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteCandidatePartnerActionResponse, error) {
	rsp, err := c.CompleteCandidatePartnerAction(ctx, actionId, candidateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteCandidatePartnerActionResponse(rsp)
}

// ProgressCandidatePartnerActionWithBodyWithResponse request with arbitrary body returning *ProgressCandidatePartnerActionResponse
func (c *ClientWithResponses) ProgressCandidatePartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressCandidatePartnerActionResponse, error) {
	rsp, err := c.ProgressCandidatePartnerActionWithBody(ctx, actionId, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressCandidatePartnerActionResponse(rsp)
}

func (c *ClientWithResponses) ProgressCandidatePartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body ProgressCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressCandidatePartnerActionResponse, error) {
	rsp, err := c.ProgressCandidatePartnerAction(ctx, actionId, candidateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressCandidatePartnerActionResponse(rsp)
}

// RejectCandidatePartnerActionWithBodyWithResponse request with arbitrary body returning *RejectCandidatePartnerActionResponse
func (c *ClientWithResponses) RejectCandidatePartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectCandidatePartnerActionResponse, error) {
	rsp, err := c.RejectCandidatePartnerActionWithBody(ctx, actionId, candidateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectCandidatePartnerActionResponse(rsp)
}

func (c *ClientWithResponses) RejectCandidatePartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, candidateId int32, body RejectCandidatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectCandidatePartnerActionResponse, error) {
	rsp, err := c.RejectCandidatePartnerAction(ctx, actionId, candidateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectCandidatePartnerActionResponse(rsp)
}

// GetPartnerActionCompaniesWithResponse request returning *GetPartnerActionCompaniesResponse
func (c *ClientWithResponses) GetPartnerActionCompaniesWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionCompaniesParams, reqEditors ...RequestEditorFn) (*GetPartnerActionCompaniesResponse, error) {
	rsp, err := c.GetPartnerActionCompanies(ctx, actionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnerActionCompaniesResponse(rsp)
}

// CompleteCompanyPartnerActionWithBodyWithResponse request with arbitrary body returning *CompleteCompanyPartnerActionResponse
func (c *ClientWithResponses) CompleteCompanyPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteCompanyPartnerActionResponse, error) {
	rsp, err := c.CompleteCompanyPartnerActionWithBody(ctx, actionId, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteCompanyPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) CompleteCompanyPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, body CompleteCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteCompanyPartnerActionResponse, error) {
	rsp, err := c.CompleteCompanyPartnerAction(ctx, actionId, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteCompanyPartnerActionResponse(rsp)
}

// ProgressCompanyPartnerActionWithBodyWithResponse request with arbitrary body returning *ProgressCompanyPartnerActionResponse
func (c *ClientWithResponses) ProgressCompanyPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressCompanyPartnerActionResponse, error) {
	rsp, err := c.ProgressCompanyPartnerActionWithBody(ctx, actionId, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressCompanyPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) ProgressCompanyPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, body ProgressCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressCompanyPartnerActionResponse, error) {
	rsp, err := c.ProgressCompanyPartnerAction(ctx, actionId, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressCompanyPartnerActionResponse(rsp)
}

// RejectCompanyPartnerActionWithBodyWithResponse request with arbitrary body returning *RejectCompanyPartnerActionResponse
func (c *ClientWithResponses) RejectCompanyPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectCompanyPartnerActionResponse, error) {
	rsp, err := c.RejectCompanyPartnerActionWithBody(ctx, actionId, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectCompanyPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) RejectCompanyPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, companyId int32, body RejectCompanyPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectCompanyPartnerActionResponse, error) {
	rsp, err := c.RejectCompanyPartnerAction(ctx, actionId, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectCompanyPartnerActionResponse(rsp)
}

// GetPartnerActionContactsWithResponse request returning *GetPartnerActionContactsResponse
func (c *ClientWithResponses) GetPartnerActionContactsWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionContactsParams, reqEditors ...RequestEditorFn) (*GetPartnerActionContactsResponse, error) {
	rsp, err := c.GetPartnerActionContacts(ctx, actionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnerActionContactsResponse(rsp)
}

// CompleteContactPartnerActionWithBodyWithResponse request with arbitrary body returning *CompleteContactPartnerActionResponse
func (c *ClientWithResponses) CompleteContactPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteContactPartnerActionResponse, error) {
	rsp, err := c.CompleteContactPartnerActionWithBody(ctx, actionId, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteContactPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) CompleteContactPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, body CompleteContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteContactPartnerActionResponse, error) {
	rsp, err := c.CompleteContactPartnerAction(ctx, actionId, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteContactPartnerActionResponse(rsp)
}

// ProgressContactPartnerActionWithBodyWithResponse request with arbitrary body returning *ProgressContactPartnerActionResponse
func (c *ClientWithResponses) ProgressContactPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressContactPartnerActionResponse, error) {
	rsp, err := c.ProgressContactPartnerActionWithBody(ctx, actionId, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressContactPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) ProgressContactPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, body ProgressContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressContactPartnerActionResponse, error) {
	rsp, err := c.ProgressContactPartnerAction(ctx, actionId, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressContactPartnerActionResponse(rsp)
}

// RejectContactPartnerActionWithBodyWithResponse request with arbitrary body returning *RejectContactPartnerActionResponse
func (c *ClientWithResponses) RejectContactPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectContactPartnerActionResponse, error) {
	rsp, err := c.RejectContactPartnerActionWithBody(ctx, actionId, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectContactPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) RejectContactPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, contactId int32, body RejectContactPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectContactPartnerActionResponse, error) {
	rsp, err := c.RejectContactPartnerAction(ctx, actionId, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectContactPartnerActionResponse(rsp)
}

// GetPartnerActionJobAdsWithResponse request returning *GetPartnerActionJobAdsResponse
func (c *ClientWithResponses) GetPartnerActionJobAdsWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobAdsParams, reqEditors ...RequestEditorFn) (*GetPartnerActionJobAdsResponse, error) {
	rsp, err := c.GetPartnerActionJobAds(ctx, actionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnerActionJobAdsResponse(rsp)
}

// CompleteJobAdPartnerActionWithBodyWithResponse request with arbitrary body returning *CompleteJobAdPartnerActionResponse
func (c *ClientWithResponses) CompleteJobAdPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteJobAdPartnerActionResponse, error) {
	rsp, err := c.CompleteJobAdPartnerActionWithBody(ctx, actionId, adId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteJobAdPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) CompleteJobAdPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, body CompleteJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteJobAdPartnerActionResponse, error) {
	rsp, err := c.CompleteJobAdPartnerAction(ctx, actionId, adId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteJobAdPartnerActionResponse(rsp)
}

// ProgressJobAdPartnerActionWithBodyWithResponse request with arbitrary body returning *ProgressJobAdPartnerActionResponse
func (c *ClientWithResponses) ProgressJobAdPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressJobAdPartnerActionResponse, error) {
	rsp, err := c.ProgressJobAdPartnerActionWithBody(ctx, actionId, adId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressJobAdPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) ProgressJobAdPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, body ProgressJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressJobAdPartnerActionResponse, error) {
	rsp, err := c.ProgressJobAdPartnerAction(ctx, actionId, adId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressJobAdPartnerActionResponse(rsp)
}

// RejectJobAdPartnerActionWithBodyWithResponse request with arbitrary body returning *RejectJobAdPartnerActionResponse
func (c *ClientWithResponses) RejectJobAdPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectJobAdPartnerActionResponse, error) {
	rsp, err := c.RejectJobAdPartnerActionWithBody(ctx, actionId, adId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectJobAdPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) RejectJobAdPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, adId int32, body RejectJobAdPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectJobAdPartnerActionResponse, error) {
	rsp, err := c.RejectJobAdPartnerAction(ctx, actionId, adId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectJobAdPartnerActionResponse(rsp)
}

// GetPartnerActionJobOrdersWithResponse request returning *GetPartnerActionJobOrdersResponse
func (c *ClientWithResponses) GetPartnerActionJobOrdersWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionJobOrdersParams, reqEditors ...RequestEditorFn) (*GetPartnerActionJobOrdersResponse, error) {
	rsp, err := c.GetPartnerActionJobOrders(ctx, actionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnerActionJobOrdersResponse(rsp)
}

// CompleteJobOrderPartnerActionWithBodyWithResponse request with arbitrary body returning *CompleteJobOrderPartnerActionResponse
func (c *ClientWithResponses) CompleteJobOrderPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteJobOrderPartnerActionResponse, error) {
	rsp, err := c.CompleteJobOrderPartnerActionWithBody(ctx, actionId, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteJobOrderPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) CompleteJobOrderPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, body CompleteJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteJobOrderPartnerActionResponse, error) {
	rsp, err := c.CompleteJobOrderPartnerAction(ctx, actionId, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteJobOrderPartnerActionResponse(rsp)
}

// ProgressJobOrderPartnerActionWithBodyWithResponse request with arbitrary body returning *ProgressJobOrderPartnerActionResponse
func (c *ClientWithResponses) ProgressJobOrderPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressJobOrderPartnerActionResponse, error) {
	rsp, err := c.ProgressJobOrderPartnerActionWithBody(ctx, actionId, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressJobOrderPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) ProgressJobOrderPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, body ProgressJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressJobOrderPartnerActionResponse, error) {
	rsp, err := c.ProgressJobOrderPartnerAction(ctx, actionId, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressJobOrderPartnerActionResponse(rsp)
}

// RejectJobOrderPartnerActionWithBodyWithResponse request with arbitrary body returning *RejectJobOrderPartnerActionResponse
func (c *ClientWithResponses) RejectJobOrderPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectJobOrderPartnerActionResponse, error) {
	rsp, err := c.RejectJobOrderPartnerActionWithBody(ctx, actionId, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectJobOrderPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) RejectJobOrderPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, jobId int32, body RejectJobOrderPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectJobOrderPartnerActionResponse, error) {
	rsp, err := c.RejectJobOrderPartnerAction(ctx, actionId, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectJobOrderPartnerActionResponse(rsp)
}

// GetPartnerActionPlacementsWithResponse request returning *GetPartnerActionPlacementsResponse
func (c *ClientWithResponses) GetPartnerActionPlacementsWithResponse(ctx context.Context, actionId openapi_types.UUID, params *GetPartnerActionPlacementsParams, reqEditors ...RequestEditorFn) (*GetPartnerActionPlacementsResponse, error) {
	rsp, err := c.GetPartnerActionPlacements(ctx, actionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnerActionPlacementsResponse(rsp)
}

// CompletePlacementPartnerActionWithBodyWithResponse request with arbitrary body returning *CompletePlacementPartnerActionResponse
func (c *ClientWithResponses) CompletePlacementPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompletePlacementPartnerActionResponse, error) {
	rsp, err := c.CompletePlacementPartnerActionWithBody(ctx, actionId, placementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompletePlacementPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) CompletePlacementPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, body CompletePlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompletePlacementPartnerActionResponse, error) {
	rsp, err := c.CompletePlacementPartnerAction(ctx, actionId, placementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompletePlacementPartnerActionResponse(rsp)
}

// ProgressPlacementPartnerActionWithBodyWithResponse request with arbitrary body returning *ProgressPlacementPartnerActionResponse
func (c *ClientWithResponses) ProgressPlacementPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressPlacementPartnerActionResponse, error) {
	rsp, err := c.ProgressPlacementPartnerActionWithBody(ctx, actionId, placementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressPlacementPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) ProgressPlacementPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, body ProgressPlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressPlacementPartnerActionResponse, error) {
	rsp, err := c.ProgressPlacementPartnerAction(ctx, actionId, placementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressPlacementPartnerActionResponse(rsp)
}

// RejectPlacementPartnerActionWithBodyWithResponse request with arbitrary body returning *RejectPlacementPartnerActionResponse
func (c *ClientWithResponses) RejectPlacementPartnerActionWithBodyWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectPlacementPartnerActionResponse, error) {
	rsp, err := c.RejectPlacementPartnerActionWithBody(ctx, actionId, placementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectPlacementPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) RejectPlacementPartnerActionWithResponse(ctx context.Context, actionId openapi_types.UUID, placementId int32, body RejectPlacementPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectPlacementPartnerActionResponse, error) {
	rsp, err := c.RejectPlacementPartnerAction(ctx, actionId, placementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectPlacementPartnerActionResponse(rsp)
}

// DeletePartnerActionWithResponse request returning *DeletePartnerActionResponse
func (c *ClientWithResponses) DeletePartnerActionWithResponse(ctx context.Context, act openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeletePartnerActionResponse, error) {
	rsp, err := c.DeletePartnerAction(ctx, act, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePartnerActionResponse(rsp)
}

// GetPartnerActionWithResponse request returning *GetPartnerActionResponse
func (c *ClientWithResponses) GetPartnerActionWithResponse(ctx context.Context, act openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPartnerActionResponse, error) {
	rsp, err := c.GetPartnerAction(ctx, act, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnerActionResponse(rsp)
}

// AddPartnerActionWithBodyWithResponse request with arbitrary body returning *AddPartnerActionResponse
func (c *ClientWithResponses) AddPartnerActionWithBodyWithResponse(ctx context.Context, act PartnerActionType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPartnerActionResponse, error) {
	rsp, err := c.AddPartnerActionWithBody(ctx, act, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPartnerActionResponse(rsp)
}

func (c *ClientWithResponses) AddPartnerActionWithResponse(ctx context.Context, act PartnerActionType, body AddPartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPartnerActionResponse, error) {
	rsp, err := c.AddPartnerAction(ctx, act, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPartnerActionResponse(rsp)
}

// UpdatePartnerActionWithBodyWithResponse request with arbitrary body returning *UpdatePartnerActionResponse
func (c *ClientWithResponses) UpdatePartnerActionWithBodyWithResponse(ctx context.Context, act openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePartnerActionResponse, error) {
	rsp, err := c.UpdatePartnerActionWithBody(ctx, act, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePartnerActionResponse(rsp)
}

func (c *ClientWithResponses) UpdatePartnerActionWithResponse(ctx context.Context, act openapi_types.UUID, body UpdatePartnerActionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePartnerActionResponse, error) {
	rsp, err := c.UpdatePartnerAction(ctx, act, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePartnerActionResponse(rsp)
}

// FindPlacementsWithResponse request returning *FindPlacementsResponse
func (c *ClientWithResponses) FindPlacementsWithResponse(ctx context.Context, params *FindPlacementsParams, reqEditors ...RequestEditorFn) (*FindPlacementsResponse, error) {
	rsp, err := c.FindPlacements(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindPlacementsResponse(rsp)
}

// AddPlacementWithBodyWithResponse request with arbitrary body returning *AddPlacementResponse
func (c *ClientWithResponses) AddPlacementWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlacementResponse, error) {
	rsp, err := c.AddPlacementWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlacementResponse(rsp)
}

func (c *ClientWithResponses) AddPlacementWithResponse(ctx context.Context, body AddPlacementJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlacementResponse, error) {
	rsp, err := c.AddPlacement(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlacementResponse(rsp)
}

// FindPlacementActivityWithResponse request returning *FindPlacementActivityResponse
func (c *ClientWithResponses) FindPlacementActivityWithResponse(ctx context.Context, params *FindPlacementActivityParams, reqEditors ...RequestEditorFn) (*FindPlacementActivityResponse, error) {
	rsp, err := c.FindPlacementActivity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindPlacementActivityResponse(rsp)
}

// FindPlacementActivitySettingsWithResponse request returning *FindPlacementActivitySettingsResponse
func (c *ClientWithResponses) FindPlacementActivitySettingsWithResponse(ctx context.Context, params *FindPlacementActivitySettingsParams, reqEditors ...RequestEditorFn) (*FindPlacementActivitySettingsResponse, error) {
	rsp, err := c.FindPlacementActivitySettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindPlacementActivitySettingsResponse(rsp)
}

// GetPlacementActivitySettingWithResponse request returning *GetPlacementActivitySettingResponse
func (c *ClientWithResponses) GetPlacementActivitySettingWithResponse(ctx context.Context, settingId int32, reqEditors ...RequestEditorFn) (*GetPlacementActivitySettingResponse, error) {
	rsp, err := c.GetPlacementActivitySetting(ctx, settingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementActivitySettingResponse(rsp)
}

// DeletedPlacementsWithResponse request returning *DeletedPlacementsResponse
func (c *ClientWithResponses) DeletedPlacementsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletedPlacementsResponse, error) {
	rsp, err := c.DeletedPlacements(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletedPlacementsResponse(rsp)
}

// GetPlacementCustomFieldListWithResponse request returning *GetPlacementCustomFieldListResponse
func (c *ClientWithResponses) GetPlacementCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementCustomFieldListResponse, error) {
	rsp, err := c.GetPlacementCustomFieldList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementCustomFieldListResponse(rsp)
}

// PutPlacementCustomFieldListWithBodyWithResponse request with arbitrary body returning *PutPlacementCustomFieldListResponse
func (c *ClientWithResponses) PutPlacementCustomFieldListWithBodyWithResponse(ctx context.Context, fieldId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPlacementCustomFieldListResponse, error) {
	rsp, err := c.PutPlacementCustomFieldListWithBody(ctx, fieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPlacementCustomFieldListResponse(rsp)
}

func (c *ClientWithResponses) PutPlacementCustomFieldListWithResponse(ctx context.Context, fieldId int32, body PutPlacementCustomFieldListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPlacementCustomFieldListResponse, error) {
	rsp, err := c.PutPlacementCustomFieldList(ctx, fieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPlacementCustomFieldListResponse(rsp)
}

// GetPlacementCustomFieldItemWithResponse request returning *GetPlacementCustomFieldItemResponse
func (c *ClientWithResponses) GetPlacementCustomFieldItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetPlacementCustomFieldItemResponse, error) {
	rsp, err := c.GetPlacementCustomFieldItem(ctx, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementCustomFieldItemResponse(rsp)
}

// GetPlacementAttachmentCategoryListWithResponse request returning *GetPlacementAttachmentCategoryListResponse
func (c *ClientWithResponses) GetPlacementAttachmentCategoryListWithResponse(ctx context.Context, params *GetPlacementAttachmentCategoryListParams, reqEditors ...RequestEditorFn) (*GetPlacementAttachmentCategoryListResponse, error) {
	rsp, err := c.GetPlacementAttachmentCategoryList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementAttachmentCategoryListResponse(rsp)
}

// GetPlacementAwardListWithResponse request returning *GetPlacementAwardListResponse
func (c *ClientWithResponses) GetPlacementAwardListWithResponse(ctx context.Context, params *GetPlacementAwardListParams, reqEditors ...RequestEditorFn) (*GetPlacementAwardListResponse, error) {
	rsp, err := c.GetPlacementAwardList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementAwardListResponse(rsp)
}

// GetPlacementBillingTermsListWithResponse request returning *GetPlacementBillingTermsListResponse
func (c *ClientWithResponses) GetPlacementBillingTermsListWithResponse(ctx context.Context, params *GetPlacementBillingTermsListParams, reqEditors ...RequestEditorFn) (*GetPlacementBillingTermsListResponse, error) {
	rsp, err := c.GetPlacementBillingTermsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementBillingTermsListResponse(rsp)
}

// GetPlacementIndustryCodeListWithResponse request returning *GetPlacementIndustryCodeListResponse
func (c *ClientWithResponses) GetPlacementIndustryCodeListWithResponse(ctx context.Context, params *GetPlacementIndustryCodeListParams, reqEditors ...RequestEditorFn) (*GetPlacementIndustryCodeListResponse, error) {
	rsp, err := c.GetPlacementIndustryCodeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementIndustryCodeListResponse(rsp)
}

// GetPlacementNoteTypeListWithResponse request returning *GetPlacementNoteTypeListResponse
func (c *ClientWithResponses) GetPlacementNoteTypeListWithResponse(ctx context.Context, params *GetPlacementNoteTypeListParams, reqEditors ...RequestEditorFn) (*GetPlacementNoteTypeListResponse, error) {
	rsp, err := c.GetPlacementNoteTypeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementNoteTypeListResponse(rsp)
}

// GetPlacementPaymentTypeListWithResponse request returning *GetPlacementPaymentTypeListResponse
func (c *ClientWithResponses) GetPlacementPaymentTypeListWithResponse(ctx context.Context, params *GetPlacementPaymentTypeListParams, reqEditors ...RequestEditorFn) (*GetPlacementPaymentTypeListResponse, error) {
	rsp, err := c.GetPlacementPaymentTypeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementPaymentTypeListResponse(rsp)
}

// GetPlacementStatusListWithResponse request returning *GetPlacementStatusListResponse
func (c *ClientWithResponses) GetPlacementStatusListWithResponse(ctx context.Context, params *GetPlacementStatusListParams, reqEditors ...RequestEditorFn) (*GetPlacementStatusListResponse, error) {
	rsp, err := c.GetPlacementStatusList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementStatusListResponse(rsp)
}

// GetPlacementStatusItemWithResponse request returning *GetPlacementStatusItemResponse
func (c *ClientWithResponses) GetPlacementStatusItemWithResponse(ctx context.Context, statusId int32, reqEditors ...RequestEditorFn) (*GetPlacementStatusItemResponse, error) {
	rsp, err := c.GetPlacementStatusItem(ctx, statusId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementStatusItemResponse(rsp)
}

// GetPlacementWithResponse request returning *GetPlacementResponse
func (c *ClientWithResponses) GetPlacementWithResponse(ctx context.Context, placementId int32, params *GetPlacementParams, reqEditors ...RequestEditorFn) (*GetPlacementResponse, error) {
	rsp, err := c.GetPlacement(ctx, placementId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementResponse(rsp)
}

// UpdatePlacementWithBodyWithResponse request with arbitrary body returning *UpdatePlacementResponse
func (c *ClientWithResponses) UpdatePlacementWithBodyWithResponse(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlacementResponse, error) {
	rsp, err := c.UpdatePlacementWithBody(ctx, placementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlacementResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlacementWithResponse(ctx context.Context, placementId int32, body UpdatePlacementJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlacementResponse, error) {
	rsp, err := c.UpdatePlacement(ctx, placementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlacementResponse(rsp)
}

// GetPlacementActivityByPlacementIdWithResponse request returning *GetPlacementActivityByPlacementIdResponse
func (c *ClientWithResponses) GetPlacementActivityByPlacementIdWithResponse(ctx context.Context, placementId int32, reqEditors ...RequestEditorFn) (*GetPlacementActivityByPlacementIdResponse, error) {
	rsp, err := c.GetPlacementActivityByPlacementId(ctx, placementId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementActivityByPlacementIdResponse(rsp)
}

// AddPlacementActivityWithBodyWithResponse request with arbitrary body returning *AddPlacementActivityResponse
func (c *ClientWithResponses) AddPlacementActivityWithBodyWithResponse(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlacementActivityResponse, error) {
	rsp, err := c.AddPlacementActivityWithBody(ctx, placementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlacementActivityResponse(rsp)
}

func (c *ClientWithResponses) AddPlacementActivityWithResponse(ctx context.Context, placementId int32, body AddPlacementActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlacementActivityResponse, error) {
	rsp, err := c.AddPlacementActivity(ctx, placementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlacementActivityResponse(rsp)
}

// GetPlacementActivityWithResponse request returning *GetPlacementActivityResponse
func (c *ClientWithResponses) GetPlacementActivityWithResponse(ctx context.Context, placementId int32, activityId int64, reqEditors ...RequestEditorFn) (*GetPlacementActivityResponse, error) {
	rsp, err := c.GetPlacementActivity(ctx, placementId, activityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementActivityResponse(rsp)
}

// FindPlacementAttachmentsWithResponse request returning *FindPlacementAttachmentsResponse
func (c *ClientWithResponses) FindPlacementAttachmentsWithResponse(ctx context.Context, placementId int32, params *FindPlacementAttachmentsParams, reqEditors ...RequestEditorFn) (*FindPlacementAttachmentsResponse, error) {
	rsp, err := c.FindPlacementAttachments(ctx, placementId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindPlacementAttachmentsResponse(rsp)
}

// GetPlacementAttachmentWithResponse request returning *GetPlacementAttachmentResponse
func (c *ClientWithResponses) GetPlacementAttachmentWithResponse(ctx context.Context, placementId int32, attach int64, reqEditors ...RequestEditorFn) (*GetPlacementAttachmentResponse, error) {
	rsp, err := c.GetPlacementAttachment(ctx, placementId, attach, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementAttachmentResponse(rsp)
}

// AddPlacementAttachmentWithBodyWithResponse request with arbitrary body returning *AddPlacementAttachmentResponse
func (c *ClientWithResponses) AddPlacementAttachmentWithBodyWithResponse(ctx context.Context, placementId int32, attach PlacementAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlacementAttachmentResponse, error) {
	rsp, err := c.AddPlacementAttachmentWithBody(ctx, placementId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlacementAttachmentResponse(rsp)
}

// UpdatePlacementAttachmentWithBodyWithResponse request with arbitrary body returning *UpdatePlacementAttachmentResponse
func (c *ClientWithResponses) UpdatePlacementAttachmentWithBodyWithResponse(ctx context.Context, placementId int32, attach int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlacementAttachmentResponse, error) {
	rsp, err := c.UpdatePlacementAttachmentWithBody(ctx, placementId, attach, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlacementAttachmentResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlacementAttachmentWithResponse(ctx context.Context, placementId int32, attach int64, body UpdatePlacementAttachmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlacementAttachmentResponse, error) {
	rsp, err := c.UpdatePlacementAttachment(ctx, placementId, attach, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlacementAttachmentResponse(rsp)
}

// GetPlacementNotesWithResponse request returning *GetPlacementNotesResponse
func (c *ClientWithResponses) GetPlacementNotesWithResponse(ctx context.Context, placementId int32, params *GetPlacementNotesParams, reqEditors ...RequestEditorFn) (*GetPlacementNotesResponse, error) {
	rsp, err := c.GetPlacementNotes(ctx, placementId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementNotesResponse(rsp)
}

// AddPlacementNoteWithBodyWithResponse request with arbitrary body returning *AddPlacementNoteResponse
func (c *ClientWithResponses) AddPlacementNoteWithBodyWithResponse(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlacementNoteResponse, error) {
	rsp, err := c.AddPlacementNoteWithBody(ctx, placementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlacementNoteResponse(rsp)
}

func (c *ClientWithResponses) AddPlacementNoteWithResponse(ctx context.Context, placementId int32, body AddPlacementNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlacementNoteResponse, error) {
	rsp, err := c.AddPlacementNote(ctx, placementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlacementNoteResponse(rsp)
}

// PutPlacementStatusWithBodyWithResponse request with arbitrary body returning *PutPlacementStatusResponse
func (c *ClientWithResponses) PutPlacementStatusWithBodyWithResponse(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPlacementStatusResponse, error) {
	rsp, err := c.PutPlacementStatusWithBody(ctx, placementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPlacementStatusResponse(rsp)
}

func (c *ClientWithResponses) PutPlacementStatusWithResponse(ctx context.Context, placementId int32, body PutPlacementStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPlacementStatusResponse, error) {
	rsp, err := c.PutPlacementStatus(ctx, placementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPlacementStatusResponse(rsp)
}

// GetPlacementTimesheetsWithResponse request returning *GetPlacementTimesheetsResponse
func (c *ClientWithResponses) GetPlacementTimesheetsWithResponse(ctx context.Context, placementId int32, params *GetPlacementTimesheetsParams, reqEditors ...RequestEditorFn) (*GetPlacementTimesheetsResponse, error) {
	rsp, err := c.GetPlacementTimesheets(ctx, placementId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementTimesheetsResponse(rsp)
}

// AddPlacementUserTaskWithBodyWithResponse request with arbitrary body returning *AddPlacementUserTaskResponse
func (c *ClientWithResponses) AddPlacementUserTaskWithBodyWithResponse(ctx context.Context, placementId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlacementUserTaskResponse, error) {
	rsp, err := c.AddPlacementUserTaskWithBody(ctx, placementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlacementUserTaskResponse(rsp)
}

func (c *ClientWithResponses) AddPlacementUserTaskWithResponse(ctx context.Context, placementId int32, body AddPlacementUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlacementUserTaskResponse, error) {
	rsp, err := c.AddPlacementUserTask(ctx, placementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlacementUserTaskResponse(rsp)
}

// GetPlacementUserTaskWithResponse request returning *GetPlacementUserTaskResponse
func (c *ClientWithResponses) GetPlacementUserTaskWithResponse(ctx context.Context, placementId int32, taskId int64, reqEditors ...RequestEditorFn) (*GetPlacementUserTaskResponse, error) {
	rsp, err := c.GetPlacementUserTask(ctx, placementId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementUserTaskResponse(rsp)
}

// UpdatePlacementUserTaskWithBodyWithResponse request with arbitrary body returning *UpdatePlacementUserTaskResponse
func (c *ClientWithResponses) UpdatePlacementUserTaskWithBodyWithResponse(ctx context.Context, placementId int32, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlacementUserTaskResponse, error) {
	rsp, err := c.UpdatePlacementUserTaskWithBody(ctx, placementId, taskId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlacementUserTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlacementUserTaskWithResponse(ctx context.Context, placementId int32, taskId int64, body UpdatePlacementUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlacementUserTaskResponse, error) {
	rsp, err := c.UpdatePlacementUserTask(ctx, placementId, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlacementUserTaskResponse(rsp)
}

// FindRequisitionsWithResponse request returning *FindRequisitionsResponse
func (c *ClientWithResponses) FindRequisitionsWithResponse(ctx context.Context, params *FindRequisitionsParams, reqEditors ...RequestEditorFn) (*FindRequisitionsResponse, error) {
	rsp, err := c.FindRequisitions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindRequisitionsResponse(rsp)
}

// AddRequisitionWithBodyWithResponse request with arbitrary body returning *AddRequisitionResponse
func (c *ClientWithResponses) AddRequisitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRequisitionResponse, error) {
	rsp, err := c.AddRequisitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRequisitionResponse(rsp)
}

func (c *ClientWithResponses) AddRequisitionWithResponse(ctx context.Context, body AddRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRequisitionResponse, error) {
	rsp, err := c.AddRequisition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRequisitionResponse(rsp)
}

// GetRequisitionCustomFieldListWithResponse request returning *GetRequisitionCustomFieldListResponse
func (c *ClientWithResponses) GetRequisitionCustomFieldListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRequisitionCustomFieldListResponse, error) {
	rsp, err := c.GetRequisitionCustomFieldList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequisitionCustomFieldListResponse(rsp)
}

// GetRequisitionCustomFieldItemWithResponse request returning *GetRequisitionCustomFieldItemResponse
func (c *ClientWithResponses) GetRequisitionCustomFieldItemWithResponse(ctx context.Context, fieldId int32, reqEditors ...RequestEditorFn) (*GetRequisitionCustomFieldItemResponse, error) {
	rsp, err := c.GetRequisitionCustomFieldItem(ctx, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequisitionCustomFieldItemResponse(rsp)
}

// GetRequisitionFormsWithResponse request returning *GetRequisitionFormsResponse
func (c *ClientWithResponses) GetRequisitionFormsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRequisitionFormsResponse, error) {
	rsp, err := c.GetRequisitionForms(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequisitionFormsResponse(rsp)
}

// DeleteRequisitionWithResponse request returning *DeleteRequisitionResponse
func (c *ClientWithResponses) DeleteRequisitionWithResponse(ctx context.Context, requisitionId int32, reqEditors ...RequestEditorFn) (*DeleteRequisitionResponse, error) {
	rsp, err := c.DeleteRequisition(ctx, requisitionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRequisitionResponse(rsp)
}

// GetRequisitionWithResponse request returning *GetRequisitionResponse
func (c *ClientWithResponses) GetRequisitionWithResponse(ctx context.Context, requisitionId int32, params *GetRequisitionParams, reqEditors ...RequestEditorFn) (*GetRequisitionResponse, error) {
	rsp, err := c.GetRequisition(ctx, requisitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequisitionResponse(rsp)
}

// UpdateRequisitionWithBodyWithResponse request with arbitrary body returning *UpdateRequisitionResponse
func (c *ClientWithResponses) UpdateRequisitionWithBodyWithResponse(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRequisitionResponse, error) {
	rsp, err := c.UpdateRequisitionWithBody(ctx, requisitionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRequisitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateRequisitionWithResponse(ctx context.Context, requisitionId int32, body UpdateRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRequisitionResponse, error) {
	rsp, err := c.UpdateRequisition(ctx, requisitionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRequisitionResponse(rsp)
}

// ApproveRequisitionWithBodyWithResponse request with arbitrary body returning *ApproveRequisitionResponse
func (c *ClientWithResponses) ApproveRequisitionWithBodyWithResponse(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApproveRequisitionResponse, error) {
	rsp, err := c.ApproveRequisitionWithBody(ctx, requisitionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApproveRequisitionResponse(rsp)
}

func (c *ClientWithResponses) ApproveRequisitionWithResponse(ctx context.Context, requisitionId int32, body ApproveRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*ApproveRequisitionResponse, error) {
	rsp, err := c.ApproveRequisition(ctx, requisitionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApproveRequisitionResponse(rsp)
}

// GetRequisitionAttachmentListWithResponse request returning *GetRequisitionAttachmentListResponse
func (c *ClientWithResponses) GetRequisitionAttachmentListWithResponse(ctx context.Context, requisitionId int32, reqEditors ...RequestEditorFn) (*GetRequisitionAttachmentListResponse, error) {
	rsp, err := c.GetRequisitionAttachmentList(ctx, requisitionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequisitionAttachmentListResponse(rsp)
}

// DeleteRequisitionAttachmentWithResponse request returning *DeleteRequisitionAttachmentResponse
func (c *ClientWithResponses) DeleteRequisitionAttachmentWithResponse(ctx context.Context, requisitionId int32, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteRequisitionAttachmentResponse, error) {
	rsp, err := c.DeleteRequisitionAttachment(ctx, requisitionId, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRequisitionAttachmentResponse(rsp)
}

// GetRequisitionAttachmentWithResponse request returning *GetRequisitionAttachmentResponse
func (c *ClientWithResponses) GetRequisitionAttachmentWithResponse(ctx context.Context, requisitionId int32, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRequisitionAttachmentResponse, error) {
	rsp, err := c.GetRequisitionAttachment(ctx, requisitionId, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequisitionAttachmentResponse(rsp)
}

// AddRequisitionAttachmentWithBodyWithResponse request with arbitrary body returning *AddRequisitionAttachmentResponse
func (c *ClientWithResponses) AddRequisitionAttachmentWithBodyWithResponse(ctx context.Context, requisitionId int32, attachmentType RequisitionAttachmentType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRequisitionAttachmentResponse, error) {
	rsp, err := c.AddRequisitionAttachmentWithBody(ctx, requisitionId, attachmentType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRequisitionAttachmentResponse(rsp)
}

// GetRequisitionApprovalHistoryWithResponse request returning *GetRequisitionApprovalHistoryResponse
func (c *ClientWithResponses) GetRequisitionApprovalHistoryWithResponse(ctx context.Context, requisitionId int32, params *GetRequisitionApprovalHistoryParams, reqEditors ...RequestEditorFn) (*GetRequisitionApprovalHistoryResponse, error) {
	rsp, err := c.GetRequisitionApprovalHistory(ctx, requisitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequisitionApprovalHistoryResponse(rsp)
}

// GetRequisitionNotesWithResponse request returning *GetRequisitionNotesResponse
func (c *ClientWithResponses) GetRequisitionNotesWithResponse(ctx context.Context, requisitionId int32, params *GetRequisitionNotesParams, reqEditors ...RequestEditorFn) (*GetRequisitionNotesResponse, error) {
	rsp, err := c.GetRequisitionNotes(ctx, requisitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequisitionNotesResponse(rsp)
}

// AddRequisitionNoteWithBodyWithResponse request with arbitrary body returning *AddRequisitionNoteResponse
func (c *ClientWithResponses) AddRequisitionNoteWithBodyWithResponse(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRequisitionNoteResponse, error) {
	rsp, err := c.AddRequisitionNoteWithBody(ctx, requisitionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRequisitionNoteResponse(rsp)
}

func (c *ClientWithResponses) AddRequisitionNoteWithResponse(ctx context.Context, requisitionId int32, body AddRequisitionNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRequisitionNoteResponse, error) {
	rsp, err := c.AddRequisitionNote(ctx, requisitionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRequisitionNoteResponse(rsp)
}

// RejectRequisitionWithBodyWithResponse request with arbitrary body returning *RejectRequisitionResponse
func (c *ClientWithResponses) RejectRequisitionWithBodyWithResponse(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectRequisitionResponse, error) {
	rsp, err := c.RejectRequisitionWithBody(ctx, requisitionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectRequisitionResponse(rsp)
}

func (c *ClientWithResponses) RejectRequisitionWithResponse(ctx context.Context, requisitionId int32, body RejectRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectRequisitionResponse, error) {
	rsp, err := c.RejectRequisition(ctx, requisitionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectRequisitionResponse(rsp)
}

// SubmitRequisitionWithBodyWithResponse request with arbitrary body returning *SubmitRequisitionResponse
func (c *ClientWithResponses) SubmitRequisitionWithBodyWithResponse(ctx context.Context, requisitionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitRequisitionResponse, error) {
	rsp, err := c.SubmitRequisitionWithBody(ctx, requisitionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitRequisitionResponse(rsp)
}

func (c *ClientWithResponses) SubmitRequisitionWithResponse(ctx context.Context, requisitionId int32, body SubmitRequisitionJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitRequisitionResponse, error) {
	rsp, err := c.SubmitRequisition(ctx, requisitionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitRequisitionResponse(rsp)
}

// FindEmailAddressWithResponse request returning *FindEmailAddressResponse
func (c *ClientWithResponses) FindEmailAddressWithResponse(ctx context.Context, params *FindEmailAddressParams, reqEditors ...RequestEditorFn) (*FindEmailAddressResponse, error) {
	rsp, err := c.FindEmailAddress(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindEmailAddressResponse(rsp)
}

// FindPhoneNumberWithResponse request returning *FindPhoneNumberResponse
func (c *ClientWithResponses) FindPhoneNumberWithResponse(ctx context.Context, params *FindPhoneNumberParams, reqEditors ...RequestEditorFn) (*FindPhoneNumberResponse, error) {
	rsp, err := c.FindPhoneNumber(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindPhoneNumberResponse(rsp)
}

// SendJobApplcationSmsWithBodyWithResponse request with arbitrary body returning *SendJobApplcationSmsResponse
func (c *ClientWithResponses) SendJobApplcationSmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendJobApplcationSmsResponse, error) {
	rsp, err := c.SendJobApplcationSmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendJobApplcationSmsResponse(rsp)
}

func (c *ClientWithResponses) SendJobApplcationSmsWithResponse(ctx context.Context, body SendJobApplcationSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendJobApplcationSmsResponse, error) {
	rsp, err := c.SendJobApplcationSms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendJobApplcationSmsResponse(rsp)
}

// SendJobApplicationContactSmsWithBodyWithResponse request with arbitrary body returning *SendJobApplicationContactSmsResponse
func (c *ClientWithResponses) SendJobApplicationContactSmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendJobApplicationContactSmsResponse, error) {
	rsp, err := c.SendJobApplicationContactSmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendJobApplicationContactSmsResponse(rsp)
}

func (c *ClientWithResponses) SendJobApplicationContactSmsWithResponse(ctx context.Context, body SendJobApplicationContactSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendJobApplicationContactSmsResponse, error) {
	rsp, err := c.SendJobApplicationContactSms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendJobApplicationContactSmsResponse(rsp)
}

// SendCandidateSmsWithBodyWithResponse request with arbitrary body returning *SendCandidateSmsResponse
func (c *ClientWithResponses) SendCandidateSmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendCandidateSmsResponse, error) {
	rsp, err := c.SendCandidateSmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendCandidateSmsResponse(rsp)
}

func (c *ClientWithResponses) SendCandidateSmsWithResponse(ctx context.Context, body SendCandidateSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendCandidateSmsResponse, error) {
	rsp, err := c.SendCandidateSms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendCandidateSmsResponse(rsp)
}

// SendCompanySmsWithBodyWithResponse request with arbitrary body returning *SendCompanySmsResponse
func (c *ClientWithResponses) SendCompanySmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendCompanySmsResponse, error) {
	rsp, err := c.SendCompanySmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendCompanySmsResponse(rsp)
}

func (c *ClientWithResponses) SendCompanySmsWithResponse(ctx context.Context, body SendCompanySmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendCompanySmsResponse, error) {
	rsp, err := c.SendCompanySms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendCompanySmsResponse(rsp)
}

// SendContactSmsWithBodyWithResponse request with arbitrary body returning *SendContactSmsResponse
func (c *ClientWithResponses) SendContactSmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendContactSmsResponse, error) {
	rsp, err := c.SendContactSmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendContactSmsResponse(rsp)
}

func (c *ClientWithResponses) SendContactSmsWithResponse(ctx context.Context, body SendContactSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendContactSmsResponse, error) {
	rsp, err := c.SendContactSms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendContactSmsResponse(rsp)
}

// SendJobOrderSmsWithBodyWithResponse request with arbitrary body returning *SendJobOrderSmsResponse
func (c *ClientWithResponses) SendJobOrderSmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendJobOrderSmsResponse, error) {
	rsp, err := c.SendJobOrderSmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendJobOrderSmsResponse(rsp)
}

func (c *ClientWithResponses) SendJobOrderSmsWithResponse(ctx context.Context, body SendJobOrderSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendJobOrderSmsResponse, error) {
	rsp, err := c.SendJobOrderSms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendJobOrderSmsResponse(rsp)
}

// SendPlacementSmsWithBodyWithResponse request with arbitrary body returning *SendPlacementSmsResponse
func (c *ClientWithResponses) SendPlacementSmsWithBodyWithResponse(ctx context.Context, entityType RecipientEntityType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendPlacementSmsResponse, error) {
	rsp, err := c.SendPlacementSmsWithBody(ctx, entityType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendPlacementSmsResponse(rsp)
}

func (c *ClientWithResponses) SendPlacementSmsWithResponse(ctx context.Context, entityType RecipientEntityType, body SendPlacementSmsJSONRequestBody, reqEditors ...RequestEditorFn) (*SendPlacementSmsResponse, error) {
	rsp, err := c.SendPlacementSms(ctx, entityType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendPlacementSmsResponse(rsp)
}

// FindSubmissionsWithResponse request returning *FindSubmissionsResponse
func (c *ClientWithResponses) FindSubmissionsWithResponse(ctx context.Context, params *FindSubmissionsParams, reqEditors ...RequestEditorFn) (*FindSubmissionsResponse, error) {
	rsp, err := c.FindSubmissions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindSubmissionsResponse(rsp)
}

// GetSubmissionWithResponse request returning *GetSubmissionResponse
func (c *ClientWithResponses) GetSubmissionWithResponse(ctx context.Context, submissionId int64, reqEditors ...RequestEditorFn) (*GetSubmissionResponse, error) {
	rsp, err := c.GetSubmission(ctx, submissionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubmissionResponse(rsp)
}

// FindUserGroupsWithResponse request returning *FindUserGroupsResponse
func (c *ClientWithResponses) FindUserGroupsWithResponse(ctx context.Context, params *FindUserGroupsParams, reqEditors ...RequestEditorFn) (*FindUserGroupsResponse, error) {
	rsp, err := c.FindUserGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindUserGroupsResponse(rsp)
}

// GetUserGroupWithResponse request returning *GetUserGroupResponse
func (c *ClientWithResponses) GetUserGroupWithResponse(ctx context.Context, groupId int32, reqEditors ...RequestEditorFn) (*GetUserGroupResponse, error) {
	rsp, err := c.GetUserGroup(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupResponse(rsp)
}

// GetGroupUsersWithResponse request returning *GetGroupUsersResponse
func (c *ClientWithResponses) GetGroupUsersWithResponse(ctx context.Context, groupId int32, reqEditors ...RequestEditorFn) (*GetGroupUsersResponse, error) {
	rsp, err := c.GetGroupUsers(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupUsersResponse(rsp)
}

// FindUserOfficesWithResponse request returning *FindUserOfficesResponse
func (c *ClientWithResponses) FindUserOfficesWithResponse(ctx context.Context, params *FindUserOfficesParams, reqEditors ...RequestEditorFn) (*FindUserOfficesResponse, error) {
	rsp, err := c.FindUserOffices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindUserOfficesResponse(rsp)
}

// GetUserOfficeWithResponse request returning *GetUserOfficeResponse
func (c *ClientWithResponses) GetUserOfficeWithResponse(ctx context.Context, officeId int32, reqEditors ...RequestEditorFn) (*GetUserOfficeResponse, error) {
	rsp, err := c.GetUserOffice(ctx, officeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserOfficeResponse(rsp)
}

// GetOfficeUsersWithResponse request returning *GetOfficeUsersResponse
func (c *ClientWithResponses) GetOfficeUsersWithResponse(ctx context.Context, officeId int32, reqEditors ...RequestEditorFn) (*GetOfficeUsersResponse, error) {
	rsp, err := c.GetOfficeUsers(ctx, officeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOfficeUsersResponse(rsp)
}

// FindUsersWithResponse request returning *FindUsersResponse
func (c *ClientWithResponses) FindUsersWithResponse(ctx context.Context, params *FindUsersParams, reqEditors ...RequestEditorFn) (*FindUsersResponse, error) {
	rsp, err := c.FindUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindUsersResponse(rsp)
}

// GetCurrentUserWithResponse request returning *GetCurrentUserResponse
func (c *ClientWithResponses) GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error) {
	rsp, err := c.GetCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetUserInterviewsWithResponse request returning *GetUserInterviewsResponse
func (c *ClientWithResponses) GetUserInterviewsWithResponse(ctx context.Context, userId int32, params *GetUserInterviewsParams, reqEditors ...RequestEditorFn) (*GetUserInterviewsResponse, error) {
	rsp, err := c.GetUserInterviews(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInterviewsResponse(rsp)
}

// GetUserPhotoWithResponse request returning *GetUserPhotoResponse
func (c *ClientWithResponses) GetUserPhotoWithResponse(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*GetUserPhotoResponse, error) {
	rsp, err := c.GetUserPhoto(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPhotoResponse(rsp)
}

// GetUserUserGroupsWithResponse request returning *GetUserUserGroupsResponse
func (c *ClientWithResponses) GetUserUserGroupsWithResponse(ctx context.Context, userId int32, reqEditors ...RequestEditorFn) (*GetUserUserGroupsResponse, error) {
	rsp, err := c.GetUserUserGroups(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUserGroupsResponse(rsp)
}

// FindUserUserTasksWithResponse request returning *FindUserUserTasksResponse
func (c *ClientWithResponses) FindUserUserTasksWithResponse(ctx context.Context, userId int32, params *FindUserUserTasksParams, reqEditors ...RequestEditorFn) (*FindUserUserTasksResponse, error) {
	rsp, err := c.FindUserUserTasks(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindUserUserTasksResponse(rsp)
}

// FindUserTasksWithResponse request returning *FindUserTasksResponse
func (c *ClientWithResponses) FindUserTasksWithResponse(ctx context.Context, params *FindUserTasksParams, reqEditors ...RequestEditorFn) (*FindUserTasksResponse, error) {
	rsp, err := c.FindUserTasks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindUserTasksResponse(rsp)
}

// AddUserTaskWithBodyWithResponse request with arbitrary body returning *AddUserTaskResponse
func (c *ClientWithResponses) AddUserTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserTaskResponse, error) {
	rsp, err := c.AddUserTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserTaskResponse(rsp)
}

func (c *ClientWithResponses) AddUserTaskWithResponse(ctx context.Context, body AddUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserTaskResponse, error) {
	rsp, err := c.AddUserTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserTaskResponse(rsp)
}

// DeleteUserTaskWithResponse request returning *DeleteUserTaskResponse
func (c *ClientWithResponses) DeleteUserTaskWithResponse(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*DeleteUserTaskResponse, error) {
	rsp, err := c.DeleteUserTask(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserTaskResponse(rsp)
}

// GetUserTaskWithResponse request returning *GetUserTaskResponse
func (c *ClientWithResponses) GetUserTaskWithResponse(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*GetUserTaskResponse, error) {
	rsp, err := c.GetUserTask(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTaskResponse(rsp)
}

// UpdateUserTaskWithBodyWithResponse request with arbitrary body returning *UpdateUserTaskResponse
func (c *ClientWithResponses) UpdateUserTaskWithBodyWithResponse(ctx context.Context, taskId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserTaskResponse, error) {
	rsp, err := c.UpdateUserTaskWithBody(ctx, taskId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserTaskWithResponse(ctx context.Context, taskId int64, body UpdateUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserTaskResponse, error) {
	rsp, err := c.UpdateUserTask(ctx, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserTaskResponse(rsp)
}

// MarkCompleteUserTaskWithResponse request returning *MarkCompleteUserTaskResponse
func (c *ClientWithResponses) MarkCompleteUserTaskWithResponse(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*MarkCompleteUserTaskResponse, error) {
	rsp, err := c.MarkCompleteUserTask(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkCompleteUserTaskResponse(rsp)
}

// MarkIncompleteUserTaskWithResponse request returning *MarkIncompleteUserTaskResponse
func (c *ClientWithResponses) MarkIncompleteUserTaskWithResponse(ctx context.Context, taskId int64, reqEditors ...RequestEditorFn) (*MarkIncompleteUserTaskResponse, error) {
	rsp, err := c.MarkIncompleteUserTask(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkIncompleteUserTaskResponse(rsp)
}

// FindWebhooksWithResponse request returning *FindWebhooksResponse
func (c *ClientWithResponses) FindWebhooksWithResponse(ctx context.Context, params *FindWebhooksParams, reqEditors ...RequestEditorFn) (*FindWebhooksResponse, error) {
	rsp, err := c.FindWebhooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindWebhooksResponse(rsp)
}

// AddWebhookWithBodyWithResponse request with arbitrary body returning *AddWebhookResponse
func (c *ClientWithResponses) AddWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddWebhookResponse, error) {
	rsp, err := c.AddWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddWebhookResponse(rsp)
}

func (c *ClientWithResponses) AddWebhookWithResponse(ctx context.Context, body AddWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*AddWebhookResponse, error) {
	rsp, err := c.AddWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddWebhookResponse(rsp)
}

// DeleteWebhookWithResponse request returning *DeleteWebhookResponse
func (c *ClientWithResponses) DeleteWebhookWithResponse(ctx context.Context, webhookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteWebhookResponse, error) {
	rsp, err := c.DeleteWebhook(ctx, webhookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebhookResponse(rsp)
}

// GetWebhookWithResponse request returning *GetWebhookResponse
func (c *ClientWithResponses) GetWebhookWithResponse(ctx context.Context, webhookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetWebhookResponse, error) {
	rsp, err := c.GetWebhook(ctx, webhookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookResponse(rsp)
}

// UpdateWebhookWithBodyWithResponse request with arbitrary body returning *UpdateWebhookResponse
func (c *ClientWithResponses) UpdateWebhookWithBodyWithResponse(ctx context.Context, webhookId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWebhookResponse, error) {
	rsp, err := c.UpdateWebhookWithBody(ctx, webhookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWebhookResponse(rsp)
}

func (c *ClientWithResponses) UpdateWebhookWithResponse(ctx context.Context, webhookId openapi_types.UUID, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWebhookResponse, error) {
	rsp, err := c.UpdateWebhook(ctx, webhookId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWebhookResponse(rsp)
}

// FindWorkTypesWithResponse request returning *FindWorkTypesResponse
func (c *ClientWithResponses) FindWorkTypesWithResponse(ctx context.Context, params *FindWorkTypesParams, reqEditors ...RequestEditorFn) (*FindWorkTypesResponse, error) {
	rsp, err := c.FindWorkTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindWorkTypesResponse(rsp)
}

// ParseFindJobApplicationsResponse parses an HTTP response from a FindJobApplicationsWithResponse call
func ParseFindJobApplicationsResponse(rsp *http.Response) (*FindJobApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindJobApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindJobApplicationActivityResponse parses an HTTP response from a FindJobApplicationActivityWithResponse call
func ParseFindJobApplicationActivityResponse(rsp *http.Response) (*FindJobApplicationActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindJobApplicationActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationActivityListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindJobApplicationActivitySettingsResponse parses an HTTP response from a FindJobApplicationActivitySettingsWithResponse call
func ParseFindJobApplicationActivitySettingsResponse(rsp *http.Response) (*FindJobApplicationActivitySettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindJobApplicationActivitySettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationActivitySettingsListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationActivitySettingResponse parses an HTTP response from a GetJobApplicationActivitySettingWithResponse call
func ParseGetJobApplicationActivitySettingResponse(rsp *http.Response) (*GetJobApplicationActivitySettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationActivitySettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationActivitySettingModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletedJobApplicationsResponse parses an HTTP response from a DeletedJobApplicationsWithResponse call
func ParseDeletedJobApplicationsResponse(rsp *http.Response) (*DeletedJobApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletedJobApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeletedJobApplicationListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationCustomFieldListResponse parses an HTTP response from a GetJobApplicationCustomFieldListWithResponse call
func ParseGetJobApplicationCustomFieldListResponse(rsp *http.Response) (*GetJobApplicationCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutJobApplicationCustomFieldListResponse parses an HTTP response from a PutJobApplicationCustomFieldListWithResponse call
func ParsePutJobApplicationCustomFieldListResponse(rsp *http.Response) (*PutJobApplicationCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutJobApplicationCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationCustomFieldListItemResponse parses an HTTP response from a GetJobApplicationCustomFieldListItemWithResponse call
func ParseGetJobApplicationCustomFieldListItemResponse(rsp *http.Response) (*GetJobApplicationCustomFieldListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationCustomFieldListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationStatusListResponse parses an HTTP response from a GetJobApplicationStatusListWithResponse call
func ParseGetJobApplicationStatusListResponse(rsp *http.Response) (*GetJobApplicationStatusListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationStatusListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationStatusListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationStatusListItemResponse parses an HTTP response from a GetJobApplicationStatusListItemWithResponse call
func ParseGetJobApplicationStatusListItemResponse(rsp *http.Response) (*GetJobApplicationStatusListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationStatusListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationStatusRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationWorkflowListResponse parses an HTTP response from a GetJobApplicationWorkflowListWithResponse call
func ParseGetJobApplicationWorkflowListResponse(rsp *http.Response) (*GetJobApplicationWorkflowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationWorkflowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationStatusByWorkflowListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationResponse parses an HTTP response from a GetJobApplicationWithResponse call
func ParseGetJobApplicationResponse(rsp *http.Response) (*GetJobApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateJobApplicationResponse parses an HTTP response from a UpdateJobApplicationWithResponse call
func ParseUpdateJobApplicationResponse(rsp *http.Response) (*UpdateJobApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJobApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationActivityByApplicationIdResponse parses an HTTP response from a GetJobApplicationActivityByApplicationIdWithResponse call
func ParseGetJobApplicationActivityByApplicationIdResponse(rsp *http.Response) (*GetJobApplicationActivityByApplicationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationActivityByApplicationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationActivitySummaryListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddJobApplicationActivityResponse parses an HTTP response from a AddJobApplicationActivityWithResponse call
func ParseAddJobApplicationActivityResponse(rsp *http.Response) (*AddJobApplicationActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobApplicationActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobApplicationActivityModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationActivityResponse parses an HTTP response from a GetJobApplicationActivityWithResponse call
func ParseGetJobApplicationActivityResponse(rsp *http.Response) (*GetJobApplicationActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationActivityRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFindJobApplicationAttachmentsResponse parses an HTTP response from a FindJobApplicationAttachmentsWithResponse call
func ParseFindJobApplicationAttachmentsResponse(rsp *http.Response) (*FindJobApplicationAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindJobApplicationAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateAttachmentListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationAttachmentResponse parses an HTTP response from a GetJobApplicationAttachmentWithResponse call
func ParseGetJobApplicationAttachmentResponse(rsp *http.Response) (*GetJobApplicationAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddJobApplicationAttachmentResponse parses an HTTP response from a AddJobApplicationAttachmentWithResponse call
func ParseAddJobApplicationAttachmentResponse(rsp *http.Response) (*AddJobApplicationAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobApplicationAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CandidateAttachmentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateJobApplicationAttachmentResponse parses an HTTP response from a UpdateJobApplicationAttachmentWithResponse call
func ParseUpdateJobApplicationAttachmentResponse(rsp *http.Response) (*UpdateJobApplicationAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJobApplicationAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJobApplicationInterviewsResponse parses an HTTP response from a GetJobApplicationInterviewsWithResponse call
func ParseGetJobApplicationInterviewsResponse(rsp *http.Response) (*GetJobApplicationInterviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationInterviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostJobApplicationExternalInterviewResponse parses an HTTP response from a PostJobApplicationExternalInterviewWithResponse call
func ParsePostJobApplicationExternalInterviewResponse(rsp *http.Response) (*PostJobApplicationExternalInterviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobApplicationExternalInterviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InterviewModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePutJobApplicationExternalInterviewResponse parses an HTTP response from a PutJobApplicationExternalInterviewWithResponse call
func ParsePutJobApplicationExternalInterviewResponse(rsp *http.Response) (*PutJobApplicationExternalInterviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutJobApplicationExternalInterviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostJobApplicationInternalInterviewResponse parses an HTTP response from a PostJobApplicationInternalInterviewWithResponse call
func ParsePostJobApplicationInternalInterviewResponse(rsp *http.Response) (*PostJobApplicationInternalInterviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobApplicationInternalInterviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InterviewModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePutJobApplicationInternalInterviewResponse parses an HTTP response from a PutJobApplicationInternalInterviewWithResponse call
func ParsePutJobApplicationInternalInterviewResponse(rsp *http.Response) (*PutJobApplicationInternalInterviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutJobApplicationInternalInterviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationNotesResponse parses an HTTP response from a GetJobApplicationNotesWithResponse call
func ParseGetJobApplicationNotesResponse(rsp *http.Response) (*GetJobApplicationNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddJobApplicationNoteResponse parses an HTTP response from a AddJobApplicationNoteWithResponse call
func ParseAddJobApplicationNoteResponse(rsp *http.Response) (*AddJobApplicationNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobApplicationNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NoteModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseReviewSubmitJobApplicationResponse parses an HTTP response from a ReviewSubmitJobApplicationWithResponse call
func ParseReviewSubmitJobApplicationResponse(rsp *http.Response) (*ReviewSubmitJobApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReviewSubmitJobApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReviewViewJobApplicationResponse parses an HTTP response from a ReviewViewJobApplicationWithResponse call
func ParseReviewViewJobApplicationResponse(rsp *http.Response) (*ReviewViewJobApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReviewViewJobApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReviewAcceptJobApplicationResponse parses an HTTP response from a ReviewAcceptJobApplicationWithResponse call
func ParseReviewAcceptJobApplicationResponse(rsp *http.Response) (*ReviewAcceptJobApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReviewAcceptJobApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReviewRejectJobApplicationResponse parses an HTTP response from a ReviewRejectJobApplicationWithResponse call
func ParseReviewRejectJobApplicationResponse(rsp *http.Response) (*ReviewRejectJobApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReviewRejectJobApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutJobApplicationStatusResponse parses an HTTP response from a PutJobApplicationStatusWithResponse call
func ParsePutJobApplicationStatusResponse(rsp *http.Response) (*PutJobApplicationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutJobApplicationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddJobApplicationUserTaskResponse parses an HTTP response from a AddJobApplicationUserTaskWithResponse call
func ParseAddJobApplicationUserTaskResponse(rsp *http.Response) (*AddJobApplicationUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobApplicationUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobApplicationUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationUserTaskResponse parses an HTTP response from a GetJobApplicationUserTaskWithResponse call
func ParseGetJobApplicationUserTaskResponse(rsp *http.Response) (*GetJobApplicationUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationUserTaskRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateJobApplicationUserTaskResponse parses an HTTP response from a UpdateJobApplicationUserTaskWithResponse call
func ParseUpdateJobApplicationUserTaskResponse(rsp *http.Response) (*UpdateJobApplicationUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJobApplicationUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobApplicationUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetJobApplicationVideosResponse parses an HTTP response from a GetJobApplicationVideosWithResponse call
func ParseGetJobApplicationVideosResponse(rsp *http.Response) (*GetJobApplicationVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobApplicationVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateVideoListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLatestJobApplicationVideoResponse parses an HTTP response from a GetLatestJobApplicationVideoWithResponse call
func ParseGetLatestJobApplicationVideoResponse(rsp *http.Response) (*GetLatestJobApplicationVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestJobApplicationVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateVideoRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddJobApplicationVideoResponse parses an HTTP response from a AddJobApplicationVideoWithResponse call
func ParseAddJobApplicationVideoResponse(rsp *http.Response) (*AddJobApplicationVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobApplicationVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateVideoModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindCandidatesResponse parses an HTTP response from a FindCandidatesWithResponse call
func ParseFindCandidatesResponse(rsp *http.Response) (*FindCandidatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCandidatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCandidateResponse parses an HTTP response from a AddCandidateWithResponse call
func ParseAddCandidateResponse(rsp *http.Response) (*AddCandidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCandidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CandidateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindCandidateActivitiesResponse parses an HTTP response from a FindCandidateActivitiesWithResponse call
func ParseFindCandidateActivitiesResponse(rsp *http.Response) (*FindCandidateActivitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCandidateActivitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateActivityListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindCandidateActivitySettingsResponse parses an HTTP response from a FindCandidateActivitySettingsWithResponse call
func ParseFindCandidateActivitySettingsResponse(rsp *http.Response) (*FindCandidateActivitySettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCandidateActivitySettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateActivitySettingsListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateActivitySettingResponse parses an HTTP response from a GetCandidateActivitySettingWithResponse call
func ParseGetCandidateActivitySettingResponse(rsp *http.Response) (*GetCandidateActivitySettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateActivitySettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateActivitySettingModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindAllCandidateAttachmentsResponse parses an HTTP response from a FindAllCandidateAttachmentsWithResponse call
func ParseFindAllCandidateAttachmentsResponse(rsp *http.Response) (*FindAllCandidateAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindAllCandidateAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateAttachmentListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletedCandidatesResponse parses an HTTP response from a DeletedCandidatesWithResponse call
func ParseDeletedCandidatesResponse(rsp *http.Response) (*DeletedCandidatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletedCandidatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeletedCandidateListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateCustomFieldListResponse parses an HTTP response from a GetCandidateCustomFieldListWithResponse call
func ParseGetCandidateCustomFieldListResponse(rsp *http.Response) (*GetCandidateCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateCustomFieldListItemResponse parses an HTTP response from a GetCandidateCustomFieldListItemWithResponse call
func ParseGetCandidateCustomFieldListItemResponse(rsp *http.Response) (*GetCandidateCustomFieldListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateCustomFieldListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCandidateCustomFieldListItemResponse parses an HTTP response from a PutCandidateCustomFieldListItemWithResponse call
func ParsePutCandidateCustomFieldListItemResponse(rsp *http.Response) (*PutCandidateCustomFieldListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCandidateCustomFieldListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateAttachmentCategoryListResponse parses an HTTP response from a GetCandidateAttachmentCategoryListWithResponse call
func ParseGetCandidateAttachmentCategoryListResponse(rsp *http.Response) (*GetCandidateAttachmentCategoryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateAttachmentCategoryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateAttachmentCategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateNoteTypeListResponse parses an HTTP response from a GetCandidateNoteTypeListWithResponse call
func ParseGetCandidateNoteTypeListResponse(rsp *http.Response) (*GetCandidateNoteTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateNoteTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteTypeListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateRatingListResponse parses an HTTP response from a GetCandidateRatingListWithResponse call
func ParseGetCandidateRatingListResponse(rsp *http.Response) (*GetCandidateRatingListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateRatingListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameModelListOf
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateSalutationListResponse parses an HTTP response from a GetCandidateSalutationListWithResponse call
func ParseGetCandidateSalutationListResponse(rsp *http.Response) (*GetCandidateSalutationListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateSalutationListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameModelListOf
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateSourceListResponse parses an HTTP response from a GetCandidateSourceListWithResponse call
func ParseGetCandidateSourceListResponse(rsp *http.Response) (*GetCandidateSourceListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateSourceListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameModelListOf
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateStatusListResponse parses an HTTP response from a GetCandidateStatusListWithResponse call
func ParseGetCandidateStatusListResponse(rsp *http.Response) (*GetCandidateStatusListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateStatusListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateStatusListItemResponse parses an HTTP response from a GetCandidateStatusListItemWithResponse call
func ParseGetCandidateStatusListItemResponse(rsp *http.Response) (*GetCandidateStatusListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateStatusListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindCandidatesPayrollBillingsResponse parses an HTTP response from a FindCandidatesPayrollBillingsWithResponse call
func ParseFindCandidatesPayrollBillingsResponse(rsp *http.Response) (*FindCandidatesPayrollBillingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCandidatesPayrollBillingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidatePayrollBillingListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetCandidateResponse parses an HTTP response from a GetCandidateWithResponse call
func ParseGetCandidateResponse(rsp *http.Response) (*GetCandidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCandidateResponse parses an HTTP response from a UpdateCandidateWithResponse call
func ParseUpdateCandidateResponse(rsp *http.Response) (*UpdateCandidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCandidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCandidateActivityByCandidateIdResponse parses an HTTP response from a GetCandidateActivityByCandidateIdWithResponse call
func ParseGetCandidateActivityByCandidateIdResponse(rsp *http.Response) (*GetCandidateActivityByCandidateIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateActivityByCandidateIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateActivitySummaryListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCandidateActivityResponse parses an HTTP response from a AddCandidateActivityWithResponse call
func ParseAddCandidateActivityResponse(rsp *http.Response) (*AddCandidateActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCandidateActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CandidateActivityModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCandidateActivityResponse parses an HTTP response from a GetCandidateActivityWithResponse call
func ParseGetCandidateActivityResponse(rsp *http.Response) (*GetCandidateActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateActivityRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCandidateJobApplicationsResponse parses an HTTP response from a GetCandidateJobApplicationsWithResponse call
func ParseGetCandidateJobApplicationsResponse(rsp *http.Response) (*GetCandidateJobApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateJobApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCandidateJobOrdersResponse parses an HTTP response from a AddCandidateJobOrdersWithResponse call
func ParseAddCandidateJobOrdersResponse(rsp *http.Response) (*AddCandidateJobOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCandidateJobOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobApplicationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetActiveCandidateJobApplicationsResponse parses an HTTP response from a GetActiveCandidateJobApplicationsWithResponse call
func ParseGetActiveCandidateJobApplicationsResponse(rsp *http.Response) (*GetActiveCandidateJobApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActiveCandidateJobApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindCandidateAttachmentsResponse parses an HTTP response from a FindCandidateAttachmentsWithResponse call
func ParseFindCandidateAttachmentsResponse(rsp *http.Response) (*FindCandidateAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCandidateAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateAttachmentListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateAttachmentResponse parses an HTTP response from a GetCandidateAttachmentWithResponse call
func ParseGetCandidateAttachmentResponse(rsp *http.Response) (*GetCandidateAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddCandidateAttachmentResponse parses an HTTP response from a AddCandidateAttachmentWithResponse call
func ParseAddCandidateAttachmentResponse(rsp *http.Response) (*AddCandidateAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCandidateAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CandidateAttachmentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateCandidateAttachmentResponse parses an HTTP response from a UpdateCandidateAttachmentWithResponse call
func ParseUpdateCandidateAttachmentResponse(rsp *http.Response) (*UpdateCandidateAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCandidateAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateAttachmentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateAvailabilityResponse parses an HTTP response from a GetCandidateAvailabilityWithResponse call
func ParseGetCandidateAvailabilityResponse(rsp *http.Response) (*GetCandidateAvailabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateAvailabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateAvailabilityListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCandidateAvailabilityWeekResponse parses an HTTP response from a DeleteCandidateAvailabilityWeekWithResponse call
func ParseDeleteCandidateAvailabilityWeekResponse(rsp *http.Response) (*DeleteCandidateAvailabilityWeekResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCandidateAvailabilityWeekResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCandidateAvailabilityWeekResponse parses an HTTP response from a UpdateCandidateAvailabilityWeekWithResponse call
func ParseUpdateCandidateAvailabilityWeekResponse(rsp *http.Response) (*UpdateCandidateAvailabilityWeekResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCandidateAvailabilityWeekResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCandidateFloatsResponse parses an HTTP response from a GetCandidateFloatsWithResponse call
func ParseGetCandidateFloatsResponse(rsp *http.Response) (*GetCandidateFloatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateFloatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FloatListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateInterviewsResponse parses an HTTP response from a GetCandidateInterviewsWithResponse call
func ParseGetCandidateInterviewsResponse(rsp *http.Response) (*GetCandidateInterviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateInterviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateNotesResponse parses an HTTP response from a GetCandidateNotesWithResponse call
func ParseGetCandidateNotesResponse(rsp *http.Response) (*GetCandidateNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCandidateNoteResponse parses an HTTP response from a AddCandidateNoteWithResponse call
func ParseAddCandidateNoteResponse(rsp *http.Response) (*AddCandidateNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCandidateNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NoteModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCandidatePayrollBillingResponse parses an HTTP response from a GetCandidatePayrollBillingWithResponse call
func ParseGetCandidatePayrollBillingResponse(rsp *http.Response) (*GetCandidatePayrollBillingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidatePayrollBillingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidatePayrollBillingModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteCandidatePhotoResponse parses an HTTP response from a DeleteCandidatePhotoWithResponse call
func ParseDeleteCandidatePhotoResponse(rsp *http.Response) (*DeleteCandidatePhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCandidatePhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCandidatePhotoResponse parses an HTTP response from a GetCandidatePhotoWithResponse call
func ParseGetCandidatePhotoResponse(rsp *http.Response) (*GetCandidatePhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidatePhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseHeadCandidatePhotoResponse parses an HTTP response from a HeadCandidatePhotoWithResponse call
func ParseHeadCandidatePhotoResponse(rsp *http.Response) (*HeadCandidatePhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadCandidatePhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCandidatePhotoResponse parses an HTTP response from a UpdateCandidatePhotoWithResponse call
func ParseUpdateCandidatePhotoResponse(rsp *http.Response) (*UpdateCandidatePhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCandidatePhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCandidatePlacementsResponse parses an HTTP response from a GetCandidatePlacementsWithResponse call
func ParseGetCandidatePlacementsResponse(rsp *http.Response) (*GetCandidatePlacementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidatePlacementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandidateApprovedPlacementsResponse parses an HTTP response from a GetCandidateApprovedPlacementsWithResponse call
func ParseGetCandidateApprovedPlacementsResponse(rsp *http.Response) (*GetCandidateApprovedPlacementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateApprovedPlacementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePrivacyDeleteCandidateResponse parses an HTTP response from a PrivacyDeleteCandidateWithResponse call
func ParsePrivacyDeleteCandidateResponse(rsp *http.Response) (*PrivacyDeleteCandidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PrivacyDeleteCandidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCandidateSkillsResponse parses an HTTP response from a GetCandidateSkillsWithResponse call
func ParseGetCandidateSkillsResponse(rsp *http.Response) (*GetCandidateSkillsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateSkillsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCandidateSkillsResponse parses an HTTP response from a DeleteCandidateSkillsWithResponse call
func ParseDeleteCandidateSkillsResponse(rsp *http.Response) (*DeleteCandidateSkillsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCandidateSkillsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCandidateSkillsResponse parses an HTTP response from a PutCandidateSkillsWithResponse call
func ParsePutCandidateSkillsResponse(rsp *http.Response) (*PutCandidateSkillsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCandidateSkillsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCandidateCategoryResponse parses an HTTP response from a DeleteCandidateCategoryWithResponse call
func ParseDeleteCandidateCategoryResponse(rsp *http.Response) (*DeleteCandidateCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCandidateCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCandidateStatusResponse parses an HTTP response from a PutCandidateStatusWithResponse call
func ParsePutCandidateStatusResponse(rsp *http.Response) (*PutCandidateStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCandidateStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCandidateSubmissionsResponse parses an HTTP response from a GetCandidateSubmissionsWithResponse call
func ParseGetCandidateSubmissionsResponse(rsp *http.Response) (*GetCandidateSubmissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateSubmissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmissionListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCandidateUserTaskResponse parses an HTTP response from a AddCandidateUserTaskWithResponse call
func ParseAddCandidateUserTaskResponse(rsp *http.Response) (*AddCandidateUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCandidateUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CandidateUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCandidateUserTaskResponse parses an HTTP response from a GetCandidateUserTaskWithResponse call
func ParseGetCandidateUserTaskResponse(rsp *http.Response) (*GetCandidateUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateUserTaskRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCandidateUserTaskResponse parses an HTTP response from a UpdateCandidateUserTaskWithResponse call
func ParseUpdateCandidateUserTaskResponse(rsp *http.Response) (*UpdateCandidateUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCandidateUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CandidateUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCandidateVideosResponse parses an HTTP response from a GetCandidateVideosWithResponse call
func ParseGetCandidateVideosResponse(rsp *http.Response) (*GetCandidateVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateVideoListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLatestCandidateVideoResponse parses an HTTP response from a GetLatestCandidateVideoWithResponse call
func ParseGetLatestCandidateVideoResponse(rsp *http.Response) (*GetLatestCandidateVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestCandidateVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateVideoRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCandidateVideoResponse parses an HTTP response from a AddCandidateVideoWithResponse call
func ParseAddCandidateVideoResponse(rsp *http.Response) (*AddCandidateVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCandidateVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateVideoModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindCategoriesResponse parses an HTTP response from a FindCategoriesWithResponse call
func ParseFindCategoriesResponse(rsp *http.Response) (*FindCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindCompaniesResponse parses an HTTP response from a FindCompaniesWithResponse call
func ParseFindCompaniesResponse(rsp *http.Response) (*FindCompaniesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCompaniesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCompanyResponse parses an HTTP response from a AddCompanyWithResponse call
func ParseAddCompanyResponse(rsp *http.Response) (*AddCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompanyRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindCompanyActivityResponse parses an HTTP response from a FindCompanyActivityWithResponse call
func ParseFindCompanyActivityResponse(rsp *http.Response) (*FindCompanyActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCompanyActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyActivityListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindCompanyActivitySettingsResponse parses an HTTP response from a FindCompanyActivitySettingsWithResponse call
func ParseFindCompanyActivitySettingsResponse(rsp *http.Response) (*FindCompanyActivitySettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCompanyActivitySettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyActivitySettingsListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyActivitySettingResponse parses an HTTP response from a GetCompanyActivitySettingWithResponse call
func ParseGetCompanyActivitySettingResponse(rsp *http.Response) (*GetCompanyActivitySettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyActivitySettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyActivitySettingModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletedCompaniesResponse parses an HTTP response from a DeletedCompaniesWithResponse call
func ParseDeletedCompaniesResponse(rsp *http.Response) (*DeletedCompaniesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletedCompaniesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeletedCompanyListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyCustomFieldListResponse parses an HTTP response from a GetCompanyCustomFieldListWithResponse call
func ParseGetCompanyCustomFieldListResponse(rsp *http.Response) (*GetCompanyCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyCustomFieldListItemResponse parses an HTTP response from a GetCompanyCustomFieldListItemWithResponse call
func ParseGetCompanyCustomFieldListItemResponse(rsp *http.Response) (*GetCompanyCustomFieldListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyCustomFieldListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCompanyCustomFieldListResponse parses an HTTP response from a PutCompanyCustomFieldListWithResponse call
func ParsePutCompanyCustomFieldListResponse(rsp *http.Response) (*PutCompanyCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCompanyCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyAttachmentCategoryListResponse parses an HTTP response from a GetCompanyAttachmentCategoryListWithResponse call
func ParseGetCompanyAttachmentCategoryListResponse(rsp *http.Response) (*GetCompanyAttachmentCategoryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyAttachmentCategoryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyAttachmentCategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyNoteTypeListResponse parses an HTTP response from a GetCompanyNoteTypeListWithResponse call
func ParseGetCompanyNoteTypeListResponse(rsp *http.Response) (*GetCompanyNoteTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyNoteTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteTypeListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyStatusListResponse parses an HTTP response from a GetCompanyStatusListWithResponse call
func ParseGetCompanyStatusListResponse(rsp *http.Response) (*GetCompanyStatusListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyStatusListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyStatusListItemResponse parses an HTTP response from a GetCompanyStatusListItemWithResponse call
func ParseGetCompanyStatusListItemResponse(rsp *http.Response) (*GetCompanyStatusListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyStatusListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyResponse parses an HTTP response from a GetCompanyWithResponse call
func ParseGetCompanyResponse(rsp *http.Response) (*GetCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCompanyResponse parses an HTTP response from a UpdateCompanyWithResponse call
func ParseUpdateCompanyResponse(rsp *http.Response) (*UpdateCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCompanyActivityByCompanyIdResponse parses an HTTP response from a GetCompanyActivityByCompanyIdWithResponse call
func ParseGetCompanyActivityByCompanyIdResponse(rsp *http.Response) (*GetCompanyActivityByCompanyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyActivityByCompanyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyActivitySummaryListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCompanyActivityResponse parses an HTTP response from a AddCompanyActivityWithResponse call
func ParseAddCompanyActivityResponse(rsp *http.Response) (*AddCompanyActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCompanyActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompanyActivityModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCompanyActivityResponse parses an HTTP response from a GetCompanyActivityWithResponse call
func ParseGetCompanyActivityResponse(rsp *http.Response) (*GetCompanyActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyActivityRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCompanyAddressesResponse parses an HTTP response from a GetCompanyAddressesWithResponse call
func ParseGetCompanyAddressesResponse(rsp *http.Response) (*GetCompanyAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyAddressListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCompanyAddressResponse parses an HTTP response from a AddCompanyAddressWithResponse call
func ParseAddCompanyAddressResponse(rsp *http.Response) (*AddCompanyAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCompanyAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompanyAddressRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRemoveCompanyAddressResponse parses an HTTP response from a RemoveCompanyAddressWithResponse call
func ParseRemoveCompanyAddressResponse(rsp *http.Response) (*RemoveCompanyAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveCompanyAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCompanyAddressResponse parses an HTTP response from a GetCompanyAddressWithResponse call
func ParseGetCompanyAddressResponse(rsp *http.Response) (*GetCompanyAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyAddressRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCompanyAddressResponse parses an HTTP response from a UpdateCompanyAddressWithResponse call
func ParseUpdateCompanyAddressResponse(rsp *http.Response) (*UpdateCompanyAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCompanyAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindCompanyAttachmentsResponse parses an HTTP response from a FindCompanyAttachmentsWithResponse call
func ParseFindCompanyAttachmentsResponse(rsp *http.Response) (*FindCompanyAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCompanyAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyAttachmentListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyAttachmentResponse parses an HTTP response from a GetCompanyAttachmentWithResponse call
func ParseGetCompanyAttachmentResponse(rsp *http.Response) (*GetCompanyAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddCompanyAttachmentResponse parses an HTTP response from a AddCompanyAttachmentWithResponse call
func ParseAddCompanyAttachmentResponse(rsp *http.Response) (*AddCompanyAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCompanyAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompanyAttachmentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateCompanyAttachmentResponse parses an HTTP response from a UpdateCompanyAttachmentWithResponse call
func ParseUpdateCompanyAttachmentResponse(rsp *http.Response) (*UpdateCompanyAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCompanyAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCompanyContactsResponse parses an HTTP response from a GetCompanyContactsWithResponse call
func ParseGetCompanyContactsResponse(rsp *http.Response) (*GetCompanyContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyFloatsResponse parses an HTTP response from a GetCompanyFloatsWithResponse call
func ParseGetCompanyFloatsResponse(rsp *http.Response) (*GetCompanyFloatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyFloatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FloatListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyJobOrdersResponse parses an HTTP response from a GetCompanyJobOrdersWithResponse call
func ParseGetCompanyJobOrdersResponse(rsp *http.Response) (*GetCompanyJobOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyJobOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyActiveJobOrdersResponse parses an HTTP response from a GetCompanyActiveJobOrdersWithResponse call
func ParseGetCompanyActiveJobOrdersResponse(rsp *http.Response) (*GetCompanyActiveJobOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyActiveJobOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCompanyLogoResponse parses an HTTP response from a DeleteCompanyLogoWithResponse call
func ParseDeleteCompanyLogoResponse(rsp *http.Response) (*DeleteCompanyLogoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCompanyLogoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCompanyLogoResponse parses an HTTP response from a GetCompanyLogoWithResponse call
func ParseGetCompanyLogoResponse(rsp *http.Response) (*GetCompanyLogoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyLogoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseHeadCompanyLogoResponse parses an HTTP response from a HeadCompanyLogoWithResponse call
func ParseHeadCompanyLogoResponse(rsp *http.Response) (*HeadCompanyLogoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadCompanyLogoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCompanyLogoResponse parses an HTTP response from a UpdateCompanyLogoWithResponse call
func ParseUpdateCompanyLogoResponse(rsp *http.Response) (*UpdateCompanyLogoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCompanyLogoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCompanyNotesResponse parses an HTTP response from a GetCompanyNotesWithResponse call
func ParseGetCompanyNotesResponse(rsp *http.Response) (*GetCompanyNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCompanyNoteResponse parses an HTTP response from a AddCompanyNoteWithResponse call
func ParseAddCompanyNoteResponse(rsp *http.Response) (*AddCompanyNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCompanyNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NoteModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCompanyPlacementsResponse parses an HTTP response from a GetCompanyPlacementsWithResponse call
func ParseGetCompanyPlacementsResponse(rsp *http.Response) (*GetCompanyPlacementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyPlacementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyApprovedPlacementsResponse parses an HTTP response from a GetCompanyApprovedPlacementsWithResponse call
func ParseGetCompanyApprovedPlacementsResponse(rsp *http.Response) (*GetCompanyApprovedPlacementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyApprovedPlacementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyRequisitionsResponse parses an HTTP response from a GetCompanyRequisitionsWithResponse call
func ParseGetCompanyRequisitionsResponse(rsp *http.Response) (*GetCompanyRequisitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyRequisitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequisitionListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanySkillsResponse parses an HTTP response from a GetCompanySkillsWithResponse call
func ParseGetCompanySkillsResponse(rsp *http.Response) (*GetCompanySkillsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanySkillsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCompanyStatusResponse parses an HTTP response from a PutCompanyStatusWithResponse call
func ParsePutCompanyStatusResponse(rsp *http.Response) (*PutCompanyStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCompanyStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCompanySubmissionsResponse parses an HTTP response from a GetCompanySubmissionsWithResponse call
func ParseGetCompanySubmissionsResponse(rsp *http.Response) (*GetCompanySubmissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanySubmissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmissionListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanySubsidiariesResponse parses an HTTP response from a GetCompanySubsidiariesWithResponse call
func ParseGetCompanySubsidiariesResponse(rsp *http.Response) (*GetCompanySubsidiariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanySubsidiariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCompanyUserTaskResponse parses an HTTP response from a AddCompanyUserTaskWithResponse call
func ParseAddCompanyUserTaskResponse(rsp *http.Response) (*AddCompanyUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCompanyUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompanyUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCompanyUserTaskResponse parses an HTTP response from a GetCompanyUserTaskWithResponse call
func ParseGetCompanyUserTaskResponse(rsp *http.Response) (*GetCompanyUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyUserTaskRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCompanyUserTaskResponse parses an HTTP response from a UpdateCompanyUserTaskWithResponse call
func ParseUpdateCompanyUserTaskResponse(rsp *http.Response) (*UpdateCompanyUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCompanyUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompanyUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListCompanyWorkflowsResponse parses an HTTP response from a ListCompanyWorkflowsWithResponse call
func ParseListCompanyWorkflowsResponse(rsp *http.Response) (*ListCompanyWorkflowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCompanyWorkflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyWorkflowListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCompanyWorkflowResponse parses an HTTP response from a AddCompanyWorkflowWithResponse call
func ParseAddCompanyWorkflowResponse(rsp *http.Response) (*AddCompanyWorkflowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCompanyWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompanyWorkflowRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCompanyWorkflowResponse parses an HTTP response from a GetCompanyWorkflowWithResponse call
func ParseGetCompanyWorkflowResponse(rsp *http.Response) (*GetCompanyWorkflowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyWorkflowRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCompanyWorkflowResponse parses an HTTP response from a UpdateCompanyWorkflowWithResponse call
func ParseUpdateCompanyWorkflowResponse(rsp *http.Response) (*UpdateCompanyWorkflowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCompanyWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyWorkflowRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindContactsResponse parses an HTTP response from a FindContactsWithResponse call
func ParseFindContactsResponse(rsp *http.Response) (*FindContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddContactResponse parses an HTTP response from a AddContactWithResponse call
func ParseAddContactResponse(rsp *http.Response) (*AddContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContactRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindContactActivityResponse parses an HTTP response from a FindContactActivityWithResponse call
func ParseFindContactActivityResponse(rsp *http.Response) (*FindContactActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindContactActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactActivityListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindContactActivitySettingsResponse parses an HTTP response from a FindContactActivitySettingsWithResponse call
func ParseFindContactActivitySettingsResponse(rsp *http.Response) (*FindContactActivitySettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindContactActivitySettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactActivitySettingsListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactActivitySettingResponse parses an HTTP response from a GetContactActivitySettingWithResponse call
func ParseGetContactActivitySettingResponse(rsp *http.Response) (*GetContactActivitySettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactActivitySettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactActivitySettingModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletedContactsResponse parses an HTTP response from a DeletedContactsWithResponse call
func ParseDeletedContactsResponse(rsp *http.Response) (*DeletedContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletedContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeletedContactListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactCustomFieldListResponse parses an HTTP response from a GetContactCustomFieldListWithResponse call
func ParseGetContactCustomFieldListResponse(rsp *http.Response) (*GetContactCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutContactCustomFieldListResponse parses an HTTP response from a PutContactCustomFieldListWithResponse call
func ParsePutContactCustomFieldListResponse(rsp *http.Response) (*PutContactCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutContactCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactCustomFieldListItemResponse parses an HTTP response from a GetContactCustomFieldListItemWithResponse call
func ParseGetContactCustomFieldListItemResponse(rsp *http.Response) (*GetContactCustomFieldListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactCustomFieldListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactAttachmentCategoryListResponse parses an HTTP response from a GetContactAttachmentCategoryListWithResponse call
func ParseGetContactAttachmentCategoryListResponse(rsp *http.Response) (*GetContactAttachmentCategoryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactAttachmentCategoryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactAttachmentCategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactNoteTypeListResponse parses an HTTP response from a GetContactNoteTypeListWithResponse call
func ParseGetContactNoteTypeListResponse(rsp *http.Response) (*GetContactNoteTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactNoteTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteTypeListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactSalutationListResponse parses an HTTP response from a GetContactSalutationListWithResponse call
func ParseGetContactSalutationListResponse(rsp *http.Response) (*GetContactSalutationListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactSalutationListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameModelListOf
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactStatusListResponse parses an HTTP response from a GetContactStatusListWithResponse call
func ParseGetContactStatusListResponse(rsp *http.Response) (*GetContactStatusListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactStatusListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactStatusListItemResponse parses an HTTP response from a GetContactStatusListItemWithResponse call
func ParseGetContactStatusListItemResponse(rsp *http.Response) (*GetContactStatusListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactStatusListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactResponse parses an HTTP response from a GetContactWithResponse call
func ParseGetContactResponse(rsp *http.Response) (*GetContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContactResponse parses an HTTP response from a UpdateContactWithResponse call
func ParseUpdateContactResponse(rsp *http.Response) (*UpdateContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetContactActivityByContactIdResponse parses an HTTP response from a GetContactActivityByContactIdWithResponse call
func ParseGetContactActivityByContactIdResponse(rsp *http.Response) (*GetContactActivityByContactIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactActivityByContactIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactActivitySummaryListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddContactActivityResponse parses an HTTP response from a AddContactActivityWithResponse call
func ParseAddContactActivityResponse(rsp *http.Response) (*AddContactActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddContactActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContactActivityModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetContactActivityResponse parses an HTTP response from a GetContactActivityWithResponse call
func ParseGetContactActivityResponse(rsp *http.Response) (*GetContactActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactActivityRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFindContactAttachmentsResponse parses an HTTP response from a FindContactAttachmentsWithResponse call
func ParseFindContactAttachmentsResponse(rsp *http.Response) (*FindContactAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindContactAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactAttachmentListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactAttachmentResponse parses an HTTP response from a GetContactAttachmentWithResponse call
func ParseGetContactAttachmentResponse(rsp *http.Response) (*GetContactAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddContactAttachmentResponse parses an HTTP response from a AddContactAttachmentWithResponse call
func ParseAddContactAttachmentResponse(rsp *http.Response) (*AddContactAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddContactAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContactAttachmentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateContactAttachmentResponse parses an HTTP response from a UpdateContactAttachmentWithResponse call
func ParseUpdateContactAttachmentResponse(rsp *http.Response) (*UpdateContactAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactInterviewsResponse parses an HTTP response from a GetContactInterviewsWithResponse call
func ParseGetContactInterviewsResponse(rsp *http.Response) (*GetContactInterviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactInterviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactJobOrdersResponse parses an HTTP response from a GetContactJobOrdersWithResponse call
func ParseGetContactJobOrdersResponse(rsp *http.Response) (*GetContactJobOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactJobOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactActiveJobOrdersResponse parses an HTTP response from a GetContactActiveJobOrdersWithResponse call
func ParseGetContactActiveJobOrdersResponse(rsp *http.Response) (*GetContactActiveJobOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactActiveJobOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactNotesResponse parses an HTTP response from a GetContactNotesWithResponse call
func ParseGetContactNotesResponse(rsp *http.Response) (*GetContactNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddContactNoteResponse parses an HTTP response from a AddContactNoteWithResponse call
func ParseAddContactNoteResponse(rsp *http.Response) (*AddContactNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddContactNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NoteModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeletteContactPhotoResponse parses an HTTP response from a DeletteContactPhotoWithResponse call
func ParseDeletteContactPhotoResponse(rsp *http.Response) (*DeletteContactPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletteContactPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactPhotoResponse parses an HTTP response from a GetContactPhotoWithResponse call
func ParseGetContactPhotoResponse(rsp *http.Response) (*GetContactPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseHeadContactPhotoResponse parses an HTTP response from a HeadContactPhotoWithResponse call
func ParseHeadContactPhotoResponse(rsp *http.Response) (*HeadContactPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadContactPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateContactPhotoResponse parses an HTTP response from a UpdateContactPhotoWithResponse call
func ParseUpdateContactPhotoResponse(rsp *http.Response) (*UpdateContactPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactSkillsResponse parses an HTTP response from a GetContactSkillsWithResponse call
func ParseGetContactSkillsResponse(rsp *http.Response) (*GetContactSkillsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactSkillsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteContactSkillsResponse parses an HTTP response from a DeleteContactSkillsWithResponse call
func ParseDeleteContactSkillsResponse(rsp *http.Response) (*DeleteContactSkillsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactSkillsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutContactSkillsResponse parses an HTTP response from a PutContactSkillsWithResponse call
func ParsePutContactSkillsResponse(rsp *http.Response) (*PutContactSkillsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutContactSkillsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteContactCategoryResponse parses an HTTP response from a DeleteContactCategoryWithResponse call
func ParseDeleteContactCategoryResponse(rsp *http.Response) (*DeleteContactCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutContactStatusResponse parses an HTTP response from a PutContactStatusWithResponse call
func ParsePutContactStatusResponse(rsp *http.Response) (*PutContactStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutContactStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddContactUserTaskResponse parses an HTTP response from a AddContactUserTaskWithResponse call
func ParseAddContactUserTaskResponse(rsp *http.Response) (*AddContactUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddContactUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContactUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetContactUserTaskResponse parses an HTTP response from a GetContactUserTaskWithResponse call
func ParseGetContactUserTaskResponse(rsp *http.Response) (*GetContactUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactUserTaskRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateContactUserTaskResponse parses an HTTP response from a UpdateContactUserTaskWithResponse call
func ParseUpdateContactUserTaskResponse(rsp *http.Response) (*UpdateContactUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContactUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindCountriesResponse parses an HTTP response from a FindCountriesWithResponse call
func ParseFindCountriesResponse(rsp *http.Response) (*FindCountriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCountriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CountryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFloatsResponse parses an HTTP response from a GetFloatsWithResponse call
func ParseGetFloatsResponse(rsp *http.Response) (*GetFloatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFloatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FloatListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFloatResponse parses an HTTP response from a GetFloatWithResponse call
func ParseGetFloatResponse(rsp *http.Response) (*GetFloatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFloatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FloatRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindFoldersResponse parses an HTTP response from a FindFoldersWithResponse call
func ParseFindFoldersResponse(rsp *http.Response) (*FindFoldersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FolderListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFolderResponse parses an HTTP response from a GetFolderWithResponse call
func ParseGetFolderResponse(rsp *http.Response) (*GetFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FolderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchFolderResponse parses an HTTP response from a PatchFolderWithResponse call
func ParsePatchFolderResponse(rsp *http.Response) (*PatchFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindInterviewsResponse parses an HTTP response from a FindInterviewsWithResponse call
func ParseFindInterviewsResponse(rsp *http.Response) (*FindInterviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindInterviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteInterviewResponse parses an HTTP response from a DeleteInterviewWithResponse call
func ParseDeleteInterviewResponse(rsp *http.Response) (*DeleteInterviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInterviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInterviewResponse parses an HTTP response from a GetInterviewWithResponse call
func ParseGetInterviewResponse(rsp *http.Response) (*GetInterviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInterviewEvaluationsResponse parses an HTTP response from a GetInterviewEvaluationsWithResponse call
func ParseGetInterviewEvaluationsResponse(rsp *http.Response) (*GetInterviewEvaluationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterviewEvaluationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewEvaluationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExternalInterviewEvaluationResponse parses an HTTP response from a GetExternalInterviewEvaluationWithResponse call
func ParseGetExternalInterviewEvaluationResponse(rsp *http.Response) (*GetExternalInterviewEvaluationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExternalInterviewEvaluationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewEvaluationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutExternalInterviewEvaluationResponse parses an HTTP response from a PutExternalInterviewEvaluationWithResponse call
func ParsePutExternalInterviewEvaluationResponse(rsp *http.Response) (*PutExternalInterviewEvaluationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutExternalInterviewEvaluationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewEvaluationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInternalInterviewEvaluationResponse parses an HTTP response from a GetInternalInterviewEvaluationWithResponse call
func ParseGetInternalInterviewEvaluationResponse(rsp *http.Response) (*GetInternalInterviewEvaluationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInternalInterviewEvaluationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewEvaluationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutInternalInterviewEvaluationResponse parses an HTTP response from a PutInternalInterviewEvaluationWithResponse call
func ParsePutInternalInterviewEvaluationResponse(rsp *http.Response) (*PutInternalInterviewEvaluationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInternalInterviewEvaluationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewEvaluationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobAdsResponse parses an HTTP response from a GetJobAdsWithResponse call
func ParseGetJobAdsResponse(rsp *http.Response) (*GetJobAdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobAdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobAdListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddJobAdDraftResponse parses an HTTP response from a AddJobAdDraftWithResponse call
func ParseAddJobAdDraftResponse(rsp *http.Response) (*AddJobAdDraftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobAdDraftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobAdRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetJobAdResponse parses an HTTP response from a GetJobAdWithResponse call
func ParseGetJobAdResponse(rsp *http.Response) (*GetJobAdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobAdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobAdRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateJobAdDraftResponse parses an HTTP response from a UpdateJobAdDraftWithResponse call
func ParseUpdateJobAdDraftResponse(rsp *http.Response) (*UpdateJobAdDraftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJobAdDraftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJobAdJobApplicationsResponse parses an HTTP response from a GetJobAdJobApplicationsWithResponse call
func ParseGetJobAdJobApplicationsResponse(rsp *http.Response) (*GetJobAdJobApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobAdJobApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobAdActiveJobApplicationsResponse parses an HTTP response from a GetJobAdActiveJobApplicationsWithResponse call
func ParseGetJobAdActiveJobApplicationsResponse(rsp *http.Response) (*GetJobAdActiveJobApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobAdActiveJobApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindJobBoardsResponse parses an HTTP response from a FindJobBoardsWithResponse call
func ParseFindJobBoardsResponse(rsp *http.Response) (*FindJobBoardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindJobBoardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobBoardListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobBoardResponse parses an HTTP response from a GetJobBoardWithResponse call
func ParseGetJobBoardResponse(rsp *http.Response) (*GetJobBoardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobBoardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobBoardModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindJobBoardJobAdsResponse parses an HTTP response from a FindJobBoardJobAdsWithResponse call
func ParseFindJobBoardJobAdsResponse(rsp *http.Response) (*FindJobBoardJobAdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindJobBoardJobAdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobBoardJobAdListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobBoardJobAdResponse parses an HTTP response from a GetJobBoardJobAdWithResponse call
func ParseGetJobBoardJobAdResponse(rsp *http.Response) (*GetJobBoardJobAdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobBoardJobAdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobBoardJobAdRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubmitJobBoardJobApplicationResponse parses an HTTP response from a SubmitJobBoardJobApplicationWithResponse call
func ParseSubmitJobBoardJobApplicationResponse(rsp *http.Response) (*SubmitJobBoardJobApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitJobBoardJobApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmittedJobApplicationModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAttachJobBoardJobApplicationDocumentResponse parses an HTTP response from a AttachJobBoardJobApplicationDocumentWithResponse call
func ParseAttachJobBoardJobApplicationDocumentResponse(rsp *http.Response) (*AttachJobBoardJobApplicationDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachJobBoardJobApplicationDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindJobOrdersResponse parses an HTTP response from a FindJobOrdersWithResponse call
func ParseFindJobOrdersResponse(rsp *http.Response) (*FindJobOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindJobOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddJobOrderResponse parses an HTTP response from a AddJobOrderWithResponse call
func ParseAddJobOrderResponse(rsp *http.Response) (*AddJobOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobOrderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindJobOrderActivityResponse parses an HTTP response from a FindJobOrderActivityWithResponse call
func ParseFindJobOrderActivityResponse(rsp *http.Response) (*FindJobOrderActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindJobOrderActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderActivityListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindJobOrderActivitySettingsResponse parses an HTTP response from a FindJobOrderActivitySettingsWithResponse call
func ParseFindJobOrderActivitySettingsResponse(rsp *http.Response) (*FindJobOrderActivitySettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindJobOrderActivitySettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderActivitySettingsListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobOrderActivitySettingResponse parses an HTTP response from a GetJobOrderActivitySettingWithResponse call
func ParseGetJobOrderActivitySettingResponse(rsp *http.Response) (*GetJobOrderActivitySettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderActivitySettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderActivitySettingModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletedJobOrdersResponse parses an HTTP response from a DeletedJobOrdersWithResponse call
func ParseDeletedJobOrdersResponse(rsp *http.Response) (*DeletedJobOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletedJobOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeletedJobOrderListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobOrderCustomFieldListResponse parses an HTTP response from a GetJobOrderCustomFieldListWithResponse call
func ParseGetJobOrderCustomFieldListResponse(rsp *http.Response) (*GetJobOrderCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutJobOrderCustomFieldListResponse parses an HTTP response from a PutJobOrderCustomFieldListWithResponse call
func ParsePutJobOrderCustomFieldListResponse(rsp *http.Response) (*PutJobOrderCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutJobOrderCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobOrderCustomFieldItemResponse parses an HTTP response from a GetJobOrderCustomFieldItemWithResponse call
func ParseGetJobOrderCustomFieldItemResponse(rsp *http.Response) (*GetJobOrderCustomFieldItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderCustomFieldItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobOrderAttachmentCategoryListResponse parses an HTTP response from a GetJobOrderAttachmentCategoryListWithResponse call
func ParseGetJobOrderAttachmentCategoryListResponse(rsp *http.Response) (*GetJobOrderAttachmentCategoryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderAttachmentCategoryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderAttachmentCategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobOrderNoteTypeListResponse parses an HTTP response from a GetJobOrderNoteTypeListWithResponse call
func ParseGetJobOrderNoteTypeListResponse(rsp *http.Response) (*GetJobOrderNoteTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderNoteTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteTypeListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobOrderSourceListResponse parses an HTTP response from a GetJobOrderSourceListWithResponse call
func ParseGetJobOrderSourceListResponse(rsp *http.Response) (*GetJobOrderSourceListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderSourceListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameModelListOf
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobOrderStatusListResponse parses an HTTP response from a GetJobOrderStatusListWithResponse call
func ParseGetJobOrderStatusListResponse(rsp *http.Response) (*GetJobOrderStatusListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderStatusListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobOrderStatusItemResponse parses an HTTP response from a GetJobOrderStatusItemWithResponse call
func ParseGetJobOrderStatusItemResponse(rsp *http.Response) (*GetJobOrderStatusItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderStatusItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest StatusRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetJobOrderResponse parses an HTTP response from a GetJobOrderWithResponse call
func ParseGetJobOrderResponse(rsp *http.Response) (*GetJobOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateJobOrderResponse parses an HTTP response from a UpdateJobOrderWithResponse call
func ParseUpdateJobOrderResponse(rsp *http.Response) (*UpdateJobOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJobOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetJobOrderActivityByJobIdResponse parses an HTTP response from a GetJobOrderActivityByJobIdWithResponse call
func ParseGetJobOrderActivityByJobIdResponse(rsp *http.Response) (*GetJobOrderActivityByJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderActivityByJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderActivitySummaryListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddJobOrderActivityResponse parses an HTTP response from a AddJobOrderActivityWithResponse call
func ParseAddJobOrderActivityResponse(rsp *http.Response) (*AddJobOrderActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobOrderActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobOrderActivityModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetJobOrderActivityResponse parses an HTTP response from a GetJobOrderActivityWithResponse call
func ParseGetJobOrderActivityResponse(rsp *http.Response) (*GetJobOrderActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderActivityRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetJobOrderJobApplicationsResponse parses an HTTP response from a GetJobOrderJobApplicationsWithResponse call
func ParseGetJobOrderJobApplicationsResponse(rsp *http.Response) (*GetJobOrderJobApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderJobApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddJobOrderCandidatesResponse parses an HTTP response from a AddJobOrderCandidatesWithResponse call
func ParseAddJobOrderCandidatesResponse(rsp *http.Response) (*AddJobOrderCandidatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobOrderCandidatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobApplicationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetJobOrderActiveJobApplicationsResponse parses an HTTP response from a GetJobOrderActiveJobApplicationsWithResponse call
func ParseGetJobOrderActiveJobApplicationsResponse(rsp *http.Response) (*GetJobOrderActiveJobApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderActiveJobApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubmitJobOrderCandidateResponse parses an HTTP response from a SubmitJobOrderCandidateWithResponse call
func ParseSubmitJobOrderCandidateResponse(rsp *http.Response) (*SubmitJobOrderCandidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitJobOrderCandidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobApplicationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindJobOrderAttachmentsResponse parses an HTTP response from a FindJobOrderAttachmentsWithResponse call
func ParseFindJobOrderAttachmentsResponse(rsp *http.Response) (*FindJobOrderAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindJobOrderAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderAttachmentListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobOrderAttachmentResponse parses an HTTP response from a GetJobOrderAttachmentWithResponse call
func ParseGetJobOrderAttachmentResponse(rsp *http.Response) (*GetJobOrderAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddJobOrderAttachmentResponse parses an HTTP response from a AddJobOrderAttachmentWithResponse call
func ParseAddJobOrderAttachmentResponse(rsp *http.Response) (*AddJobOrderAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobOrderAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobOrderAttachmentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateJobOrderAttachmentResponse parses an HTTP response from a UpdateJobOrderAttachmentWithResponse call
func ParseUpdateJobOrderAttachmentResponse(rsp *http.Response) (*UpdateJobOrderAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJobOrderAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInvoicesResponse parses an HTTP response from a InvoicesWithResponse call
func ParseInvoicesResponse(rsp *http.Response) (*InvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderInvoiceListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetJobOrderInvoiceResponse parses an HTTP response from a GetJobOrderInvoiceWithResponse call
func ParseGetJobOrderInvoiceResponse(rsp *http.Response) (*GetJobOrderInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderRetainedInvoiceRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetJobOrderNotesResponse parses an HTTP response from a GetJobOrderNotesWithResponse call
func ParseGetJobOrderNotesResponse(rsp *http.Response) (*GetJobOrderNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddJobOrderNoteResponse parses an HTTP response from a AddJobOrderNoteWithResponse call
func ParseAddJobOrderNoteResponse(rsp *http.Response) (*AddJobOrderNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobOrderNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NoteModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetJobOrderPlacementsResponse parses an HTTP response from a GetJobOrderPlacementsWithResponse call
func ParseGetJobOrderPlacementsResponse(rsp *http.Response) (*GetJobOrderPlacementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderPlacementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobOrderApprovedPlacementsResponse parses an HTTP response from a GetJobOrderApprovedPlacementsWithResponse call
func ParseGetJobOrderApprovedPlacementsResponse(rsp *http.Response) (*GetJobOrderApprovedPlacementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderApprovedPlacementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutJobOrderStatusResponse parses an HTTP response from a PutJobOrderStatusWithResponse call
func ParsePutJobOrderStatusResponse(rsp *http.Response) (*PutJobOrderStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutJobOrderStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetJobOrderSubmissionsResponse parses an HTTP response from a GetJobOrderSubmissionsWithResponse call
func ParseGetJobOrderSubmissionsResponse(rsp *http.Response) (*GetJobOrderSubmissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderSubmissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmissionListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddJobOrderUserTaskResponse parses an HTTP response from a AddJobOrderUserTaskWithResponse call
func ParseAddJobOrderUserTaskResponse(rsp *http.Response) (*AddJobOrderUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobOrderUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobOrderUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetJobOrderUserTaskResponse parses an HTTP response from a GetJobOrderUserTaskWithResponse call
func ParseGetJobOrderUserTaskResponse(rsp *http.Response) (*GetJobOrderUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderUserTaskRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateJobOrderUserTaskResponse parses an HTTP response from a UpdateJobOrderUserTaskWithResponse call
func ParseUpdateJobOrderUserTaskResponse(rsp *http.Response) (*UpdateJobOrderUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJobOrderUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobOrderUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteJobOrderPayrollBillingResponse parses an HTTP response from a DeleteJobOrderPayrollBillingWithResponse call
func ParseDeleteJobOrderPayrollBillingResponse(rsp *http.Response) (*DeleteJobOrderPayrollBillingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJobOrderPayrollBillingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJobOrderPayrollBillingResponse parses an HTTP response from a GetJobOrderPayrollBillingWithResponse call
func ParseGetJobOrderPayrollBillingResponse(rsp *http.Response) (*GetJobOrderPayrollBillingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobOrderPayrollBillingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderRateCardModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddJobOrderPayrollBillingResponse parses an HTTP response from a AddJobOrderPayrollBillingWithResponse call
func ParseAddJobOrderPayrollBillingResponse(rsp *http.Response) (*AddJobOrderPayrollBillingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddJobOrderPayrollBillingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderRateCardModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateJobOrderPayrollBillingResponse parses an HTTP response from a UpdateJobOrderPayrollBillingWithResponse call
func ParseUpdateJobOrderPayrollBillingResponse(rsp *http.Response) (*UpdateJobOrderPayrollBillingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJobOrderPayrollBillingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderRateCardModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindLocationsResponse parses an HTTP response from a FindLocationsWithResponse call
func ParseFindLocationsResponse(rsp *http.Response) (*FindLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindNotesResponse parses an HTTP response from a FindNotesWithResponse call
func ParseFindNotesResponse(rsp *http.Response) (*FindNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddNoteResponse parses an HTTP response from a AddNoteWithResponse call
func ParseAddNoteResponse(rsp *http.Response) (*AddNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NoteModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetNoteResponse parses an HTTP response from a GetNoteWithResponse call
func ParseGetNoteResponse(rsp *http.Response) (*GetNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateNoteResponse parses an HTTP response from a UpdateNoteWithResponse call
func ParseUpdateNoteResponse(rsp *http.Response) (*UpdateNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddNoteAttachmentResponse parses an HTTP response from a AddNoteAttachmentWithResponse call
func ParseAddNoteAttachmentResponse(rsp *http.Response) (*AddNoteAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddNoteAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNoteAttachmentResponse parses an HTTP response from a GetNoteAttachmentWithResponse call
func ParseGetNoteAttachmentResponse(rsp *http.Response) (*GetNoteAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNoteAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindOpportunitiesResponse parses an HTTP response from a FindOpportunitiesWithResponse call
func ParseFindOpportunitiesResponse(rsp *http.Response) (*FindOpportunitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindOpportunitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OpportunityListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddOpportunityResponse parses an HTTP response from a AddOpportunityWithResponse call
func ParseAddOpportunityResponse(rsp *http.Response) (*AddOpportunityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddOpportunityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedOpportunityModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetOpportunityResponse parses an HTTP response from a GetOpportunityWithResponse call
func ParseGetOpportunityResponse(rsp *http.Response) (*GetOpportunityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpportunityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OpportunitySummaryModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOpportunityResponse parses an HTTP response from a UpdateOpportunityWithResponse call
func ParseUpdateOpportunityResponse(rsp *http.Response) (*UpdateOpportunityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOpportunityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindPartnerActionsResponse parses an HTTP response from a FindPartnerActionsWithResponse call
func ParseFindPartnerActionsResponse(rsp *http.Response) (*FindPartnerActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindPartnerActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PartnerActionListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPartnerActionJobApplicationsResponse parses an HTTP response from a GetPartnerActionJobApplicationsWithResponse call
func ParseGetPartnerActionJobApplicationsResponse(rsp *http.Response) (*GetPartnerActionJobApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnerActionJobApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobApplicationListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompleteJobApplicationPartnerActionResponse parses an HTTP response from a CompleteJobApplicationPartnerActionWithResponse call
func ParseCompleteJobApplicationPartnerActionResponse(rsp *http.Response) (*CompleteJobApplicationPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteJobApplicationPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProgressJobApplicationPartnerActionResponse parses an HTTP response from a ProgressJobApplicationPartnerActionWithResponse call
func ParseProgressJobApplicationPartnerActionResponse(rsp *http.Response) (*ProgressJobApplicationPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProgressJobApplicationPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRejectJobApplicationPartnerActionResponse parses an HTTP response from a RejectJobApplicationPartnerActionWithResponse call
func ParseRejectJobApplicationPartnerActionResponse(rsp *http.Response) (*RejectJobApplicationPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RejectJobApplicationPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPartnerActionCandidatesResponse parses an HTTP response from a GetPartnerActionCandidatesWithResponse call
func ParseGetPartnerActionCandidatesResponse(rsp *http.Response) (*GetPartnerActionCandidatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnerActionCandidatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CandidateListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompleteCandidatePartnerActionResponse parses an HTTP response from a CompleteCandidatePartnerActionWithResponse call
func ParseCompleteCandidatePartnerActionResponse(rsp *http.Response) (*CompleteCandidatePartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteCandidatePartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProgressCandidatePartnerActionResponse parses an HTTP response from a ProgressCandidatePartnerActionWithResponse call
func ParseProgressCandidatePartnerActionResponse(rsp *http.Response) (*ProgressCandidatePartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProgressCandidatePartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRejectCandidatePartnerActionResponse parses an HTTP response from a RejectCandidatePartnerActionWithResponse call
func ParseRejectCandidatePartnerActionResponse(rsp *http.Response) (*RejectCandidatePartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RejectCandidatePartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPartnerActionCompaniesResponse parses an HTTP response from a GetPartnerActionCompaniesWithResponse call
func ParseGetPartnerActionCompaniesResponse(rsp *http.Response) (*GetPartnerActionCompaniesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnerActionCompaniesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompleteCompanyPartnerActionResponse parses an HTTP response from a CompleteCompanyPartnerActionWithResponse call
func ParseCompleteCompanyPartnerActionResponse(rsp *http.Response) (*CompleteCompanyPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteCompanyPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProgressCompanyPartnerActionResponse parses an HTTP response from a ProgressCompanyPartnerActionWithResponse call
func ParseProgressCompanyPartnerActionResponse(rsp *http.Response) (*ProgressCompanyPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProgressCompanyPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRejectCompanyPartnerActionResponse parses an HTTP response from a RejectCompanyPartnerActionWithResponse call
func ParseRejectCompanyPartnerActionResponse(rsp *http.Response) (*RejectCompanyPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RejectCompanyPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPartnerActionContactsResponse parses an HTTP response from a GetPartnerActionContactsWithResponse call
func ParseGetPartnerActionContactsResponse(rsp *http.Response) (*GetPartnerActionContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnerActionContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompleteContactPartnerActionResponse parses an HTTP response from a CompleteContactPartnerActionWithResponse call
func ParseCompleteContactPartnerActionResponse(rsp *http.Response) (*CompleteContactPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteContactPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProgressContactPartnerActionResponse parses an HTTP response from a ProgressContactPartnerActionWithResponse call
func ParseProgressContactPartnerActionResponse(rsp *http.Response) (*ProgressContactPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProgressContactPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRejectContactPartnerActionResponse parses an HTTP response from a RejectContactPartnerActionWithResponse call
func ParseRejectContactPartnerActionResponse(rsp *http.Response) (*RejectContactPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RejectContactPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPartnerActionJobAdsResponse parses an HTTP response from a GetPartnerActionJobAdsWithResponse call
func ParseGetPartnerActionJobAdsResponse(rsp *http.Response) (*GetPartnerActionJobAdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnerActionJobAdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobAdListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompleteJobAdPartnerActionResponse parses an HTTP response from a CompleteJobAdPartnerActionWithResponse call
func ParseCompleteJobAdPartnerActionResponse(rsp *http.Response) (*CompleteJobAdPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteJobAdPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProgressJobAdPartnerActionResponse parses an HTTP response from a ProgressJobAdPartnerActionWithResponse call
func ParseProgressJobAdPartnerActionResponse(rsp *http.Response) (*ProgressJobAdPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProgressJobAdPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRejectJobAdPartnerActionResponse parses an HTTP response from a RejectJobAdPartnerActionWithResponse call
func ParseRejectJobAdPartnerActionResponse(rsp *http.Response) (*RejectJobAdPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RejectJobAdPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPartnerActionJobOrdersResponse parses an HTTP response from a GetPartnerActionJobOrdersWithResponse call
func ParseGetPartnerActionJobOrdersResponse(rsp *http.Response) (*GetPartnerActionJobOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnerActionJobOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobOrderListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompleteJobOrderPartnerActionResponse parses an HTTP response from a CompleteJobOrderPartnerActionWithResponse call
func ParseCompleteJobOrderPartnerActionResponse(rsp *http.Response) (*CompleteJobOrderPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteJobOrderPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProgressJobOrderPartnerActionResponse parses an HTTP response from a ProgressJobOrderPartnerActionWithResponse call
func ParseProgressJobOrderPartnerActionResponse(rsp *http.Response) (*ProgressJobOrderPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProgressJobOrderPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRejectJobOrderPartnerActionResponse parses an HTTP response from a RejectJobOrderPartnerActionWithResponse call
func ParseRejectJobOrderPartnerActionResponse(rsp *http.Response) (*RejectJobOrderPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RejectJobOrderPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPartnerActionPlacementsResponse parses an HTTP response from a GetPartnerActionPlacementsWithResponse call
func ParseGetPartnerActionPlacementsResponse(rsp *http.Response) (*GetPartnerActionPlacementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnerActionPlacementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompletePlacementPartnerActionResponse parses an HTTP response from a CompletePlacementPartnerActionWithResponse call
func ParseCompletePlacementPartnerActionResponse(rsp *http.Response) (*CompletePlacementPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompletePlacementPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProgressPlacementPartnerActionResponse parses an HTTP response from a ProgressPlacementPartnerActionWithResponse call
func ParseProgressPlacementPartnerActionResponse(rsp *http.Response) (*ProgressPlacementPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProgressPlacementPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRejectPlacementPartnerActionResponse parses an HTTP response from a RejectPlacementPartnerActionWithResponse call
func ParseRejectPlacementPartnerActionResponse(rsp *http.Response) (*RejectPlacementPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RejectPlacementPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePartnerActionResponse parses an HTTP response from a DeletePartnerActionWithResponse call
func ParseDeletePartnerActionResponse(rsp *http.Response) (*DeletePartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPartnerActionResponse parses an HTTP response from a GetPartnerActionWithResponse call
func ParseGetPartnerActionResponse(rsp *http.Response) (*GetPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PartnerActionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddPartnerActionResponse parses an HTTP response from a AddPartnerActionWithResponse call
func ParseAddPartnerActionResponse(rsp *http.Response) (*AddPartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PartnerActionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePartnerActionResponse parses an HTTP response from a UpdatePartnerActionWithResponse call
func ParseUpdatePartnerActionResponse(rsp *http.Response) (*UpdatePartnerActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePartnerActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PartnerActionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindPlacementsResponse parses an HTTP response from a FindPlacementsWithResponse call
func ParseFindPlacementsResponse(rsp *http.Response) (*FindPlacementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindPlacementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddPlacementResponse parses an HTTP response from a AddPlacementWithResponse call
func ParseAddPlacementResponse(rsp *http.Response) (*AddPlacementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPlacementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreatedPlacementModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindPlacementActivityResponse parses an HTTP response from a FindPlacementActivityWithResponse call
func ParseFindPlacementActivityResponse(rsp *http.Response) (*FindPlacementActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindPlacementActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementActivityListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindPlacementActivitySettingsResponse parses an HTTP response from a FindPlacementActivitySettingsWithResponse call
func ParseFindPlacementActivitySettingsResponse(rsp *http.Response) (*FindPlacementActivitySettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindPlacementActivitySettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementActivitySettingsListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementActivitySettingResponse parses an HTTP response from a GetPlacementActivitySettingWithResponse call
func ParseGetPlacementActivitySettingResponse(rsp *http.Response) (*GetPlacementActivitySettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementActivitySettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementActivitySettingModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletedPlacementsResponse parses an HTTP response from a DeletedPlacementsWithResponse call
func ParseDeletedPlacementsResponse(rsp *http.Response) (*DeletedPlacementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletedPlacementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeletedPlacementListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementCustomFieldListResponse parses an HTTP response from a GetPlacementCustomFieldListWithResponse call
func ParseGetPlacementCustomFieldListResponse(rsp *http.Response) (*GetPlacementCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPlacementCustomFieldListResponse parses an HTTP response from a PutPlacementCustomFieldListWithResponse call
func ParsePutPlacementCustomFieldListResponse(rsp *http.Response) (*PutPlacementCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPlacementCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementCustomFieldItemResponse parses an HTTP response from a GetPlacementCustomFieldItemWithResponse call
func ParseGetPlacementCustomFieldItemResponse(rsp *http.Response) (*GetPlacementCustomFieldItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementCustomFieldItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementAttachmentCategoryListResponse parses an HTTP response from a GetPlacementAttachmentCategoryListWithResponse call
func ParseGetPlacementAttachmentCategoryListResponse(rsp *http.Response) (*GetPlacementAttachmentCategoryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementAttachmentCategoryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementAttachmentCategoryListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementAwardListResponse parses an HTTP response from a GetPlacementAwardListWithResponse call
func ParseGetPlacementAwardListResponse(rsp *http.Response) (*GetPlacementAwardListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementAwardListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameModelListOf
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementBillingTermsListResponse parses an HTTP response from a GetPlacementBillingTermsListWithResponse call
func ParseGetPlacementBillingTermsListResponse(rsp *http.Response) (*GetPlacementBillingTermsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementBillingTermsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameModelListOf
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementIndustryCodeListResponse parses an HTTP response from a GetPlacementIndustryCodeListWithResponse call
func ParseGetPlacementIndustryCodeListResponse(rsp *http.Response) (*GetPlacementIndustryCodeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementIndustryCodeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameModelListOf
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementNoteTypeListResponse parses an HTTP response from a GetPlacementNoteTypeListWithResponse call
func ParseGetPlacementNoteTypeListResponse(rsp *http.Response) (*GetPlacementNoteTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementNoteTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteTypeListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementPaymentTypeListResponse parses an HTTP response from a GetPlacementPaymentTypeListWithResponse call
func ParseGetPlacementPaymentTypeListResponse(rsp *http.Response) (*GetPlacementPaymentTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementPaymentTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameModelListOf
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementStatusListResponse parses an HTTP response from a GetPlacementStatusListWithResponse call
func ParseGetPlacementStatusListResponse(rsp *http.Response) (*GetPlacementStatusListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementStatusListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementStatusItemResponse parses an HTTP response from a GetPlacementStatusItemWithResponse call
func ParseGetPlacementStatusItemResponse(rsp *http.Response) (*GetPlacementStatusItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementStatusItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementResponse parses an HTTP response from a GetPlacementWithResponse call
func ParseGetPlacementResponse(rsp *http.Response) (*GetPlacementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePlacementResponse parses an HTTP response from a UpdatePlacementWithResponse call
func ParseUpdatePlacementResponse(rsp *http.Response) (*UpdatePlacementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlacementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPlacementActivityByPlacementIdResponse parses an HTTP response from a GetPlacementActivityByPlacementIdWithResponse call
func ParseGetPlacementActivityByPlacementIdResponse(rsp *http.Response) (*GetPlacementActivityByPlacementIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementActivityByPlacementIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementActivitySummaryListModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddPlacementActivityResponse parses an HTTP response from a AddPlacementActivityWithResponse call
func ParseAddPlacementActivityResponse(rsp *http.Response) (*AddPlacementActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPlacementActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PlacementActivityModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPlacementActivityResponse parses an HTTP response from a GetPlacementActivityWithResponse call
func ParseGetPlacementActivityResponse(rsp *http.Response) (*GetPlacementActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementActivityRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFindPlacementAttachmentsResponse parses an HTTP response from a FindPlacementAttachmentsWithResponse call
func ParseFindPlacementAttachmentsResponse(rsp *http.Response) (*FindPlacementAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindPlacementAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementAttachmentListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementAttachmentResponse parses an HTTP response from a GetPlacementAttachmentWithResponse call
func ParseGetPlacementAttachmentResponse(rsp *http.Response) (*GetPlacementAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddPlacementAttachmentResponse parses an HTTP response from a AddPlacementAttachmentWithResponse call
func ParseAddPlacementAttachmentResponse(rsp *http.Response) (*AddPlacementAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPlacementAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PlacementAttachmentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdatePlacementAttachmentResponse parses an HTTP response from a UpdatePlacementAttachmentWithResponse call
func ParseUpdatePlacementAttachmentResponse(rsp *http.Response) (*UpdatePlacementAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlacementAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlacementNotesResponse parses an HTTP response from a GetPlacementNotesWithResponse call
func ParseGetPlacementNotesResponse(rsp *http.Response) (*GetPlacementNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddPlacementNoteResponse parses an HTTP response from a AddPlacementNoteWithResponse call
func ParseAddPlacementNoteResponse(rsp *http.Response) (*AddPlacementNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPlacementNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NoteModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePutPlacementStatusResponse parses an HTTP response from a PutPlacementStatusWithResponse call
func ParsePutPlacementStatusResponse(rsp *http.Response) (*PutPlacementStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPlacementStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPlacementTimesheetsResponse parses an HTTP response from a GetPlacementTimesheetsWithResponse call
func ParseGetPlacementTimesheetsResponse(rsp *http.Response) (*GetPlacementTimesheetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementTimesheetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementTimesheetListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddPlacementUserTaskResponse parses an HTTP response from a AddPlacementUserTaskWithResponse call
func ParseAddPlacementUserTaskResponse(rsp *http.Response) (*AddPlacementUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPlacementUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PlacementUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPlacementUserTaskResponse parses an HTTP response from a GetPlacementUserTaskWithResponse call
func ParseGetPlacementUserTaskResponse(rsp *http.Response) (*GetPlacementUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementUserTaskRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePlacementUserTaskResponse parses an HTTP response from a UpdatePlacementUserTaskWithResponse call
func ParseUpdatePlacementUserTaskResponse(rsp *http.Response) (*UpdatePlacementUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlacementUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PlacementUserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindRequisitionsResponse parses an HTTP response from a FindRequisitionsWithResponse call
func ParseFindRequisitionsResponse(rsp *http.Response) (*FindRequisitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindRequisitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequisitionListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddRequisitionResponse parses an HTTP response from a AddRequisitionWithResponse call
func ParseAddRequisitionResponse(rsp *http.Response) (*AddRequisitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRequisitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RequisitionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetRequisitionCustomFieldListResponse parses an HTTP response from a GetRequisitionCustomFieldListWithResponse call
func ParseGetRequisitionCustomFieldListResponse(rsp *http.Response) (*GetRequisitionCustomFieldListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequisitionCustomFieldListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRequisitionCustomFieldItemResponse parses an HTTP response from a GetRequisitionCustomFieldItemWithResponse call
func ParseGetRequisitionCustomFieldItemResponse(rsp *http.Response) (*GetRequisitionCustomFieldItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequisitionCustomFieldItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRequisitionFormsResponse parses an HTTP response from a GetRequisitionFormsWithResponse call
func ParseGetRequisitionFormsResponse(rsp *http.Response) (*GetRequisitionFormsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequisitionFormsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequisitionFormListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRequisitionResponse parses an HTTP response from a DeleteRequisitionWithResponse call
func ParseDeleteRequisitionResponse(rsp *http.Response) (*DeleteRequisitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRequisitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRequisitionResponse parses an HTTP response from a GetRequisitionWithResponse call
func ParseGetRequisitionResponse(rsp *http.Response) (*GetRequisitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequisitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequisitionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRequisitionResponse parses an HTTP response from a UpdateRequisitionWithResponse call
func ParseUpdateRequisitionResponse(rsp *http.Response) (*UpdateRequisitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRequisitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApproveRequisitionResponse parses an HTTP response from a ApproveRequisitionWithResponse call
func ParseApproveRequisitionResponse(rsp *http.Response) (*ApproveRequisitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApproveRequisitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRequisitionAttachmentListResponse parses an HTTP response from a GetRequisitionAttachmentListWithResponse call
func ParseGetRequisitionAttachmentListResponse(rsp *http.Response) (*GetRequisitionAttachmentListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequisitionAttachmentListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteAttachmentListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRequisitionAttachmentResponse parses an HTTP response from a DeleteRequisitionAttachmentWithResponse call
func ParseDeleteRequisitionAttachmentResponse(rsp *http.Response) (*DeleteRequisitionAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRequisitionAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRequisitionAttachmentResponse parses an HTTP response from a GetRequisitionAttachmentWithResponse call
func ParseGetRequisitionAttachmentResponse(rsp *http.Response) (*GetRequisitionAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequisitionAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddRequisitionAttachmentResponse parses an HTTP response from a AddRequisitionAttachmentWithResponse call
func ParseAddRequisitionAttachmentResponse(rsp *http.Response) (*AddRequisitionAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRequisitionAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRequisitionApprovalHistoryResponse parses an HTTP response from a GetRequisitionApprovalHistoryWithResponse call
func ParseGetRequisitionApprovalHistoryResponse(rsp *http.Response) (*GetRequisitionApprovalHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequisitionApprovalHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequisitionHistoryModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRequisitionNotesResponse parses an HTTP response from a GetRequisitionNotesWithResponse call
func ParseGetRequisitionNotesResponse(rsp *http.Response) (*GetRequisitionNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequisitionNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddRequisitionNoteResponse parses an HTTP response from a AddRequisitionNoteWithResponse call
func ParseAddRequisitionNoteResponse(rsp *http.Response) (*AddRequisitionNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRequisitionNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NoteModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRejectRequisitionResponse parses an HTTP response from a RejectRequisitionWithResponse call
func ParseRejectRequisitionResponse(rsp *http.Response) (*RejectRequisitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RejectRequisitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSubmitRequisitionResponse parses an HTTP response from a SubmitRequisitionWithResponse call
func ParseSubmitRequisitionResponse(rsp *http.Response) (*SubmitRequisitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitRequisitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindEmailAddressResponse parses an HTTP response from a FindEmailAddressWithResponse call
func ParseFindEmailAddressResponse(rsp *http.Response) (*FindEmailAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindEmailAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MatchedByEmailAddressModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindPhoneNumberResponse parses an HTTP response from a FindPhoneNumberWithResponse call
func ParseFindPhoneNumberResponse(rsp *http.Response) (*FindPhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MatchedByPhoneNumberModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendJobApplcationSmsResponse parses an HTTP response from a SendJobApplcationSmsWithResponse call
func ParseSendJobApplcationSmsResponse(rsp *http.Response) (*SendJobApplcationSmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendJobApplcationSmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendJobApplicationContactSmsResponse parses an HTTP response from a SendJobApplicationContactSmsWithResponse call
func ParseSendJobApplicationContactSmsResponse(rsp *http.Response) (*SendJobApplicationContactSmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendJobApplicationContactSmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendCandidateSmsResponse parses an HTTP response from a SendCandidateSmsWithResponse call
func ParseSendCandidateSmsResponse(rsp *http.Response) (*SendCandidateSmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendCandidateSmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendCompanySmsResponse parses an HTTP response from a SendCompanySmsWithResponse call
func ParseSendCompanySmsResponse(rsp *http.Response) (*SendCompanySmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendCompanySmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendContactSmsResponse parses an HTTP response from a SendContactSmsWithResponse call
func ParseSendContactSmsResponse(rsp *http.Response) (*SendContactSmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendContactSmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendJobOrderSmsResponse parses an HTTP response from a SendJobOrderSmsWithResponse call
func ParseSendJobOrderSmsResponse(rsp *http.Response) (*SendJobOrderSmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendJobOrderSmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendPlacementSmsResponse parses an HTTP response from a SendPlacementSmsWithResponse call
func ParseSendPlacementSmsResponse(rsp *http.Response) (*SendPlacementSmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendPlacementSmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindSubmissionsResponse parses an HTTP response from a FindSubmissionsWithResponse call
func ParseFindSubmissionsResponse(rsp *http.Response) (*FindSubmissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindSubmissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmissionListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSubmissionResponse parses an HTTP response from a GetSubmissionWithResponse call
func ParseGetSubmissionResponse(rsp *http.Response) (*GetSubmissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubmissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmissionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindUserGroupsResponse parses an HTTP response from a FindUserGroupsWithResponse call
func ParseFindUserGroupsResponse(rsp *http.Response) (*FindUserGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindUserGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserGroupListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserGroupResponse parses an HTTP response from a GetUserGroupWithResponse call
func ParseGetUserGroupResponse(rsp *http.Response) (*GetUserGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserGroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGroupUsersResponse parses an HTTP response from a GetGroupUsersWithResponse call
func ParseGetGroupUsersResponse(rsp *http.Response) (*GetGroupUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindUserOfficesResponse parses an HTTP response from a FindUserOfficesWithResponse call
func ParseFindUserOfficesResponse(rsp *http.Response) (*FindUserOfficesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindUserOfficesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserOfficeListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserOfficeResponse parses an HTTP response from a GetUserOfficeWithResponse call
func ParseGetUserOfficeResponse(rsp *http.Response) (*GetUserOfficeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserOfficeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserOfficeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOfficeUsersResponse parses an HTTP response from a GetOfficeUsersWithResponse call
func ParseGetOfficeUsersResponse(rsp *http.Response) (*GetOfficeUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOfficeUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindUsersResponse parses an HTTP response from a FindUsersWithResponse call
func ParseFindUsersResponse(rsp *http.Response) (*FindUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCurrentUserResponse parses an HTTP response from a GetCurrentUserWithResponse call
func ParseGetCurrentUserResponse(rsp *http.Response) (*GetCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserInterviewsResponse parses an HTTP response from a GetUserInterviewsWithResponse call
func ParseGetUserInterviewsResponse(rsp *http.Response) (*GetUserInterviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInterviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterviewListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserPhotoResponse parses an HTTP response from a GetUserPhotoWithResponse call
func ParseGetUserPhotoResponse(rsp *http.Response) (*GetUserPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserUserGroupsResponse parses an HTTP response from a GetUserUserGroupsWithResponse call
func ParseGetUserUserGroupsResponse(rsp *http.Response) (*GetUserUserGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserUserGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserGroupListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindUserUserTasksResponse parses an HTTP response from a FindUserUserTasksWithResponse call
func ParseFindUserUserTasksResponse(rsp *http.Response) (*FindUserUserTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindUserUserTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserTaskListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindUserTasksResponse parses an HTTP response from a FindUserTasksWithResponse call
func ParseFindUserTasksResponse(rsp *http.Response) (*FindUserTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindUserTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserTaskListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddUserTaskResponse parses an HTTP response from a AddUserTaskWithResponse call
func ParseAddUserTaskResponse(rsp *http.Response) (*AddUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteUserTaskResponse parses an HTTP response from a DeleteUserTaskWithResponse call
func ParseDeleteUserTaskResponse(rsp *http.Response) (*DeleteUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserTaskResponse parses an HTTP response from a GetUserTaskWithResponse call
func ParseGetUserTaskResponse(rsp *http.Response) (*GetUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserTaskRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserTaskResponse parses an HTTP response from a UpdateUserTaskWithResponse call
func ParseUpdateUserTaskResponse(rsp *http.Response) (*UpdateUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserTaskModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseMarkCompleteUserTaskResponse parses an HTTP response from a MarkCompleteUserTaskWithResponse call
func ParseMarkCompleteUserTaskResponse(rsp *http.Response) (*MarkCompleteUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarkCompleteUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMarkIncompleteUserTaskResponse parses an HTTP response from a MarkIncompleteUserTaskWithResponse call
func ParseMarkIncompleteUserTaskResponse(rsp *http.Response) (*MarkIncompleteUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarkIncompleteUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindWebhooksResponse parses an HTTP response from a FindWebhooksWithResponse call
func ParseFindWebhooksResponse(rsp *http.Response) (*FindWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddWebhookResponse parses an HTTP response from a AddWebhookWithResponse call
func ParseAddWebhookResponse(rsp *http.Response) (*AddWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebhookRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteWebhookResponse parses an HTTP response from a DeleteWebhookWithResponse call
func ParseDeleteWebhookResponse(rsp *http.Response) (*DeleteWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWebhookResponse parses an HTTP response from a GetWebhookWithResponse call
func ParseGetWebhookResponse(rsp *http.Response) (*GetWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateWebhookResponse parses an HTTP response from a UpdateWebhookWithResponse call
func ParseUpdateWebhookResponse(rsp *http.Response) (*UpdateWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindWorkTypesResponse parses an HTTP response from a FindWorkTypesWithResponse call
func ParseFindWorkTypesResponse(rsp *http.Response) (*FindWorkTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindWorkTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkTypeListRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
